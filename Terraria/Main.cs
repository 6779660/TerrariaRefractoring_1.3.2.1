using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
namespace Terraria
{
	public class Main : Game
	{
		public const int maxItemTypes = 2289;
		public const int maxProjectileTypes = 360;
		public const int maxNPCTypes = 369;
		public const int maxTileSets = 314;
		public const int maxWallTypes = 145;
		public const int maxGoreTypes = 573;
		public const int numArmorHead = 160;
		public const int numArmorBody = 168;
		public const int numArmorLegs = 103;
		public const int numAccHandsOn = 18;
		public const int numAccHandsOff = 11;
		public const int numAccNeck = 7;
		public const int numAccBack = 8;
		public const int numAccFront = 5;
		public const int numAccShoes = 15;
		public const int numAccWaist = 11;
		public const int numAccShield = 5;
		public const int numAccFace = 8;
		public const int numAccBalloon = 11;
		public const int maxBuffs = 104;
		public const int maxWings = 25;
		public const int maxBackgrounds = 185;
		private const int MF_BYPOSITION = 1024;
		public const int sectionWidth = 200;
		public const int sectionHeight = 150;
		public const int maxDust = 6000;
		public const int maxCombatText = 100;
		public const int maxItemText = 20;
		public const int maxPlayers = 255;
		public const int maxChests = 1000;
		public const int maxItems = 400;
		public const int maxProjectiles = 1000;
		public const int maxNPCs = 200;
		public const int maxGore = 500;
		public const int realInventory = 50;
		public const int maxInventory = 58;
		public const int maxItemSounds = 51;
		public const int maxNPCHitSounds = 13;
		public const int maxNPCKilledSounds = 19;
		public const int maxLiquidTypes = 12;
		public const int maxMusic = 33;
		public const double dayLength = 54000.0;
		public const double nightLength = 32400.0;
		public const int maxStars = 130;
		public const int maxStarTypes = 5;
		public const int maxClouds = 200;
		public const int maxCloudTypes = 22;
		public const int maxHair = 123;
		public const int maxCharSelectHair = 51;
		public static int curRelease = 94;
		public static string versionNumber = "v1.2.3.1";
		public static string versionNumber2 = "v1.2.3.1";
		public WaterfallManager waterfallManager;
		public static WorldSections sectionManager;
		public static bool ServerSideCharacter = false;
		public static string clientUUID;
		public static int maxMsg = 74;
		public static Effect pixelShader;
		public static Effect tileShader;
		public static int npcStreamSpeed = 60;
		public static int musicError = 0;
		public static bool dedServFPS = false;
		public static int dedServCount1 = 0;
		public static int dedServCount2 = 0;
		public static bool superFast = false;
		public static bool[] hairLoaded = new bool[123];
		public static bool[] wingsLoaded = new bool[25];
		public static bool[] goreLoaded = new bool[573];
		public static bool[] projectileLoaded = new bool[360];
		public static bool[] itemFlameLoaded = new bool[2289];
		public static bool[] backgroundLoaded = new bool[185];
		public static bool[] tileSetsLoaded = new bool[314];
		public static bool[] wallLoaded = new bool[145];
		public static bool[] NPCLoaded = new bool[369];
		public static bool[] armorHeadLoaded = new bool[160];
		public static bool[] armorBodyLoaded = new bool[168];
		public static bool[] armorLegsLoaded = new bool[103];
		public static bool[] accHandsOnLoaded = new bool[18];
		public static bool[] accHandsOffLoaded = new bool[11];
		public static bool[] accBackLoaded = new bool[8];
		public static bool[] accFrontLoaded = new bool[5];
		public static bool[] accShoesLoaded = new bool[15];
		public static bool[] accWaistLoaded = new bool[11];
		public static bool[] accShieldLoaded = new bool[5];
		public static bool[] accNeckLoaded = new bool[7];
		public static bool[] accFaceLoaded = new bool[8];
		public static bool[] accballoonLoaded = new bool[11];
		public static Vector2[] offHandOffsets = new Vector2[]
		{
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 18f),
			new Vector2(14f, 20f),
			new Vector2(16f, 4f),
			new Vector2(16f, 16f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(14f, 14f),
			new Vector2(14f, 14f),
			new Vector2(12f, 14f),
			new Vector2(14f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f)
		};
		public static float zoomX;
		public static float zoomY;
		public static float sunCircle;
		public static int BlackFadeIn = 0;
		public static bool noWindowBorder = false;
		private Matrix Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
		private RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;
		public static int ugBack = 0;
		public static int oldUgBack = 0;
		public static int[] bgFrame = new int[1];
		public static int[] bgFrameCounter = new int[1];
		public static bool skipMenu = false;
		public static bool verboseNetplay = false;
		public static bool stopTimeOuts = false;
		public static bool showSpam = false;
		public static bool showItemOwner = false;
		public static int oldTempLightCount = 0;
		public static bool[] nextNPC = new bool[369];
		public static int musicBox = -1;
		public static int musicBox2 = -1;
		public static byte hbPosition = 1;
		public static bool cEd = false;
		public static float wFrCounter = 0f;
		public static float wFrame = 0f;
		public static float upTimer;
		public static float upTimerMax;
		public static float upTimerMaxDelay;
		public static float[] drawTimer = new float[10];
		public static float[] drawTimerMax = new float[10];
		public static float[] drawTimerMaxDelay = new float[10];
		public static float[] renderTimer = new float[10];
		public static float[] lightTimer = new float[10];
		public static bool drawDiag = false;
		public static bool drawRelease = false;
		public static int debugToggle = 0;
		public static bool toggleRelease = false;
		public static bool drawBetterDebug = false;
		public static bool betterDebugRelease = false;
		public static bool renderNow = false;
		public static bool drawToScreen = false;
		public static bool targetSet = false;
		public static int mouseX;
		public static int mouseY;
		public static bool mouseLeft;
		public static bool mouseRight;
		public static float essScale = 1f;
		public static int essDir = -1;
		public static float[] cloudBGX = new float[2];
		public static float cloudBGAlpha;
		public static float cloudBGActive;
		public static int[] cloudBG = new int[]
		{
			112,
			113
		};
		public static int[] treeMntBG = new int[2];
		public static int[] treeBG = new int[3];
		public static int[] corruptBG = new int[3];
		public static int[] jungleBG = new int[3];
		public static int[] snowMntBG = new int[2];
		public static int[] snowBG = new int[3];
		public static int[] hallowBG = new int[3];
		public static int[] crimsonBG = new int[3];
		public static int[] desertBG = new int[2];
		public static int oceanBG;
		public static int[] treeX = new int[4];
		public static int[] treeStyle = new int[4];
		public static int[] caveBackX = new int[4];
		public static int[] caveBackStyle = new int[4];
		public static int iceBackStyle;
		public static int hellBackStyle;
		public static int jungleBackStyle;
		public static string debugWords = "";
		public static bool gamePad = false;
		public static bool xMas = false;
		public static bool halloween = false;
		public static int snowDust = 0;
		public static bool chTitle = false;
		public static bool hairWindow = false;
		public static bool clothesWindow = false;
		public static bool ingameOptionsWindow = false;
		public static int keyCount = 0;
		public static string[] keyString = new string[10];
		public static int[] keyInt = new int[10];
		public static byte gFade = 0;
		public static float gFader = 0f;
		public static byte gFadeDir = 1;
		public static bool netDiag = false;
		public static int txData = 0;
		public static int rxData = 0;
		public static int txMsg = 0;
		public static int rxMsg = 0;
		public static int[] rxMsgType = new int[Main.maxMsg];
		public static int[] rxDataType = new int[Main.maxMsg];
		public static int[] txMsgType = new int[Main.maxMsg];
		public static int[] txDataType = new int[Main.maxMsg];
		public static float uCarry = 0f;
		public static bool drawSkip = false;
		public static int fpsCount = 0;
		public static Stopwatch fpsTimer = new Stopwatch();
		public static Stopwatch updateTimer = new Stopwatch();
		public bool gammaTest;
		public static int fountainColor = -1;
		public static bool showSplash = true;
		public static bool ignoreErrors = true;
		public static string defaultIP = "";
		public static int dayRate = 1;
		public static int maxScreenW = 1920;
		public static int minScreenW = 800;
		public static int maxScreenH = 1200;
		public static int minScreenH = 600;
		public static float iS = 1f;
		public static bool render = false;
		public static int qaStyle = 0;
		public static int zoneX = 99;
		public static int zoneY = 87;
		public static float harpNote = 0f;
		public static bool[] projHostile = new bool[360];
		public static bool[] pvpBuff = new bool[104];
		public static bool[] vanityPet = new bool[104];
		public static bool[] lightPet = new bool[104];
		public static bool[] meleeBuff = new bool[104];
		public static bool[] debuff = new bool[104];
		public static string[] buffName = new string[104];
		public static string[] buffTip = new string[104];
		public static int maxMP = 10;
		public static string[] recentWorld = new string[Main.maxMP];
		public static string[] recentIP = new string[Main.maxMP];
		public static int[] recentPort = new int[Main.maxMP];
		public static bool shortRender = true;
		public static bool owBack = true;
		public static int quickBG = 2;
		public static int bgDelay = 0;
		public static int bgStyle = 0;
		public static float[] bgAlpha = new float[10];
		public static float[] bgAlpha2 = new float[10];
		public bool showNPCs;
		public int mouseNPC = -1;
		public static int wof = -1;
		public static int wofT;
		public static int wofB;
		public static int wofF = 0;
		public static int offScreenRange = 200;
		private RenderTarget2D backWaterTarget;
		private RenderTarget2D waterTarget;
		private RenderTarget2D tileTarget;
		private RenderTarget2D blackTarget;
		private RenderTarget2D tile2Target;
		private RenderTarget2D wallTarget;
		private RenderTarget2D backgroundTarget;
		public static int maxMapUpdates = 250000;
		public static bool refreshMap = false;
		public static int loadMapLastX = 0;
		public static bool loadMapLock = false;
		public static bool loadMap = false;
		public static bool mapReady = false;
		public static int textureMaxWidth = 2000;
		public static int textureMaxHeight = 1800;
		public static bool updateMap = false;
		public static int mapMinX = 0;
		public static int mapMaxX = 0;
		public static int mapMinY = 0;
		public static int mapMaxY = 0;
		public static int mapTimeMax = 30;
		public static int mapTime = Main.mapTimeMax;
		public static bool clearMap;
		public static int mapTargetX = 5;
		public static int mapTargetY = 2;
		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
		private RenderTarget2D mapSectionTexture;
		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
		private Texture2D[] clothesTexture = new Texture2D[4];
		private Texture2D[] mapIconTexture = new Texture2D[9];
		private Texture2D mapTexture;
		private Texture2D mapBG1Texture;
		private Texture2D mapBG2Texture;
		private Texture2D mapBG3Texture;
		private Texture2D mapBG4Texture;
		private Texture2D mapBG5Texture;
		private Texture2D mapBG6Texture;
		private Texture2D mapBG7Texture;
		private Texture2D mapBG8Texture;
		private Texture2D mapBG9Texture;
		private Texture2D mapBG10Texture;
		private Texture2D mapBG11Texture;
		private Texture2D mapBG12Texture;
		private Texture2D hueTexture;
		public static Texture2D colorSliderTexture;
		public static Texture2D colorBarTexture;
		public static Texture2D colorBlipTexture;
		private Texture2D iceBarrierTexture;
		public static bool mapInit = false;
		public static bool mapEnabled = true;
		public static int mapStyle = 1;
		public static float grabMapX = 0f;
		public static float grabMapY = 0f;
		public static int miniMapX = 0;
		public static int miniMapY = 0;
		public static int miniMapWidth = 0;
		public static int miniMapHeight = 0;
		public static float mapMinimapScale = 1.25f;
		public static float mapMinimapAlpha = 1f;
		public static float mapOverlayScale = 2.5f;
		public static float mapOverlayAlpha = 0.35f;
		public static bool mapFullscreen = false;
		public static bool resetMapFull = false;
		public static float mapFullscreenScale = 4f;
		public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);
		private int firstTileX;
		private int lastTileX;
		private int firstTileY;
		private int lastTileY;
		private double bgParrallax;
		private int bgStart;
		private int bgLoops;
		private int bgStartY;
		private int bgLoopsY;
		private int bgTop;
		public static int renderCount = 99;
		public static GraphicsDeviceManager graphics;
		public static SpriteBatch spriteBatch;
		private Process tServer = new Process();
		private static Stopwatch saveTime = new Stopwatch();
		public static MouseState mouseState = Mouse.GetState();
		public static MouseState oldMouseState = Mouse.GetState();
		public static KeyboardState keyState = Keyboard.GetState();
		public static Color mcColor = new Color(125, 125, 255);
		public static Color hcColor = new Color(200, 125, 255);
		public static Color highVersionColor = new Color(255, 255, 0);
		public static Color errorColor = new Color(255, 0, 0);
		public static Color bgColor;
		public static bool mouseHC = false;
		public static bool craftingHide = false;
		public static bool armorHide = false;
		public static float craftingAlpha = 1f;
		public static float armorAlpha = 1f;
		public static float[] buffAlpha = new float[104];
		public static Item trashItem = new Item();
		public static bool hardMode = false;
		public float chestLootScale = 1f;
		public bool chestLootHover;
		public float chestStackScale = 1f;
		public bool chestStackHover;
		public float chestDepositScale = 1f;
		public bool chestDepositHover;
		public float chestRenameScale = 1f;
		public bool chestRenameHover;
		public float chestCancelScale = 1f;
		public bool chestCancelHover;
		public static bool drawScene = false;
		public static Vector2 sceneWaterPos = default(Vector2);
		public static Vector2 sceneTilePos = default(Vector2);
		public static Vector2 sceneTile2Pos = default(Vector2);
		public static Vector2 sceneWallPos = default(Vector2);
		public static Vector2 sceneBackgroundPos = default(Vector2);
		public static bool maxQ = true;
		public static float gfxQuality = 1f;
		public static float gfxRate = 0.01f;
		public int DiscoStyle;
		public static int DiscoR = 255;
		public static int DiscoB = 0;
		public static int DiscoG = 0;
		public static int teamCooldown = 0;
		public static int teamCooldownLen = 300;
		public static bool gamePaused = false;
		public static bool gameInactive = false;
		public static int updateTime = 0;
		public static int drawTime = 0;
		public static int uCount = 0;
		public static int updateRate = 0;
		public static int frameRate = 0;
		public static bool RGBRelease = false;
		public static bool qRelease = false;
		public static bool netRelease = false;
		public static bool frameRelease = false;
		public static bool showFrameRate = false;
		public static int magmaBGFrame = 0;
		public static int magmaBGFrameCounter = 0;
		public static int saveTimer = 0;
		public static bool autoJoin = false;
		public static bool serverStarting = false;
		public static float leftWorld = 0f;
		public static float rightWorld = 134400f;
		public static float topWorld = 0f;
		public static float bottomWorld = 38400f;
		public static int maxTilesX = (int)Main.rightWorld / 16 + 1;
		public static int maxTilesY = (int)Main.bottomWorld / 16 + 1;
		public static int maxSectionsX = Main.maxTilesX / 200;
		public static int maxSectionsY = Main.maxTilesY / 150;
		public static int numDust = 6000;
		public static int numPlayers = 0;
		public static int maxNetPlayers = 255;
		public static int maxRain = 750;
		public int invBottom = 210;
		public static float cameraX = 0f;
		public static bool drewLava = false;
		public static float[] liquidAlpha = new float[12];
		public static int waterStyle = 0;
		public static int worldRate = 1;
		public static float caveParrallax = 1f;
		public static int dungeonX;
		public static int dungeonY;
		public static Liquid[] liquid = new Liquid[Liquid.resLiquid];
		public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[10000];
		public static bool dedServ = false;
		public static int spamCount = 0;
		public static int curMusic = 0;
		public static int dayMusic = 0;
		public static int ugMusic = 0;
		public int newMusic;
		public static bool showItemText = true;
		public static bool autoSave = true;
		public static bool validateSaves = true;
		public static string buffString = "";
		public static string libPath = "";
		public static int lo = 0;
		public static int LogoA = 255;
		public static int LogoB = 0;
		public static bool LogoT = false;
		public static string statusText = "";
		public static string worldName = "";
		public static int worldID;
		public static int background = 0;
		public static int caveBackground = 0;
		public static float ugBackTransition = 0f;
		public static Color tileColor;
		public static double worldSurface;
		public static double rockLayer;
		public static Color[] teamColor = new Color[5];
		public static bool dayTime = true;
		public static double time = 13500.0;
		public static int moonPhase = 0;
		public static short sunModY = 0;
		public static short moonModY = 0;
		public static bool grabSky = false;
		public static bool bloodMoon = false;
		public static bool pumpkinMoon = false;
		public static bool snowMoon = false;
		public static float cloudAlpha = 0f;
		public static float maxRaining = 0f;
		public static float oldMaxRaining = 0f;
		public static int rainTime = 0;
		public static bool raining = false;
		public static bool eclipse = false;
		public static float eclipseLight = 0f;
		public static int checkForSpawns = 0;
		public static int helpText = 0;
		public static bool autoGen = false;
		public static bool autoPause = false;
		public static int[] projFrames = new int[360];
		public static bool[] projPet = new bool[360];
		public static float demonTorch = 1f;
		public static int demonTorchDir = 1;
		public static int numStars;
		public static int weatherCounter = 0;
		public static int cloudLimit = 200;
		public static int numClouds = Main.cloudLimit;
		public static int numCloudsTemp = Main.numClouds;
		public static float windSpeedTemp = 0f;
		public static float windSpeed = 0f;
		public static float windSpeedSet = 0f;
		public static float windSpeedSpeed = 0f;
		public static Cloud[] cloud = new Cloud[200];
		public static bool resetClouds = true;
		public static int sandTiles;
		public static int evilTiles;
		public static int shroomTiles;
		public static float shroomLight;
		public static int snowTiles;
		public static int holyTiles;
		public static int waterCandles;
		public static int meteorTiles;
		public static int bloodTiles;
		public static int jungleTiles;
		public static int dungeonTiles;
		public static bool campfire;
		public static bool heartLantern;
		public static int fadeCounter = 0;
		public static float invAlpha = 1f;
		public static float invDir = 1f;
		[ThreadStatic]
		public static Random rand;
		public static Texture2D[] bannerTexture = new Texture2D[3];
		public static Texture2D[] npcHeadTexture = new Texture2D[22];
		public static Texture2D craftButtonTexture;
		public static Texture2D craftUpButtonTexture;
		public static Texture2D craftDownButtonTexture;
		public static Texture2D scrollLeftButtonTexture;
		public static Texture2D scrollRightButtonTexture;
		public static Texture2D frozenTexture;
		public static Texture2D magicPixel;
		public static Texture2D miniMapFrameTexture;
		public static Texture2D miniMapFrame2Texture;
		public static Texture2D[] miniMapButtonTexture = new Texture2D[3];
		public static Texture2D[] destTexture = new Texture2D[3];
		public static Texture2D[] gemTexture = new Texture2D[6];
		public static Texture2D[] rudolphTexture = new Texture2D[3];
		public static Texture2D[] wingsTexture = new Texture2D[25];
		public static Texture2D[] armorHeadTexture = new Texture2D[160];
		public static Texture2D[] armorBodyTexture = new Texture2D[168];
		public static Texture2D[] femaleBodyTexture = new Texture2D[168];
		public static Texture2D[] armorArmTexture = new Texture2D[168];
		public static Texture2D[] armorLegTexture = new Texture2D[103];
		public static Texture2D[] accHandsOnTexture = new Texture2D[18];
		public static Texture2D[] accHandsOffTexture = new Texture2D[11];
		public static Texture2D[] accBackTexture = new Texture2D[8];
		public static Texture2D[] accFrontTexture = new Texture2D[5];
		public static Texture2D[] accShoesTexture = new Texture2D[15];
		public static Texture2D[] accWaistTexture = new Texture2D[11];
		public static Texture2D[] accShieldTexture = new Texture2D[5];
		public static Texture2D[] accNeckTexture = new Texture2D[7];
		public static Texture2D[] accFaceTexture = new Texture2D[8];
		public static Texture2D[] accBalloonTexture = new Texture2D[11];
		public static Texture2D pulleyTexture;
		public static Texture2D[] xmasTree = new Texture2D[5];
		public static Texture2D[] FlameTexture = new Texture2D[13];
		public static Texture2D timerTexture;
		public static Texture2D reforgeTexture;
		public static Texture2D wallOutlineTexture;
		public static Texture2D actuatorTexture;
		public static Texture2D wireTexture;
		public static Texture2D wire2Texture;
		public static Texture2D wire3Texture;
		public static Texture2D flyingCarpetTexture;
		public static Texture2D gridTexture;
		public static Texture2D lightDiscTexture;
		public static Texture2D EyeLaserTexture;
		public static Texture2D BoneEyesTexture;
		public static Texture2D BoneLaserTexture;
		public static Texture2D trashTexture;
		public static Texture2D chainTexture;
		public static Texture2D beetleTexture;
		public static Texture2D probeTexture;
		public static Texture2D xmasLightTexture;
		public static Texture2D[] golemTexture = new Texture2D[4];
		public static Texture2D confuseTexture;
		public static Texture2D[] gemChainTexture = new Texture2D[7];
		public static Texture2D sunOrbTexture;
		public static Texture2D sunAltarTexture;
		public static Texture2D chain2Texture;
		public static Texture2D chain3Texture;
		public static Texture2D chain4Texture;
		public static Texture2D chain5Texture;
		public static Texture2D chain6Texture;
		public static Texture2D chain7Texture;
		public static Texture2D chain8Texture;
		public static Texture2D chain9Texture;
		public static Texture2D chain10Texture;
		public static Texture2D chain11Texture;
		public static Texture2D chain12Texture;
		public static Texture2D chain13Texture;
		public static Texture2D chain14Texture;
		public static Texture2D chain15Texture;
		public static Texture2D chain16Texture;
		public static Texture2D chain17Texture;
		public static Texture2D chain18Texture;
		public static Texture2D chain19Texture;
		public static Texture2D chain20Texture;
		public static Texture2D chain21Texture;
		public static Texture2D chain22Texture;
		public static Texture2D chain23Texture;
		public static Texture2D chain24Texture;
		public static Texture2D chain25Texture;
		public static Texture2D chain26Texture;
		public static Texture2D chain27Texture;
		public static Texture2D chain28Texture;
		public static Texture2D chain29Texture;
		public static Texture2D chain30Texture;
		public static Texture2D chain31Texture;
		public static Texture2D chain32Texture;
		public static Texture2D hbTexture1;
		public static Texture2D hbTexture2;
		public static Texture2D chaosTexture;
		public static Texture2D cdTexture;
		public static Texture2D wofTexture;
		public static Texture2D boneArmTexture;
		public static Texture2D boneArm2Texture;
		public static Texture2D pumpkingArmTexture;
		public static Texture2D pumpkingCloakTexture;
		public static Texture2D[] npcToggleTexture = new Texture2D[2];
		public static Texture2D[] HBLockTexture = new Texture2D[2];
		public static Texture2D[] buffTexture = new Texture2D[104];
		public static Texture2D[] itemTexture = new Texture2D[2289];
		public static Texture2D[] itemFlameTexture = new Texture2D[2289];
		public static Texture2D[] npcTexture = new Texture2D[369];
		public static Texture2D[] projectileTexture = new Texture2D[360];
		public static Texture2D[] goreTexture = new Texture2D[573];
		public static Texture2D[] BackPackTexture = new Texture2D[7];
		public static Texture2D[] rainTexture = new Texture2D[3];
		public static Texture2D cursorTexture;
		public static Texture2D dustTexture;
		public static Texture2D sunTexture;
		public static Texture2D sun2Texture;
		public static Texture2D sun3Texture;
		public static int maxMoons = 3;
		public static int moonType = 0;
		public static Texture2D[] moonTexture = new Texture2D[Main.maxMoons];
		public static Texture2D pumpkinMoonTexture;
		public static Texture2D snowMoonTexture;
		public static int numTileColors = 31;
		public static RenderTarget2D[,] tileAltTexture = new RenderTarget2D[314, Main.numTileColors];
		public static bool[,] tileAltTextureInit = new bool[314, Main.numTileColors];
		public static bool[,] tileAltTextureDrawn = new bool[314, Main.numTileColors];
		public static int numTreeStyles = 15;
		public static RenderTarget2D[,] treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
		public static RenderTarget2D[,] treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
		public static bool[,] treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];
		public static bool[,] treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];
		public static bool[,] checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];
		public static RenderTarget2D[,] wallAltTexture = new RenderTarget2D[145, Main.numTileColors];
		public static bool[,] wallAltTextureInit = new bool[145, Main.numTileColors];
		public static bool[,] wallAltTextureDrawn = new bool[145, Main.numTileColors];
		public static Texture2D[] tileTexture = new Texture2D[314];
		public static Texture2D blackTileTexture;
		public static Texture2D[] wallTexture = new Texture2D[145];
		public static Texture2D[] backgroundTexture = new Texture2D[185];
		public static Texture2D[] cloudTexture = new Texture2D[22];
		public static Texture2D[] starTexture = new Texture2D[5];
		public static Texture2D[] liquidTexture = new Texture2D[12];
		public static Texture2D heartTexture;
		public static Texture2D heart2Texture;
		public static Texture2D manaTexture;
		public static Texture2D bubbleTexture;
		public static Texture2D flameTexture;
		public static Texture2D[] treeTopTexture = new Texture2D[Main.numTreeStyles];
		public static Texture2D[] treeBranchTexture = new Texture2D[Main.numTreeStyles];
		public static Texture2D[] woodTexture = new Texture2D[7];
		public static Texture2D shroomCapTexture;
		public static Texture2D inventoryBackTexture;
		public static Texture2D inventoryBack2Texture;
		public static Texture2D inventoryBack3Texture;
		public static Texture2D inventoryBack4Texture;
		public static Texture2D inventoryBack5Texture;
		public static Texture2D inventoryBack6Texture;
		public static Texture2D inventoryBack7Texture;
		public static Texture2D inventoryBack8Texture;
		public static Texture2D inventoryBack9Texture;
		public static Texture2D inventoryBack10Texture;
		public static Texture2D inventoryBack11Texture;
		public static Texture2D inventoryBack12Texture;
		public static Texture2D inventoryBack13Texture;
		public static Texture2D inventoryBack14Texture;
		public static Texture2D hairStyleBackTexture;
		public static Texture2D clothesStyleBackTexture;
		public static Texture2D inventoryTickOnTexture;
		public static Texture2D inventoryTickOffTexture;
		public static Texture2D loTexture;
		public static Texture2D logoTexture;
		public static Texture2D logo2Texture;
		public static Texture2D textBackTexture;
		public static Texture2D chatTexture;
		public static Texture2D chat2Texture;
		public static Texture2D chatBackTexture;
		public static Texture2D teamTexture;
		public static Texture2D reTexture;
		public static Texture2D raTexture;
		public static Texture2D splashTexture;
		public static Texture2D fadeTexture;
		public static Texture2D ninjaTexture;
		public static Texture2D antLionTexture;
		public static Texture2D spikeBaseTexture;
		public static Texture2D ghostTexture;
		public static Texture2D evilCactusTexture;
		public static Texture2D goodCactusTexture;
		public static Texture2D crimsonCactusTexture;
		public static Texture2D wraithEyeTexture;
		public static Texture2D fireflyTexture;
		public static Texture2D fireflyJarTexture;
		public static Texture2D lightningbugTexture;
		public static Texture2D lightningbugJarTexture;
		public static Texture2D glowSnailTexture;
		public static Texture2D iceQueenTexture;
		public static Texture2D santaTankTexture;
		public static Texture2D reaperEyeTexture;
		public static Texture2D jackHatTexture;
		public static Texture2D treeFaceTexture;
		public static Texture2D pumpkingFaceTexture;
		public static Texture2D skinArmTexture;
		public static Texture2D skinBodyTexture;
		public static Texture2D skinLegsTexture;
		public static Texture2D playerEyeWhitesTexture;
		public static Texture2D playerEyesTexture;
		public static Texture2D playerHandsTexture;
		public static Texture2D playerHands2Texture;
		public static Texture2D playerHeadTexture;
		public static Texture2D playerPantsTexture;
		public static Texture2D playerShirtTexture;
		public static Texture2D playerShoesTexture;
		public static Texture2D playerUnderShirtTexture;
		public static Texture2D playerUnderShirt2Texture;
		public static Texture2D femaleShirt2Texture;
		public static Texture2D femalePantsTexture;
		public static Texture2D femaleShirtTexture;
		public static Texture2D femaleShoesTexture;
		public static Texture2D femaleUnderShirtTexture;
		public static Texture2D femaleUnderShirt2Texture;
		public static Texture2D[] playerHairTexture = new Texture2D[123];
		public static Texture2D[] playerHairAltTexture = new Texture2D[123];
		public static SoundEffect[] soundLiquid = new SoundEffect[2];
		public static SoundEffectInstance[] soundInstanceLiquid = new SoundEffectInstance[2];
		public static SoundEffect[] soundMech = new SoundEffect[1];
		public static SoundEffectInstance[] soundInstanceMech = new SoundEffectInstance[1];
		public static SoundEffect[] soundDig = new SoundEffect[3];
		public static SoundEffectInstance[] soundInstanceDig = new SoundEffectInstance[3];
		public static SoundEffect[] soundTink = new SoundEffect[3];
		public static SoundEffectInstance[] soundInstanceTink = new SoundEffectInstance[3];
		public static SoundEffect[] soundPlayerHit = new SoundEffect[3];
		public static SoundEffectInstance[] soundInstancePlayerHit = new SoundEffectInstance[3];
		public static SoundEffect[] soundFemaleHit = new SoundEffect[3];
		public static SoundEffectInstance[] soundInstanceFemaleHit = new SoundEffectInstance[3];
		public static SoundEffect soundPlayerKilled;
		public static SoundEffectInstance soundInstancePlayerKilled;
		public static SoundEffect soundGrass;
		public static SoundEffectInstance soundInstanceGrass;
		public static SoundEffect soundGrab;
		public static SoundEffectInstance soundInstanceGrab;
		public static SoundEffect soundPixie;
		public static SoundEffectInstance soundInstancePixie;
		public static SoundEffect[] soundItem = new SoundEffect[52];
		public static SoundEffectInstance[] soundInstanceItem = new SoundEffectInstance[52];
		public static SoundEffect[] soundNPCHit = new SoundEffect[14];
		public static SoundEffectInstance[] soundInstanceNPCHit = new SoundEffectInstance[14];
		public static SoundEffect[] soundNPCKilled = new SoundEffect[20];
		public static SoundEffectInstance[] soundInstanceNPCKilled = new SoundEffectInstance[20];
		public static SoundEffect soundDoorOpen;
		public static SoundEffectInstance soundInstanceDoorOpen;
		public static SoundEffect soundDoorClosed;
		public static SoundEffectInstance soundInstanceDoorClosed;
		public static SoundEffect soundMenuOpen;
		public static SoundEffectInstance soundInstanceMenuOpen;
		public static SoundEffect soundMenuClose;
		public static SoundEffectInstance soundInstanceMenuClose;
		public static SoundEffect soundMenuTick;
		public static SoundEffectInstance soundInstanceMenuTick;
		public static SoundEffect soundShatter;
		public static SoundEffectInstance soundInstanceShatter;
		public static SoundEffect[] soundZombie = new SoundEffect[20];
		public static SoundEffectInstance[] soundInstanceZombie = new SoundEffectInstance[20];
		public static SoundEffect[] soundRoar = new SoundEffect[2];
		public static SoundEffectInstance[] soundInstanceRoar = new SoundEffectInstance[2];
		public static SoundEffect[] soundSplash = new SoundEffect[2];
		public static SoundEffectInstance[] soundInstanceSplash = new SoundEffectInstance[2];
		public static SoundEffect soundDoubleJump;
		public static SoundEffectInstance soundInstanceDoubleJump;
		public static SoundEffect soundRun;
		public static SoundEffectInstance soundInstanceRun;
		public static SoundEffect soundCoins;
		public static SoundEffectInstance soundInstanceCoins;
		public static SoundEffect soundUnlock;
		public static SoundEffectInstance soundInstanceUnlock;
		public static SoundEffect soundChat;
		public static SoundEffectInstance soundInstanceChat;
		public static SoundEffect soundMaxMana;
		public static SoundEffectInstance soundInstanceMaxMana;
		public static SoundEffect soundDrown;
		public static SoundEffectInstance soundInstanceDrown;
		public static AudioEngine engine;
		public static SoundBank soundBank;
		public static WaveBank waveBank;
		public static Cue[] music = new Cue[33];
		public static float[] musicFade = new float[33];
		public static float musicVolume = 0.75f;
		public static float ambientVolume = 0.75f;
		public static float soundVolume = 1f;
		public static SpriteFont fontItemStack;
		public static SpriteFont fontMouseText;
		public static SpriteFont fontDeathText;
		public static SpriteFont[] fontCombatText = new SpriteFont[2];
		public static bool[] tileLighted = new bool[314];
		public static bool[] tileMergeDirt = new bool[314];
		public static bool[] tileCut = new bool[314];
		public static bool[] tileAlch = new bool[314];
		public static int[] tileShine = new int[314];
		public static bool[] tileShine2 = new bool[314];
		public static bool[] wallHouse = new bool[145];
		public static bool[] wallDungeon = new bool[145];
		public static bool[] wallLight = new bool[145];
		public static int[] wallBlend = new int[145];
		public static bool[] tileStone = new bool[314];
		public static bool[] tilePick = new bool[314];
		public static bool[] tileAxe = new bool[314];
		public static bool[] tileHammer = new bool[314];
		public static bool[] tileWaterDeath = new bool[314];
		public static bool[] tileLavaDeath = new bool[314];
		public static bool[] tileTable = new bool[314];
		public static bool[] tileBlockLight = new bool[314];
		public static bool[] tileNoSunLight = new bool[314];
		public static bool[] tileDungeon = new bool[314];
		public static bool[] tileSolidTop = new bool[314];
		public static bool[] tileSolid = new bool[314];
		public static byte[] tileLargeFrames = new byte[314];
		public static bool[] tileRope = new bool[314];
		public static bool[] tileBrick = new bool[314];
		public static bool[] tileMoss = new bool[314];
		public static bool[] tileNoAttach = new bool[314];
		public static bool[] tileNoFail = new bool[314];
		public static bool[] tileObsidianKill = new bool[314];
		public static bool[] tileFrameImportant = new bool[314];
		public static int cageFrames = 25;
		public static bool critterCage = false;
		public static int[] bunnyCageFrame = new int[Main.cageFrames];
		public static int[] bunnyCageFrameCounter = new int[Main.cageFrames];
		public static int[] squirrelCageFrame = new int[Main.cageFrames];
		public static int[] squirrelCageFrameCounter = new int[Main.cageFrames];
		public static int[] mallardCageFrame = new int[Main.cageFrames];
		public static int[] mallardCageFrameCounter = new int[Main.cageFrames];
		public static int[] duckCageFrame = new int[Main.cageFrames];
		public static int[] duckCageFrameCounter = new int[Main.cageFrames];
		public static int[] birdCageFrame = new int[Main.cageFrames];
		public static int[] birdCageFrameCounter = new int[Main.cageFrames];
		public static int[] redBirdCageFrame = new int[Main.cageFrames];
		public static int[] redBirdCageFrameCounter = new int[Main.cageFrames];
		public static int[] blueBirdCageFrame = new int[Main.cageFrames];
		public static int[] blueBirdCageFrameCounter = new int[Main.cageFrames];
		public static byte[,] butterflyCageMode = new byte[8, Main.cageFrames];
		public static int[,] butterflyCageFrame = new int[8, Main.cageFrames];
		public static int[,] butterflyCageFrameCounter = new int[8, Main.cageFrames];
		public static int[,] scorpionCageFrame = new int[2, Main.cageFrames];
		public static int[,] scorpionCageFrameCounter = new int[2, Main.cageFrames];
		public static int[] snailCageFrame = new int[Main.cageFrames];
		public static int[] snailCageFrameCounter = new int[Main.cageFrames];
		public static int[] snail2CageFrame = new int[Main.cageFrames];
		public static int[] snail2CageFrameCounter = new int[Main.cageFrames];
		public static byte[] fishBowlFrameMode = new byte[Main.cageFrames];
		public static int[] fishBowlFrame = new int[Main.cageFrames];
		public static int[] fishBowlFrameCounter = new int[Main.cageFrames];
		public static int[] frogCageFrame = new int[Main.cageFrames];
		public static int[] frogCageFrameCounter = new int[Main.cageFrames];
		public static int[] mouseCageFrame = new int[Main.cageFrames];
		public static int[] mouseCageFrameCounter = new int[Main.cageFrames];
		public static int[] wormCageFrame = new int[Main.cageFrames];
		public static int[] wormCageFrameCounter = new int[Main.cageFrames];
		public static int[] penguinCageFrame = new int[Main.cageFrames];
		public static int[] penguinCageFrameCounter = new int[Main.cageFrames];
		public static bool[] tileSand = new bool[314];
		public static bool[] tileFlame = new bool[314];
		public static bool[] npcCatchable = new bool[369];
		public static int[] tileFrame = new int[314];
		public static int[] tileFrameCounter = new int[314];
		public static byte[] wallFrame = new byte[145];
		public static byte[] wallFrameCounter = new byte[145];
		public static int[] backgroundWidth = new int[185];
		public static int[] backgroundHeight = new int[185];
		public static bool tilesLoaded = false;
		public static Map[,] map = new Map[Main.maxTilesX, Main.maxTilesY];
		public static Tile[,] tile = new Tile[Main.maxTilesX, Main.maxTilesY];
		public static Dust[] dust = new Dust[6001];
		public static Star[] star = new Star[130];
		public static Item[] item = new Item[401];
		public static NPC[] npc = new NPC[201];
		public static Gore[] gore = new Gore[501];
		public static Rain[] rain = new Rain[Main.maxRain + 1];
		public static Projectile[] projectile = new Projectile[1001];
		public static CombatText[] combatText = new CombatText[100];
		public static ItemText[] itemText = new ItemText[20];
		public static Chest[] chest = new Chest[1000];
		public static Sign[] sign = new Sign[1000];
		public static Vector2 screenPosition;
		public static Vector2 screenLastPosition;
		public static int screenWidth = 1152;
		public static int screenHeight = 864;
		public static bool screenMaximized = false;
		public static int chatLength = 600;
		public static bool chatMode = false;
		public static bool chatRelease = false;
		public static int showCount = 10;
		public static int numChatLines = 500;
		public static int startChatLine = 0;
		public static string chatText = "";
		public static ChatLine[] chatLine = new ChatLine[Main.numChatLines];
		public static bool inputTextEnter = false;
		public static bool inputTextEscape = false;
		public static float[] hotbarScale = new float[]
		{
			1f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f
		};
		public static byte mouseTextColor = 0;
		public static int mouseTextColorChange = 1;
		public static bool mouseLeftRelease = false;
		public static bool mouseRightRelease = false;
		public static bool playerInventory = false;
		public static int stackSplit;
		public static int stackCounter = 0;
		public static int stackDelay = 7;
		public static int superFastStack = 0;
		public static Item mouseItem = new Item();
		public static Item guideItem = new Item();
		public static Item reforgeItem = new Item();
		private static float inventoryScale = 0.75f;
		public static bool hasFocus = true;
		public static bool recFastScroll = false;
		public static bool recBigList = false;
		public static int recStart = 0;
		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
		public static int[] availableRecipe = new int[Recipe.maxRecipes];
		public static float[] availableRecipeY = new float[Recipe.maxRecipes];
		public static int numAvailableRecipes;
		public static int focusRecipe;
		public static int myPlayer = 0;
		public static Player[] player = new Player[256];
		public static int spawnTileX;
		public static int spawnTileY;
		public static bool npcChatRelease = false;
		public static bool editSign = false;
		public static bool editChest = false;
		public static bool blockInput = false;
		public static Microsoft.Xna.Framework.Input.Keys blockKey = Microsoft.Xna.Framework.Input.Keys.None;
		public static string defaultChestName = string.Empty;
		public static string npcChatText = "";
		public static bool npcChatFocus1 = false;
		public static bool npcChatFocus2 = false;
		public static bool npcChatFocus3 = false;
		public static int npcShop = 0;
		public static int numShops = 20;
		public Chest[] shop = new Chest[Main.numShops];
		public static int[] travelShop = new int[Chest.maxItems];
		public static bool craftGuide = false;
		public static bool reforge = false;
		private static Item toolTip = new Item();
		private static int backSpaceCount = 0;
		public static string motd = "";
		public static bool toggleFullscreen;
		public static int numDisplayModes = 0;
		public static int[] displayWidth = new int[99];
		public static int[] displayHeight = new int[99];
		public static bool gameMenu = true;
		private static int maxLoadPlayer = 1000;
		private static int maxLoadWorld = 1000;
		public static Player[] loadPlayer = new Player[Main.maxLoadPlayer];
		public static string[] loadPlayerPath = new string[Main.maxLoadPlayer];
		private static int numLoadPlayers = 0;
		public static string playerPathName;
		public static string[] loadWorld = new string[Main.maxLoadWorld];
		public static string[] loadWorldPath = new string[Main.maxLoadWorld];
		private static int numLoadWorlds = 0;
		public static string worldPathName;
		public static string SavePath = string.Concat(new object[]
		{
			Environment.GetFolderPath(Environment.SpecialFolder.Personal),
			Path.DirectorySeparatorChar,
			"My Games",
			Path.DirectorySeparatorChar,
			"Terraria"
		});
		public static string WorldPath = Main.SavePath + Path.DirectorySeparatorChar + "Worlds";
		public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";
		public static string[] itemName = new string[2289];
		public static string[] npcName = new string[369];
		private static KeyboardState inputText;
		private static KeyboardState oldInputText;
		public static int invasionType = 0;
		public static double invasionX = 0.0;
		public static int invasionSize = 0;
		public static int invasionDelay = 0;
		public static int invasionWarn = 0;
		public static int[] npcFrameCount = new int[]
		{
			1,
			2,
			2,
			3,
			6,
			2,
			2,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			2,
			16,
			14,
			16,
			14,
			15,
			16,
			2,
			10,
			1,
			16,
			16,
			16,
			3,
			1,
			15,
			3,
			1,
			3,
			1,
			1,
			16,
			16,
			1,
			1,
			1,
			3,
			3,
			15,
			3,
			7,
			7,
			4,
			5,
			5,
			5,
			3,
			3,
			16,
			6,
			3,
			6,
			6,
			2,
			5,
			3,
			2,
			7,
			7,
			4,
			2,
			8,
			1,
			5,
			1,
			2,
			4,
			16,
			5,
			4,
			4,
			15,
			15,
			15,
			15,
			2,
			4,
			6,
			6,
			24,
			16,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			3,
			1,
			1,
			1,
			1,
			1,
			1,
			5,
			6,
			7,
			16,
			1,
			1,
			16,
			16,
			12,
			20,
			21,
			1,
			2,
			2,
			3,
			6,
			1,
			1,
			1,
			15,
			4,
			11,
			1,
			14,
			6,
			6,
			3,
			1,
			2,
			2,
			1,
			3,
			4,
			1,
			2,
			1,
			4,
			2,
			1,
			15,
			3,
			16,
			4,
			5,
			7,
			3,
			2,
			12,
			12,
			4,
			4,
			4,
			8,
			8,
			9,
			2,
			6,
			4,
			15,
			16,
			3,
			3,
			8,
			5,
			4,
			3,
			15,
			12,
			4,
			14,
			14,
			3,
			2,
			5,
			3,
			2,
			3,
			14,
			5,
			14,
			16,
			5,
			2,
			2,
			12,
			3,
			3,
			3,
			3,
			2,
			2,
			2,
			2,
			2,
			7,
			14,
			15,
			16,
			8,
			3,
			15,
			15,
			15,
			2,
			3,
			20,
			16,
			14,
			16,
			4,
			4,
			16,
			16,
			20,
			20,
			20,
			2,
			2,
			2,
			2,
			8,
			12,
			3,
			4,
			2,
			4,
			16,
			16,
			15,
			6,
			3,
			3,
			3,
			3,
			3,
			3,
			4,
			4,
			5,
			4,
			6,
			7,
			15,
			4,
			7,
			6,
			1,
			1,
			2,
			4,
			3,
			5,
			3,
			3,
			3,
			4,
			5,
			6,
			4,
			2,
			1,
			8,
			4,
			4,
			1,
			8,
			1,
			4,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			15,
			3,
			3,
			3,
			3,
			3,
			3,
			15,
			3,
			6,
			12,
			20,
			20,
			20,
			15,
			15,
			15,
			5,
			5,
			6,
			6,
			5,
			2,
			7,
			2,
			6,
			6,
			6,
			6,
			6,
			15,
			15,
			15,
			15,
			15,
			11,
			4,
			2,
			2,
			3,
			3,
			3,
			15,
			15,
			15,
			10,
			14,
			12,
			1,
			10,
			8,
			3,
			3,
			2,
			2,
			2,
			2,
			7,
			15,
			15,
			15,
			6,
			3,
			10,
			10,
			6,
			9,
			8,
			9,
			8,
			20,
			10,
			6,
			14,
			1,
			4,
			24,
			2,
			4,
			6,
			6,
			10,
			15,
			15,
			15,
			15,
			4,
			4,
			16
		};
		private static bool mouseExit = false;
		private static float exitScale = 0.8f;
		private static bool mouseReforge = false;
		private static float reforgeScale = 0.8f;
		public static Player clientPlayer = new Player();
		public static string getIP = Main.defaultIP;
		public static string getPort = Convert.ToString(Netplay.serverPort);
		public static bool menuMultiplayer = false;
		public static bool menuServer = false;
		public static int netMode = 0;
		public static int timeOut = 120;
		public static int netPlayCounter;
		public static int lastNPCUpdate;
		public static int lastItemUpdate;
		public static int maxNPCUpdates = 5;
		public static int maxItemUpdates = 5;
		public static string cUp = "W";
		public static string cLeft = "A";
		public static string cDown = "S";
		public static string cRight = "D";
		public static string cJump = "Space";
		public static string cThrowItem = "T";
		public static string cHeal = "H";
		public static string cMana = "J";
		public static string cBuff = "B";
		public static string cHook = "E";
		public static string cTorch = "LeftShift";
		public static string cInv = "Escape";
		public static string cMapZoomIn = "Add";
		public static string cMapZoomOut = "Subtract";
		public static string cMapAlphaUp = "PageUp";
		public static string cMapAlphaDown = "PageDown";
		public static string cMapFull = "M";
		public static string cMapStyle = "Tab";
		public static Color mouseColor = new Color(255, 50, 95);
		public static Color cursorColor = Color.White;
		public static int cursorColorDirection = 1;
		public static float cursorAlpha = 0f;
		public static float cursorScale = 0f;
		public static bool signBubble = false;
		public static int signX = 0;
		public static int signY = 0;
		public static bool hideUI = false;
		public static bool releaseUI = false;
		public static bool fixedTiming = false;
		private int splashCounter;
		public static string oldStatusText = "";
		public static bool autoShutdown = false;
		public int a;
		public int b;
		public static float ambientWaterfallX = -1f;
		public static float ambientWaterfallY = -1f;
		public static float ambientWaterfallStrength = 0f;
		public static float ambientLavafallX = -1f;
		public static float ambientLavafallY = -1f;
		public static float ambientLavafallStrength = 0f;
		public static float ambientLavaX = -1f;
		public static float ambientLavaY = -1f;
		public static float ambientLavaStrength = 0f;
		public static int ambientCounter = 0;
		private float logoRotation;
		private float logoRotationDirection = 1f;
		private float logoRotationSpeed = 1f;
		private float logoScale = 1f;
		private float logoScaleDirection = 1f;
		private float logoScaleSpeed = 1f;
		private static int maxMenuItems = 14;
		private float[] menuItemScale = new float[Main.maxMenuItems];
		private int focusMenu = -1;
		private int selectedMenu = -1;
		private int selectedMenu2 = -1;
		private int selectedPlayer;
		private int selectedWorld;
		public static int menuMode = 0;
		public static int menuSkip = 0;
		private static Item cpItem = new Item();
		private int textBlinkerCount;
		private int textBlinkerState;
		public static string newWorldName = "";
		private static int dyeSlotCount = 0;
		private static int accSlotCount = 0;
		private static string hoverItemName = "";
		private static Color inventoryBack = new Color(220, 220, 220, 220);
		private static bool mouseText = false;
		private static int mH = 0;
		private static int sX = Main.screenWidth - 800;
		private static int starMana = 20;
		private static float heartLife = 20f;
		private static int rare = 0;
		private static int hairStart = 0;
		private static int oldHairStyle;
		private static Color oldHairColor;
		private static int selClothes = 0;
		private static Color[] oldClothesColor = new Color[4];
		public static int dresserX;
		public static int dresserY;
		public static Color selColor = Color.White;
		public static int focusColor = 0;
		public static int colorDelay = 0;
		public static int setKey = -1;
		public static int bgScroll = 0;
		public static bool autoPass = false;
		public static int menuFocus = 0;
		private static float hBar = -1f;
		private static float sBar = -1f;
		private static float lBar = 1f;
		private int grabColorSlider;
		public static bool blockMouse = false;
		private bool[] menuWide = new bool[100];
		private static float tranSpeed = 0.05f;
		private static float atmo = 0f;
		private static float bgScale = 1f;
		private static int bgW = (int)(1024f * Main.bgScale);
		private static Color backColor = Color.White;
		private static Color trueBackColor = Main.backColor;
		private float screenOff;
		private float scAdj;
		private float cTop;
		[DllImport("User32")]
		private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);
		[DllImport("User32")]
		private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
		[DllImport("User32")]
		private static extern int GetMenuItemCount(IntPtr hWnd);
		[DllImport("kernel32.dll")]
		public static extern IntPtr LoadLibrary(string dllToLoad);
		public static void LoadWorlds()
		{
			Directory.CreateDirectory(Main.WorldPath);
			string[] files = Directory.GetFiles(Main.WorldPath, "*.wld");
			int num = files.Length;
			if (!Main.dedServ && num > Main.maxLoadWorld)
			{
				num = Main.maxLoadWorld;
			}
			for (int i = 0; i < num; i++)
			{
				Main.loadWorldPath[i] = files[i];
				Main.loadWorld[i] = WorldFile.GetWorldName(Main.loadWorldPath[i]);
			}
			Main.numLoadWorlds = num;
		}
		private static void LoadPlayers()
		{
			Directory.CreateDirectory(Main.PlayerPath);
			string[] files = Directory.GetFiles(Main.PlayerPath, "*.plr");
			string[] files2 = Directory.GetFiles(Main.PlayerPath, "*.plr.dat");
			int num = files.Length + files2.Length;
			string[] array = new string[num];
			bool[] array2 = new bool[num];
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < num; i++)
			{
				if (num2 == files.Length)
				{
					array[i] = files2[num3];
					num3++;
					array2[i] = true;
				}
				else
				{
					if (num3 == files2.Length)
					{
						array[i] = files[num2];
						num2++;
						array2[i] = false;
					}
					else
					{
						if (string.CompareOrdinal(files[num2], files2[num3]) > 0)
						{
							array[i] = files2[num3];
							num3++;
							array2[i] = true;
						}
						else
						{
							array[i] = files[num2];
							num2++;
							array2[i] = false;
						}
					}
				}
			}
			if (num > 0)
			{
				string[] array3 = array[0].Split(new char[]
				{
					Path.DirectorySeparatorChar
				});
				string text = array3[array3.Length - 1].Split(new char[]
				{
					'.'
				})[0];
				for (int j = 1; j < num; j++)
				{
					string text2 = text;
					array3 = array[j].Split(new char[]
					{
						Path.DirectorySeparatorChar
					});
					text = array3[array3.Length - 1].Split(new char[]
					{
						'.'
					})[0];
					if (text2 == text)
					{
						DateTime lastWriteTime = File.GetLastWriteTime(array[j - 1]);
						DateTime lastWriteTime2 = File.GetLastWriteTime(array[j]);
						if (lastWriteTime < lastWriteTime2)
						{
							array[j - 1] = null;
						}
						else
						{
							array[j] = null;
						}
					}
				}
			}
			for (int k = 0; k < num; k++)
			{
				if (array2[k] && array[k] != null)
				{
					array[k] = array[k].Substring(0, array[k].Length - 4);
				}
			}
			int num4 = 0;
			int num5 = 0;
			while (num5 < array.Length && num4 < Main.maxLoadPlayer)
			{
				if (array[num5] != null)
				{
					Main.loadPlayerPath[num4] = array[num5];
					Player player;
					if (array2[num5])
					{
						player = Player.LoadPlayer(Main.loadPlayerPath[num4], true);
					}
					else
					{
						player = Player.LoadPlayer(Main.loadPlayerPath[num4], false);
					}
					if (player.loadStatus != 0 && player.loadStatus != 1)
					{
						string text3 = Main.loadPlayerPath[num4] + ".bak";
						if (File.Exists(text3))
						{
							string text4 = Main.loadPlayerPath[num4] + ".bad";
							if (File.Exists(text4))
							{
								File.Delete(text4);
							}
							File.Move(Main.loadPlayerPath[num4], text4);
							File.Delete(Main.loadPlayerPath[num4]);
							File.Move(text3, Main.loadPlayerPath[num4]);
							player = Player.LoadPlayer(Main.loadPlayerPath[num4], false);
						}
					}
					Main.loadPlayer[num4] = player;
					num4++;
				}
				num5++;
			}
			Main.numLoadPlayers = num4;
		}
		protected void OpenRecent()
		{
			try
			{
				if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat"))
				{
					using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							binaryReader.ReadInt32();
							for (int i = 0; i < 10; i++)
							{
								Main.recentWorld[i] = binaryReader.ReadString();
								Main.recentIP[i] = binaryReader.ReadString();
								Main.recentPort[i] = binaryReader.ReadInt32();
							}
						}
					}
				}
			}
			catch
			{
			}
		}
		public static void SaveRecent()
		{
			Directory.CreateDirectory(Main.SavePath);
			try
			{
				File.SetAttributes(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
			}
			catch
			{
			}
			try
			{
				using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
					{
						binaryWriter.Write(Main.curRelease);
						for (int i = 0; i < 10; i++)
						{
							binaryWriter.Write(Main.recentWorld[i]);
							binaryWriter.Write(Main.recentIP[i]);
							binaryWriter.Write(Main.recentPort[i]);
						}
					}
				}
			}
			catch
			{
			}
		}
		public static void SaveSettings()
		{
			Directory.CreateDirectory(Main.SavePath);
			try
			{
				File.SetAttributes(Main.SavePath + Path.DirectorySeparatorChar + "config.dat", FileAttributes.Normal);
			}
			catch
			{
			}
			try
			{
				using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "config.dat", FileMode.Create))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
					{
						binaryWriter.Write(Main.curRelease);
						binaryWriter.Write(Main.clientUUID);
						binaryWriter.Write(Main.graphics.IsFullScreen);
						binaryWriter.Write(Main.mouseColor.R);
						binaryWriter.Write(Main.mouseColor.G);
						binaryWriter.Write(Main.mouseColor.B);
						binaryWriter.Write(Main.soundVolume);
						binaryWriter.Write(Main.ambientVolume);
						binaryWriter.Write(Main.musicVolume);
						binaryWriter.Write(Main.cUp);
						binaryWriter.Write(Main.cDown);
						binaryWriter.Write(Main.cLeft);
						binaryWriter.Write(Main.cRight);
						binaryWriter.Write(Main.cJump);
						binaryWriter.Write(Main.cThrowItem);
						binaryWriter.Write(Main.cInv);
						binaryWriter.Write(Main.cHeal);
						binaryWriter.Write(Main.cMana);
						binaryWriter.Write(Main.cBuff);
						binaryWriter.Write(Main.cHook);
						binaryWriter.Write(Main.caveParrallax);
						binaryWriter.Write(Main.fixedTiming);
						binaryWriter.Write(Main.screenMaximized);
						binaryWriter.Write(Main.graphics.PreferredBackBufferWidth);
						binaryWriter.Write(Main.graphics.PreferredBackBufferHeight);
						binaryWriter.Write(Main.autoSave);
						binaryWriter.Write(Main.autoPause);
						binaryWriter.Write(Main.showItemText);
						binaryWriter.Write(Main.cTorch);
						binaryWriter.Write((byte)Lighting.lightMode);
						binaryWriter.Write((byte)Main.qaStyle);
						binaryWriter.Write(Main.owBack);
						binaryWriter.Write((byte)Lang.lang);
						binaryWriter.Write(Main.mapEnabled);
						binaryWriter.Write(Main.cMapStyle);
						binaryWriter.Write(Main.cMapFull);
						binaryWriter.Write(Main.cMapZoomIn);
						binaryWriter.Write(Main.cMapZoomOut);
						binaryWriter.Write(Main.cMapAlphaUp);
						binaryWriter.Write(Main.cMapAlphaDown);
						binaryWriter.Write(Lighting.LightingThreads);
						binaryWriter.Close();
					}
				}
			}
			catch
			{
			}
		}
		protected void CheckBunny()
		{
			try
			{
				RegistryKey registryKey = Registry.CurrentUser;
				registryKey = registryKey.CreateSubKey("Software\\Terraria");
				if (registryKey != null && registryKey.GetValue("Bunny") != null && registryKey.GetValue("Bunny").ToString() == "1")
				{
					Main.cEd = true;
				}
			}
			catch
			{
				Main.cEd = false;
			}
		}
		protected void OpenSettings()
		{
			try
			{
				bool flag = false;
				if (File.Exists(Main.SavePath + Path.DirectorySeparatorChar + "config.dat"))
				{
					using (FileStream fileStream = new FileStream(Main.SavePath + Path.DirectorySeparatorChar + "config.dat", FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							int num = binaryReader.ReadInt32();
							if (num < 68)
							{
								flag = true;
							}
							else
							{
								if (num >= 67)
								{
									Main.clientUUID = binaryReader.ReadString();
								}
								else
								{
									flag = true;
								}
								bool flag2 = binaryReader.ReadBoolean();
								Main.mouseColor.R = binaryReader.ReadByte();
								Main.mouseColor.G = binaryReader.ReadByte();
								Main.mouseColor.B = binaryReader.ReadByte();
								Main.soundVolume = binaryReader.ReadSingle();
								if (num >= 90)
								{
									Main.ambientVolume = binaryReader.ReadSingle();
								}
								Main.musicVolume = binaryReader.ReadSingle();
								Main.cUp = binaryReader.ReadString();
								Main.cDown = binaryReader.ReadString();
								Main.cLeft = binaryReader.ReadString();
								Main.cRight = binaryReader.ReadString();
								Main.cJump = binaryReader.ReadString();
								Main.cThrowItem = binaryReader.ReadString();
								if (num >= 1)
								{
									Main.cInv = binaryReader.ReadString();
								}
								if (num >= 12)
								{
									Main.cHeal = binaryReader.ReadString();
									Main.cMana = binaryReader.ReadString();
									Main.cBuff = binaryReader.ReadString();
								}
								if (num >= 13)
								{
									Main.cHook = binaryReader.ReadString();
								}
								Main.caveParrallax = binaryReader.ReadSingle();
								if (num >= 2)
								{
									Main.fixedTiming = binaryReader.ReadBoolean();
								}
								if (num >= 91 && binaryReader.ReadBoolean())
								{
									Form form = (Form)Control.FromHandle(base.Window.Handle);
									form.WindowState = FormWindowState.Maximized;
								}
								if (num >= 4)
								{
									Main.graphics.PreferredBackBufferWidth = binaryReader.ReadInt32();
									Main.graphics.PreferredBackBufferHeight = binaryReader.ReadInt32();
								}
								if (num >= 8)
								{
									Main.autoSave = binaryReader.ReadBoolean();
								}
								if (num >= 9)
								{
									Main.autoPause = binaryReader.ReadBoolean();
								}
								if (num >= 19)
								{
									Main.showItemText = binaryReader.ReadBoolean();
								}
								if (num >= 30)
								{
									Main.cTorch = binaryReader.ReadString();
									Lighting.lightMode = (int)binaryReader.ReadByte();
									Main.qaStyle = (int)binaryReader.ReadByte();
								}
								if (num >= 37)
								{
									Main.owBack = binaryReader.ReadBoolean();
								}
								if (num >= 39)
								{
									Lang.lang = (int)binaryReader.ReadByte();
								}
								if (num >= 46)
								{
									Main.mapEnabled = binaryReader.ReadBoolean();
									Main.cMapStyle = binaryReader.ReadString();
									Main.cMapFull = binaryReader.ReadString();
									Main.cMapZoomIn = binaryReader.ReadString();
									Main.cMapZoomOut = binaryReader.ReadString();
									Main.cMapAlphaUp = binaryReader.ReadString();
									Main.cMapAlphaDown = binaryReader.ReadString();
								}
								if (num >= 89)
								{
									Lighting.LightingThreads = binaryReader.ReadInt32();
									if (Lighting.LightingThreads >= Environment.ProcessorCount)
									{
										Lighting.LightingThreads = Environment.ProcessorCount - 1;
									}
								}
								if (flag2 && !Main.graphics.IsFullScreen)
								{
									Main.graphics.ToggleFullScreen();
								}
							}
							binaryReader.Close();
						}
					}
				}
				if (flag)
				{
					Main.SaveSettings();
				}
			}
			catch
			{
			}
		}
		private static void ErasePlayer(int i)
		{
			try
			{
				File.Delete(Main.loadPlayerPath[i]);
				File.Delete(Main.loadPlayerPath[i] + ".bak");
			}
			catch
			{
			}
			try
			{
				string path = Main.loadPlayerPath[i].Substring(0, Main.loadPlayerPath[i].Length - 4);
				if (Directory.Exists(path))
				{
					Directory.Delete(path, true);
				}
				Main.LoadPlayers();
			}
			catch
			{
			}
		}
		private static void EraseWorld(int i)
		{
			try
			{
				File.Delete(Main.loadWorldPath[i]);
				File.Delete(Main.loadWorldPath[i] + ".bak");
				Main.LoadWorlds();
			}
			catch
			{
			}
		}
		private static string getPlayerPathName(string playerName)
		{
			string text = "";
			for (int i = 0; i < playerName.Length; i++)
			{
				string text2 = playerName.Substring(i, 1);
				string str;
				if (text2 == "a" || text2 == "b" || text2 == "c" || text2 == "d" || text2 == "e" || text2 == "f" || text2 == "g" || text2 == "h" || text2 == "i" || text2 == "j" || text2 == "k" || text2 == "l" || text2 == "m" || text2 == "n" || text2 == "o" || text2 == "p" || text2 == "q" || text2 == "r" || text2 == "s" || text2 == "t" || text2 == "u" || text2 == "v" || text2 == "w" || text2 == "x" || text2 == "y" || text2 == "z" || text2 == "A" || text2 == "B" || text2 == "C" || text2 == "D" || text2 == "E" || text2 == "F" || text2 == "G" || text2 == "H" || text2 == "I" || text2 == "J" || text2 == "K" || text2 == "L" || text2 == "M" || text2 == "N" || text2 == "O" || text2 == "P" || text2 == "Q" || text2 == "R" || text2 == "S" || text2 == "T" || text2 == "U" || text2 == "V" || text2 == "W" || text2 == "X" || text2 == "Y" || text2 == "Z" || text2 == "1" || text2 == "2" || text2 == "3" || text2 == "4" || text2 == "5" || text2 == "6" || text2 == "7" || text2 == "8" || text2 == "9" || text2 == "0")
				{
					str = text2;
				}
				else
				{
					if (text2 == " ")
					{
						str = "_";
					}
					else
					{
						str = "-";
					}
				}
				text += str;
			}
			if (File.Exists(string.Concat(new object[]
			{
				Main.PlayerPath,
				Path.DirectorySeparatorChar,
				text,
				".plr"
			})))
			{
				int num = 2;
				while (File.Exists(string.Concat(new object[]
				{
					Main.PlayerPath,
					Path.DirectorySeparatorChar,
					text,
					num,
					".plr"
				})))
				{
					num++;
				}
				text += num;
			}
			return string.Concat(new object[]
			{
				Main.PlayerPath,
				Path.DirectorySeparatorChar,
				text,
				".plr"
			});
		}
		private static string getWorldPathName(string worldName)
		{
			string text = "";
			for (int i = 0; i < worldName.Length; i++)
			{
				string text2 = worldName.Substring(i, 1);
				string str;
				if (text2 == "a" || text2 == "b" || text2 == "c" || text2 == "d" || text2 == "e" || text2 == "f" || text2 == "g" || text2 == "h" || text2 == "i" || text2 == "j" || text2 == "k" || text2 == "l" || text2 == "m" || text2 == "n" || text2 == "o" || text2 == "p" || text2 == "q" || text2 == "r" || text2 == "s" || text2 == "t" || text2 == "u" || text2 == "v" || text2 == "w" || text2 == "x" || text2 == "y" || text2 == "z" || text2 == "A" || text2 == "B" || text2 == "C" || text2 == "D" || text2 == "E" || text2 == "F" || text2 == "G" || text2 == "H" || text2 == "I" || text2 == "J" || text2 == "K" || text2 == "L" || text2 == "M" || text2 == "N" || text2 == "O" || text2 == "P" || text2 == "Q" || text2 == "R" || text2 == "S" || text2 == "T" || text2 == "U" || text2 == "V" || text2 == "W" || text2 == "X" || text2 == "Y" || text2 == "Z" || text2 == "1" || text2 == "2" || text2 == "3" || text2 == "4" || text2 == "5" || text2 == "6" || text2 == "7" || text2 == "8" || text2 == "9" || text2 == "0")
				{
					str = text2;
				}
				else
				{
					if (text2 == " ")
					{
						str = "_";
					}
					else
					{
						str = "-";
					}
				}
				text += str;
			}
			if (File.Exists(string.Concat(new object[]
			{
				Main.WorldPath,
				Path.DirectorySeparatorChar,
				text,
				".wld"
			})))
			{
				int num = 2;
				while (File.Exists(string.Concat(new object[]
				{
					Main.WorldPath,
					Path.DirectorySeparatorChar,
					text,
					num,
					".wld"
				})))
				{
					num++;
				}
				text += num;
			}
			return string.Concat(new object[]
			{
				Main.WorldPath,
				Path.DirectorySeparatorChar,
				text,
				".wld"
			});
		}
		public void autoCreate(string newOpt)
		{
			if (newOpt == "0")
			{
				Main.autoGen = false;
				return;
			}
			if (newOpt == "1")
			{
				Main.maxTilesX = 4200;
				Main.maxTilesY = 1200;
				Main.autoGen = true;
				return;
			}
			if (newOpt == "2")
			{
				Main.maxTilesX = 6300;
				Main.maxTilesY = 1800;
				Main.autoGen = true;
				return;
			}
			if (newOpt == "3")
			{
				Main.maxTilesX = 8400;
				Main.maxTilesY = 2400;
				Main.autoGen = true;
			}
		}
		public void NewMOTD(string newMOTD)
		{
			Main.motd = newMOTD;
		}
		public void LoadDedConfig(string configPath)
		{
			if (File.Exists(configPath))
			{
				using (StreamReader streamReader = new StreamReader(configPath))
				{
					string text;
					while ((text = streamReader.ReadLine()) != null)
					{
						try
						{
							if (text.Length > 6 && text.Substring(0, 6).ToLower() == "world=")
							{
								string text2 = text.Substring(6);
								Main.worldPathName = text2;
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
							{
								string value = text.Substring(5);
								try
								{
									int serverPort = Convert.ToInt32(value);
									Netplay.serverPort = serverPort;
								}
								catch
								{
								}
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
							{
								string value2 = text.Substring(11);
								try
								{
									int num = Convert.ToInt32(value2);
									Main.maxNetPlayers = num;
								}
								catch
								{
								}
							}
							if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=")
							{
								string value3 = text.Substring(9);
								try
								{
									int num2 = Convert.ToInt32(value3);
									if (num2 >= 0 && num2 <= 5)
									{
										Process currentProcess = Process.GetCurrentProcess();
										if (num2 == 0)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
										}
										else
										{
											if (num2 == 1)
											{
												currentProcess.PriorityClass = ProcessPriorityClass.High;
											}
											else
											{
												if (num2 == 2)
												{
													currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
												}
												else
												{
													if (num2 == 3)
													{
														currentProcess.PriorityClass = ProcessPriorityClass.Normal;
													}
													else
													{
														if (num2 == 4)
														{
															currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
														}
														else
														{
															if (num2 == 5)
															{
																currentProcess.PriorityClass = ProcessPriorityClass.Idle;
															}
														}
													}
												}
											}
										}
									}
								}
								catch
								{
								}
							}
							if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
							{
								string password = text.Substring(9);
								Netplay.password = password;
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
							{
								string text3 = text.Substring(5);
								Main.motd = text3;
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
							{
								string value4 = text.Substring(5);
								Lang.lang = Convert.ToInt32(value4);
							}
							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
							{
								string worldPath = text.Substring(10);
								Main.WorldPath = worldPath;
							}
							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
							{
								string text4 = text.Substring(10);
								Main.worldName = text4;
							}
							if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
							{
								string banFile = text.Substring(8);
								Netplay.banFile = banFile;
							}
							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
							{
								string text5 = text.Substring(11);
								if (text5 == "0")
								{
									Main.autoGen = false;
								}
								else
								{
									if (text5 == "1")
									{
										Main.maxTilesX = 4200;
										Main.maxTilesY = 1200;
										Main.autoGen = true;
									}
									else
									{
										if (text5 == "2")
										{
											Main.maxTilesX = 6300;
											Main.maxTilesY = 1800;
											Main.autoGen = true;
										}
										else
										{
											if (text5 == "3")
											{
												Main.maxTilesX = 8400;
												Main.maxTilesY = 2400;
												Main.autoGen = true;
											}
										}
									}
								}
							}
							if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=")
							{
								string text6 = text.Substring(7);
								if (text6 == "1")
								{
									Netplay.spamCheck = true;
								}
							}
							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=")
							{
								string text7 = text.Substring(5);
								if (text7 != "1")
								{
									Netplay.uPNP = false;
								}
							}
							if (text.Length > 5 && text.Substring(0, 10).ToLower() == "npcstream=")
							{
								string value5 = text.Substring(10);
								try
								{
									int num3 = Convert.ToInt32(value5);
									Main.npcStreamSpeed = num3;
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
					}
				}
			}
		}
		public void SetNetPlayers(int mPlayers)
		{
			Main.maxNetPlayers = mPlayers;
		}
		public void SetWorld(string wrold)
		{
			Main.worldPathName = wrold;
		}
		public void SetWorldName(string wrold)
		{
			Main.worldName = wrold;
		}
		public void autoShut()
		{
			Main.autoShutdown = true;
		}
		[DllImport("user32.dll")]
		public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
		[DllImport("user32.dll")]
		private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
		public void AutoPass()
		{
			Main.autoPass = true;
		}
		public void AutoJoin(string IP)
		{
			Main.defaultIP = IP;
			Main.getIP = IP;
			Netplay.SetIP(Main.defaultIP);
			Main.autoJoin = true;
		}
		public void AutoHost()
		{
			Main.menuMultiplayer = true;
			Main.menuServer = true;
			Main.menuMode = 1;
		}
		public void loadLib(string path)
		{
			Main.libPath = path;
			Main.LoadLibrary(Main.libPath);
		}
		public void DedServ()
		{
			Main.rand = new Random();
			if (Main.autoShutdown)
			{
				string text = "terraria" + Main.rand.Next(2147483647);
				Console.Title = text;
				IntPtr intPtr = Main.FindWindow(null, text);
				if (intPtr != IntPtr.Zero)
				{
					Main.ShowWindow(intPtr, 0);
				}
			}
			else
			{
				Console.Title = "Terraria Server " + Main.versionNumber2;
			}
			Main.dedServ = true;
			Main.showSplash = false;
			this.Initialize();
			Lang.setLang(false);
			for (int i = 0; i < 369; i++)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(i, -1f);
				Main.npcName[i] = nPC.name;
			}
			while (Main.worldPathName == null || Main.worldPathName == "")
			{
				Main.LoadWorlds();
				bool flag = true;
				while (flag)
				{
					Console.WriteLine("Terraria Server " + Main.versionNumber2);
					Console.WriteLine("");
					for (int j = 0; j < Main.numLoadWorlds; j++)
					{
						Console.WriteLine(string.Concat(new object[]
						{
							j + 1,
							'\t',
							'\t',
							Main.loadWorld[j]
						}));
					}
					Console.WriteLine(string.Concat(new object[]
					{
						"n",
						'\t',
						'\t',
						"New World"
					}));
					Console.WriteLine("d <number>" + '\t' + "Delete World");
					Console.WriteLine("");
					Console.Write("Choose World: ");
					string text2 = Console.ReadLine();
					try
					{
						Console.Clear();
					}
					catch
					{
					}
					if (text2.Length >= 2 && text2.Substring(0, 2).ToLower() == "d ")
					{
						try
						{
							int num = Convert.ToInt32(text2.Substring(2)) - 1;
							if (num < Main.numLoadWorlds)
							{
								Console.WriteLine("Terraria Server " + Main.versionNumber2);
								Console.WriteLine("");
								Console.WriteLine("Really delete " + Main.loadWorld[num] + "?");
								Console.Write("(y/n): ");
								string text3 = Console.ReadLine();
								if (text3.ToLower() == "y")
								{
									Main.EraseWorld(num);
								}
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
							continue;
						}
						catch
						{
							continue;
						}
					}
					if (text2 == "n" || text2 == "N")
					{
						bool flag2 = true;
						while (flag2)
						{
							Console.WriteLine("Terraria Server " + Main.versionNumber2);
							Console.WriteLine("");
							Console.WriteLine("1" + '\t' + "Small");
							Console.WriteLine("2" + '\t' + "Medium");
							Console.WriteLine("3" + '\t' + "Large");
							Console.WriteLine("");
							Console.Write("Choose size: ");
							string value = Console.ReadLine();
							try
							{
								int num2 = Convert.ToInt32(value);
								if (num2 == 1)
								{
									Main.maxTilesX = 4200;
									Main.maxTilesY = 1200;
									flag2 = false;
								}
								else
								{
									if (num2 == 2)
									{
										Main.maxTilesX = 6400;
										Main.maxTilesY = 1800;
										flag2 = false;
									}
									else
									{
										if (num2 == 3)
										{
											Main.maxTilesX = 8400;
											Main.maxTilesY = 2400;
											flag2 = false;
										}
									}
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine("Terraria Server " + Main.versionNumber2);
							Console.WriteLine("");
							Console.Write("Enter world name: ");
							Main.newWorldName = Console.ReadLine();
							if (Main.newWorldName != "" && Main.newWorldName != " " && Main.newWorldName != null)
							{
								flag2 = false;
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						Main.worldName = Main.newWorldName;
						Main.worldPathName = Main.getWorldPathName(Main.worldName);
						Main.menuMode = 10;
						WorldGen.CreateNewWorld();
						flag2 = false;
						while (Main.menuMode == 10)
						{
							if (Main.oldStatusText != Main.statusText)
							{
								Main.oldStatusText = Main.statusText;
								Console.WriteLine(Main.statusText);
							}
						}
						try
						{
							Console.Clear();
							continue;
						}
						catch
						{
							continue;
						}
					}
					try
					{
						int num3 = Convert.ToInt32(text2);
						num3--;
						if (num3 >= 0 && num3 < Main.numLoadWorlds)
						{
							bool flag3 = true;
							while (flag3)
							{
								Console.WriteLine("Terraria Server " + Main.versionNumber2);
								Console.WriteLine("");
								Console.Write("Max players (press enter for 8): ");
								string value2 = Console.ReadLine();
								try
								{
									if (value2 == "")
									{
										value2 = "8";
									}
									int num4 = Convert.ToInt32(value2);
									if (num4 <= 255 && num4 >= 1)
									{
										Main.maxNetPlayers = num4;
										flag3 = false;
									}
									flag3 = false;
								}
								catch
								{
								}
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
							flag3 = true;
							while (flag3)
							{
								Console.WriteLine("Terraria Server " + Main.versionNumber2);
								Console.WriteLine("");
								Console.Write("Server port (press enter for 7777): ");
								string value3 = Console.ReadLine();
								try
								{
									if (value3 == "")
									{
										value3 = "7777";
									}
									int num5 = Convert.ToInt32(value3);
									if (num5 <= 65535)
									{
										Netplay.serverPort = num5;
										flag3 = false;
									}
								}
								catch
								{
								}
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
							flag3 = true;
							while (flag3)
							{
								Console.WriteLine("Terraria Server " + Main.versionNumber2);
								Console.WriteLine("");
								Console.Write("Automatically forward port? (y/n): ");
								string text4 = Console.ReadLine();
								try
								{
									if (text4 == "" || text4.ToLower() == "y" || text4.ToLower() == "yes")
									{
										Netplay.uPNP = true;
										flag3 = false;
									}
									else
									{
										if (text4.ToLower() == "n" || text4.ToLower() == "no")
										{
											Netplay.uPNP = false;
											flag3 = false;
										}
									}
								}
								catch
								{
								}
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
							Console.WriteLine("Terraria Server " + Main.versionNumber2);
							Console.WriteLine("");
							Console.Write("Server password (press enter for none): ");
							Netplay.password = Console.ReadLine();
							Main.worldPathName = Main.loadWorldPath[num3];
							flag = false;
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
					}
					catch
					{
					}
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			WorldGen.serverLoadWorld();
			Console.WriteLine("Terraria Server " + Main.versionNumber);
			Console.WriteLine("");
			while (!Netplay.ServerUp)
			{
				if (Main.oldStatusText != Main.statusText)
				{
					Main.oldStatusText = Main.statusText;
					Console.WriteLine(Main.statusText);
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			Console.WriteLine("Terraria Server " + Main.versionNumber);
			Console.WriteLine("");
			Console.WriteLine("Listening on port " + Netplay.serverPort);
			Console.WriteLine("Type 'help' for a list of commands.");
			Console.WriteLine("");
			Console.Title = "Terraria Server: " + Main.worldName;
			Stopwatch stopwatch = new Stopwatch();
			if (!Main.autoShutdown)
			{
				Main.startDedInput();
			}
			stopwatch.Start();
			double num6 = 16.666666666666668;
			double num7 = 0.0;
			int num8 = 0;
			Stopwatch stopwatch2 = new Stopwatch();
			stopwatch2.Start();
			while (!Netplay.disconnect)
			{
				double num9 = (double)stopwatch.ElapsedMilliseconds;
				if (num9 + num7 >= num6)
				{
					num8++;
					num7 += num9 - num6;
					stopwatch.Reset();
					stopwatch.Start();
					if (Main.oldStatusText != Main.statusText)
					{
						Main.oldStatusText = Main.statusText;
						Console.WriteLine(Main.statusText);
					}
					if (Netplay.anyClients)
					{
						this.Update(new GameTime());
					}
					double num10 = (double)stopwatch.ElapsedMilliseconds + num7;
					if (num10 < num6)
					{
						int num11 = (int)(num6 - num10) - 1;
						if (num11 > 1)
						{
							Thread.Sleep(num11 - 1);
							if (!Netplay.anyClients)
							{
								num7 = 0.0;
								Thread.Sleep(10);
							}
						}
					}
				}
				Thread.Sleep(0);
			}
		}
		public static void startDedInput()
		{
			ThreadPool.QueueUserWorkItem(new WaitCallback(Main.startDedInputCallBack), 1);
		}
		public static void startDedInputCallBack(object threadContext)
		{
			while (!Netplay.disconnect)
			{
				Console.Write(": ");
				string text = Console.ReadLine();
				string text2 = text;
				text = text.ToLower();
				try
				{
					if (text == "help")
					{
						Console.WriteLine("Available commands:");
						Console.WriteLine("");
						Console.WriteLine(string.Concat(new object[]
						{
							"help ",
							'\t',
							'\t',
							" Displays a list of commands."
						}));
						Console.WriteLine("playing " + '\t' + " Shows the list of players");
						Console.WriteLine(string.Concat(new object[]
						{
							"clear ",
							'\t',
							'\t',
							" Clear the console window."
						}));
						Console.WriteLine(string.Concat(new object[]
						{
							"exit ",
							'\t',
							'\t',
							" Shutdown the server and save."
						}));
						Console.WriteLine("exit-nosave " + '\t' + " Shutdown the server without saving.");
						Console.WriteLine(string.Concat(new object[]
						{
							"save ",
							'\t',
							'\t',
							" Save the game world."
						}));
						Console.WriteLine("kick <player> " + '\t' + " Kicks a player from the server.");
						Console.WriteLine("ban <player> " + '\t' + " Bans a player from the server.");
						Console.WriteLine("password" + '\t' + " Show password.");
						Console.WriteLine("password <pass>" + '\t' + " Change password.");
						Console.WriteLine(string.Concat(new object[]
						{
							"version",
							'\t',
							'\t',
							" Print version number."
						}));
						Console.WriteLine(string.Concat(new object[]
						{
							"time",
							'\t',
							'\t',
							" Display game time."
						}));
						Console.WriteLine(string.Concat(new object[]
						{
							"port",
							'\t',
							'\t',
							" Print the listening port."
						}));
						Console.WriteLine("maxplayers" + '\t' + " Print the max number of players.");
						Console.WriteLine("say <words>" + '\t' + " Send a message.");
						Console.WriteLine(string.Concat(new object[]
						{
							"motd",
							'\t',
							'\t',
							" Print MOTD."
						}));
						Console.WriteLine("motd <words>" + '\t' + " Change MOTD.");
						Console.WriteLine(string.Concat(new object[]
						{
							"dawn",
							'\t',
							'\t',
							" Change time to dawn."
						}));
						Console.WriteLine(string.Concat(new object[]
						{
							"noon",
							'\t',
							'\t',
							" Change time to noon."
						}));
						Console.WriteLine(string.Concat(new object[]
						{
							"dusk",
							'\t',
							'\t',
							" Change time to dusk."
						}));
						Console.WriteLine("midnight" + '\t' + " Change time to midnight.");
						Console.WriteLine(string.Concat(new object[]
						{
							"settle",
							'\t',
							'\t',
							" Settle all water."
						}));
					}
					else
					{
						if (text == "settle")
						{
							if (!Liquid.panicMode)
							{
								Liquid.StartPanic();
							}
							else
							{
								Console.WriteLine("Water is already settling");
							}
						}
						else
						{
							if (text == "dawn")
							{
								Main.dayTime = true;
								Main.time = 0.0;
								NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
							}
							else
							{
								if (text == "dusk")
								{
									Main.dayTime = false;
									Main.time = 0.0;
									NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
								}
								else
								{
									if (text == "noon")
									{
										Main.dayTime = true;
										Main.time = 27000.0;
										NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
									}
									else
									{
										if (text == "midnight")
										{
											Main.dayTime = false;
											Main.time = 16200.0;
											NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
										}
										else
										{
											if (text == "exit-nosave")
											{
												Netplay.disconnect = true;
											}
											else
											{
												if (text == "exit")
												{
													WorldFile.saveWorld(false);
													Netplay.disconnect = true;
												}
												else
												{
													if (text == "fps")
													{
														if (!Main.dedServFPS)
														{
															Main.dedServFPS = true;
															Main.fpsTimer.Reset();
														}
														else
														{
															Main.dedServCount1 = 0;
															Main.dedServCount2 = 0;
															Main.dedServFPS = false;
														}
													}
													else
													{
														if (text == "save")
														{
															WorldFile.saveWorld(false);
														}
														else
														{
															if (text == "time")
															{
																string text3 = "AM";
																double num = Main.time;
																if (!Main.dayTime)
																{
																	num += 54000.0;
																}
																num = num / 86400.0 * 24.0;
																double num2 = 7.5;
																num = num - num2 - 12.0;
																if (num < 0.0)
																{
																	num += 24.0;
																}
																if (num >= 12.0)
																{
																	text3 = "PM";
																}
																int num3 = (int)num;
																double num4 = num - (double)num3;
																num4 = (double)((int)(num4 * 60.0));
																string text4 = string.Concat(num4);
																if (num4 < 10.0)
																{
																	text4 = "0" + text4;
																}
																if (num3 > 12)
																{
																	num3 -= 12;
																}
																if (num3 == 0)
																{
																	num3 = 12;
																}
																Console.WriteLine(string.Concat(new object[]
																{
																	"Time: ",
																	num3,
																	":",
																	text4,
																	" ",
																	text3
																}));
															}
															else
															{
																if (text == "maxplayers")
																{
																	Console.WriteLine("Player limit: " + Main.maxNetPlayers);
																}
																else
																{
																	if (text == "port")
																	{
																		Console.WriteLine("Port: " + Netplay.serverPort);
																	}
																	else
																	{
																		if (text == "version")
																		{
																			Console.WriteLine("Terraria Server " + Main.versionNumber);
																		}
																		else
																		{
																			if (text == "clear")
																			{
																				try
																				{
																					Console.Clear();
																					continue;
																				}
																				catch
																				{
																					continue;
																				}
																			}
																			if (text == "playing")
																			{
																				int num5 = 0;
																				for (int i = 0; i < 255; i++)
																				{
																					if (Main.player[i].active)
																					{
																						num5++;
																						Console.WriteLine(string.Concat(new object[]
																						{
																							Main.player[i].name,
																							" (",
																							Netplay.serverSock[i].tcpClient.Client.RemoteEndPoint,
																							")"
																						}));
																					}
																				}
																				if (num5 == 0)
																				{
																					Console.WriteLine("No players connected.");
																				}
																				else
																				{
																					if (num5 == 1)
																					{
																						Console.WriteLine("1 player connected.");
																					}
																					else
																					{
																						Console.WriteLine(num5 + " players connected.");
																					}
																				}
																			}
																			else
																			{
																				if (!(text == ""))
																				{
																					if (text == "motd")
																					{
																						if (Main.motd == "")
																						{
																							Console.WriteLine("Welcome to " + Main.worldName + "!");
																						}
																						else
																						{
																							Console.WriteLine("MOTD: " + Main.motd);
																						}
																					}
																					else
																					{
																						if (text.Length >= 5 && text.Substring(0, 5) == "motd ")
																						{
																							string text5 = text2.Substring(5);
																							Main.motd = text5;
																						}
																						else
																						{
																							if (text.Length == 8 && text.Substring(0, 8) == "password")
																							{
																								if (Netplay.password == "")
																								{
																									Console.WriteLine("No password set.");
																								}
																								else
																								{
																									Console.WriteLine("Password: " + Netplay.password);
																								}
																							}
																							else
																							{
																								if (text.Length >= 9 && text.Substring(0, 9) == "password ")
																								{
																									string password = text2.Substring(9);
																									if (password == "")
																									{
																										Netplay.password = "";
																										Console.WriteLine("Password disabled.");
																									}
																									else
																									{
																										Netplay.password = password;
																										Console.WriteLine("Password: " + Netplay.password);
																									}
																								}
																								else
																								{
																									if (text == "say")
																									{
																										Console.WriteLine("Usage: say <words>");
																									}
																									else
																									{
																										if (text.Length >= 4 && text.Substring(0, 4) == "say ")
																										{
																											string str = text2.Substring(4);
																											if (str == "")
																											{
																												Console.WriteLine("Usage: say <words>");
																											}
																											else
																											{
																												Console.WriteLine("<Server> " + str);
																												NetMessage.SendData(25, -1, -1, "<Server> " + str, 255, 255f, 240f, 20f, 0);
																											}
																										}
																										else
																										{
																											if (text.Length == 4 && text.Substring(0, 4) == "kick")
																											{
																												Console.WriteLine("Usage: kick <player>");
																											}
																											else
																											{
																												if (text.Length >= 5 && text.Substring(0, 5) == "kick ")
																												{
																													string text6 = text.Substring(5);
																													text6 = text6.ToLower();
																													if (text6 == "")
																													{
																														Console.WriteLine("Usage: kick <player>");
																													}
																													else
																													{
																														for (int j = 0; j < 255; j++)
																														{
																															if (Main.player[j].active && Main.player[j].name.ToLower() == text6)
																															{
																																NetMessage.SendData(2, j, -1, "Kicked from server.", 0, 0f, 0f, 0f, 0);
																															}
																														}
																													}
																												}
																												else
																												{
																													if (text.Length == 3 && text.Substring(0, 3) == "ban")
																													{
																														Console.WriteLine("Usage: ban <player>");
																													}
																													else
																													{
																														if (text.Length >= 4 && text.Substring(0, 4) == "ban ")
																														{
																															string text7 = text.Substring(4);
																															text7 = text7.ToLower();
																															if (text7 == "")
																															{
																																Console.WriteLine("Usage: ban <player>");
																															}
																															else
																															{
																																for (int k = 0; k < 255; k++)
																																{
																																	if (Main.player[k].active && Main.player[k].name.ToLower() == text7)
																																	{
																																		Netplay.AddBan(k);
																																		NetMessage.SendData(2, k, -1, "Banned from server.", 0, 0f, 0f, 0f, 0);
																																	}
																																}
																															}
																														}
																														else
																														{
																															Console.WriteLine("Invalid command.");
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				catch
				{
					Console.WriteLine("Invalid command.");
				}
			}
		}
		public Main()
		{
			Main.graphics = new GraphicsDeviceManager(this);
			base.Content.RootDirectory = "Content";
		}
		protected void SetTitle()
		{
			base.Window.Title = Lang.title();
		}
		protected override void Initialize()
		{
			Chest.Initialize();
			Lighting.Initialize();
			Map.Initialize();
			WorldGen.randomBackgrounds();
			WorldGen.setCaveBacks();
			WorldGen.randMoon();
			Main.bgAlpha[0] = 1f;
			Main.bgAlpha2[0] = 1f;
			this.invBottom = 258;
			for (int i = 0; i < 360; i++)
			{
				Main.projFrames[i] = 1;
			}
			Main.projFrames[334] = 11;
			Main.projFrames[324] = 10;
			Main.projFrames[351] = 2;
			Main.projFrames[349] = 5;
			Main.projFrames[353] = 14;
			Main.projFrames[346] = 2;
			Main.projFrames[347] = 2;
			Main.projFrames[335] = 4;
			Main.projFrames[344] = 3;
			Main.projFrames[337] = 5;
			Main.projFrames[317] = 8;
			Main.projFrames[321] = 3;
			Main.projFrames[308] = 10;
			Main.projFrames[316] = 4;
			Main.projFrames[275] = 2;
			Main.projFrames[276] = 2;
			Main.projFrames[254] = 5;
			Main.projFrames[307] = 2;
			Main.projFrames[72] = 4;
			Main.projFrames[86] = 4;
			Main.projFrames[87] = 4;
			Main.projFrames[102] = 2;
			Main.projFrames[111] = 8;
			Main.projFrames[112] = 3;
			Main.projFrames[127] = 16;
			Main.projFrames[175] = 2;
			Main.projFrames[181] = 4;
			Main.projFrames[189] = 4;
			Main.projFrames[191] = 18;
			Main.projFrames[192] = 18;
			Main.projFrames[193] = 18;
			Main.projFrames[194] = 18;
			Main.projFrames[190] = 4;
			Main.projFrames[198] = 4;
			Main.projFrames[199] = 8;
			Main.projFrames[200] = 10;
			Main.projFrames[206] = 5;
			Main.projFrames[208] = 5;
			Main.projFrames[209] = 12;
			Main.projFrames[210] = 12;
			Main.projFrames[211] = 10;
			Main.projFrames[221] = 3;
			Main.projFrames[237] = 4;
			Main.projFrames[238] = 6;
			Main.projFrames[221] = 3;
			Main.projFrames[228] = 5;
			Main.projFrames[229] = 4;
			Main.projFrames[236] = 13;
			Main.projFrames[243] = 4;
			Main.projFrames[244] = 6;
			Main.projFrames[249] = 5;
			Main.projFrames[252] = 4;
			Main.projFrames[266] = 6;
			Main.projFrames[268] = 8;
			Main.projFrames[269] = 7;
			Main.projFrames[270] = 3;
			Main.projFrames[313] = 12;
			Main.projFrames[314] = 13;
			Main.projFrames[319] = 11;
			Main.projPet[319] = true;
			Main.projPet[334] = true;
			Main.projPet[324] = true;
			Main.projPet[266] = true;
			Main.projPet[313] = true;
			Main.projPet[314] = true;
			Main.projPet[317] = true;
			Main.projPet[175] = true;
			Main.projPet[111] = true;
			Main.projPet[112] = true;
			Main.projPet[127] = true;
			Main.projPet[191] = true;
			Main.projPet[192] = true;
			Main.projPet[193] = true;
			Main.projPet[194] = true;
			Main.projPet[197] = true;
			Main.projPet[198] = true;
			Main.projPet[199] = true;
			Main.projPet[200] = true;
			Main.projPet[208] = true;
			Main.projPet[209] = true;
			Main.projPet[210] = true;
			Main.projPet[211] = true;
			Main.projPet[236] = true;
			Main.projPet[268] = true;
			Main.projPet[269] = true;
			Main.projPet[353] = true;
			Main.tileLighted[237] = true;
			Main.debuff[20] = true;
			Main.debuff[21] = true;
			Main.debuff[22] = true;
			Main.debuff[23] = true;
			Main.debuff[24] = true;
			Main.debuff[25] = true;
			Main.debuff[28] = true;
			Main.debuff[30] = true;
			Main.debuff[31] = true;
			Main.debuff[32] = true;
			Main.debuff[33] = true;
			Main.debuff[34] = true;
			Main.debuff[35] = true;
			Main.debuff[36] = true;
			Main.debuff[37] = true;
			Main.debuff[38] = true;
			Main.debuff[39] = true;
			Main.debuff[44] = true;
			Main.debuff[46] = true;
			Main.debuff[47] = true;
			Main.debuff[67] = true;
			Main.debuff[68] = true;
			Main.debuff[69] = true;
			Main.debuff[70] = true;
			Main.debuff[80] = true;
			Main.debuff[86] = true;
			Main.debuff[87] = true;
			Main.debuff[88] = true;
			Main.debuff[89] = true;
			Main.debuff[94] = true;
			Main.debuff[103] = true;
			Main.pvpBuff[20] = true;
			Main.pvpBuff[24] = true;
			Main.pvpBuff[31] = true;
			Main.pvpBuff[39] = true;
			Main.pvpBuff[44] = true;
			Main.pvpBuff[20] = true;
			Main.pvpBuff[69] = true;
			Main.pvpBuff[103] = true;
			Main.meleeBuff[71] = true;
			Main.meleeBuff[73] = true;
			Main.meleeBuff[74] = true;
			Main.meleeBuff[75] = true;
			Main.meleeBuff[76] = true;
			Main.meleeBuff[77] = true;
			Main.meleeBuff[78] = true;
			Main.meleeBuff[79] = true;
			Main.vanityPet[40] = true;
			Main.vanityPet[41] = true;
			Main.vanityPet[42] = true;
			Main.vanityPet[45] = true;
			Main.vanityPet[50] = true;
			Main.vanityPet[51] = true;
			Main.vanityPet[52] = true;
			Main.vanityPet[53] = true;
			Main.vanityPet[54] = true;
			Main.vanityPet[55] = true;
			Main.vanityPet[56] = true;
			Main.vanityPet[61] = true;
			Main.vanityPet[65] = true;
			Main.vanityPet[66] = true;
			Main.vanityPet[81] = true;
			Main.vanityPet[82] = true;
			Main.vanityPet[84] = true;
			Main.vanityPet[85] = true;
			Main.vanityPet[91] = true;
			Main.vanityPet[92] = true;
			Main.lightPet[19] = true;
			Main.lightPet[27] = true;
			Main.lightPet[101] = true;
			Main.lightPet[102] = true;
			Main.lightPet[57] = true;
			Main.tileFlame[4] = true;
			Main.tileFlame[33] = true;
			Main.tileFlame[34] = true;
			Main.tileFlame[35] = true;
			Main.tileFlame[49] = true;
			Main.tileFlame[93] = true;
			Main.tileFlame[98] = true;
			Main.tileFlame[100] = true;
			Main.tileFlame[173] = true;
			Main.tileFlame[174] = true;
			Main.tileRope[213] = true;
			Main.tileRope[214] = true;
			for (int j = 0; j < 369; j++)
			{
				Main.npcCatchable[j] = false;
			}
			Main.npcCatchable[46] = true;
			Main.npcCatchable[55] = true;
			Main.npcCatchable[74] = true;
			Main.npcCatchable[148] = true;
			Main.npcCatchable[149] = true;
			Main.npcCatchable[297] = true;
			Main.npcCatchable[298] = true;
			Main.npcCatchable[299] = true;
			Main.npcCatchable[300] = true;
			Main.npcCatchable[355] = true;
			Main.npcCatchable[356] = true;
			Main.npcCatchable[357] = true;
			Main.npcCatchable[358] = true;
			Main.npcCatchable[359] = true;
			Main.npcCatchable[360] = true;
			Main.npcCatchable[361] = true;
			Main.npcCatchable[362] = true;
			Main.npcCatchable[363] = true;
			Main.npcCatchable[364] = true;
			Main.npcCatchable[365] = true;
			Main.npcCatchable[366] = true;
			Main.npcCatchable[367] = true;
			Main.tileSolid[232] = true;
			Main.tileSolid[311] = true;
			Main.tileSolid[312] = true;
			Main.tileSolid[313] = true;
			Main.tileMergeDirt[311] = true;
			Main.tileShine[239] = 1100;
			Main.tileSolid[239] = true;
			Main.tileSolidTop[239] = true;
			Main.tileFrameImportant[300] = true;
			Main.tileFrameImportant[301] = true;
			Main.tileFrameImportant[302] = true;
			Main.tileFrameImportant[303] = true;
			Main.tileFrameImportant[304] = true;
			Main.tileFrameImportant[305] = true;
			Main.tileFrameImportant[306] = true;
			Main.tileFrameImportant[307] = true;
			Main.tileFrameImportant[308] = true;
			Main.tileFrameImportant[283] = true;
			Main.tileFrameImportant[288] = true;
			Main.tileFrameImportant[289] = true;
			Main.tileFrameImportant[290] = true;
			Main.tileFrameImportant[291] = true;
			Main.tileFrameImportant[292] = true;
			Main.tileFrameImportant[293] = true;
			Main.tileFrameImportant[294] = true;
			Main.tileFrameImportant[295] = true;
			Main.tileFrameImportant[296] = true;
			Main.tileFrameImportant[297] = true;
			Main.tileLargeFrames[284] = 1;
			Main.tileSolid[284] = true;
			Main.tileBlockLight[284] = true;
			Main.tileFrameImportant[36] = true;
			Main.tileFrameImportant[275] = true;
			Main.tileFrameImportant[276] = true;
			Main.tileFrameImportant[277] = true;
			Main.tileFrameImportant[278] = true;
			Main.tileFrameImportant[279] = true;
			Main.tileFrameImportant[280] = true;
			Main.tileFrameImportant[281] = true;
			Main.tileFrameImportant[282] = true;
			Main.tileFrameImportant[285] = true;
			Main.tileFrameImportant[286] = true;
			Main.tileFrameImportant[309] = true;
			Main.tileFrameImportant[310] = true;
			Main.tileLighted[286] = true;
			Main.tileFrameImportant[298] = true;
			Main.tileFrameImportant[299] = true;
			Main.tileSolid[170] = true;
			Main.tileFrameImportant[171] = true;
			Main.tileLighted[171] = true;
			Main.tileFrameImportant[247] = true;
			Main.tileFrameImportant[245] = true;
			Main.tileFrameImportant[246] = true;
			Main.tileFrameImportant[239] = true;
			Main.tileFrameImportant[240] = true;
			Main.tileFrameImportant[241] = true;
			Main.tileFrameImportant[242] = true;
			Main.tileFrameImportant[243] = true;
			Main.tileFrameImportant[244] = true;
			Main.tileFrameImportant[254] = true;
			Main.tileSolid[221] = true;
			Main.tileBlockLight[221] = true;
			Main.tileMergeDirt[221] = true;
			Main.tileLighted[96] = true;
			Main.tileMergeDirt[250] = true;
			Main.tileSolid[272] = true;
			Main.tileBlockLight[272] = true;
			Main.tileSolid[229] = true;
			Main.tileBlockLight[229] = true;
			Main.tileMergeDirt[229] = true;
			Main.tileSolid[230] = true;
			Main.tileBlockLight[230] = true;
			Main.tileMergeDirt[230] = true;
			Main.tileSolid[222] = true;
			Main.tileBlockLight[222] = true;
			Main.tileMergeDirt[222] = true;
			Main.tileSolid[223] = true;
			Main.tileBlockLight[223] = true;
			Main.tileMergeDirt[223] = true;
			Main.tileSolid[224] = true;
			Main.tileBlockLight[224] = true;
			Main.tileFrameImportant[237] = true;
			Main.tileFrameImportant[238] = true;
			Main.tileSolid[225] = true;
			Main.tileBlockLight[225] = true;
			Main.tileBrick[225] = true;
			Main.tileSolid[226] = true;
			Main.tileBlockLight[226] = true;
			Main.tileBrick[226] = true;
			Main.tileSolid[235] = true;
			Main.tileBlockLight[235] = true;
			Main.tileFrameImportant[235] = true;
			Main.tileLighted[238] = true;
			Main.tileFrameImportant[236] = true;
			Main.tileCut[236] = true;
			Main.tileSolid[191] = true;
			Main.tileBrick[191] = true;
			Main.tileBlockLight[191] = true;
			Main.tileSolid[211] = true;
			Main.tileBlockLight[211] = true;
			Main.tileSolid[208] = true;
			Main.tileBrick[208] = true;
			Main.tileBlockLight[208] = true;
			Main.tileSolid[192] = true;
			Main.tileBrick[192] = true;
			Main.tileBlockLight[192] = true;
			Main.tileSolid[193] = true;
			Main.tileBrick[193] = true;
			Main.tileBlockLight[193] = true;
			Main.tileMergeDirt[193] = true;
			Main.tileSolid[194] = true;
			Main.tileBrick[194] = true;
			Main.tileBlockLight[194] = true;
			Main.tileSolid[195] = true;
			Main.tileBrick[195] = true;
			Main.tileMergeDirt[195] = true;
			Main.tileBlockLight[195] = true;
			Main.tileBlockLight[200] = true;
			Main.tileSolid[200] = true;
			Main.tileBrick[200] = true;
			Main.tileBlockLight[203] = true;
			Main.tileSolid[203] = true;
			Main.tileMergeDirt[203] = true;
			Main.tileBlockLight[204] = true;
			Main.tileSolid[204] = true;
			Main.tileMergeDirt[204] = true;
			Main.tileBlockLight[165] = true;
			Main.tileShine2[147] = true;
			Main.tileShine2[161] = true;
			Main.tileShine2[163] = true;
			Main.tileShine2[164] = true;
			Main.tileSolid[189] = true;
			Main.tileBlockLight[51] = true;
			Main.tileLighted[204] = true;
			Main.tileShine[204] = 1150;
			Main.tileShine2[204] = true;
			Main.tileSolid[190] = true;
			Main.tileBlockLight[190] = true;
			Main.tileBrick[190] = true;
			Main.tileSolid[198] = true;
			Main.tileMergeDirt[198] = true;
			Main.tileBrick[198] = true;
			Main.tileBlockLight[198] = true;
			Main.tileSolid[206] = true;
			Main.tileBlockLight[206] = true;
			Main.tileMergeDirt[206] = true;
			Main.tileBrick[206] = true;
			Main.tileBlockLight[234] = true;
			Main.tileSolid[248] = true;
			Main.tileSolid[249] = true;
			Main.tileSolid[250] = true;
			Main.tileBrick[248] = true;
			Main.tileBrick[249] = true;
			Main.tileBrick[250] = true;
			Main.tileSolid[251] = true;
			Main.tileSolid[252] = true;
			Main.tileBrick[252] = true;
			Main.tileSolid[253] = true;
			Main.tileBrick[253] = true;
			Main.tileMergeDirt[251] = true;
			Main.tileMergeDirt[252] = true;
			Main.tileMergeDirt[253] = true;
			Main.tileBlockLight[251] = true;
			Main.tileBlockLight[252] = true;
			Main.tileBlockLight[253] = true;
			Main.tileBlockLight[248] = true;
			Main.tileBlockLight[249] = true;
			Main.tileBlockLight[250] = true;
			Main.tileLargeFrames[273] = 1;
			Main.tileSolid[273] = true;
			Main.tileBlockLight[273] = true;
			Main.tileLargeFrames[274] = 1;
			Main.tileSolid[274] = true;
			Main.tileBlockLight[274] = true;
			for (int k = 255; k <= 268; k++)
			{
				Main.tileSolid[k] = true;
				if (k > 261)
				{
					Main.tileLighted[k] = true;
					Main.tileShine2[k] = true;
				}
			}
			Main.tileFrameImportant[269] = true;
			Main.wallHouse[142] = true;
			Main.wallHouse[143] = true;
			Main.wallHouse[144] = true;
			Main.wallHouse[133] = true;
			Main.wallHouse[134] = true;
			Main.wallHouse[135] = true;
			Main.wallHouse[136] = true;
			Main.wallHouse[137] = true;
			Main.wallHouse[75] = true;
			Main.wallHouse[76] = true;
			Main.wallHouse[78] = true;
			Main.wallHouse[82] = true;
			Main.wallHouse[77] = true;
			Main.wallHouse[1] = true;
			Main.wallHouse[4] = true;
			Main.wallHouse[5] = true;
			Main.wallHouse[6] = true;
			Main.wallHouse[10] = true;
			Main.wallHouse[11] = true;
			Main.wallHouse[12] = true;
			Main.wallHouse[16] = true;
			Main.wallHouse[17] = true;
			Main.wallHouse[18] = true;
			Main.wallHouse[19] = true;
			Main.wallHouse[20] = true;
			Main.wallHouse[21] = true;
			Main.wallHouse[22] = true;
			Main.wallHouse[23] = true;
			Main.wallHouse[24] = true;
			Main.wallHouse[25] = true;
			Main.wallHouse[26] = true;
			Main.wallHouse[27] = true;
			Main.wallHouse[29] = true;
			Main.wallHouse[30] = true;
			Main.wallHouse[31] = true;
			Main.wallHouse[32] = true;
			Main.wallHouse[33] = true;
			Main.wallHouse[34] = true;
			Main.wallHouse[35] = true;
			Main.wallHouse[36] = true;
			Main.wallHouse[37] = true;
			Main.wallHouse[38] = true;
			Main.wallHouse[39] = true;
			Main.wallHouse[41] = true;
			Main.wallHouse[42] = true;
			Main.wallHouse[43] = true;
			Main.wallHouse[44] = true;
			Main.wallHouse[45] = true;
			Main.wallHouse[46] = true;
			Main.wallHouse[47] = true;
			Main.wallHouse[66] = true;
			Main.wallHouse[67] = true;
			Main.wallHouse[68] = true;
			Main.wallHouse[72] = true;
			Main.wallHouse[73] = true;
			Main.wallHouse[107] = true;
			Main.wallHouse[106] = true;
			Main.wallHouse[109] = true;
			Main.wallHouse[110] = true;
			Main.wallHouse[111] = true;
			Main.wallHouse[112] = true;
			Main.wallHouse[113] = true;
			Main.wallHouse[114] = true;
			Main.wallHouse[115] = true;
			Main.wallHouse[116] = true;
			Main.wallHouse[117] = true;
			Main.wallHouse[118] = true;
			Main.wallHouse[119] = true;
			Main.wallHouse[120] = true;
			Main.wallHouse[121] = true;
			Main.wallHouse[122] = true;
			Main.wallHouse[123] = true;
			Main.wallHouse[124] = true;
			Main.wallHouse[125] = true;
			Main.wallHouse[108] = true;
			Main.wallHouse[101] = true;
			Main.wallHouse[102] = true;
			Main.wallHouse[103] = true;
			Main.wallHouse[104] = true;
			Main.wallHouse[105] = true;
			Main.wallHouse[84] = true;
			Main.wallHouse[74] = true;
			Main.wallHouse[85] = true;
			Main.wallHouse[88] = true;
			Main.wallHouse[89] = true;
			Main.wallHouse[90] = true;
			Main.wallHouse[91] = true;
			Main.wallHouse[92] = true;
			Main.wallHouse[93] = true;
			Main.wallHouse[126] = true;
			Main.wallHouse[127] = true;
			Main.wallHouse[128] = true;
			Main.wallHouse[129] = true;
			Main.wallHouse[130] = true;
			Main.wallHouse[131] = true;
			Main.wallHouse[132] = true;
			Main.wallHouse[138] = true;
			Main.wallHouse[139] = true;
			Main.wallHouse[140] = true;
			Main.wallHouse[141] = true;
			for (int l = 0; l < 145; l++)
			{
				Main.wallDungeon[l] = false;
			}
			Main.wallLight[0] = true;
			Main.wallLight[21] = true;
			Main.wallLight[106] = true;
			Main.wallLight[107] = true;
			Main.wallDungeon[7] = true;
			Main.wallDungeon[8] = true;
			Main.wallDungeon[9] = true;
			Main.wallDungeon[94] = true;
			Main.wallDungeon[95] = true;
			Main.wallDungeon[96] = true;
			Main.wallDungeon[97] = true;
			Main.wallDungeon[98] = true;
			Main.wallDungeon[99] = true;
			for (int m = 0; m < 10; m++)
			{
				Main.recentWorld[m] = "";
				Main.recentIP[m] = "";
				Main.recentPort[m] = 0;
			}
			if (Main.rand == null)
			{
				Main.rand = new Random((int)DateTime.Now.Ticks);
			}
			if (WorldGen.genRand == null)
			{
				WorldGen.genRand = new Random((int)DateTime.Now.Ticks);
			}
			this.SetTitle();
			Main.lo = Main.rand.Next(6);
			Main.critterCage = true;
			for (int n = 0; n < 3600; n++)
			{
				Main.CritterCages();
			}
			Main.critterCage = false;
			Main.tileBrick[1] = true;
			Main.tileBrick[54] = true;
			Main.tileBrick[118] = true;
			Main.tileBrick[119] = true;
			Main.tileBrick[120] = true;
			Main.tileBrick[121] = true;
			Main.tileBrick[122] = true;
			Main.tileBrick[140] = true;
			Main.tileBrick[148] = true;
			Main.tileBrick[150] = true;
			Main.tileBrick[151] = true;
			Main.tileBrick[152] = true;
			Main.tileBrick[30] = true;
			Main.tileBrick[38] = true;
			Main.tileBrick[39] = true;
			Main.tileBrick[41] = true;
			Main.tileBrick[43] = true;
			Main.tileBrick[44] = true;
			Main.tileBrick[45] = true;
			Main.tileBrick[46] = true;
			Main.tileBrick[47] = true;
			Main.tileBrick[75] = true;
			Main.tileBrick[76] = true;
			Main.tileBrick[160] = true;
			Main.tileBrick[2] = true;
			Main.tileBrick[199] = true;
			Main.tileBrick[23] = true;
			Main.tileBrick[60] = true;
			Main.tileBrick[70] = true;
			Main.tileBrick[109] = true;
			Main.tileBrick[53] = true;
			Main.tileBrick[116] = true;
			Main.tileBrick[234] = true;
			Main.tileBrick[112] = true;
			Main.tileBrick[147] = true;
			Main.tileBrick[153] = true;
			Main.tileBrick[154] = true;
			Main.tileBrick[155] = true;
			Main.tileBrick[156] = true;
			Main.tileBrick[157] = true;
			Main.tileBrick[158] = true;
			Main.tileBrick[159] = true;
			Main.tileMergeDirt[202] = true;
			Main.tileBrick[202] = true;
			Main.tileSolid[202] = true;
			Main.tileBlockLight[202] = true;
			Main.tileBrick[161] = true;
			Main.tileBlockLight[161] = true;
			Main.tileBlockLight[163] = true;
			Main.tileBlockLight[164] = true;
			Main.tileSolid[188] = true;
			Main.tileBlockLight[188] = true;
			Main.tileBrick[188] = true;
			Main.tileMergeDirt[188] = true;
			Main.tileBrick[179] = true;
			Main.tileSolid[179] = true;
			Main.tileBlockLight[179] = true;
			Main.tileMoss[179] = true;
			Main.tileBrick[180] = true;
			Main.tileSolid[180] = true;
			Main.tileBlockLight[180] = true;
			Main.tileMoss[180] = true;
			Main.tileBrick[181] = true;
			Main.tileSolid[181] = true;
			Main.tileBlockLight[181] = true;
			Main.tileMoss[181] = true;
			Main.tileBrick[182] = true;
			Main.tileSolid[182] = true;
			Main.tileBlockLight[182] = true;
			Main.tileMoss[182] = true;
			Main.tileBrick[183] = true;
			Main.tileSolid[183] = true;
			Main.tileBlockLight[183] = true;
			Main.tileMoss[183] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[190] = true;
			Main.tileSolid[196] = true;
			Main.tileSolid[197] = true;
			Main.tileMergeDirt[197] = true;
			Main.tileBlockLight[197] = true;
			Main.tileNoSunLight[197] = true;
			Main.tileBrick[175] = true;
			Main.tileSolid[175] = true;
			Main.tileBlockLight[175] = true;
			Main.tileBrick[176] = true;
			Main.tileSolid[176] = true;
			Main.tileBlockLight[176] = true;
			Main.tileBrick[177] = true;
			Main.tileSolid[177] = true;
			Main.tileBlockLight[177] = true;
			Main.tileBrick[225] = true;
			Main.tileBrick[229] = true;
			Main.tileShine[221] = 925;
			Main.tileShine[222] = 875;
			Main.tileShine[223] = 825;
			Main.tileShine2[221] = true;
			Main.tileShine2[222] = true;
			Main.tileShine2[223] = true;
			Main.tileMergeDirt[175] = true;
			Main.tileMergeDirt[176] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[208] = true;
			Main.tileBrick[162] = true;
			Main.tileSolid[162] = true;
			Main.tileBrick[163] = true;
			Main.tileSolid[163] = true;
			Main.tileBrick[164] = true;
			Main.tileSolid[164] = true;
			Main.tileShine2[6] = true;
			Main.tileShine2[7] = true;
			Main.tileShine2[8] = true;
			Main.tileShine2[9] = true;
			Main.tileShine2[166] = true;
			Main.tileShine2[167] = true;
			Main.tileShine2[168] = true;
			Main.tileShine2[169] = true;
			Main.tileShine2[12] = true;
			Main.tileShine2[21] = true;
			Main.tileShine2[22] = true;
			Main.tileShine2[25] = true;
			Main.tileShine2[45] = true;
			Main.tileShine2[46] = true;
			Main.tileShine2[47] = true;
			Main.tileShine2[63] = true;
			Main.tileShine2[64] = true;
			Main.tileShine2[65] = true;
			Main.tileShine2[66] = true;
			Main.tileShine2[67] = true;
			Main.tileShine2[68] = true;
			Main.tileShine2[107] = true;
			Main.tileShine2[108] = true;
			Main.tileShine2[111] = true;
			Main.tileShine2[121] = true;
			Main.tileShine2[122] = true;
			Main.tileShine2[117] = true;
			Main.tileShine2[211] = true;
			Main.tileShine[129] = 300;
			Main.tileNoFail[129] = true;
			Main.tileNoFail[192] = true;
			Main.tileHammer[26] = true;
			Main.tileHammer[31] = true;
			Main.tileAxe[5] = true;
			Main.tileAxe[72] = true;
			Main.tileAxe[80] = true;
			Main.tileBrick[59] = true;
			Main.tileBrick[234] = true;
			Main.tileSolid[234] = true;
			Main.tileMergeDirt[234] = true;
			Main.tileSand[53] = true;
			Main.tileSand[112] = true;
			Main.tileSand[116] = true;
			Main.tileSand[234] = true;
			Main.tileFrameImportant[233] = true;
			Main.tileLighted[215] = true;
			Main.tileFrameImportant[227] = true;
			Main.tileFrameImportant[228] = true;
			Main.tileFrameImportant[231] = true;
			Main.tileCut[231] = true;
			Main.tileFrameImportant[216] = true;
			Main.tileFrameImportant[217] = true;
			Main.tileFrameImportant[218] = true;
			Main.tileFrameImportant[219] = true;
			Main.tileFrameImportant[220] = true;
			Main.tileFrameImportant[165] = true;
			Main.tileFrameImportant[209] = true;
			Main.tileFrameImportant[215] = true;
			Main.tileFrameImportant[210] = true;
			Main.tileFrameImportant[212] = true;
			Main.tileFrameImportant[207] = true;
			Main.tileFrameImportant[178] = true;
			Main.tileFrameImportant[184] = true;
			Main.tileFrameImportant[185] = true;
			Main.tileFrameImportant[186] = true;
			Main.tileFrameImportant[187] = true;
			Main.tileFrameImportant[173] = true;
			Main.tileFrameImportant[174] = true;
			Main.tileLighted[173] = true;
			Main.tileLighted[174] = true;
			Main.tileFrameImportant[139] = true;
			Main.tileLighted[160] = true;
			Main.tileLighted[149] = true;
			Main.tileFrameImportant[149] = true;
			Main.tileFrameImportant[142] = true;
			Main.tileFrameImportant[143] = true;
			Main.tileFrameImportant[144] = true;
			Main.tileStone[131] = true;
			Main.tileFrameImportant[136] = true;
			Main.tileFrameImportant[137] = true;
			Main.tileFrameImportant[138] = true;
			Main.tileBlockLight[137] = true;
			Main.tileSolid[137] = true;
			Main.tileBlockLight[160] = true;
			Main.tileSolid[160] = true;
			Main.tileMergeDirt[160] = true;
			Main.tileBlockLight[161] = true;
			Main.tileSolid[161] = true;
			Main.tileBlockLight[145] = true;
			Main.tileSolid[145] = true;
			Main.tileMergeDirt[145] = true;
			Main.tileBlockLight[146] = true;
			Main.tileSolid[146] = true;
			Main.tileMergeDirt[146] = true;
			Main.tileBlockLight[147] = true;
			Main.tileSolid[147] = true;
			Main.tileBlockLight[148] = true;
			Main.tileSolid[148] = true;
			Main.tileMergeDirt[148] = true;
			Main.tileBlockLight[138] = true;
			Main.tileSolid[138] = true;
			Main.tileBlockLight[140] = true;
			Main.tileSolid[140] = true;
			Main.tileBlockLight[151] = true;
			Main.tileSolid[151] = true;
			Main.tileMergeDirt[151] = true;
			Main.tileBlockLight[152] = true;
			Main.tileSolid[152] = true;
			Main.tileMergeDirt[152] = true;
			Main.tileBlockLight[153] = true;
			Main.tileSolid[153] = true;
			Main.tileMergeDirt[153] = true;
			Main.tileBlockLight[154] = true;
			Main.tileSolid[154] = true;
			Main.tileMergeDirt[154] = true;
			Main.tileBlockLight[155] = true;
			Main.tileSolid[155] = true;
			Main.tileMergeDirt[155] = true;
			Main.tileBlockLight[156] = true;
			Main.tileSolid[156] = true;
			Main.tileMergeDirt[156] = true;
			Main.tileMergeDirt[150] = true;
			Main.tileBlockLight[157] = true;
			Main.tileSolid[157] = true;
			Main.tileMergeDirt[157] = true;
			Main.tileBlockLight[158] = true;
			Main.tileSolid[158] = true;
			Main.tileMergeDirt[158] = true;
			Main.tileBlockLight[159] = true;
			Main.tileSolid[159] = true;
			Main.tileMergeDirt[159] = true;
			Main.tileShine[22] = 1150;
			Main.tileShine[6] = 1150;
			Main.tileShine[7] = 1100;
			Main.tileShine[8] = 1000;
			Main.tileShine[9] = 1050;
			Main.tileShine[166] = 1125;
			Main.tileShine[167] = 1075;
			Main.tileShine[168] = 1025;
			Main.tileShine[169] = 975;
			Main.tileShine[178] = 500;
			Main.tileShine2[178] = true;
			Main.tileShine[12] = 300;
			Main.tileShine[21] = 1200;
			Main.tileShine[63] = 900;
			Main.tileShine[64] = 900;
			Main.tileShine[65] = 900;
			Main.tileShine[66] = 900;
			Main.tileShine[67] = 900;
			Main.tileShine[68] = 900;
			Main.tileShine[45] = 1900;
			Main.tileShine[46] = 2000;
			Main.tileShine[47] = 2100;
			Main.tileShine[122] = 1800;
			Main.tileShine[121] = 1850;
			Main.tileShine[125] = 600;
			Main.tileShine[109] = 9000;
			Main.tileShine[110] = 9000;
			Main.tileShine[116] = 9000;
			Main.tileShine[117] = 9000;
			Main.tileShine[118] = 8000;
			Main.tileShine[107] = 950;
			Main.tileShine[108] = 900;
			Main.tileShine[111] = 850;
			Main.tileShine[211] = 800;
			Main.tileLighted[4] = true;
			Main.tileLighted[17] = true;
			Main.tileLighted[133] = true;
			Main.tileLighted[31] = true;
			Main.tileLighted[33] = true;
			Main.tileLighted[34] = true;
			Main.tileLighted[35] = true;
			Main.tileLighted[37] = true;
			Main.tileLighted[42] = true;
			Main.tileLighted[49] = true;
			Main.tileLighted[58] = true;
			Main.tileLighted[61] = true;
			Main.tileLighted[70] = true;
			Main.tileLighted[71] = true;
			Main.tileLighted[72] = true;
			Main.tileLighted[76] = true;
			Main.tileLighted[77] = true;
			Main.tileLighted[19] = true;
			Main.tileLighted[22] = true;
			Main.tileLighted[26] = true;
			Main.tileLighted[83] = true;
			Main.tileLighted[84] = true;
			Main.tileLighted[92] = true;
			Main.tileLighted[93] = true;
			Main.tileLighted[95] = true;
			Main.tileLighted[98] = true;
			Main.tileLighted[100] = true;
			Main.tileLighted[109] = true;
			Main.tileLighted[125] = true;
			Main.tileLighted[126] = true;
			Main.tileLighted[129] = true;
			Main.tileLighted[140] = true;
			Main.tileLighted[270] = true;
			Main.tileLighted[271] = true;
			Main.tileMergeDirt[1] = true;
			Main.tileMergeDirt[6] = true;
			Main.tileMergeDirt[7] = true;
			Main.tileMergeDirt[8] = true;
			Main.tileMergeDirt[9] = true;
			Main.tileMergeDirt[166] = true;
			Main.tileMergeDirt[167] = true;
			Main.tileMergeDirt[168] = true;
			Main.tileMergeDirt[169] = true;
			Main.tileMergeDirt[22] = true;
			Main.tileMergeDirt[25] = true;
			Main.tileMergeDirt[30] = true;
			Main.tileMergeDirt[37] = true;
			Main.tileMergeDirt[38] = true;
			Main.tileMergeDirt[40] = true;
			Main.tileMergeDirt[53] = true;
			Main.tileMergeDirt[56] = true;
			Main.tileMergeDirt[107] = true;
			Main.tileMergeDirt[108] = true;
			Main.tileMergeDirt[111] = true;
			Main.tileMergeDirt[112] = true;
			Main.tileMergeDirt[116] = true;
			Main.tileMergeDirt[117] = true;
			Main.tileMergeDirt[123] = true;
			Main.tileMergeDirt[140] = true;
			Main.tileMergeDirt[39] = true;
			Main.tileMergeDirt[122] = true;
			Main.tileMergeDirt[121] = true;
			Main.tileMergeDirt[120] = true;
			Main.tileMergeDirt[119] = true;
			Main.tileMergeDirt[118] = true;
			Main.tileMergeDirt[47] = true;
			Main.tileMergeDirt[46] = true;
			Main.tileMergeDirt[45] = true;
			Main.tileMergeDirt[44] = true;
			Main.tileMergeDirt[43] = true;
			Main.tileMergeDirt[41] = true;
			Main.tileFrameImportant[201] = true;
			Main.tileFrameImportant[3] = true;
			Main.tileFrameImportant[4] = true;
			Main.tileFrameImportant[5] = true;
			Main.tileFrameImportant[10] = true;
			Main.tileFrameImportant[11] = true;
			Main.tileFrameImportant[12] = true;
			Main.tileFrameImportant[13] = true;
			Main.tileFrameImportant[14] = true;
			Main.tileFrameImportant[15] = true;
			Main.tileFrameImportant[16] = true;
			Main.tileFrameImportant[17] = true;
			Main.tileFrameImportant[18] = true;
			Main.tileFrameImportant[19] = true;
			Main.tileFrameImportant[20] = true;
			Main.tileFrameImportant[21] = true;
			Main.tileFrameImportant[24] = true;
			Main.tileFrameImportant[26] = true;
			Main.tileFrameImportant[27] = true;
			Main.tileFrameImportant[28] = true;
			Main.tileFrameImportant[29] = true;
			Main.tileFrameImportant[31] = true;
			Main.tileFrameImportant[33] = true;
			Main.tileFrameImportant[34] = true;
			Main.tileFrameImportant[35] = true;
			Main.tileFrameImportant[42] = true;
			Main.tileFrameImportant[50] = true;
			Main.tileFrameImportant[55] = true;
			Main.tileFrameImportant[61] = true;
			Main.tileFrameImportant[71] = true;
			Main.tileFrameImportant[72] = true;
			Main.tileFrameImportant[73] = true;
			Main.tileFrameImportant[74] = true;
			Main.tileFrameImportant[77] = true;
			Main.tileFrameImportant[78] = true;
			Main.tileFrameImportant[79] = true;
			Main.tileFrameImportant[81] = true;
			Main.tileFrameImportant[82] = true;
			Main.tileFrameImportant[83] = true;
			Main.tileFrameImportant[84] = true;
			Main.tileFrameImportant[85] = true;
			Main.tileFrameImportant[86] = true;
			Main.tileFrameImportant[87] = true;
			Main.tileFrameImportant[88] = true;
			Main.tileFrameImportant[89] = true;
			Main.tileFrameImportant[90] = true;
			Main.tileFrameImportant[91] = true;
			Main.tileFrameImportant[92] = true;
			Main.tileFrameImportant[93] = true;
			Main.tileFrameImportant[94] = true;
			Main.tileFrameImportant[95] = true;
			Main.tileFrameImportant[96] = true;
			Main.tileFrameImportant[97] = true;
			Main.tileFrameImportant[98] = true;
			Main.tileFrameImportant[99] = true;
			Main.tileFrameImportant[101] = true;
			Main.tileFrameImportant[102] = true;
			Main.tileFrameImportant[103] = true;
			Main.tileFrameImportant[104] = true;
			Main.tileFrameImportant[105] = true;
			Main.tileFrameImportant[100] = true;
			Main.tileFrameImportant[106] = true;
			Main.tileFrameImportant[110] = true;
			Main.tileFrameImportant[113] = true;
			Main.tileFrameImportant[114] = true;
			Main.tileFrameImportant[125] = true;
			Main.tileFrameImportant[287] = true;
			Main.tileFrameImportant[126] = true;
			Main.tileFrameImportant[128] = true;
			Main.tileFrameImportant[129] = true;
			Main.tileFrameImportant[132] = true;
			Main.tileFrameImportant[133] = true;
			Main.tileFrameImportant[134] = true;
			Main.tileFrameImportant[135] = true;
			Main.tileFrameImportant[141] = true;
			Main.tileFrameImportant[270] = true;
			Main.tileFrameImportant[271] = true;
			Main.tileCut[201] = true;
			Main.tileCut[3] = true;
			Main.tileCut[24] = true;
			Main.tileCut[28] = true;
			Main.tileCut[32] = true;
			Main.tileCut[51] = true;
			Main.tileCut[52] = true;
			Main.tileCut[61] = true;
			Main.tileCut[62] = true;
			Main.tileCut[69] = true;
			Main.tileCut[71] = true;
			Main.tileCut[73] = true;
			Main.tileCut[74] = true;
			Main.tileCut[82] = true;
			Main.tileCut[83] = true;
			Main.tileCut[84] = true;
			Main.tileCut[110] = true;
			Main.tileCut[113] = true;
			Main.tileCut[115] = true;
			Main.tileCut[184] = true;
			Main.tileCut[205] = true;
			Main.tileAlch[82] = true;
			Main.tileAlch[83] = true;
			Main.tileAlch[84] = true;
			Main.tileSolid[127] = true;
			Main.tileSolid[130] = true;
			Main.tileBlockLight[130] = true;
			Main.tileBlockLight[131] = true;
			Main.tileNoAttach[232] = true;
			Main.tileSolid[107] = true;
			Main.tileBlockLight[107] = true;
			Main.tileSolid[108] = true;
			Main.tileBlockLight[108] = true;
			Main.tileSolid[111] = true;
			Main.tileBlockLight[111] = true;
			Main.tileSolid[109] = true;
			Main.tileBlockLight[109] = true;
			Main.tileSolid[110] = false;
			Main.tileNoAttach[110] = true;
			Main.tileNoFail[110] = true;
			Main.tileSolid[112] = true;
			Main.tileBlockLight[112] = true;
			Main.tileSolid[116] = true;
			Main.tileBlockLight[116] = true;
			Main.tileSolid[117] = true;
			Main.tileBlockLight[117] = true;
			Main.tileSolid[123] = true;
			Main.tileBlockLight[123] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[185] = true;
			Main.tileNoFail[186] = true;
			Main.tileNoFail[187] = true;
			Main.tileSolid[118] = true;
			Main.tileBlockLight[118] = true;
			Main.tileSolid[119] = true;
			Main.tileBlockLight[119] = true;
			Main.tileSolid[120] = true;
			Main.tileBlockLight[120] = true;
			Main.tileSolid[121] = true;
			Main.tileBlockLight[121] = true;
			Main.tileSolid[122] = true;
			Main.tileBlockLight[122] = true;
			Main.tileSolid[150] = true;
			Main.tileBlockLight[150] = true;
			Main.tileBlockLight[115] = true;
			Main.tileSolid[199] = true;
			Main.tileBlockLight[199] = true;
			Main.tileSolid[0] = true;
			Main.tileBlockLight[0] = true;
			Main.tileSolid[1] = true;
			Main.tileBlockLight[1] = true;
			Main.tileSolid[2] = true;
			Main.tileBlockLight[2] = true;
			Main.tileSolid[3] = false;
			Main.tileNoAttach[3] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[201] = true;
			Main.tileSolid[4] = false;
			Main.tileNoAttach[4] = true;
			Main.tileNoFail[4] = true;
			Main.tileNoFail[24] = true;
			Main.tileSolid[5] = false;
			Main.tileSolid[6] = true;
			Main.tileBlockLight[6] = true;
			Main.tileSolid[7] = true;
			Main.tileBlockLight[7] = true;
			Main.tileSolid[8] = true;
			Main.tileBlockLight[8] = true;
			Main.tileSolid[9] = true;
			Main.tileBlockLight[9] = true;
			Main.tileSolid[166] = true;
			Main.tileBlockLight[166] = true;
			Main.tileSolid[167] = true;
			Main.tileBlockLight[167] = true;
			Main.tileSolid[168] = true;
			Main.tileBlockLight[168] = true;
			Main.tileSolid[169] = true;
			Main.tileBlockLight[169] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[10] = true;
			Main.tileNoAttach[10] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[11] = false;
			Main.tileSolidTop[19] = true;
			Main.tileSolid[19] = true;
			Main.tileSolid[22] = true;
			Main.tileSolid[23] = true;
			Main.tileSolid[25] = true;
			Main.tileSolid[30] = true;
			Main.tileNoFail[32] = true;
			Main.tileBlockLight[32] = true;
			Main.tileSolid[37] = true;
			Main.tileBlockLight[37] = true;
			Main.tileSolid[38] = true;
			Main.tileBlockLight[38] = true;
			Main.tileSolid[39] = true;
			Main.tileBlockLight[39] = true;
			Main.tileSolid[40] = true;
			Main.tileBlockLight[40] = true;
			Main.tileSolid[41] = true;
			Main.tileBlockLight[41] = true;
			Main.tileSolid[43] = true;
			Main.tileBlockLight[43] = true;
			Main.tileSolid[44] = true;
			Main.tileBlockLight[44] = true;
			Main.tileSolid[45] = true;
			Main.tileBlockLight[45] = true;
			Main.tileSolid[46] = true;
			Main.tileBlockLight[46] = true;
			Main.tileSolid[47] = true;
			Main.tileBlockLight[47] = true;
			Main.tileSolid[48] = true;
			Main.tileBlockLight[48] = true;
			Main.tileSolid[53] = true;
			Main.tileBlockLight[53] = true;
			Main.tileSolid[54] = true;
			Main.tileBlockLight[52] = true;
			Main.tileBlockLight[205] = true;
			Main.tileSolid[56] = true;
			Main.tileBlockLight[56] = true;
			Main.tileSolid[57] = true;
			Main.tileBlockLight[57] = true;
			Main.tileSolid[58] = true;
			Main.tileBlockLight[58] = true;
			Main.tileSolid[59] = true;
			Main.tileBlockLight[59] = true;
			Main.tileSolid[60] = true;
			Main.tileBlockLight[60] = true;
			Main.tileSolid[63] = true;
			Main.tileBlockLight[63] = true;
			Main.tileStone[63] = true;
			Main.tileStone[130] = true;
			Main.tileSolid[64] = true;
			Main.tileBlockLight[64] = true;
			Main.tileStone[64] = true;
			Main.tileSolid[65] = true;
			Main.tileBlockLight[65] = true;
			Main.tileStone[65] = true;
			Main.tileSolid[66] = true;
			Main.tileBlockLight[66] = true;
			Main.tileStone[66] = true;
			Main.tileSolid[67] = true;
			Main.tileBlockLight[67] = true;
			Main.tileStone[67] = true;
			Main.tileSolid[68] = true;
			Main.tileBlockLight[68] = true;
			Main.tileStone[68] = true;
			Main.tileSolid[75] = true;
			Main.tileBlockLight[75] = true;
			Main.tileSolid[76] = true;
			Main.tileBlockLight[76] = true;
			Main.tileSolid[70] = true;
			Main.tileBlockLight[70] = true;
			Main.tileNoFail[50] = true;
			Main.tileNoAttach[50] = true;
			Main.tileDungeon[41] = true;
			Main.tileDungeon[43] = true;
			Main.tileDungeon[44] = true;
			Main.tileBlockLight[30] = true;
			Main.tileBlockLight[25] = true;
			Main.tileBlockLight[23] = true;
			Main.tileBlockLight[22] = true;
			Main.tileBlockLight[62] = true;
			Main.tileSolidTop[18] = true;
			Main.tileSolidTop[14] = true;
			Main.tileSolidTop[16] = true;
			Main.tileSolidTop[134] = true;
			Main.tileSolidTop[114] = true;
			Main.tileNoAttach[20] = true;
			Main.tileNoAttach[19] = true;
			Main.tileNoAttach[13] = true;
			Main.tileNoAttach[14] = true;
			Main.tileNoAttach[15] = true;
			Main.tileNoAttach[16] = true;
			Main.tileNoAttach[134] = true;
			Main.tileNoAttach[17] = true;
			Main.tileNoAttach[18] = true;
			Main.tileNoAttach[19] = true;
			Main.tileNoAttach[21] = true;
			Main.tileNoAttach[27] = true;
			Main.tileNoAttach[114] = true;
			Main.tileTable[14] = true;
			Main.tileTable[18] = true;
			Main.tileTable[19] = true;
			Main.tileTable[114] = true;
			Main.tileNoAttach[86] = true;
			Main.tileNoAttach[87] = true;
			Main.tileNoAttach[88] = true;
			Main.tileNoAttach[89] = true;
			Main.tileNoAttach[90] = true;
			Main.tileTable[101] = true;
			Main.tileNoAttach[101] = true;
			Main.tileNoAttach[102] = true;
			Main.tileNoAttach[94] = true;
			Main.tileNoAttach[95] = true;
			Main.tileNoAttach[96] = true;
			Main.tileNoAttach[97] = true;
			Main.tileNoAttach[98] = true;
			Main.tileNoAttach[99] = true;
			Main.tileTable[87] = true;
			Main.tileTable[88] = true;
			Main.tileSolidTop[87] = true;
			Main.tileSolidTop[88] = true;
			Main.tileSolidTop[101] = true;
			Main.tileNoAttach[91] = true;
			Main.tileNoAttach[92] = true;
			Main.tileNoAttach[93] = true;
			Main.tileLighted[190] = true;
			Main.tileBlockLight[192] = true;
			Main.tileBrick[192] = false;
			Main.tileWaterDeath[215] = true;
			Main.tileWaterDeath[4] = true;
			Main.tileWaterDeath[51] = true;
			Main.tileWaterDeath[93] = true;
			Main.tileWaterDeath[98] = true;
			Main.tileLavaDeath[3] = true;
			Main.tileLavaDeath[5] = true;
			Main.tileLavaDeath[10] = true;
			Main.tileLavaDeath[11] = true;
			Main.tileLavaDeath[12] = true;
			Main.tileLavaDeath[13] = true;
			Main.tileLavaDeath[14] = true;
			Main.tileLavaDeath[15] = true;
			Main.tileLavaDeath[16] = true;
			Main.tileLavaDeath[17] = true;
			Main.tileLavaDeath[18] = true;
			Main.tileLavaDeath[19] = true;
			Main.tileLavaDeath[20] = true;
			Main.tileLavaDeath[24] = true;
			Main.tileLavaDeath[27] = true;
			Main.tileLavaDeath[28] = true;
			Main.tileLavaDeath[29] = true;
			Main.tileLavaDeath[32] = true;
			Main.tileLavaDeath[33] = true;
			Main.tileLavaDeath[34] = true;
			Main.tileLavaDeath[35] = true;
			Main.tileLavaDeath[36] = true;
			Main.tileLavaDeath[42] = true;
			Main.tileLavaDeath[49] = true;
			Main.tileLavaDeath[50] = true;
			Main.tileLavaDeath[51] = true;
			Main.tileLavaDeath[52] = true;
			Main.tileLavaDeath[55] = true;
			Main.tileLavaDeath[61] = true;
			Main.tileLavaDeath[62] = true;
			Main.tileLavaDeath[69] = true;
			Main.tileLavaDeath[71] = true;
			Main.tileLavaDeath[72] = true;
			Main.tileLavaDeath[73] = true;
			Main.tileLavaDeath[74] = true;
			Main.tileLavaDeath[79] = true;
			Main.tileLavaDeath[80] = true;
			Main.tileLavaDeath[81] = true;
			Main.tileLavaDeath[86] = true;
			Main.tileLavaDeath[87] = true;
			Main.tileLavaDeath[88] = true;
			Main.tileLavaDeath[89] = true;
			Main.tileLavaDeath[90] = true;
			Main.tileLavaDeath[91] = true;
			Main.tileLavaDeath[92] = true;
			Main.tileLavaDeath[93] = true;
			Main.tileLavaDeath[94] = true;
			Main.tileLavaDeath[95] = true;
			Main.tileLavaDeath[96] = true;
			Main.tileLavaDeath[97] = true;
			Main.tileLavaDeath[98] = true;
			Main.tileLavaDeath[100] = true;
			Main.tileLavaDeath[101] = true;
			Main.tileLavaDeath[102] = true;
			Main.tileLavaDeath[103] = true;
			Main.tileLavaDeath[104] = true;
			Main.tileLavaDeath[106] = true;
			Main.tileLavaDeath[110] = true;
			Main.tileLavaDeath[113] = true;
			Main.tileLavaDeath[115] = true;
			Main.tileLavaDeath[125] = true;
			Main.tileLavaDeath[126] = true;
			Main.tileLavaDeath[128] = true;
			Main.tileLavaDeath[149] = true;
			Main.tileLavaDeath[173] = true;
			Main.tileLavaDeath[174] = true;
			Main.tileLavaDeath[184] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[205] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[209] = true;
			Main.tileLavaDeath[210] = true;
			Main.tileLavaDeath[212] = true;
			Main.tileLavaDeath[213] = true;
			Main.tileLavaDeath[214] = true;
			Main.tileLavaDeath[215] = true;
			Main.tileLavaDeath[216] = true;
			Main.tileLavaDeath[217] = true;
			Main.tileLavaDeath[218] = true;
			Main.tileLavaDeath[219] = true;
			Main.tileLavaDeath[220] = true;
			Main.tileLavaDeath[227] = true;
			Main.tileLavaDeath[228] = true;
			Main.tileLavaDeath[233] = true;
			Main.tileLavaDeath[236] = true;
			Main.tileLavaDeath[238] = true;
			Main.tileLavaDeath[240] = true;
			Main.tileLavaDeath[241] = true;
			Main.tileLavaDeath[242] = true;
			Main.tileLavaDeath[243] = true;
			Main.tileLavaDeath[244] = true;
			Main.tileLavaDeath[245] = true;
			Main.tileLavaDeath[246] = true;
			Main.tileLavaDeath[247] = true;
			Main.tileLavaDeath[254] = true;
			Main.tileLavaDeath[269] = true;
			Main.tileLavaDeath[270] = true;
			Main.tileLavaDeath[271] = true;
			Main.tileLavaDeath[275] = true;
			Main.tileLavaDeath[276] = true;
			Main.tileLavaDeath[277] = true;
			Main.tileLavaDeath[278] = true;
			Main.tileLavaDeath[279] = true;
			Main.tileLavaDeath[280] = true;
			Main.tileLavaDeath[281] = true;
			Main.tileLavaDeath[282] = true;
			Main.tileLavaDeath[283] = true;
			Main.tileLavaDeath[285] = true;
			Main.tileLavaDeath[286] = true;
			Main.tileLavaDeath[287] = true;
			Main.tileLavaDeath[288] = true;
			Main.tileLavaDeath[289] = true;
			Main.tileLavaDeath[290] = true;
			Main.tileLavaDeath[291] = true;
			Main.tileLavaDeath[292] = true;
			Main.tileLavaDeath[293] = true;
			Main.tileLavaDeath[294] = true;
			Main.tileLavaDeath[295] = true;
			Main.tileLavaDeath[296] = true;
			Main.tileLavaDeath[297] = true;
			Main.tileLavaDeath[298] = true;
			Main.tileLavaDeath[299] = true;
			Main.tileLavaDeath[300] = true;
			Main.tileLavaDeath[301] = true;
			Main.tileLavaDeath[302] = true;
			Main.tileLavaDeath[303] = true;
			Main.tileLavaDeath[304] = true;
			Main.tileLavaDeath[305] = true;
			Main.tileLavaDeath[306] = true;
			Main.tileLavaDeath[307] = true;
			Main.tileLavaDeath[308] = true;
			Main.tileLavaDeath[309] = true;
			Main.tileLavaDeath[310] = true;
			for (int num = 0; num < 314; num++)
			{
				if (Main.tileLavaDeath[num])
				{
					Main.tileObsidianKill[num] = true;
				}
			}
			Main.tileObsidianKill[77] = true;
			Main.tileObsidianKill[78] = true;
			Main.tileObsidianKill[82] = true;
			Main.tileObsidianKill[83] = true;
			Main.tileObsidianKill[84] = true;
			Main.tileObsidianKill[85] = true;
			Main.tileObsidianKill[105] = true;
			Main.tileObsidianKill[129] = true;
			Main.tileObsidianKill[132] = true;
			Main.tileObsidianKill[133] = true;
			Main.tileObsidianKill[134] = true;
			Main.tileObsidianKill[135] = true;
			Main.tileObsidianKill[136] = true;
			Main.tileObsidianKill[139] = true;
			Main.tileObsidianKill[165] = true;
			Main.tileObsidianKill[178] = true;
			Main.tileObsidianKill[185] = true;
			Main.tileObsidianKill[186] = true;
			Main.tileObsidianKill[187] = true;
			Main.tileObsidianKill[231] = true;
			for (int num2 = 0; num2 < 145; num2++)
			{
				if (num2 == 20)
				{
					Main.wallBlend[num2] = 14;
				}
				else
				{
					if (num2 == 19)
					{
						Main.wallBlend[num2] = 9;
					}
					else
					{
						if (num2 == 18)
						{
							Main.wallBlend[num2] = 8;
						}
						else
						{
							if (num2 == 17)
							{
								Main.wallBlend[num2] = 7;
							}
							else
							{
								if (num2 == 16 || num2 == 59)
								{
									Main.wallBlend[num2] = 2;
								}
								else
								{
									if (num2 == 1 || (num2 >= 48 && num2 <= 53))
									{
										Main.wallBlend[num2] = 1;
									}
									else
									{
										Main.wallBlend[num2] = num2;
									}
								}
							}
						}
					}
				}
			}
			Main.wallBlend[65] = 63;
			Main.wallBlend[66] = 63;
			Main.wallBlend[68] = 63;
			Main.wallBlend[67] = 64;
			Main.wallBlend[80] = 74;
			Main.wallBlend[81] = 77;
			Main.wallBlend[94] = 7;
			Main.wallBlend[95] = 7;
			Main.wallBlend[100] = 7;
			Main.wallBlend[101] = 7;
			Main.wallBlend[96] = 8;
			Main.wallBlend[97] = 8;
			Main.wallBlend[102] = 8;
			Main.wallBlend[103] = 8;
			Main.wallBlend[98] = 9;
			Main.wallBlend[99] = 9;
			Main.wallBlend[104] = 9;
			Main.wallBlend[105] = 9;
			Main.tileNoFail[24] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[52] = true;
			Main.tileNoFail[62] = true;
			Main.tileNoFail[32] = true;
			Main.tileNoFail[61] = true;
			Main.tileNoFail[69] = true;
			Main.tileNoFail[73] = true;
			Main.tileNoFail[74] = true;
			Main.tileNoFail[82] = true;
			Main.tileNoFail[83] = true;
			Main.tileNoFail[84] = true;
			Main.tileNoFail[110] = true;
			Main.tileNoFail[113] = true;
			Main.tileNoFail[115] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[201] = true;
			Main.tileNoFail[205] = true;
			Main.tileNoFail[227] = true;
			Main.tileNoFail[233] = true;
			for (int num3 = 0; num3 < 314; num3++)
			{
				if (Main.tileSolid[num3])
				{
					Main.tileNoSunLight[num3] = true;
				}
				Main.tileFrame[num3] = 0;
				Main.tileFrameCounter[num3] = 0;
			}
			Main.tileNoSunLight[19] = false;
			Main.tileNoSunLight[11] = true;
			Main.tileNoSunLight[189] = false;
			Main.tileNoSunLight[196] = false;
			for (int num4 = 0; num4 < Main.maxMenuItems; num4++)
			{
				this.menuItemScale[num4] = 0.8f;
			}
			for (int num5 = 0; num5 < 6001; num5++)
			{
				Main.dust[num5] = new Dust();
			}
			for (int num6 = 0; num6 < 401; num6++)
			{
				Main.item[num6] = new Item();
			}
			for (int num7 = 0; num7 < 201; num7++)
			{
				Main.npc[num7] = new NPC();
				Main.npc[num7].whoAmI = num7;
			}
			for (int num8 = 0; num8 < 256; num8++)
			{
				Main.player[num8] = new Player();
			}
			for (int num9 = 0; num9 < 1001; num9++)
			{
				Main.projectile[num9] = new Projectile();
			}
			for (int num10 = 0; num10 < 501; num10++)
			{
				Main.gore[num10] = new Gore();
			}
			for (int num11 = 0; num11 < Main.maxRain + 1; num11++)
			{
				Main.rain[num11] = new Rain();
			}
			for (int num12 = 0; num12 < 200; num12++)
			{
				Main.cloud[num12] = new Cloud();
			}
			for (int num13 = 0; num13 < 100; num13++)
			{
				Main.combatText[num13] = new CombatText();
			}
			for (int num14 = 0; num14 < 20; num14++)
			{
				Main.itemText[num14] = new ItemText();
			}
			for (int num15 = 0; num15 < 2289; num15++)
			{
				Item item = new Item();
				item.SetDefaults(num15, false);
				Main.itemName[num15] = item.name;
				if (item.headSlot > 0)
				{
					Item.headType[item.headSlot] = item.type;
				}
				if (item.bodySlot > 0)
				{
					Item.bodyType[item.bodySlot] = item.type;
				}
				if (item.legSlot > 0)
				{
					Item.legType[item.legSlot] = item.type;
				}
			}
			for (int num16 = 0; num16 < Recipe.maxRecipes; num16++)
			{
				Main.recipe[num16] = new Recipe();
				Main.availableRecipeY[num16] = (float)(65 * num16);
			}
			Recipe.SetupRecipes();
			for (int num17 = 0; num17 < Main.numChatLines; num17++)
			{
				Main.chatLine[num17] = new ChatLine();
			}
			for (int num18 = 0; num18 < Liquid.resLiquid; num18++)
			{
				Main.liquid[num18] = new Liquid();
			}
			for (int num19 = 0; num19 < 10000; num19++)
			{
				Main.liquidBuffer[num19] = new LiquidBuffer();
			}
			this.waterfallManager = new WaterfallManager();
			Lighting.LightingThreads = Environment.ProcessorCount - 1;
			this.shop[0] = new Chest(false);
			Chest.SetupTravelShop();
			for (int num20 = 1; num20 < Main.numShops; num20++)
			{
				this.shop[num20] = new Chest(false);
				this.shop[num20].SetupShop(num20);
			}
			Main.teamColor[0] = Color.White;
			Main.teamColor[1] = new Color(230, 40, 20);
			Main.teamColor[2] = new Color(20, 200, 30);
			Main.teamColor[3] = new Color(75, 90, 255);
			Main.teamColor[4] = new Color(200, 180, 0);
			if (Main.menuMode == 1)
			{
				Main.LoadPlayers();
			}
			for (int num21 = 1; num21 < 360; num21++)
			{
				Projectile projectile = new Projectile();
				projectile.SetDefaults(num21);
				if (projectile.hostile)
				{
					Main.projHostile[num21] = true;
				}
			}
			Netplay.Init();
			if (Main.skipMenu)
			{
				WorldGen.clearWorld();
				Main.gameMenu = false;
				Main.LoadPlayers();
				Main.player[Main.myPlayer] = (Player)Main.loadPlayer[0].Clone();
				Main.PlayerPath = Main.loadPlayerPath[0];
				Main.LoadWorlds();
				WorldGen.generateWorld(-1);
				WorldGen.EveryTileFrame();
				Main.player[Main.myPlayer].Spawn();
			}
			else
			{
				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
				int menuItemCount = Main.GetMenuItemCount(systemMenu);
				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
			}
			if (Main.dedServ)
			{
				return;
			}
			Main.clientUUID = Guid.NewGuid().ToString();
			keyBoardInput.newKeyEvent += delegate(char keyStroke)
			{
				if (Main.keyCount < 10)
				{
					Main.keyInt[Main.keyCount] = (int)keyStroke;
					Main.keyString[Main.keyCount] = string.Concat(keyStroke);
					Main.keyCount++;
				}
			};
			base.Initialize();
			base.Window.AllowUserResizing = true;
			this.OpenSettings();
			if (Main.screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
			{
				Main.screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
			}
			if (Main.screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
			{
				Main.screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
			}
			Main.graphics.ApplyChanges();
			this.CheckBunny();
			if (Lang.lang > 1)
			{
				Lang.setLang(true);
			}
			Lang.setLang(false);
			if (Lang.lang == 0)
			{
				Main.menuMode = 1212;
			}
			this.SetTitle();
			this.OpenRecent();
			Star.SpawnStars();
			WorldGen.RandomWeather();
			foreach (DisplayMode current in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
			{
				if (current.Width >= Main.minScreenW && current.Height >= Main.minScreenH && current.Width <= Main.maxScreenW && current.Height <= Main.maxScreenH)
				{
					bool flag = true;
					for (int num22 = 0; num22 < Main.numDisplayModes; num22++)
					{
						if (current.Width == Main.displayWidth[num22] && current.Height == Main.displayHeight[num22])
						{
							flag = false;
							break;
						}
					}
					if (flag)
					{
						Main.displayHeight[Main.numDisplayModes] = current.Height;
						Main.displayWidth[Main.numDisplayModes] = current.Width;
						Main.numDisplayModes++;
					}
				}
			}
			if (Main.autoJoin)
			{
				Main.LoadPlayers();
				Main.menuMode = 1;
				Main.menuMultiplayer = true;
			}
			Main.fpsTimer.Start();
			Main.updateTimer.Start();
		}
		protected override void LoadContent()
		{
			try
			{
				this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
				Main.pixelShader = base.Content.Load<Effect>("pixelShader");
				Main.tileShader = base.Content.Load<Effect>("tileShader");
				Main.engine = new AudioEngine("Content" + Path.DirectorySeparatorChar + "TerrariaMusic.xgs");
				Main.soundBank = new SoundBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Sound Bank.xsb");
				Main.waveBank = new WaveBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
				for (int i = 1; i < 33; i++)
				{
					Main.music[i] = Main.soundBank.GetCue("Music_" + i);
				}
				Main.soundMech[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Mech_0");
				Main.soundInstanceMech[0] = Main.soundMech[0].CreateInstance();
				Main.soundGrab = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grab");
				Main.soundInstanceGrab = Main.soundGrab.CreateInstance();
				Main.soundPixie = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Pixie");
				Main.soundInstancePixie = Main.soundGrab.CreateInstance();
				Main.soundDig[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_0");
				Main.soundInstanceDig[0] = Main.soundDig[0].CreateInstance();
				Main.soundDig[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_1");
				Main.soundInstanceDig[1] = Main.soundDig[1].CreateInstance();
				Main.soundDig[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_2");
				Main.soundInstanceDig[2] = Main.soundDig[2].CreateInstance();
				Main.soundTink[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_0");
				Main.soundInstanceTink[0] = Main.soundTink[0].CreateInstance();
				Main.soundTink[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_1");
				Main.soundInstanceTink[1] = Main.soundTink[1].CreateInstance();
				Main.soundTink[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_2");
				Main.soundInstanceTink[2] = Main.soundTink[2].CreateInstance();
				Main.soundPlayerHit[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_0");
				Main.soundInstancePlayerHit[0] = Main.soundPlayerHit[0].CreateInstance();
				Main.soundPlayerHit[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_1");
				Main.soundInstancePlayerHit[1] = Main.soundPlayerHit[1].CreateInstance();
				Main.soundPlayerHit[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_2");
				Main.soundInstancePlayerHit[2] = Main.soundPlayerHit[2].CreateInstance();
				Main.soundFemaleHit[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_0");
				Main.soundInstanceFemaleHit[0] = Main.soundFemaleHit[0].CreateInstance();
				Main.soundFemaleHit[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_1");
				Main.soundInstanceFemaleHit[1] = Main.soundFemaleHit[1].CreateInstance();
				Main.soundFemaleHit[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_2");
				Main.soundInstanceFemaleHit[2] = Main.soundFemaleHit[2].CreateInstance();
				Main.soundPlayerKilled = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Killed");
				Main.soundInstancePlayerKilled = Main.soundPlayerKilled.CreateInstance();
				Main.soundChat = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Chat");
				Main.soundInstanceChat = Main.soundChat.CreateInstance();
				Main.soundGrass = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grass");
				Main.soundInstanceGrass = Main.soundGrass.CreateInstance();
				Main.soundDoorOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Opened");
				Main.soundInstanceDoorOpen = Main.soundDoorOpen.CreateInstance();
				Main.soundDoorClosed = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Closed");
				Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();
				Main.soundMenuTick = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Tick");
				Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
				Main.soundMenuOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Open");
				Main.soundInstanceMenuOpen = Main.soundMenuOpen.CreateInstance();
				Main.soundMenuClose = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Close");
				Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();
				Main.soundShatter = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Shatter");
				Main.soundInstanceShatter = Main.soundShatter.CreateInstance();
				for (int j = 0; j < Main.soundZombie.Length; j++)
				{
					Main.soundZombie[j] = base.Content.Load<SoundEffect>(string.Concat(new object[]
					{
						"Sounds",
						Path.DirectorySeparatorChar,
						"Zombie_",
						j
					}));
					Main.soundInstanceZombie[j] = Main.soundZombie[j].CreateInstance();
				}
				for (int k = 0; k < Main.soundLiquid.Length; k++)
				{
					Main.soundLiquid[k] = base.Content.Load<SoundEffect>(string.Concat(new object[]
					{
						"Sounds",
						Path.DirectorySeparatorChar,
						"Liquid_",
						k
					}));
					Main.soundInstanceLiquid[k] = Main.soundLiquid[k].CreateInstance();
				}
				Main.soundRoar[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Roar_0");
				Main.soundInstanceRoar[0] = Main.soundRoar[0].CreateInstance();
				Main.soundRoar[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Roar_1");
				Main.soundInstanceRoar[1] = Main.soundRoar[1].CreateInstance();
				Main.soundSplash[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_0");
				Main.soundInstanceSplash[0] = Main.soundRoar[0].CreateInstance();
				Main.soundSplash[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_1");
				Main.soundInstanceSplash[1] = Main.soundSplash[1].CreateInstance();
				Main.soundDoubleJump = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Double_Jump");
				Main.soundInstanceDoubleJump = Main.soundRoar[0].CreateInstance();
				Main.soundRun = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Run");
				Main.soundInstanceRun = Main.soundRun.CreateInstance();
				Main.soundCoins = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Coins");
				Main.soundInstanceCoins = Main.soundCoins.CreateInstance();
				Main.soundUnlock = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Unlock");
				Main.soundInstanceUnlock = Main.soundUnlock.CreateInstance();
				Main.soundMaxMana = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "MaxMana");
				Main.soundInstanceMaxMana = Main.soundMaxMana.CreateInstance();
				Main.soundDrown = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Drown");
				Main.soundInstanceDrown = Main.soundDrown.CreateInstance();
				for (int l = 1; l < 52; l++)
				{
					Main.soundItem[l] = base.Content.Load<SoundEffect>(string.Concat(new object[]
					{
						"Sounds",
						Path.DirectorySeparatorChar,
						"Item_",
						l
					}));
					Main.soundInstanceItem[l] = Main.soundItem[l].CreateInstance();
				}
				for (int m = 1; m < 14; m++)
				{
					Main.soundNPCHit[m] = base.Content.Load<SoundEffect>(string.Concat(new object[]
					{
						"Sounds",
						Path.DirectorySeparatorChar,
						"NPC_Hit_",
						m
					}));
					Main.soundInstanceNPCHit[m] = Main.soundNPCHit[m].CreateInstance();
				}
				for (int n = 1; n < 20; n++)
				{
					Main.soundNPCKilled[n] = base.Content.Load<SoundEffect>(string.Concat(new object[]
					{
						"Sounds",
						Path.DirectorySeparatorChar,
						"NPC_Killed_",
						n
					}));
					Main.soundInstanceNPCKilled[n] = Main.soundNPCKilled[n].CreateInstance();
				}
			}
			catch
			{
				Main.musicVolume = 0f;
				Main.soundVolume = 0f;
			}
			this.iceBarrierTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceBarrier");
			Main.frozenTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Frozen");
			Main.craftButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "CraftButton");
			Main.craftUpButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecUp");
			Main.craftDownButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecDown");
			Main.scrollLeftButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecLeft");
			Main.scrollRightButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecRight");
			Main.pulleyTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PlayerPulley");
			Main.reforgeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Reforge");
			Main.timerTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Timer");
			Main.wofTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "WallOfFlesh");
			Main.wallOutlineTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wall_Outline");
			Main.fadeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "fade-out");
			Main.ghostTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ghost");
			Main.evilCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Evil_Cactus");
			Main.goodCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Good_Cactus");
			Main.crimsonCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Crimson_Cactus");
			Main.wraithEyeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wraith_Eyes");
			Main.fireflyTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Firefly");
			Main.fireflyJarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FireflyJar");
			Main.lightningbugTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBug");
			Main.lightningbugJarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBugJar");
			Main.glowSnailTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "GlowSnail");
			Main.iceQueenTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceQueen");
			Main.santaTankTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SantaTank");
			Main.jackHatTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "JackHat");
			Main.treeFaceTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "TreeFace");
			Main.pumpkingFaceTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingFace");
			Main.reaperEyeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Reaper_Eyes");
			this.mapTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Map");
			this.mapBG1Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG1");
			this.mapBG2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG2");
			this.mapBG3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG3");
			this.mapBG4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG4");
			this.mapBG5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG5");
			this.mapBG6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG6");
			this.mapBG7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG7");
			this.mapBG8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG8");
			this.mapBG9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG9");
			this.mapBG10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG10");
			this.mapBG11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG11");
			this.mapBG12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG12");
			this.hueTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Hue");
			Main.colorSliderTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorSlider");
			Main.colorBarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBar");
			Main.colorBlipTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBlip");
			Main.rainTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain_0");
			Main.rainTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain_1");
			Main.rainTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain_2");
			Main.magicPixel = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MagicPixel");
			Main.miniMapFrameTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame");
			Main.miniMapFrame2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame2");
			for (int num = 0; num < Main.xmasTree.Length; num++)
			{
				Main.xmasTree[num] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Xmas_",
					num
				}));
			}
			for (int num2 = 0; num2 < 4; num2++)
			{
				this.clothesTexture[num2] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Clothes_",
					num2
				}));
			}
			for (int num3 = 0; num3 < Main.FlameTexture.Length; num3++)
			{
				Main.FlameTexture[num3] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Flame_",
					num3
				}));
			}
			for (int num4 = 0; num4 < 3; num4++)
			{
				Main.miniMapButtonTexture[num4] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"MiniMapButton_",
					num4
				}));
			}
			for (int num5 = 0; num5 < 8; num5++)
			{
				this.mapIconTexture[num5] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Map_",
					num5
				}));
			}
			Main.destTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest1");
			Main.destTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest2");
			Main.destTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest3");
			Main.actuatorTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Actuator");
			Main.wireTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires");
			Main.wire2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires2");
			Main.wire3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires3");
			Main.flyingCarpetTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FlyingCarpet");
			Main.hbTexture1 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar1");
			Main.hbTexture2 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar2");
			Main.loTexture = base.Content.Load<Texture2D>(string.Concat(new object[]
			{
				"Images",
				Path.DirectorySeparatorChar,
				"logo_",
				Main.rand.Next(1, 9)
			}));
			Main.spriteBatch = new SpriteBatch(base.GraphicsDevice);
			for (int num6 = 1; num6 < 2; num6++)
			{
				Main.bannerTexture[num6] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"House_Banner_",
					num6
				}));
			}
			for (int num7 = 0; num7 < Main.npcHeadTexture.Length; num7++)
			{
				Main.npcHeadTexture[num7] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"NPC_Head_",
					num7
				}));
			}
			for (int num8 = 1; num8 < Main.BackPackTexture.Length; num8++)
			{
				Main.BackPackTexture[num8] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"BackPack_",
					num8
				}));
			}
			for (int num9 = 1; num9 < 104; num9++)
			{
				Main.buffTexture[num9] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Buff_",
					num9
				}));
			}
			this.LoadBackground(0);
			this.LoadBackground(49);
			for (int num10 = 0; num10 < Main.rudolphTexture.Length; num10++)
			{
				Main.rudolphTexture[num10] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Rudolph_",
					num10
				}));
			}
			for (int num11 = 0; num11 < 2289; num11++)
			{
				Main.itemTexture[num11] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Item_",
					num11
				}));
			}
			for (int num12 = 0; num12 < 6; num12++)
			{
				Main.gemTexture[num12] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Gem_",
					num12
				}));
			}
			for (int num13 = 0; num13 < 369; num13++)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(num13, -1f);
				Main.npcName[num13] = nPC.name;
			}
			for (int num14 = 0; num14 < 22; num14++)
			{
				Main.cloudTexture[num14] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Cloud_",
					num14
				}));
			}
			for (int num15 = 0; num15 < 5; num15++)
			{
				Main.starTexture[num15] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Star_",
					num15
				}));
			}
			for (int num16 = 0; num16 < 12; num16++)
			{
				Main.liquidTexture[num16] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Liquid_",
					num16
				}));
			}
			this.waterfallManager.LoadContent(base.Content);
			Main.npcToggleTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_1");
			Main.npcToggleTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_2");
			Main.HBLockTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_0");
			Main.HBLockTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_1");
			Main.gridTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Grid");
			Main.trashTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Trash");
			Main.cdTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "CoolDown");
			Main.logoTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo");
			Main.logo2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo2");
			Main.dustTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dust");
			Main.sunTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun");
			Main.sun2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun2");
			Main.sun3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun3");
			Main.blackTileTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Black_Tile");
			Main.heartTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart");
			Main.heart2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart2");
			Main.bubbleTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bubble");
			Main.flameTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Flame");
			Main.manaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mana");
			Main.cursorTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Cursor");
			Main.ninjaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
			Main.antLionTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
			Main.spikeBaseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
			Main.woodTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_0");
			Main.woodTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_1");
			Main.woodTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_2");
			Main.woodTexture[3] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_3");
			Main.woodTexture[4] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_4");
			Main.woodTexture[5] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_5");
			Main.woodTexture[6] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_6");
			Main.pumpkinMoonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Pumpkin");
			Main.snowMoonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Snow");
			for (int num17 = 0; num17 < Main.moonTexture.Length; num17++)
			{
				Main.moonTexture[num17] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Moon_",
					num17
				}));
			}
			for (int num18 = 0; num18 < Main.treeTopTexture.Length; num18++)
			{
				Main.treeTopTexture[num18] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Tree_Tops_",
					num18
				}));
			}
			for (int num19 = 0; num19 < Main.treeBranchTexture.Length; num19++)
			{
				Main.treeBranchTexture[num19] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Tree_Branches_",
					num19
				}));
			}
			Main.shroomCapTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Shroom_Tops");
			Main.inventoryBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back");
			Main.inventoryBack2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back2");
			Main.inventoryBack3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back3");
			Main.inventoryBack4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back4");
			Main.inventoryBack5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back5");
			Main.inventoryBack6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back6");
			Main.inventoryBack7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back7");
			Main.inventoryBack8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back8");
			Main.inventoryBack9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back9");
			Main.inventoryBack10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back10");
			Main.inventoryBack11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back11");
			Main.inventoryBack12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back12");
			Main.inventoryBack13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back13");
			Main.inventoryBack14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back14");
			Main.hairStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HairStyleBack");
			Main.clothesStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ClothesStyleBack");
			Main.inventoryTickOffTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_Off");
			Main.inventoryTickOnTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_On");
			Main.textBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Text_Back");
			Main.chatTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat");
			Main.chat2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat2");
			Main.chatBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat_Back");
			Main.teamTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Team");
			Main.skinArmTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Skin_Arm");
			Main.skinBodyTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Skin_Body");
			Main.skinLegsTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Skin_Legs");
			Main.playerEyeWhitesTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Eye_Whites");
			Main.playerEyesTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Eyes");
			Main.playerHandsTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Hands");
			Main.playerHands2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Hands2");
			Main.playerHeadTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Head");
			Main.playerPantsTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Pants");
			Main.playerShirtTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Shirt");
			Main.playerShoesTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Shoes");
			Main.playerUnderShirtTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Undershirt");
			Main.playerUnderShirt2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Player_Undershirt2");
			Main.femalePantsTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Female_Pants");
			Main.femaleShirtTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Female_Shirt");
			Main.femaleShoesTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Female_Shoes");
			Main.femaleUnderShirtTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Female_Undershirt");
			Main.femaleUnderShirt2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Female_Undershirt2");
			Main.femaleShirt2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Female_Shirt2");
			Main.chaosTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chaos");
			Main.EyeLaserTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Eye_Laser");
			Main.BoneEyesTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Eyes");
			Main.BoneLaserTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Laser");
			Main.lightDiscTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Light_Disc");
			Main.confuseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Confuse");
			Main.probeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Probe");
			Main.sunOrbTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunOrb");
			Main.sunAltarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunAltar");
			Main.xmasLightTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "XmasLight");
			Main.beetleTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "BeetleOrb");
			Main.chainTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain");
			Main.chain2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain2");
			Main.chain3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain3");
			Main.chain4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain4");
			Main.chain5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain5");
			Main.chain6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain6");
			Main.chain7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain7");
			Main.chain8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain8");
			Main.chain9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain9");
			Main.chain10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain10");
			Main.chain11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain11");
			Main.chain12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain12");
			Main.chain13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain13");
			Main.chain14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain14");
			Main.chain15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain15");
			Main.chain16Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain16");
			Main.chain17Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain17");
			Main.chain18Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain18");
			Main.chain19Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain19");
			Main.chain20Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
			Main.chain21Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain21");
			Main.chain22Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain22");
			Main.chain23Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain23");
			Main.chain24Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain24");
			Main.chain25Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain25");
			Main.chain26Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain26");
			Main.chain27Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain27");
			Main.chain28Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain28");
			Main.chain29Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain29");
			Main.chain30Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain30");
			Main.chain31Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain31");
			Main.chain32Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain32");
			Main.boneArmTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone");
			Main.pumpkingArmTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingArm");
			Main.pumpkingCloakTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingCloak");
			Main.boneArm2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone_2");
			for (int num20 = 1; num20 < Main.gemChainTexture.Length; num20++)
			{
				Main.gemChainTexture[num20] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"GemChain_",
					num20
				}));
			}
			for (int num21 = 1; num21 < Main.golemTexture.Length; num21++)
			{
				Main.golemTexture[num21] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"GolemLights",
					num21
				}));
			}
			Main.fontItemStack = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Item_Stack");
			Main.fontMouseText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Mouse_Text");
			Main.fontDeathText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Death_Text");
			Main.fontCombatText[0] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Text");
			Main.fontCombatText[1] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Crit");
		}
		protected override void UnloadContent()
		{
		}
		public static void stopMoonEvent()
		{
			if (Main.pumpkinMoon)
			{
				Main.pumpkinMoon = false;
				if (Main.netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveCount = 0;
				}
			}
			if (Main.snowMoon)
			{
				Main.snowMoon = false;
				if (Main.netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveCount = 0;
				}
			}
		}
		public static void startPumpkinMoon()
		{
			Main.pumpkinMoon = true;
			Main.snowMoon = false;
			Main.bloodMoon = false;
			if (Main.netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveCount = 1;
				string text = "First Wave: " + Main.npcName[305];
				if (Main.netMode == 0)
				{
					Main.NewText(text, 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0);
				}
			}
		}
		public static void startSnowMoon()
		{
			Main.snowMoon = true;
			Main.pumpkinMoon = false;
			Main.bloodMoon = false;
			if (Main.netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveCount = 1;
				string text = "First Wave: Zombie Elf and Gingerbread Man";
				if (Main.netMode == 0)
				{
					Main.NewText(text, 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0);
				}
			}
		}
		protected void UpdateMusic()
		{
			if (Main.musicVolume == 0f)
			{
				Main.curMusic = 0;
			}
			try
			{
				if (!Main.dedServ)
				{
					if (Main.curMusic > 0)
					{
						if (!base.IsActive)
						{
							if (Main.music[Main.curMusic].IsPaused || !Main.music[Main.curMusic].IsPlaying)
							{
								goto IL_89;
							}
							try
							{
								Main.music[Main.curMusic].Pause();
								goto IL_89;
							}
							catch
							{
								goto IL_89;
							}
						}
						if (Main.music[Main.curMusic].IsPaused)
						{
							Main.music[Main.curMusic].Resume();
						}
					}
					IL_89:
					if (!base.IsActive)
					{
						if (!Main.music[28].IsPaused && Main.music[28].IsPlaying)
						{
							try
							{
								Main.music[28].Pause();
							}
							catch
							{
							}
						}
					}
					else
					{
						bool flag = false;
						bool flag2 = false;
						bool flag3 = false;
						bool flag4 = false;
						bool flag5 = false;
						bool flag6 = false;
						Rectangle rectangle = new Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
						int num = 5000;
						for (int i = 0; i < 200; i++)
						{
							if (Main.npc[i].active)
							{
								if (Main.npc[i].type == 262 || Main.npc[i].type == 263 || Main.npc[i].type == 264)
								{
									Rectangle value = new Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
									if (rectangle.Intersects(value))
									{
										flag6 = true;
										break;
									}
								}
								else
								{
									if (Main.npc[i].type == 134 || Main.npc[i].type == 143 || Main.npc[i].type == 144 || Main.npc[i].type == 145 || Main.npc[i].type == 266)
									{
										Rectangle value2 = new Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
										if (rectangle.Intersects(value2))
										{
											flag3 = true;
											break;
										}
									}
									else
									{
										if ((Main.npc[i].type >= 212 && Main.npc[i].type <= 216) || Main.npc[i].type == 245)
										{
											Rectangle value3 = new Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
											if (rectangle.Intersects(value3))
											{
												flag4 = true;
												break;
											}
										}
										else
										{
											if (Main.npc[i].type == 113 || Main.npc[i].type == 114 || Main.npc[i].type == 125 || Main.npc[i].type == 126)
											{
												Rectangle value4 = new Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
												if (rectangle.Intersects(value4))
												{
													flag2 = true;
													break;
												}
											}
											else
											{
												if (Main.npc[i].type == 222)
												{
													Rectangle value5 = new Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
													if (rectangle.Intersects(value5))
													{
														flag5 = true;
														break;
													}
												}
												else
												{
													if (Main.npc[i].boss || Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15 || Main.npc[i].type == 134 || Main.npc[i].type == 26 || Main.npc[i].type == 27 || Main.npc[i].type == 28 || Main.npc[i].type == 29 || Main.npc[i].type == 111)
													{
														Rectangle value6 = new Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
														if (rectangle.Intersects(value6))
														{
															flag = true;
															break;
														}
													}
												}
											}
										}
									}
								}
							}
						}
						int num2 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
						if (Main.musicVolume == 0f)
						{
							this.newMusic = 0;
						}
						else
						{
							if (Main.gameMenu)
							{
								if (Main.netMode != 2)
								{
									this.newMusic = 6;
								}
								else
								{
									this.newMusic = 0;
								}
							}
							else
							{
								float num3 = (float)(Main.maxTilesX / 4200);
								num3 *= num3;
								float num4 = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num3)) / (Main.worldSurface / 5.0));
								if (flag6)
								{
									this.newMusic = 24;
								}
								else
								{
									if (flag2)
									{
										this.newMusic = 12;
									}
									else
									{
										if (flag)
										{
											this.newMusic = 5;
										}
										else
										{
											if (flag3)
											{
												this.newMusic = 13;
											}
											else
											{
												if (flag4)
												{
													this.newMusic = 17;
												}
												else
												{
													if (flag5)
													{
														this.newMusic = 25;
													}
													else
													{
														if (Main.player[Main.myPlayer].position.Y > (float)((Main.maxTilesY - 200) * 16))
														{
															this.newMusic = 2;
														}
														else
														{
															if (Main.eclipse && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
															{
																this.newMusic = 27;
															}
															else
															{
																if (num4 < 1f)
																{
																	this.newMusic = 15;
																}
																else
																{
																	if (Main.tile[(int)(Main.player[Main.myPlayer].Center().X / 16f), (int)(Main.player[Main.myPlayer].Center().Y / 16f)].wall == 87)
																	{
																		this.newMusic = 26;
																	}
																	else
																	{
																		if ((Main.bgStyle == 9 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2)) || Main.ugBack == 2)
																		{
																			this.newMusic = 29;
																		}
																		else
																		{
																			if (Main.player[Main.myPlayer].zoneEvil)
																			{
																				if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
																				{
																					this.newMusic = 10;
																				}
																				else
																				{
																					this.newMusic = 8;
																				}
																			}
																			else
																			{
																				if (Main.player[Main.myPlayer].zoneBlood)
																				{
																					if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
																					{
																						this.newMusic = 16;
																					}
																					else
																					{
																						this.newMusic = 16;
																					}
																				}
																				else
																				{
																					if (Main.player[Main.myPlayer].zoneDungeon)
																					{
																						this.newMusic = 23;
																					}
																					else
																					{
																						if (Main.player[Main.myPlayer].zoneMeteor)
																						{
																							this.newMusic = 2;
																						}
																						else
																						{
																							if (Main.player[Main.myPlayer].zoneJungle)
																							{
																								this.newMusic = 7;
																							}
																							else
																							{
																								if (Main.player[Main.myPlayer].zoneSnow)
																								{
																									if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
																									{
																										this.newMusic = 20;
																									}
																									else
																									{
																										this.newMusic = 14;
																									}
																								}
																								else
																								{
																									if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2))
																									{
																										if (Main.player[Main.myPlayer].zoneHoly)
																										{
																											this.newMusic = 11;
																										}
																										else
																										{
																											if (Main.ugMusic == 0)
																											{
																												Main.ugMusic = 4;
																											}
																											if (!Main.music[4].IsPlaying && !Main.music[31].IsPlaying)
																											{
																												if (Main.musicFade[4] == 1f)
																												{
																													Main.musicFade[31] = 1f;
																												}
																												if (Main.musicFade[31] == 1f)
																												{
																													Main.musicFade[4] = 1f;
																												}
																												int num5 = Main.rand.Next(2);
																												if (num5 == 0)
																												{
																													Main.ugMusic = 4;
																													Main.musicFade[31] = 0f;
																												}
																												else
																												{
																													if (num5 == 1)
																													{
																														Main.ugMusic = 31;
																														Main.musicFade[4] = 0f;
																													}
																												}
																											}
																											this.newMusic = Main.ugMusic;
																										}
																									}
																									else
																									{
																										if (Main.dayTime && Main.player[Main.myPlayer].zoneHoly)
																										{
																											if (Main.cloudAlpha > 0f && !Main.gameMenu)
																											{
																												this.newMusic = 19;
																											}
																											else
																											{
																												this.newMusic = 9;
																											}
																										}
																										else
																										{
																											if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && (num2 < 380 || num2 > Main.maxTilesX - 380))
																											{
																												this.newMusic = 22;
																											}
																											else
																											{
																												if (Main.sandTiles > 1000)
																												{
																													this.newMusic = 21;
																												}
																												else
																												{
																													if (Main.dayTime)
																													{
																														if (Main.cloudAlpha > 0f && !Main.gameMenu)
																														{
																															this.newMusic = 19;
																														}
																														else
																														{
																															if (Main.dayMusic == 0)
																															{
																																Main.dayMusic = 1;
																															}
																															if (!Main.music[1].IsPlaying && !Main.music[18].IsPlaying)
																															{
																																int num6 = Main.rand.Next(2);
																																if (num6 == 0)
																																{
																																	Main.dayMusic = 1;
																																}
																																else
																																{
																																	if (num6 == 1)
																																	{
																																		Main.dayMusic = 18;
																																	}
																																}
																															}
																															this.newMusic = Main.dayMusic;
																														}
																													}
																													else
																													{
																														if (!Main.dayTime)
																														{
																															if (Main.bloodMoon)
																															{
																																this.newMusic = 2;
																															}
																															else
																															{
																																if (Main.cloudAlpha > 0f && !Main.gameMenu)
																																{
																																	this.newMusic = 19;
																																}
																																else
																																{
																																	this.newMusic = 3;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
								if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.pumpkinMoon)
								{
									this.newMusic = 30;
								}
								if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.snowMoon)
								{
									this.newMusic = 32;
								}
							}
						}
						if (Main.gameMenu || Main.musicVolume == 0f)
						{
							Main.musicBox2 = -1;
							Main.musicBox = -1;
						}
						if (Main.musicBox2 >= 0)
						{
							Main.musicBox = Main.musicBox2;
						}
						if (Main.musicBox >= 0)
						{
							if (Main.musicBox == 0)
							{
								this.newMusic = 1;
							}
							if (Main.musicBox == 1)
							{
								this.newMusic = 2;
							}
							if (Main.musicBox == 2)
							{
								this.newMusic = 3;
							}
							if (Main.musicBox == 4)
							{
								this.newMusic = 4;
							}
							if (Main.musicBox == 5)
							{
								this.newMusic = 5;
							}
							if (Main.musicBox == 3)
							{
								this.newMusic = 6;
							}
							if (Main.musicBox == 6)
							{
								this.newMusic = 7;
							}
							if (Main.musicBox == 7)
							{
								this.newMusic = 8;
							}
							if (Main.musicBox == 9)
							{
								this.newMusic = 9;
							}
							if (Main.musicBox == 8)
							{
								this.newMusic = 10;
							}
							if (Main.musicBox == 11)
							{
								this.newMusic = 11;
							}
							if (Main.musicBox == 10)
							{
								this.newMusic = 12;
							}
							if (Main.musicBox == 12)
							{
								this.newMusic = 13;
							}
							if (Main.musicBox == 13)
							{
								this.newMusic = 14;
							}
							if (Main.musicBox == 14)
							{
								this.newMusic = 15;
							}
							if (Main.musicBox == 15)
							{
								this.newMusic = 16;
							}
							if (Main.musicBox == 16)
							{
								this.newMusic = 17;
							}
							if (Main.musicBox == 17)
							{
								this.newMusic = 18;
							}
							if (Main.musicBox == 18)
							{
								this.newMusic = 19;
							}
							if (Main.musicBox == 19)
							{
								this.newMusic = 20;
							}
							if (Main.musicBox == 20)
							{
								this.newMusic = 21;
							}
							if (Main.musicBox == 21)
							{
								this.newMusic = 22;
							}
							if (Main.musicBox == 22)
							{
								this.newMusic = 23;
							}
							if (Main.musicBox == 23)
							{
								this.newMusic = 24;
							}
							if (Main.musicBox == 24)
							{
								this.newMusic = 25;
							}
							if (Main.musicBox == 25)
							{
								this.newMusic = 26;
							}
							if (Main.musicBox == 26)
							{
								this.newMusic = 27;
							}
							if (Main.musicBox == 27)
							{
								this.newMusic = 29;
							}
							if (Main.musicBox == 28)
							{
								this.newMusic = 30;
							}
							if (Main.musicBox == 29)
							{
								this.newMusic = 31;
							}
							if (Main.musicBox == 30)
							{
								this.newMusic = 32;
							}
						}
						Main.curMusic = this.newMusic;
						for (int j = 1; j < 33; j++)
						{
							if (j == 28)
							{
								if (Main.cloudAlpha > 0f && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && !Main.player[Main.myPlayer].zoneSnow)
								{
									if (Main.ambientVolume == 0f)
									{
										if (Main.music[j].IsPlaying)
										{
											Main.music[j].Stop(AudioStopOptions.Immediate);
										}
									}
									else
									{
										if (!Main.music[j].IsPlaying)
										{
											Main.music[j] = Main.soundBank.GetCue("Music_" + j);
											Main.music[j].Play();
											Main.music[j].SetVariable("Volume", Main.musicFade[j] * Main.ambientVolume);
										}
										else
										{
											if (Main.music[j].IsPaused)
											{
												Main.music[j].Resume();
											}
											else
											{
												Main.musicFade[j] += 0.005f;
												if (Main.musicFade[j] > 1f)
												{
													Main.musicFade[j] = 1f;
												}
												Main.music[j].SetVariable("Volume", Main.musicFade[j] * Main.ambientVolume);
											}
										}
									}
								}
								else
								{
									if (Main.music[j].IsPlaying)
									{
										if (Main.musicFade[Main.curMusic] > 0.25f)
										{
											Main.musicFade[j] -= 0.005f;
										}
										else
										{
											if (Main.curMusic == 0)
											{
												Main.musicFade[j] = 0f;
											}
										}
										if (Main.musicFade[j] <= 0f)
										{
											Main.musicFade[j] -= 0f;
											Main.music[j].Stop(AudioStopOptions.Immediate);
										}
										else
										{
											Main.music[j].SetVariable("Volume", Main.musicFade[j] * Main.ambientVolume);
										}
									}
									else
									{
										Main.musicFade[j] = 0f;
									}
								}
							}
							else
							{
								if (j == Main.curMusic)
								{
									if (!Main.music[j].IsPlaying)
									{
										Main.music[j] = Main.soundBank.GetCue("Music_" + j);
										Main.music[j].Play();
										Main.music[j].SetVariable("Volume", Main.musicFade[j] * Main.musicVolume);
									}
									else
									{
										Main.musicFade[j] += 0.005f;
										if (Main.musicFade[j] > 1f)
										{
											Main.musicFade[j] = 1f;
										}
										Main.music[j].SetVariable("Volume", Main.musicFade[j] * Main.musicVolume);
									}
								}
								else
								{
									if (Main.music[j].IsPlaying)
									{
										if (Main.musicFade[Main.curMusic] > 0.25f)
										{
											Main.musicFade[j] -= 0.005f;
										}
										else
										{
											if (Main.curMusic == 0)
											{
												Main.musicFade[j] = 0f;
											}
										}
										if (Main.musicFade[j] <= 0f)
										{
											Main.musicFade[j] -= 0f;
											Main.music[j].Stop(AudioStopOptions.Immediate);
										}
										else
										{
											Main.music[j].SetVariable("Volume", Main.musicFade[j] * Main.musicVolume);
										}
									}
									else
									{
										Main.musicFade[j] = 0f;
									}
								}
							}
						}
						if (Main.musicError > 0)
						{
							Main.musicError--;
						}
					}
				}
			}
			catch
			{
				Main.musicError++;
				if (Main.musicError >= 100)
				{
					Main.musicError = 0;
					Main.musicVolume = 0f;
				}
			}
		}
		public static void snowing()
		{
			if (Main.gamePaused)
			{
				return;
			}
			if (Main.snowTiles > 0 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0)
			{
				int maxValue = 800 / Main.snowTiles;
				float num = (float)Main.screenWidth / 1920f;
				int num2 = (int)(500f * num);
				num2 = (int)((float)num2 * (1f + 2f * Main.cloudAlpha));
				float num3 = 1f + 50f * Main.cloudAlpha;
				int num4 = 0;
				while ((float)num4 < num3)
				{
					try
					{
						if ((float)Main.snowDust >= (float)num2 * (Main.gfxQuality / 2f + 0.5f) + (float)num2 * 0.1f)
						{
							break;
						}
						if (Main.rand.Next(maxValue) == 0)
						{
							int num5 = Main.rand.Next(Main.screenWidth + 1000) - 500;
							int num6 = (int)Main.screenPosition.Y - Main.rand.Next(50);
							if (Main.player[Main.myPlayer].velocity.Y > 0f)
							{
								num6 -= (int)Main.player[Main.myPlayer].velocity.Y;
							}
							if (Main.rand.Next(5) == 0)
							{
								num5 = Main.rand.Next(500) - 500;
							}
							else
							{
								if (Main.rand.Next(5) == 0)
								{
									num5 = Main.rand.Next(500) + Main.screenWidth;
								}
							}
							if (num5 < 0 || num5 > Main.screenWidth)
							{
								num6 += Main.rand.Next((int)((double)Main.screenHeight * 0.5)) + (int)((double)Main.screenHeight * 0.1);
							}
							num5 += (int)Main.screenPosition.X;
							int num7 = num5 / 16;
							int num8 = num6 / 16;
							if (Main.tile[num7, num8] != null && Main.tile[num7, num8].wall == 0)
							{
								int num9 = Dust.NewDust(new Vector2((float)num5, (float)num6), 10, 10, 76, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num9].scale += Main.cloudAlpha * 0.2f;
								Main.dust[num9].velocity.Y = 3f + (float)Main.rand.Next(30) * 0.1f;
								Dust expr_291_cp_0 = Main.dust[num9];
								expr_291_cp_0.velocity.Y = expr_291_cp_0.velocity.Y * Main.dust[num9].scale;
								Main.dust[num9].velocity.X = Main.windSpeed + (float)Main.rand.Next(-10, 10) * 0.1f;
								Dust expr_2E4_cp_0 = Main.dust[num9];
								expr_2E4_cp_0.velocity.X = expr_2E4_cp_0.velocity.X + Main.windSpeed * Main.cloudAlpha * 10f;
								Dust expr_30E_cp_0 = Main.dust[num9];
								expr_30E_cp_0.velocity.Y = expr_30E_cp_0.velocity.Y * (1f + 0.3f * Main.cloudAlpha);
								Main.dust[num9].scale += Main.cloudAlpha * 0.2f;
								Main.dust[num9].velocity *= 1f + Main.cloudAlpha * 0.5f;
							}
						}
					}
					catch
					{
					}
					num4++;
				}
			}
		}
		public static void checkXMas()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 15 && month == 12)
			{
				Main.xMas = true;
				return;
			}
			Main.xMas = false;
		}
		public static void checkHalloween()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 20 && month == 10)
			{
				Main.halloween = true;
				return;
			}
			if (day <= 10 && month == 11)
			{
				Main.halloween = true;
				return;
			}
			Main.halloween = false;
		}
		public void updateCloudLayer()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.netMode == 0 && Main.gameMenu)
			{
				return;
			}
			int num = 86400;
			int num2 = num / 24;
			float num3 = 1f + 4f * Main.cloudAlpha;
			if (Main.cloudBGActive > 0f)
			{
				if (Main.cloudBGActive > 1f)
				{
					Main.cloudBGActive -= (float)Main.dayRate / num3;
				}
				if (Main.cloudBGActive < 1f)
				{
					Main.cloudBGActive = 1f;
				}
				if (Main.cloudBGActive == 1f && Main.rand.Next((int)((float)(num2 * 2 / Main.dayRate) * num3)) == 0)
				{
					Main.cloudBGActive = (float)(-(float)Main.rand.Next(num2 * 4, num * 4));
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
						return;
					}
				}
			}
			else
			{
				if (Main.cloudBGActive < 0f)
				{
					Main.cloudBGActive += (float)Main.dayRate * num3;
					if (Main.raining)
					{
						Main.cloudBGActive += (float)(2 * Main.dayRate) * num3;
					}
				}
				if (Main.cloudBGActive > 0f)
				{
					Main.cloudBGActive = 0f;
				}
				if (Main.cloudBGActive == 0f && Main.rand.Next((int)((float)(num2 * 8 / Main.dayRate) / num3)) == 0)
				{
					Main.cloudBGActive = (float)Main.rand.Next(num2 * 3, num * 2);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
					}
				}
			}
		}
		public static void TeleportEffect(Rectangle effectRect, int Style)
		{
			if (Style == 1)
			{
				Main.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 8);
				int num = effectRect.Width * effectRect.Height / 5;
				for (int i = 0; i < num; i++)
				{
					int num2 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 164, 0f, 0f, 0, default(Color), 1f);
					Main.dust[num2].scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (i < 10)
					{
						Main.dust[num2].scale += 0.25f;
					}
					if (i < 5)
					{
						Main.dust[num2].scale += 0.25f;
					}
				}
				return;
			}
			Main.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 6);
			int num3 = effectRect.Width * effectRect.Height / 5;
			for (int j = 0; j < num3; j++)
			{
				int num4 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 159, 0f, 0f, 0, default(Color), 1f);
				Main.dust[num4].scale = (float)Main.rand.Next(20, 70) * 0.01f;
				if (j < 10)
				{
					Main.dust[num4].scale += 0.25f;
				}
				if (j < 5)
				{
					Main.dust[num4].scale += 0.25f;
				}
			}
		}
		public static void Ambience()
		{
			Main.ambientCounter++;
			if (Main.ambientCounter >= 15)
			{
				Main.ambientCounter = 0;
				Main.PlaySound(34, (int)Main.ambientWaterfallX, (int)Main.ambientWaterfallY, (int)Main.ambientWaterfallStrength);
				float num = Math.Abs(Main.ambientLavaX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavaY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
				float num2 = Math.Abs(Main.ambientLavafallX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavafallY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
				float num3 = Main.ambientLavaX;
				float num4 = Main.ambientLavaY;
				if (num2 < num)
				{
					num3 = Main.ambientLavafallX;
					num4 = Main.ambientLavafallY;
				}
				float num5 = Main.ambientLavafallStrength + Main.ambientLavaStrength;
				Main.PlaySound(35, (int)num3, (int)num4, (int)num5);
			}
		}
		public static void CritterCages()
		{
			if (Main.critterCage)
			{
				for (int i = 0; i < Main.cageFrames; i++)
				{
					if (Main.bunnyCageFrame[i] == 0)
					{
						Main.bunnyCageFrameCounter[i]++;
						if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								int num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.bunnyCageFrame[i] = 4;
								}
								else
								{
									if (num <= 2)
									{
										Main.bunnyCageFrame[i] = 2;
									}
									else
									{
										Main.bunnyCageFrame[i] = 1;
									}
								}
							}
							Main.bunnyCageFrameCounter[i] = 0;
						}
					}
					else
					{
						if (Main.bunnyCageFrame[i] == 1)
						{
							Main.bunnyCageFrameCounter[i]++;
							if (Main.bunnyCageFrameCounter[i] >= 10)
							{
								Main.bunnyCageFrameCounter[i] = 0;
								Main.bunnyCageFrame[i] = 0;
							}
						}
						else
						{
							if (Main.bunnyCageFrame[i] >= 2 && Main.bunnyCageFrame[i] <= 3)
							{
								Main.bunnyCageFrameCounter[i]++;
								if (Main.bunnyCageFrameCounter[i] >= 10)
								{
									Main.bunnyCageFrameCounter[i] = 0;
									Main.bunnyCageFrame[i]++;
								}
								if (Main.bunnyCageFrame[i] > 3)
								{
									Main.bunnyCageFrame[i] = 0;
								}
							}
							else
							{
								if (Main.bunnyCageFrame[i] >= 4 && Main.bunnyCageFrame[i] <= 10)
								{
									Main.bunnyCageFrameCounter[i]++;
									if (Main.bunnyCageFrameCounter[i] >= 5)
									{
										Main.bunnyCageFrameCounter[i] = 0;
										Main.bunnyCageFrame[i]++;
									}
								}
								else
								{
									if (Main.bunnyCageFrame[i] == 11)
									{
										Main.bunnyCageFrameCounter[i]++;
										if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
										{
											if (Main.rand.Next(3) != 0)
											{
												if (Main.rand.Next(7) == 0)
												{
													Main.bunnyCageFrame[i] = 13;
												}
												else
												{
													Main.bunnyCageFrame[i] = 12;
												}
											}
											Main.bunnyCageFrameCounter[i] = 0;
										}
									}
									else
									{
										if (Main.bunnyCageFrame[i] == 12)
										{
											Main.bunnyCageFrameCounter[i]++;
											if (Main.bunnyCageFrameCounter[i] >= 10)
											{
												Main.bunnyCageFrameCounter[i] = 0;
												Main.bunnyCageFrame[i] = 11;
											}
										}
										else
										{
											if (Main.bunnyCageFrame[i] >= 13)
											{
												Main.bunnyCageFrameCounter[i]++;
												if (Main.bunnyCageFrameCounter[i] >= 5)
												{
													Main.bunnyCageFrameCounter[i] = 0;
													Main.bunnyCageFrame[i]++;
												}
												if (Main.bunnyCageFrame[i] > 21)
												{
													Main.bunnyCageFrame[i] = 0;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int j = 0; j < Main.cageFrames; j++)
				{
					if (Main.squirrelCageFrame[j] == 0)
					{
						Main.squirrelCageFrameCounter[j]++;
						if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								int num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrame[j] = 4;
								}
								else
								{
									if (num <= 2)
									{
										Main.squirrelCageFrame[j] = 2;
									}
									else
									{
										Main.squirrelCageFrame[j] = 1;
									}
								}
							}
							Main.squirrelCageFrameCounter[j] = 0;
						}
					}
					else
					{
						if (Main.squirrelCageFrame[j] == 1)
						{
							Main.squirrelCageFrameCounter[j]++;
							if (Main.squirrelCageFrameCounter[j] >= 10)
							{
								Main.squirrelCageFrameCounter[j] = 0;
								Main.squirrelCageFrame[j] = 0;
							}
						}
						else
						{
							if (Main.squirrelCageFrame[j] >= 2 && Main.squirrelCageFrame[j] <= 3)
							{
								Main.squirrelCageFrameCounter[j]++;
								if (Main.squirrelCageFrameCounter[j] >= 5)
								{
									Main.squirrelCageFrameCounter[j] = 0;
									Main.squirrelCageFrame[j]++;
								}
								if (Main.squirrelCageFrame[j] > 3)
								{
									if (Main.rand.Next(5) == 0)
									{
										Main.squirrelCageFrame[j] = 0;
									}
									else
									{
										Main.squirrelCageFrame[j] = 2;
									}
								}
							}
							else
							{
								if (Main.squirrelCageFrame[j] >= 4 && Main.squirrelCageFrame[j] <= 8)
								{
									Main.squirrelCageFrameCounter[j]++;
									if (Main.squirrelCageFrameCounter[j] >= 5)
									{
										Main.squirrelCageFrameCounter[j] = 0;
										Main.squirrelCageFrame[j]++;
									}
								}
								else
								{
									if (Main.squirrelCageFrame[j] == 9)
									{
										Main.squirrelCageFrameCounter[j]++;
										if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
										{
											if (Main.rand.Next(3) != 0)
											{
												int num = Main.rand.Next(7);
												if (num == 0)
												{
													Main.squirrelCageFrame[j] = 13;
												}
												else
												{
													if (num <= 2)
													{
														Main.squirrelCageFrame[j] = 11;
													}
													else
													{
														Main.squirrelCageFrame[j] = 10;
													}
												}
											}
											Main.squirrelCageFrameCounter[j] = 0;
										}
									}
									else
									{
										if (Main.squirrelCageFrame[j] == 10)
										{
											Main.squirrelCageFrameCounter[j]++;
											if (Main.squirrelCageFrameCounter[j] >= 10)
											{
												Main.squirrelCageFrameCounter[j] = 0;
												Main.squirrelCageFrame[j] = 9;
											}
										}
										else
										{
											if (Main.squirrelCageFrame[j] == 11 || Main.squirrelCageFrame[j] == 12)
											{
												Main.squirrelCageFrameCounter[j]++;
												if (Main.squirrelCageFrameCounter[j] >= 5)
												{
													Main.squirrelCageFrame[j]++;
													if (Main.squirrelCageFrame[j] > 12)
													{
														if (Main.rand.Next(5) != 0)
														{
															Main.squirrelCageFrame[j] = 11;
														}
														else
														{
															Main.squirrelCageFrame[j] = 9;
														}
													}
													Main.squirrelCageFrameCounter[j] = 0;
												}
											}
											else
											{
												if (Main.squirrelCageFrame[j] >= 13)
												{
													Main.squirrelCageFrameCounter[j]++;
													if (Main.squirrelCageFrameCounter[j] >= 5)
													{
														Main.squirrelCageFrameCounter[j] = 0;
														Main.squirrelCageFrame[j]++;
													}
													if (Main.squirrelCageFrame[j] > 17)
													{
														Main.squirrelCageFrame[j] = 0;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int k = 0; k < Main.cageFrames; k++)
				{
					if (Main.mallardCageFrame[k] == 0 || Main.mallardCageFrame[k] == 4)
					{
						Main.mallardCageFrameCounter[k]++;
						if (Main.mallardCageFrameCounter[k] > Main.rand.Next(45, 2700))
						{
							if ((Main.mallardCageFrame[k] == 0 && Main.rand.Next(3) != 0) || (Main.mallardCageFrame[k] == 4 && Main.rand.Next(5) == 0))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.mallardCageFrame[k] = 5;
								}
								else
								{
									if (Main.rand.Next(3) == 0)
									{
										if (Main.mallardCageFrame[k] == 4)
										{
											Main.mallardCageFrame[k] = 0;
										}
										else
										{
											Main.mallardCageFrame[k] = 4;
										}
									}
									else
									{
										Main.mallardCageFrame[k] = 1;
									}
								}
							}
							Main.mallardCageFrameCounter[k] = 0;
						}
					}
					else
					{
						if (Main.mallardCageFrame[k] >= 1 && Main.mallardCageFrame[k] <= 3)
						{
							Main.mallardCageFrameCounter[k]++;
							if (Main.mallardCageFrameCounter[k] >= 5)
							{
								Main.mallardCageFrameCounter[k] = 0;
								Main.mallardCageFrame[k]++;
							}
							if (Main.mallardCageFrame[k] > 3)
							{
								if (Main.rand.Next(5) == 0)
								{
									Main.mallardCageFrame[k] = 0;
								}
								else
								{
									Main.mallardCageFrame[k] = 1;
								}
							}
						}
						else
						{
							if (Main.mallardCageFrame[k] >= 5 && Main.mallardCageFrame[k] <= 11)
							{
								Main.mallardCageFrameCounter[k]++;
								if (Main.mallardCageFrameCounter[k] >= 5)
								{
									Main.mallardCageFrameCounter[k] = 0;
									Main.mallardCageFrame[k]++;
								}
							}
							else
							{
								if (Main.mallardCageFrame[k] == 12 || Main.mallardCageFrame[k] == 16)
								{
									Main.mallardCageFrameCounter[k]++;
									if (Main.mallardCageFrameCounter[k] > Main.rand.Next(45, 2700))
									{
										if ((Main.mallardCageFrame[k] == 12 && Main.rand.Next(3) != 0) || (Main.mallardCageFrame[k] == 16 && Main.rand.Next(5) == 0))
										{
											if (Main.rand.Next(6) == 0)
											{
												Main.mallardCageFrame[k] = 17;
											}
											else
											{
												if (Main.rand.Next(3) == 0)
												{
													if (Main.mallardCageFrame[k] == 16)
													{
														Main.mallardCageFrame[k] = 12;
													}
													else
													{
														Main.mallardCageFrame[k] = 16;
													}
												}
												else
												{
													Main.mallardCageFrame[k] = 13;
												}
											}
										}
										Main.mallardCageFrameCounter[k] = 0;
									}
								}
								else
								{
									if (Main.mallardCageFrame[k] >= 13 && Main.mallardCageFrame[k] <= 15)
									{
										Main.mallardCageFrameCounter[k]++;
										if (Main.mallardCageFrameCounter[k] >= 5)
										{
											Main.mallardCageFrame[k]++;
											if (Main.mallardCageFrame[k] > 15)
											{
												if (Main.rand.Next(5) != 0)
												{
													Main.mallardCageFrame[k] = 12;
												}
												else
												{
													Main.mallardCageFrame[k] = 13;
												}
											}
											Main.mallardCageFrameCounter[k] = 0;
										}
									}
									else
									{
										if (Main.mallardCageFrame[k] >= 17)
										{
											Main.mallardCageFrameCounter[k]++;
											if (Main.mallardCageFrameCounter[k] >= 5)
											{
												Main.mallardCageFrameCounter[k] = 0;
												Main.mallardCageFrame[k]++;
											}
											if (Main.mallardCageFrame[k] > 23)
											{
												Main.mallardCageFrame[k] = 0;
											}
										}
									}
								}
							}
						}
					}
				}
				for (int l = 0; l < Main.cageFrames; l++)
				{
					if (Main.duckCageFrame[l] == 0 || Main.duckCageFrame[l] == 4)
					{
						Main.duckCageFrameCounter[l]++;
						if (Main.duckCageFrameCounter[l] > Main.rand.Next(45, 2700))
						{
							if ((Main.duckCageFrame[l] == 0 && Main.rand.Next(3) != 0) || (Main.duckCageFrame[l] == 4 && Main.rand.Next(5) == 0))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.duckCageFrame[l] = 5;
								}
								else
								{
									if (Main.rand.Next(3) == 0)
									{
										if (Main.duckCageFrame[l] == 4)
										{
											Main.duckCageFrame[l] = 0;
										}
										else
										{
											Main.duckCageFrame[l] = 4;
										}
									}
									else
									{
										Main.duckCageFrame[l] = 1;
									}
								}
							}
							Main.duckCageFrameCounter[l] = 0;
						}
					}
					else
					{
						if (Main.duckCageFrame[l] >= 1 && Main.duckCageFrame[l] <= 3)
						{
							Main.duckCageFrameCounter[l]++;
							if (Main.duckCageFrameCounter[l] >= 5)
							{
								Main.duckCageFrameCounter[l] = 0;
								Main.duckCageFrame[l]++;
							}
							if (Main.duckCageFrame[l] > 3)
							{
								if (Main.rand.Next(5) == 0)
								{
									Main.duckCageFrame[l] = 0;
								}
								else
								{
									Main.duckCageFrame[l] = 1;
								}
							}
						}
						else
						{
							if (Main.duckCageFrame[l] >= 5 && Main.duckCageFrame[l] <= 11)
							{
								Main.duckCageFrameCounter[l]++;
								if (Main.duckCageFrameCounter[l] >= 5)
								{
									Main.duckCageFrameCounter[l] = 0;
									Main.duckCageFrame[l]++;
								}
							}
							else
							{
								if (Main.duckCageFrame[l] == 12 || Main.duckCageFrame[l] == 16)
								{
									Main.duckCageFrameCounter[l]++;
									if (Main.duckCageFrameCounter[l] > Main.rand.Next(45, 2700))
									{
										if ((Main.duckCageFrame[l] == 12 && Main.rand.Next(3) != 0) || (Main.duckCageFrame[l] == 16 && Main.rand.Next(5) == 0))
										{
											if (Main.rand.Next(6) == 0)
											{
												Main.duckCageFrame[l] = 17;
											}
											else
											{
												if (Main.rand.Next(3) == 0)
												{
													if (Main.duckCageFrame[l] == 16)
													{
														Main.duckCageFrame[l] = 12;
													}
													else
													{
														Main.duckCageFrame[l] = 16;
													}
												}
												else
												{
													Main.duckCageFrame[l] = 13;
												}
											}
										}
										Main.duckCageFrameCounter[l] = 0;
									}
								}
								else
								{
									if (Main.duckCageFrame[l] >= 13 && Main.duckCageFrame[l] <= 15)
									{
										Main.duckCageFrameCounter[l]++;
										if (Main.duckCageFrameCounter[l] >= 5)
										{
											Main.duckCageFrame[l]++;
											if (Main.duckCageFrame[l] > 15)
											{
												if (Main.rand.Next(5) != 0)
												{
													Main.duckCageFrame[l] = 12;
												}
												else
												{
													Main.duckCageFrame[l] = 13;
												}
											}
											Main.duckCageFrameCounter[l] = 0;
										}
									}
									else
									{
										if (Main.duckCageFrame[l] >= 17)
										{
											Main.duckCageFrameCounter[l]++;
											if (Main.duckCageFrameCounter[l] >= 5)
											{
												Main.duckCageFrameCounter[l] = 0;
												Main.duckCageFrame[l]++;
											}
											if (Main.duckCageFrame[l] > 23)
											{
												Main.duckCageFrame[l] = 0;
											}
										}
									}
								}
							}
						}
					}
				}
				for (int m = 0; m < Main.cageFrames; m++)
				{
					if (Main.birdCageFrame[m] == 0)
					{
						Main.birdCageFrameCounter[m]++;
						if (Main.birdCageFrameCounter[m] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.birdCageFrame[m] = 2;
								}
								else
								{
									Main.birdCageFrame[m] = 1;
								}
							}
							Main.birdCageFrameCounter[m] = 0;
						}
					}
					else
					{
						if (Main.birdCageFrame[m] == 1)
						{
							Main.birdCageFrameCounter[m]++;
							if (Main.birdCageFrameCounter[m] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
							{
								Main.birdCageFrameCounter[m] = 0;
								Main.birdCageFrame[m] = 0;
							}
						}
						else
						{
							if (Main.birdCageFrame[m] >= 2 && Main.birdCageFrame[m] <= 5)
							{
								Main.birdCageFrameCounter[m]++;
								if (Main.birdCageFrameCounter[m] >= 5)
								{
									Main.birdCageFrameCounter[m] = 0;
									if (Main.birdCageFrame[m] == 3 && Main.rand.Next(3) == 0)
									{
										Main.birdCageFrame[m] = 13;
									}
									else
									{
										Main.birdCageFrame[m]++;
									}
								}
							}
							else
							{
								if (Main.birdCageFrame[m] == 6)
								{
									Main.birdCageFrameCounter[m]++;
									if (Main.birdCageFrameCounter[m] > Main.rand.Next(45, 2700))
									{
										if (Main.rand.Next(3) != 0)
										{
											if (Main.rand.Next(6) == 0)
											{
												Main.birdCageFrame[m] = 7;
											}
											else
											{
												if (Main.rand.Next(6) == 0)
												{
													Main.birdCageFrame[m] = 11;
												}
											}
										}
										Main.birdCageFrameCounter[m] = 0;
									}
								}
								else
								{
									if (Main.birdCageFrame[m] >= 7 && Main.birdCageFrame[m] <= 10)
									{
										Main.birdCageFrameCounter[m]++;
										if (Main.birdCageFrameCounter[m] >= 5)
										{
											Main.birdCageFrame[m]++;
											if (Main.birdCageFrame[m] > 10)
											{
												Main.birdCageFrame[m] = 0;
											}
											Main.birdCageFrameCounter[m] = 0;
										}
									}
									else
									{
										if (Main.birdCageFrame[m] >= 11 && Main.birdCageFrame[m] <= 13)
										{
											Main.birdCageFrameCounter[m]++;
											if (Main.birdCageFrameCounter[m] >= 5)
											{
												Main.birdCageFrame[m]++;
												Main.birdCageFrameCounter[m] = 0;
											}
										}
										else
										{
											if (Main.birdCageFrame[m] == 14)
											{
												Main.birdCageFrameCounter[m]++;
												if (Main.birdCageFrameCounter[m] > Main.rand.Next(5, 600))
												{
													if (Main.rand.Next(20) == 0)
													{
														Main.birdCageFrame[m] = 16;
													}
													else
													{
														if (Main.rand.Next(20) == 0)
														{
															Main.birdCageFrame[m] = 4;
														}
														else
														{
															Main.birdCageFrame[m] = 15;
														}
													}
													Main.birdCageFrameCounter[m] = 0;
												}
											}
											else
											{
												if (Main.birdCageFrame[m] == 15)
												{
													Main.birdCageFrameCounter[m]++;
													if (Main.birdCageFrameCounter[m] >= 10)
													{
														Main.birdCageFrameCounter[m] = 0;
														Main.birdCageFrame[m] = 14;
													}
												}
												else
												{
													if (Main.birdCageFrame[m] >= 16 && Main.birdCageFrame[m] <= 18)
													{
														Main.birdCageFrameCounter[m]++;
														if (Main.birdCageFrameCounter[m] >= 5)
														{
															Main.birdCageFrame[m]++;
															if (Main.birdCageFrame[m] > 18)
															{
																Main.birdCageFrame[m] = 0;
															}
															Main.birdCageFrameCounter[m] = 0;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int n = 0; n < Main.cageFrames; n++)
				{
					if (Main.blueBirdCageFrame[n] == 0)
					{
						Main.blueBirdCageFrameCounter[n]++;
						if (Main.blueBirdCageFrameCounter[n] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.blueBirdCageFrame[n] = 2;
								}
								else
								{
									Main.blueBirdCageFrame[n] = 1;
								}
							}
							Main.blueBirdCageFrameCounter[n] = 0;
						}
					}
					else
					{
						if (Main.blueBirdCageFrame[n] == 1)
						{
							Main.blueBirdCageFrameCounter[n]++;
							if (Main.blueBirdCageFrameCounter[n] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
							{
								Main.blueBirdCageFrameCounter[n] = 0;
								Main.blueBirdCageFrame[n] = 0;
							}
						}
						else
						{
							if (Main.blueBirdCageFrame[n] >= 2 && Main.blueBirdCageFrame[n] <= 5)
							{
								Main.blueBirdCageFrameCounter[n]++;
								if (Main.blueBirdCageFrameCounter[n] >= 5)
								{
									Main.blueBirdCageFrameCounter[n] = 0;
									if (Main.blueBirdCageFrame[n] == 3 && Main.rand.Next(3) == 0)
									{
										Main.blueBirdCageFrame[n] = 13;
									}
									else
									{
										Main.blueBirdCageFrame[n]++;
									}
								}
							}
							else
							{
								if (Main.blueBirdCageFrame[n] == 6)
								{
									Main.blueBirdCageFrameCounter[n]++;
									if (Main.blueBirdCageFrameCounter[n] > Main.rand.Next(45, 2700))
									{
										if (Main.rand.Next(3) != 0)
										{
											if (Main.rand.Next(6) == 0)
											{
												Main.blueBirdCageFrame[n] = 7;
											}
											else
											{
												if (Main.rand.Next(6) == 0)
												{
													Main.blueBirdCageFrame[n] = 11;
												}
											}
										}
										Main.blueBirdCageFrameCounter[n] = 0;
									}
								}
								else
								{
									if (Main.blueBirdCageFrame[n] >= 7 && Main.blueBirdCageFrame[n] <= 10)
									{
										Main.blueBirdCageFrameCounter[n]++;
										if (Main.blueBirdCageFrameCounter[n] >= 5)
										{
											Main.blueBirdCageFrame[n]++;
											if (Main.blueBirdCageFrame[n] > 10)
											{
												Main.blueBirdCageFrame[n] = 0;
											}
											Main.blueBirdCageFrameCounter[n] = 0;
										}
									}
									else
									{
										if (Main.blueBirdCageFrame[n] >= 11 && Main.blueBirdCageFrame[n] <= 13)
										{
											Main.blueBirdCageFrameCounter[n]++;
											if (Main.blueBirdCageFrameCounter[n] >= 5)
											{
												Main.blueBirdCageFrame[n]++;
												Main.blueBirdCageFrameCounter[n] = 0;
											}
										}
										else
										{
											if (Main.blueBirdCageFrame[n] == 14)
											{
												Main.blueBirdCageFrameCounter[n]++;
												if (Main.blueBirdCageFrameCounter[n] > Main.rand.Next(5, 600))
												{
													if (Main.rand.Next(20) == 0)
													{
														Main.blueBirdCageFrame[n] = 16;
													}
													else
													{
														if (Main.rand.Next(20) == 0)
														{
															Main.blueBirdCageFrame[n] = 4;
														}
														else
														{
															Main.blueBirdCageFrame[n] = 15;
														}
													}
													Main.blueBirdCageFrameCounter[n] = 0;
												}
											}
											else
											{
												if (Main.blueBirdCageFrame[n] == 15)
												{
													Main.blueBirdCageFrameCounter[n]++;
													if (Main.blueBirdCageFrameCounter[n] >= 10)
													{
														Main.blueBirdCageFrameCounter[n] = 0;
														Main.blueBirdCageFrame[n] = 14;
													}
												}
												else
												{
													if (Main.blueBirdCageFrame[n] >= 16 && Main.blueBirdCageFrame[n] <= 18)
													{
														Main.blueBirdCageFrameCounter[n]++;
														if (Main.blueBirdCageFrameCounter[n] >= 5)
														{
															Main.blueBirdCageFrame[n]++;
															if (Main.blueBirdCageFrame[n] > 18)
															{
																Main.blueBirdCageFrame[n] = 0;
															}
															Main.blueBirdCageFrameCounter[n] = 0;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num2 = 0; num2 < Main.cageFrames; num2++)
				{
					if (Main.redBirdCageFrame[num2] == 0)
					{
						Main.redBirdCageFrameCounter[num2]++;
						if (Main.redBirdCageFrameCounter[num2] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.redBirdCageFrame[num2] = 2;
								}
								else
								{
									Main.redBirdCageFrame[num2] = 1;
								}
							}
							Main.redBirdCageFrameCounter[num2] = 0;
						}
					}
					else
					{
						if (Main.redBirdCageFrame[num2] == 1)
						{
							Main.redBirdCageFrameCounter[num2]++;
							if (Main.redBirdCageFrameCounter[num2] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
							{
								Main.redBirdCageFrameCounter[num2] = 0;
								Main.redBirdCageFrame[num2] = 0;
							}
						}
						else
						{
							if (Main.redBirdCageFrame[num2] >= 2 && Main.redBirdCageFrame[num2] <= 5)
							{
								Main.redBirdCageFrameCounter[num2]++;
								if (Main.redBirdCageFrameCounter[num2] >= 5)
								{
									Main.redBirdCageFrameCounter[num2] = 0;
									if (Main.redBirdCageFrame[num2] == 3 && Main.rand.Next(3) == 0)
									{
										Main.redBirdCageFrame[num2] = 13;
									}
									else
									{
										Main.redBirdCageFrame[num2]++;
									}
								}
							}
							else
							{
								if (Main.redBirdCageFrame[num2] == 6)
								{
									Main.redBirdCageFrameCounter[num2]++;
									if (Main.redBirdCageFrameCounter[num2] > Main.rand.Next(45, 2700))
									{
										if (Main.rand.Next(3) != 0)
										{
											if (Main.rand.Next(6) == 0)
											{
												Main.redBirdCageFrame[num2] = 7;
											}
											else
											{
												if (Main.rand.Next(6) == 0)
												{
													Main.redBirdCageFrame[num2] = 11;
												}
											}
										}
										Main.redBirdCageFrameCounter[num2] = 0;
									}
								}
								else
								{
									if (Main.redBirdCageFrame[num2] >= 7 && Main.redBirdCageFrame[num2] <= 10)
									{
										Main.redBirdCageFrameCounter[num2]++;
										if (Main.redBirdCageFrameCounter[num2] >= 5)
										{
											Main.redBirdCageFrame[num2]++;
											if (Main.redBirdCageFrame[num2] > 10)
											{
												Main.redBirdCageFrame[num2] = 0;
											}
											Main.redBirdCageFrameCounter[num2] = 0;
										}
									}
									else
									{
										if (Main.redBirdCageFrame[num2] >= 11 && Main.redBirdCageFrame[num2] <= 13)
										{
											Main.redBirdCageFrameCounter[num2]++;
											if (Main.redBirdCageFrameCounter[num2] >= 5)
											{
												Main.redBirdCageFrame[num2]++;
												Main.redBirdCageFrameCounter[num2] = 0;
											}
										}
										else
										{
											if (Main.redBirdCageFrame[num2] == 14)
											{
												Main.redBirdCageFrameCounter[num2]++;
												if (Main.redBirdCageFrameCounter[num2] > Main.rand.Next(5, 600))
												{
													if (Main.rand.Next(20) == 0)
													{
														Main.redBirdCageFrame[num2] = 16;
													}
													else
													{
														if (Main.rand.Next(20) == 0)
														{
															Main.redBirdCageFrame[num2] = 4;
														}
														else
														{
															Main.redBirdCageFrame[num2] = 15;
														}
													}
													Main.redBirdCageFrameCounter[num2] = 0;
												}
											}
											else
											{
												if (Main.redBirdCageFrame[num2] == 15)
												{
													Main.redBirdCageFrameCounter[num2]++;
													if (Main.redBirdCageFrameCounter[num2] >= 10)
													{
														Main.redBirdCageFrameCounter[num2] = 0;
														Main.redBirdCageFrame[num2] = 14;
													}
												}
												else
												{
													if (Main.redBirdCageFrame[num2] >= 16 && Main.redBirdCageFrame[num2] <= 18)
													{
														Main.redBirdCageFrameCounter[num2]++;
														if (Main.redBirdCageFrameCounter[num2] >= 5)
														{
															Main.redBirdCageFrame[num2]++;
															if (Main.redBirdCageFrame[num2] > 18)
															{
																Main.redBirdCageFrame[num2] = 0;
															}
															Main.redBirdCageFrameCounter[num2] = 0;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num3 = 0; num3 < 2; num3++)
				{
					for (int num4 = 0; num4 < Main.cageFrames; num4++)
					{
						if (Main.scorpionCageFrame[num3, num4] == 0 || Main.scorpionCageFrame[num3, num4] == 7)
						{
							Main.scorpionCageFrameCounter[num3, num4]++;
							if (Main.scorpionCageFrameCounter[num3, num4] > Main.rand.Next(30, 3600))
							{
								if (Main.scorpionCageFrame[num3, num4] == 7)
								{
									Main.scorpionCageFrame[num3, num4] = 0;
								}
								else
								{
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(7) == 0)
										{
											Main.scorpionCageFrame[num3, num4] = 1;
										}
										else
										{
											if (Main.rand.Next(4) == 0)
											{
												Main.scorpionCageFrame[num3, num4] = 8;
											}
											else
											{
												if (Main.rand.Next(3) == 0)
												{
													Main.scorpionCageFrame[num3, num4] = 7;
												}
												else
												{
													Main.scorpionCageFrame[num3, num4] = 14;
												}
											}
										}
									}
								}
								Main.scorpionCageFrameCounter[num3, num4] = 0;
							}
						}
						else
						{
							if (Main.scorpionCageFrame[num3, num4] >= 1 && Main.scorpionCageFrame[num3, num4] <= 2)
							{
								Main.scorpionCageFrameCounter[num3, num4]++;
								if (Main.scorpionCageFrameCounter[num3, num4] >= 10)
								{
									Main.scorpionCageFrameCounter[num3, num4] = 0;
									Main.scorpionCageFrame[num3, num4]++;
								}
							}
							else
							{
								if (Main.scorpionCageFrame[num3, num4] >= 8 && Main.scorpionCageFrame[num3, num4] <= 10)
								{
									Main.scorpionCageFrameCounter[num3, num4]++;
									if (Main.scorpionCageFrameCounter[num3, num4] >= 10)
									{
										Main.scorpionCageFrameCounter[num3, num4] = 0;
										Main.scorpionCageFrame[num3, num4]++;
									}
								}
								else
								{
									if (Main.scorpionCageFrame[num3, num4] == 11)
									{
										Main.scorpionCageFrameCounter[num3, num4]++;
										if (Main.scorpionCageFrameCounter[num3, num4] > Main.rand.Next(45, 5400))
										{
											if (Main.rand.Next(6) == 0)
											{
												Main.scorpionCageFrame[num3, num4] = 12;
											}
											Main.scorpionCageFrameCounter[num3, num4] = 0;
										}
									}
									else
									{
										if (Main.scorpionCageFrame[num3, num4] >= 12 && Main.scorpionCageFrame[num3, num4] <= 13)
										{
											Main.scorpionCageFrameCounter[num3, num4]++;
											if (Main.scorpionCageFrameCounter[num3, num4] >= 10)
											{
												Main.scorpionCageFrameCounter[num3, num4] = 0;
												Main.scorpionCageFrame[num3, num4]++;
												if (Main.scorpionCageFrame[num3, num4] > 13)
												{
													Main.scorpionCageFrame[num3, num4] = 0;
												}
											}
										}
										else
										{
											if (Main.scorpionCageFrame[num3, num4] >= 14 && Main.scorpionCageFrame[num3, num4] <= 15)
											{
												Main.scorpionCageFrameCounter[num3, num4]++;
												if (Main.scorpionCageFrameCounter[num3, num4] >= 5)
												{
													Main.scorpionCageFrameCounter[num3, num4] = 0;
													Main.scorpionCageFrame[num3, num4]++;
													if (Main.scorpionCageFrame[num3, num4] > 15)
													{
														Main.scorpionCageFrame[num3, num4] = 14;
													}
													if (Main.rand.Next(5) == 0)
													{
														Main.scorpionCageFrame[num3, num4] = 0;
													}
												}
											}
											else
											{
												if (Main.scorpionCageFrame[num3, num4] == 4 || Main.scorpionCageFrame[num3, num4] == 3)
												{
													Main.scorpionCageFrameCounter[num3, num4]++;
													if (Main.scorpionCageFrameCounter[num3, num4] > Main.rand.Next(30, 3600))
													{
														if (Main.scorpionCageFrame[num3, num4] == 3)
														{
															Main.scorpionCageFrame[num3, num4] = 4;
														}
														else
														{
															if (Main.rand.Next(3) == 0)
															{
																if (Main.rand.Next(5) == 0)
																{
																	Main.scorpionCageFrame[num3, num4] = 5;
																}
																else
																{
																	if (Main.rand.Next(3) == 0)
																	{
																		Main.scorpionCageFrame[num3, num4] = 3;
																	}
																	else
																	{
																		Main.scorpionCageFrame[num3, num4] = 16;
																	}
																}
															}
														}
														Main.scorpionCageFrameCounter[num3, num4] = 0;
													}
												}
												else
												{
													if (Main.scorpionCageFrame[num3, num4] >= 5 && Main.scorpionCageFrame[num3, num4] <= 6)
													{
														Main.scorpionCageFrameCounter[num3, num4]++;
														if (Main.scorpionCageFrameCounter[num3, num4] >= 10)
														{
															Main.scorpionCageFrameCounter[num3, num4] = 0;
															Main.scorpionCageFrame[num3, num4]++;
															if (Main.scorpionCageFrame[num3, num4] > 7)
															{
																Main.scorpionCageFrame[num3, num4] = 0;
															}
														}
													}
													else
													{
														if (Main.scorpionCageFrame[num3, num4] >= 16 && Main.scorpionCageFrame[num3, num4] <= 17)
														{
															Main.scorpionCageFrameCounter[num3, num4]++;
															if (Main.scorpionCageFrameCounter[num3, num4] >= 5)
															{
																Main.scorpionCageFrameCounter[num3, num4] = 0;
																Main.scorpionCageFrame[num3, num4]++;
																if (Main.scorpionCageFrame[num3, num4] > 17)
																{
																	Main.scorpionCageFrame[num3, num4] = 16;
																}
																if (Main.rand.Next(5) == 0)
																{
																	Main.scorpionCageFrame[num3, num4] = 4;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num5 = 0; num5 < Main.cageFrames; num5++)
				{
					if (Main.penguinCageFrame[num5] == 0)
					{
						Main.penguinCageFrameCounter[num5]++;
						if (Main.penguinCageFrameCounter[num5] > Main.rand.Next(30, 1800))
						{
							if (Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(10) == 0)
								{
									Main.penguinCageFrame[num5] = 4;
								}
								else
								{
									if (Main.rand.Next(7) == 0)
									{
										Main.penguinCageFrame[num5] = 15;
									}
									else
									{
										if (Main.rand.Next(3) == 0)
										{
											Main.penguinCageFrame[num5] = 2;
										}
										else
										{
											Main.penguinCageFrame[num5] = 1;
										}
									}
								}
							}
							Main.penguinCageFrameCounter[num5] = 0;
						}
					}
					else
					{
						if (Main.penguinCageFrame[num5] == 1)
						{
							Main.penguinCageFrameCounter[num5]++;
							if (Main.penguinCageFrameCounter[num5] >= 10)
							{
								Main.penguinCageFrameCounter[num5] = 0;
								Main.penguinCageFrame[num5] = 0;
							}
						}
						else
						{
							if (Main.penguinCageFrame[num5] >= 2 && Main.penguinCageFrame[num5] <= 3)
							{
								Main.penguinCageFrameCounter[num5]++;
								if (Main.penguinCageFrameCounter[num5] >= 5)
								{
									Main.penguinCageFrameCounter[num5] = 0;
									Main.penguinCageFrame[num5]++;
									if (Main.penguinCageFrame[num5] > 3)
									{
										if (Main.rand.Next(3) == 0)
										{
											Main.penguinCageFrame[num5] = 0;
										}
										else
										{
											Main.penguinCageFrame[num5] = 2;
										}
									}
								}
							}
							else
							{
								if (Main.penguinCageFrame[num5] >= 4 && Main.penguinCageFrame[num5] <= 6)
								{
									Main.penguinCageFrameCounter[num5]++;
									if (Main.penguinCageFrameCounter[num5] >= 10)
									{
										Main.penguinCageFrameCounter[num5] = 0;
										Main.penguinCageFrame[num5]++;
									}
								}
								else
								{
									if (Main.penguinCageFrame[num5] == 15)
									{
										Main.penguinCageFrameCounter[num5]++;
										if (Main.penguinCageFrameCounter[num5] > Main.rand.Next(10, 1800))
										{
											if (Main.rand.Next(2) == 0)
											{
												Main.penguinCageFrame[num5] = 0;
											}
											Main.penguinCageFrameCounter[num5] = 0;
										}
									}
									else
									{
										if (Main.penguinCageFrame[num5] == 8)
										{
											Main.penguinCageFrameCounter[num5]++;
											if (Main.penguinCageFrameCounter[num5] > Main.rand.Next(30, 3600))
											{
												if (Main.rand.Next(2) == 0)
												{
													if (Main.rand.Next(10) == 0)
													{
														Main.penguinCageFrame[num5] = 12;
													}
													else
													{
														if (Main.rand.Next(7) == 0)
														{
															Main.penguinCageFrame[num5] = 7;
														}
														else
														{
															if (Main.rand.Next(3) == 0)
															{
																Main.penguinCageFrame[num5] = 10;
															}
															else
															{
																Main.penguinCageFrame[num5] = 9;
															}
														}
													}
												}
												Main.penguinCageFrameCounter[num5] = 0;
											}
										}
										else
										{
											if (Main.penguinCageFrame[num5] == 9)
											{
												Main.penguinCageFrameCounter[num5]++;
												if (Main.penguinCageFrameCounter[num5] >= 10)
												{
													Main.penguinCageFrameCounter[num5] = 0;
													Main.penguinCageFrame[num5] = 8;
												}
											}
											else
											{
												if (Main.penguinCageFrame[num5] >= 10 && Main.penguinCageFrame[num5] <= 11)
												{
													Main.penguinCageFrameCounter[num5]++;
													if (Main.penguinCageFrameCounter[num5] >= 5)
													{
														Main.penguinCageFrameCounter[num5] = 0;
														Main.penguinCageFrame[num5]++;
														if (Main.penguinCageFrame[num5] > 3)
														{
															if (Main.rand.Next(3) == 0)
															{
																Main.penguinCageFrame[num5] = 8;
															}
															else
															{
																Main.penguinCageFrame[num5] = 10;
															}
														}
													}
												}
												else
												{
													if (Main.penguinCageFrame[num5] >= 12 && Main.penguinCageFrame[num5] <= 14)
													{
														Main.penguinCageFrameCounter[num5]++;
														if (Main.penguinCageFrameCounter[num5] >= 10)
														{
															Main.penguinCageFrameCounter[num5] = 0;
															Main.penguinCageFrame[num5]++;
														}
													}
													else
													{
														if (Main.penguinCageFrame[num5] == 7)
														{
															Main.penguinCageFrameCounter[num5]++;
															if (Main.penguinCageFrameCounter[num5] > Main.rand.Next(10, 3600))
															{
																if (Main.rand.Next(2) == 0)
																{
																	Main.penguinCageFrame[num5] = 8;
																}
																Main.penguinCageFrameCounter[num5] = 0;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num6 = 0; num6 < Main.cageFrames; num6++)
				{
					if (Main.snailCageFrame[num6] >= 0 && Main.snailCageFrame[num6] <= 13)
					{
						Main.snailCageFrameCounter[num6]++;
						if (Main.snailCageFrameCounter[num6] > Main.rand.Next(45, 3600))
						{
							if (Main.snailCageFrame[num6] == 8 && Main.rand.Next(2) == 0)
							{
								Main.snailCageFrame[num6] = 14;
							}
							else
							{
								if (Main.snailCageFrame[num6] == 1 && Main.rand.Next(3) == 0)
								{
									Main.snailCageFrame[num6] = 19;
								}
								else
								{
									if (Main.snailCageFrame[num6] == 1 && Main.rand.Next(3) == 0)
									{
										Main.snailCageFrame[num6] = 20;
									}
									else
									{
										Main.snailCageFrame[num6]++;
										if (Main.snailCageFrame[num6] > 13)
										{
											Main.snailCageFrame[num6] = 0;
										}
									}
								}
							}
							Main.snailCageFrameCounter[num6] = 0;
						}
					}
					else
					{
						if (Main.snailCageFrame[num6] >= 14 && Main.snailCageFrame[num6] <= 18)
						{
							Main.snailCageFrameCounter[num6]++;
							if (Main.snailCageFrameCounter[num6] >= 5)
							{
								Main.snailCageFrameCounter[num6] = 0;
								Main.snailCageFrame[num6]++;
							}
							if (Main.snailCageFrame[num6] > 18)
							{
								Main.snailCageFrame[num6] = 20;
							}
						}
						else
						{
							if (Main.snailCageFrame[num6] == 19 || Main.snailCageFrame[num6] == 20)
							{
								Main.snailCageFrameCounter[num6]++;
								if (Main.snailCageFrameCounter[num6] > Main.rand.Next(60, 7200))
								{
									Main.snailCageFrameCounter[num6] = 0;
									if (Main.rand.Next(4) == 0)
									{
										if (Main.rand.Next(3) == 0)
										{
											Main.snailCageFrame[num6] = 2;
										}
										else
										{
											if (Main.snailCageFrame[num6] == 19)
											{
												Main.snailCageFrame[num6] = 20;
											}
											else
											{
												Main.snailCageFrame[num6] = 19;
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num7 = 0; num7 < Main.cageFrames; num7++)
				{
					if (Main.snail2CageFrame[num7] >= 0 && Main.snail2CageFrame[num7] <= 13)
					{
						Main.snail2CageFrameCounter[num7]++;
						if (Main.snail2CageFrameCounter[num7] > Main.rand.Next(30, 2700))
						{
							if (Main.snail2CageFrame[num7] == 8 && Main.rand.Next(2) == 0)
							{
								Main.snail2CageFrame[num7] = 14;
							}
							else
							{
								if (Main.snail2CageFrame[num7] == 1 && Main.rand.Next(3) == 0)
								{
									Main.snail2CageFrame[num7] = 19;
								}
								else
								{
									if (Main.snail2CageFrame[num7] == 1 && Main.rand.Next(3) == 0)
									{
										Main.snail2CageFrame[num7] = 20;
									}
									else
									{
										Main.snail2CageFrame[num7]++;
										if (Main.snail2CageFrame[num7] > 13)
										{
											Main.snail2CageFrame[num7] = 0;
										}
									}
								}
							}
							Main.snail2CageFrameCounter[num7] = 0;
						}
					}
					else
					{
						if (Main.snail2CageFrame[num7] >= 14 && Main.snail2CageFrame[num7] <= 18)
						{
							Main.snail2CageFrameCounter[num7]++;
							if (Main.snail2CageFrameCounter[num7] >= 5)
							{
								Main.snail2CageFrameCounter[num7] = 0;
								Main.snail2CageFrame[num7]++;
							}
							if (Main.snail2CageFrame[num7] > 18)
							{
								Main.snail2CageFrame[num7] = 20;
							}
						}
						else
						{
							if (Main.snail2CageFrame[num7] == 19 || Main.snail2CageFrame[num7] == 20)
							{
								Main.snail2CageFrameCounter[num7]++;
								if (Main.snail2CageFrameCounter[num7] > Main.rand.Next(45, 5400))
								{
									Main.snail2CageFrameCounter[num7] = 0;
									if (Main.rand.Next(4) == 0)
									{
										if (Main.rand.Next(3) == 0)
										{
											Main.snail2CageFrame[num7] = 2;
										}
										else
										{
											if (Main.snail2CageFrame[num7] == 19)
											{
												Main.snail2CageFrame[num7] = 20;
											}
											else
											{
												Main.snail2CageFrame[num7] = 19;
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num8 = 0; num8 < Main.cageFrames; num8++)
				{
					if (Main.frogCageFrame[num8] == 0)
					{
						Main.frogCageFrameCounter[num8]++;
						if (Main.frogCageFrameCounter[num8] > Main.rand.Next(45, 3600))
						{
							if (Main.rand.Next(10) == 0)
							{
								Main.frogCageFrame[num8] = 1;
							}
							else
							{
								Main.frogCageFrame[num8] = 12;
							}
							Main.frogCageFrameCounter[num8] = 0;
						}
					}
					else
					{
						if (Main.frogCageFrame[num8] >= 1 && Main.frogCageFrame[num8] <= 5)
						{
							Main.frogCageFrameCounter[num8]++;
							if (Main.frogCageFrameCounter[num8] >= 5)
							{
								Main.frogCageFrame[num8]++;
								Main.frogCageFrameCounter[num8] = 0;
							}
						}
						else
						{
							if (Main.frogCageFrame[num8] >= 12 && Main.frogCageFrame[num8] <= 17)
							{
								Main.frogCageFrameCounter[num8]++;
								if (Main.frogCageFrameCounter[num8] >= 5)
								{
									Main.frogCageFrameCounter[num8] = 0;
									Main.frogCageFrame[num8]++;
								}
								if (Main.frogCageFrame[num8] > 17)
								{
									if (Main.rand.Next(3) == 0)
									{
										Main.frogCageFrame[num8] = 0;
									}
									else
									{
										Main.frogCageFrame[num8] = 12;
									}
								}
							}
							else
							{
								if (Main.frogCageFrame[num8] == 6)
								{
									Main.frogCageFrameCounter[num8]++;
									if (Main.frogCageFrameCounter[num8] > Main.rand.Next(45, 3600))
									{
										if (Main.rand.Next(10) == 0)
										{
											Main.frogCageFrame[num8] = 7;
										}
										else
										{
											Main.frogCageFrame[num8] = 18;
										}
										Main.frogCageFrameCounter[num8] = 0;
									}
								}
								else
								{
									if (Main.frogCageFrame[num8] >= 7 && Main.frogCageFrame[num8] <= 11)
									{
										Main.frogCageFrameCounter[num8]++;
										if (Main.frogCageFrameCounter[num8] >= 5)
										{
											Main.frogCageFrame[num8]++;
											Main.frogCageFrameCounter[num8] = 0;
											if (Main.frogCageFrame[num8] > 11)
											{
												Main.frogCageFrame[num8] = 0;
											}
										}
									}
									else
									{
										if (Main.frogCageFrame[num8] >= 18 && Main.frogCageFrame[num8] <= 23)
										{
											Main.frogCageFrameCounter[num8]++;
											if (Main.frogCageFrameCounter[num8] >= 5)
											{
												Main.frogCageFrameCounter[num8] = 0;
												Main.frogCageFrame[num8]++;
											}
											if (Main.frogCageFrame[num8] > 17)
											{
												if (Main.rand.Next(3) == 0)
												{
													Main.frogCageFrame[num8] = 6;
												}
												else
												{
													Main.frogCageFrame[num8] = 18;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num9 = 0; num9 < Main.cageFrames; num9++)
				{
					if (Main.mouseCageFrame[num9] >= 0 && Main.mouseCageFrame[num9] <= 1)
					{
						Main.mouseCageFrameCounter[num9]++;
						if (Main.mouseCageFrameCounter[num9] >= 5)
						{
							Main.mouseCageFrame[num9]++;
							if (Main.mouseCageFrame[num9] > 1)
							{
								Main.mouseCageFrame[num9] = 0;
							}
							Main.mouseCageFrameCounter[num9] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.mouseCageFrame[num9] = 4;
							}
						}
					}
					else
					{
						if (Main.mouseCageFrame[num9] >= 4 && Main.mouseCageFrame[num9] <= 7)
						{
							Main.mouseCageFrameCounter[num9]++;
							if (Main.mouseCageFrameCounter[num9] >= 5)
							{
								Main.mouseCageFrameCounter[num9] = 0;
								Main.mouseCageFrame[num9]++;
							}
							if (Main.mouseCageFrame[num9] > 7)
							{
								Main.mouseCageFrame[num9] = 2;
							}
						}
						else
						{
							if (Main.mouseCageFrame[num9] >= 2 && Main.mouseCageFrame[num9] <= 3)
							{
								Main.mouseCageFrameCounter[num9]++;
								if (Main.mouseCageFrameCounter[num9] >= 5)
								{
									Main.mouseCageFrame[num9]++;
									if (Main.mouseCageFrame[num9] > 3)
									{
										Main.mouseCageFrame[num9] = 2;
									}
									Main.mouseCageFrameCounter[num9] = 0;
									if (Main.rand.Next(15) == 0)
									{
										Main.mouseCageFrame[num9] = 8;
									}
									else
									{
										if (Main.rand.Next(15) == 0)
										{
											Main.mouseCageFrame[num9] = 12;
										}
									}
								}
							}
							else
							{
								if (Main.mouseCageFrame[num9] >= 8 && Main.mouseCageFrame[num9] <= 11)
								{
									Main.mouseCageFrameCounter[num9]++;
									if (Main.mouseCageFrameCounter[num9] >= 5)
									{
										Main.mouseCageFrameCounter[num9] = 0;
										Main.mouseCageFrame[num9]++;
									}
									if (Main.mouseCageFrame[num9] > 11)
									{
										Main.mouseCageFrame[num9] = 0;
									}
								}
								else
								{
									if (Main.mouseCageFrame[num9] >= 12 && Main.mouseCageFrame[num9] <= 13)
									{
										Main.mouseCageFrameCounter[num9]++;
										if (Main.mouseCageFrameCounter[num9] >= 5)
										{
											Main.mouseCageFrameCounter[num9] = 0;
											Main.mouseCageFrame[num9]++;
										}
									}
									else
									{
										if (Main.mouseCageFrame[num9] >= 14 && Main.mouseCageFrame[num9] <= 17)
										{
											Main.mouseCageFrameCounter[num9]++;
											if (Main.mouseCageFrameCounter[num9] >= 5)
											{
												Main.mouseCageFrameCounter[num9] = 0;
												Main.mouseCageFrame[num9]++;
												if (Main.mouseCageFrame[num9] > 17 && Main.rand.Next(20) != 0)
												{
													Main.mouseCageFrame[num9] = 14;
												}
											}
										}
										else
										{
											if (Main.mouseCageFrame[num9] >= 18 && Main.mouseCageFrame[num9] <= 19)
											{
												Main.mouseCageFrameCounter[num9]++;
												if (Main.mouseCageFrameCounter[num9] >= 5)
												{
													Main.mouseCageFrameCounter[num9] = 0;
													Main.mouseCageFrame[num9]++;
													if (Main.mouseCageFrame[num9] > 19)
													{
														Main.mouseCageFrame[num9] = 0;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num10 = 0; num10 < Main.cageFrames; num10++)
				{
					Main.wormCageFrameCounter[num10]++;
					if (Main.wormCageFrameCounter[num10] >= Main.rand.Next(30, 91))
					{
						Main.wormCageFrameCounter[num10] = 0;
						if (Main.rand.Next(4) == 0)
						{
							Main.wormCageFrame[num10]++;
							if (Main.wormCageFrame[num10] == 9 && Main.rand.Next(2) == 0)
							{
								Main.wormCageFrame[num10] = 0;
							}
							if (Main.wormCageFrame[num10] > 18)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.wormCageFrame[num10] = 9;
								}
								else
								{
									Main.wormCageFrame[num10] = 0;
								}
							}
						}
					}
				}
				for (int num11 = 0; num11 < Main.cageFrames; num11++)
				{
					byte maxValue = 5;
					if (Main.fishBowlFrameMode[num11] == 1)
					{
						if (Main.rand.Next(900) == 0)
						{
							Main.fishBowlFrameMode[num11] = (byte)Main.rand.Next((int)maxValue);
						}
						Main.fishBowlFrameCounter[num11]++;
						if (Main.fishBowlFrameCounter[num11] >= 5)
						{
							Main.fishBowlFrameCounter[num11] = 0;
							if (Main.fishBowlFrame[num11] == 10)
							{
								if (Main.rand.Next(20) == 0)
								{
									Main.fishBowlFrame[num11] = 11;
									Main.fishBowlFrameMode[num11] = 0;
								}
								else
								{
									Main.fishBowlFrame[num11] = 1;
								}
							}
							else
							{
								Main.fishBowlFrame[num11]++;
							}
						}
					}
					else
					{
						if (Main.fishBowlFrameMode[num11] == 2)
						{
							if (Main.rand.Next(3600) == 0)
							{
								Main.fishBowlFrameMode[num11] = (byte)Main.rand.Next((int)maxValue);
							}
							Main.fishBowlFrameCounter[num11]++;
							if (Main.fishBowlFrameCounter[num11] >= 20)
							{
								Main.fishBowlFrameCounter[num11] = 0;
								if (Main.fishBowlFrame[num11] == 10)
								{
									if (Main.rand.Next(20) == 0)
									{
										Main.fishBowlFrame[num11] = 11;
										Main.fishBowlFrameMode[num11] = 0;
									}
									else
									{
										Main.fishBowlFrame[num11] = 1;
									}
								}
								else
								{
									Main.fishBowlFrame[num11]++;
								}
							}
						}
						else
						{
							if (Main.fishBowlFrameMode[num11] == 3)
							{
								if (Main.rand.Next(3600) == 0)
								{
									Main.fishBowlFrameMode[num11] = (byte)Main.rand.Next((int)maxValue);
								}
								Main.fishBowlFrameCounter[num11]++;
								if (Main.fishBowlFrameCounter[num11] >= Main.rand.Next(5, 3600))
								{
									Main.fishBowlFrameCounter[num11] = 0;
									if (Main.fishBowlFrame[num11] == 10)
									{
										if (Main.rand.Next(20) == 0)
										{
											Main.fishBowlFrame[num11] = 11;
											Main.fishBowlFrameMode[num11] = 0;
										}
										else
										{
											Main.fishBowlFrame[num11] = 1;
										}
									}
									else
									{
										Main.fishBowlFrame[num11]++;
									}
								}
							}
							else
							{
								if (Main.fishBowlFrame[num11] <= 10)
								{
									if (Main.rand.Next(3600) == 0)
									{
										Main.fishBowlFrameMode[num11] = (byte)Main.rand.Next((int)maxValue);
									}
									Main.fishBowlFrameCounter[num11]++;
									if (Main.fishBowlFrameCounter[num11] >= 10)
									{
										Main.fishBowlFrameCounter[num11] = 0;
										if (Main.fishBowlFrame[num11] == 10)
										{
											if (Main.rand.Next(12) == 0)
											{
												Main.fishBowlFrame[num11] = 11;
											}
											else
											{
												Main.fishBowlFrame[num11] = 1;
											}
										}
										else
										{
											Main.fishBowlFrame[num11]++;
										}
									}
								}
								else
								{
									if (Main.fishBowlFrame[num11] == 12 || Main.fishBowlFrame[num11] == 13)
									{
										Main.fishBowlFrameCounter[num11]++;
										if (Main.fishBowlFrameCounter[num11] >= 10)
										{
											Main.fishBowlFrameCounter[num11] = 0;
											Main.fishBowlFrame[num11]++;
											if (Main.fishBowlFrame[num11] > 13)
											{
												if (Main.rand.Next(20) == 0)
												{
													Main.fishBowlFrame[num11] = 14;
												}
												else
												{
													Main.fishBowlFrame[num11] = 12;
												}
											}
										}
									}
									else
									{
										if (Main.fishBowlFrame[num11] >= 11)
										{
											Main.fishBowlFrameCounter[num11]++;
											if (Main.fishBowlFrameCounter[num11] >= 10)
											{
												Main.fishBowlFrameCounter[num11] = 0;
												Main.fishBowlFrame[num11]++;
												if (Main.fishBowlFrame[num11] > 16)
												{
													Main.fishBowlFrame[num11] = 4;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int num12 = 0; num12 < 8; num12++)
				{
					for (int num13 = 0; num13 < Main.cageFrames; num13++)
					{
						Main.butterflyCageFrameCounter[num12, num13]++;
						if (Main.rand.Next(3600) == 0)
						{
							Main.butterflyCageMode[num12, num13] = (byte)Main.rand.Next(5);
							if (Main.rand.Next(2) == 0)
							{
								Main.butterflyCageMode[num12, num13] = (byte)(Main.butterflyCageMode[num12, num13] + 10);
							}
						}
						int num14 = Main.rand.Next(3, 16);
						if (Main.butterflyCageMode[num12, num13] == 1 || Main.butterflyCageMode[num12, num13] == 11)
						{
							num14 = 3;
						}
						if (Main.butterflyCageMode[num12, num13] == 2 || Main.butterflyCageMode[num12, num13] == 12)
						{
							num14 = 5;
						}
						if (Main.butterflyCageMode[num12, num13] == 3 || Main.butterflyCageMode[num12, num13] == 13)
						{
							num14 = 10;
						}
						if (Main.butterflyCageMode[num12, num13] == 4 || Main.butterflyCageMode[num12, num13] == 14)
						{
							num14 = 15;
						}
						if (Main.butterflyCageMode[num12, num13] >= 10)
						{
							if (Main.butterflyCageFrame[num12, num13] <= 7)
							{
								if (Main.butterflyCageFrameCounter[num12, num13] >= num14)
								{
									Main.butterflyCageFrameCounter[num12, num13] = 0;
									Main.butterflyCageFrame[num12, num13]--;
									if (Main.butterflyCageFrame[num12, num13] < 0)
									{
										Main.butterflyCageFrame[num12, num13] = 7;
									}
									if (Main.butterflyCageFrame[num12, num13] == 1 || Main.butterflyCageFrame[num12, num13] == 4 || Main.butterflyCageFrame[num12, num13] == 6)
									{
										if (Main.rand.Next(20) == 0)
										{
											Main.butterflyCageFrame[num12, num13] += 8;
										}
										else
										{
											if (Main.rand.Next(6) == 0)
											{
												if (Main.butterflyCageMode[num12, num13] >= 10)
												{
													Main.butterflyCageMode[num12, num13] = (byte)(Main.butterflyCageMode[num12, num13] - 10);
												}
												else
												{
													Main.butterflyCageMode[num12, num13] = (byte)(Main.butterflyCageMode[num12, num13] + 10);
												}
											}
										}
									}
								}
							}
							else
							{
								if (Main.butterflyCageFrameCounter[num12, num13] >= num14)
								{
									Main.butterflyCageFrameCounter[num12, num13] = 0;
									Main.butterflyCageFrame[num12, num13]--;
									if (Main.butterflyCageFrame[num12, num13] < 8)
									{
										Main.butterflyCageFrame[num12, num13] = 14;
									}
									if (Main.butterflyCageFrame[num12, num13] == 9 || Main.butterflyCageFrame[num12, num13] == 12 || Main.butterflyCageFrame[num12, num13] == 14)
									{
										if (Main.rand.Next(20) == 0)
										{
											Main.butterflyCageFrame[num12, num13] -= 8;
										}
										else
										{
											if (Main.rand.Next(6) == 0)
											{
												if (Main.butterflyCageMode[num12, num13] >= 10)
												{
                                                    Main.butterflyCageMode[num12, num13] = (byte)(Main.butterflyCageMode[num12, num13] - 10);
												}
												else
												{
                                                    Main.butterflyCageMode[num12, num13] = (byte)(Main.butterflyCageMode[num12, num13] + 10);
												}
											}
										}
									}
								}
							}
						}
						else
						{
							if (Main.butterflyCageFrame[num12, num13] <= 7)
							{
								if (Main.butterflyCageFrameCounter[num12, num13] >= num14)
								{
									Main.butterflyCageFrameCounter[num12, num13] = 0;
									Main.butterflyCageFrame[num12, num13]++;
									if (Main.butterflyCageFrame[num12, num13] > 7)
									{
										Main.butterflyCageFrame[num12, num13] = 0;
									}
									if ((Main.butterflyCageFrame[num12, num13] == 1 || Main.butterflyCageFrame[num12, num13] == 4 || Main.butterflyCageFrame[num12, num13] == 6) && Main.rand.Next(10) == 0)
									{
										Main.butterflyCageFrame[num12, num13] += 8;
									}
								}
							}
							else
							{
								if (Main.butterflyCageFrameCounter[num12, num13] >= num14)
								{
									Main.butterflyCageFrameCounter[num12, num13] = 0;
									Main.butterflyCageFrame[num12, num13]++;
									if (Main.butterflyCageFrame[num12, num13] > 15)
									{
										Main.butterflyCageFrame[num12, num13] = 8;
									}
									if ((Main.butterflyCageFrame[num12, num13] == 9 || Main.butterflyCageFrame[num12, num13] == 12 || Main.butterflyCageFrame[num12, num13] == 14) && Main.rand.Next(10) == 0)
									{
										Main.butterflyCageFrame[num12, num13] -= 8;
									}
								}
							}
						}
					}
				}
			}
		}
		protected override void Update(GameTime gameTime)
		{
			Main.ignoreErrors = true;
			Main.gameInactive = !base.IsActive;
			if (Main.netMode == 2)
			{
				Main.cloudAlpha = Main.maxRaining;
			}
			if (base.IsActive && Main.cloudAlpha > 0f)
			{
				Rain.MakeRain();
			}
			if (Main.netMode != 1)
			{
				this.updateCloudLayer();
			}
			this.UpdateWeather();
			Main.Ambience();
			if (Main.netMode != 2)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.snowing();
						goto IL_76;
					}
					catch
					{
						goto IL_76;
					}
				}
				Main.snowing();
			}
			IL_76:
			if (Main.chTitle)
			{
				Main.chTitle = false;
				this.SetTitle();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			WorldGen.destroyObject = false;
			if (Main.gameMenu)
			{
				Main.mapFullscreen = false;
			}
			if (Main.dedServ)
			{
				if (Main.dedServFPS)
				{
					Main.updateTime++;
					if (!Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Restart();
					}
					if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
					{
						Main.dedServCount1 += Main.updateTime;
						Main.dedServCount2++;
						float num = (float)Main.dedServCount1 / (float)Main.dedServCount2;
						Console.WriteLine(string.Concat(new object[]
						{
							Main.updateTime,
							"  (",
							num,
							")"
						}));
						Main.updateTime = 0;
						Main.fpsTimer.Restart();
					}
				}
				else
				{
					if (Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Stop();
					}
					Main.updateTime = 0;
				}
			}
			if (!Main.dedServ)
			{
				if (Main.superFast)
				{
					base.IsFixedTimeStep = false;
					Main.graphics.SynchronizeWithVerticalRetrace = false;
				}
				else
				{
					if (Main.fixedTiming)
					{
						if (base.IsActive)
						{
							base.IsFixedTimeStep = false;
						}
						else
						{
							base.IsFixedTimeStep = true;
						}
					}
					else
					{
						base.IsFixedTimeStep = true;
						Main.graphics.SynchronizeWithVerticalRetrace = true;
					}
					Main.graphics.SynchronizeWithVerticalRetrace = true;
				}
				if (Main.treeMntBG[1] == 94 || (Main.treeMntBG[1] >= 114 && Main.treeMntBG[1] <= 116))
				{
					Main.bgFrameCounter[0]++;
					if (Main.bgFrameCounter[0] >= 6)
					{
						Main.bgFrameCounter[0] = 0;
						Main.bgFrame[0]++;
						if (Main.bgFrame[0] >= 4)
						{
							Main.bgFrame[0] = 0;
						}
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[1] = 94;
					}
					else
					{
						if (Main.bgFrame[0] == 1)
						{
							Main.treeMntBG[1] = 114;
						}
						else
						{
							if (Main.bgFrame[0] == 2)
							{
								Main.treeMntBG[1] = 115;
							}
							else
							{
								Main.treeMntBG[1] = 116;
							}
						}
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[0] = 93;
					}
					else
					{
						if (Main.bgFrame[0] == 1)
						{
							Main.treeMntBG[0] = 168;
						}
						else
						{
							if (Main.bgFrame[0] == 2)
							{
								Main.treeMntBG[0] = 169;
							}
							else
							{
								Main.treeMntBG[0] = 170;
							}
						}
					}
				}
				if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
				{
					Main.bgFrameCounter[0]++;
					if (Main.bgFrameCounter[0] >= 6)
					{
						Main.bgFrameCounter[0] = 0;
						Main.bgFrame[0]++;
						if (Main.bgFrame[0] >= 4)
						{
							Main.bgFrame[0] = 0;
						}
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[1] = 180;
					}
					else
					{
						if (Main.bgFrame[0] == 1)
						{
							Main.treeMntBG[1] = 181;
						}
						else
						{
							if (Main.bgFrame[0] == 2)
							{
								Main.treeMntBG[1] = 182;
							}
							else
							{
								Main.treeMntBG[1] = 183;
							}
						}
					}
				}
				this.UpdateMusic();
				if (Main.showSplash)
				{
					return;
				}
				if (!Main.gameMenu && Main.netMode == 1)
				{
					if (!Main.saveTime.IsRunning)
					{
						Main.saveTime.Start();
					}
					if (Main.saveTime.ElapsedMilliseconds > 300000L)
					{
						Main.saveTime.Reset();
						WorldGen.saveToonWhilePlaying();
					}
				}
				else
				{
					if (!Main.gameMenu && Main.autoSave)
					{
						if (!Main.saveTime.IsRunning)
						{
							Main.saveTime.Start();
						}
						if (Main.saveTime.ElapsedMilliseconds > 600000L)
						{
							Main.saveTime.Reset();
							WorldGen.saveToonWhilePlaying();
							WorldGen.saveAndPlay();
						}
					}
					else
					{
						if (Main.saveTime.IsRunning)
						{
							Main.saveTime.Stop();
						}
					}
				}
				if (Main.teamCooldown > 0)
				{
					Main.teamCooldown--;
				}
				Main.updateTime++;
				if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
				{
					if ((float)Main.fpsCount >= 30f + 30f * Main.gfxQuality)
					{
						Main.gfxQuality += Main.gfxRate;
						Main.gfxRate += 0.005f;
					}
					else
					{
						if ((float)Main.fpsCount < 29f + 30f * Main.gfxQuality)
						{
							Main.gfxRate = 0.01f;
							Main.gfxQuality -= 0.1f;
						}
					}
					if (Main.gfxQuality < 0f)
					{
						Main.gfxQuality = 0f;
					}
					if (Main.gfxQuality > 1f)
					{
						Main.gfxQuality = 1f;
					}
					if (Main.maxQ && base.IsActive)
					{
						Main.gfxQuality = 1f;
						Main.maxQ = false;
					}
					Main.updateRate = Main.uCount;
					Main.frameRate = Main.fpsCount;
					Main.fpsCount = 0;
					Main.fpsTimer.Restart();
					Main.updateTime = 0;
					Main.drawTime = 0;
					Main.uCount = 0;
					if ((double)Main.gfxQuality < 0.8)
					{
						Main.mapTimeMax = (int)((1f - Main.gfxQuality) * 60f);
					}
					else
					{
						Main.mapTimeMax = 0;
					}
					int arg_5DA_0 = Main.netMode;
				}
				if (Main.fixedTiming)
				{
					float num2 = 16f;
					float num3 = (float)Main.updateTimer.ElapsedMilliseconds;
					if (num3 + Main.uCarry < num2 && !Main.superFast)
					{
						Main.drawSkip = true;
						return;
					}
					Main.uCarry += num3 - num2;
					if (Main.uCarry > 1000f)
					{
						Main.uCarry = 1000f;
					}
					Main.updateTimer.Restart();
				}
				Main.uCount++;
				Main.drawSkip = false;
				if (Main.qaStyle == 1)
				{
					Main.gfxQuality = 1f;
				}
				else
				{
					if (Main.qaStyle == 2)
					{
						Main.gfxQuality = 0.5f;
					}
					else
					{
						if (Main.qaStyle == 3)
						{
							Main.gfxQuality = 0f;
						}
					}
				}
				Main.numDust = (int)(6000f * (Main.gfxQuality * 0.7f + 0.3f));
				if ((double)Main.gfxQuality < 0.9)
				{
					Main.numDust = (int)((float)Main.numDust * Main.gfxQuality);
				}
				if (Main.numDust < 1000)
				{
					Main.numDust = 1000;
				}
				Gore.goreTime = (int)(600f * Main.gfxQuality);
				Liquid.maxLiquid = (int)(2500f + 2500f * Main.gfxQuality);
				Liquid.cycles = (int)(17f - 10f * Main.gfxQuality);
				if ((double)Main.gfxQuality < 0.5)
				{
					Main.graphics.SynchronizeWithVerticalRetrace = false;
				}
				else
				{
					Main.graphics.SynchronizeWithVerticalRetrace = true;
				}
				if (Main.superFast)
				{
					Main.graphics.SynchronizeWithVerticalRetrace = false;
					Main.drawSkip = false;
				}
				if ((double)Main.gfxQuality < 0.2)
				{
					Lighting.maxRenderCount = 8;
				}
				else
				{
					if ((double)Main.gfxQuality < 0.4)
					{
						Lighting.maxRenderCount = 7;
					}
					else
					{
						if ((double)Main.gfxQuality < 0.6)
						{
							Lighting.maxRenderCount = 6;
						}
						else
						{
							if ((double)Main.gfxQuality < 0.8)
							{
								Lighting.maxRenderCount = 5;
							}
							else
							{
								Lighting.maxRenderCount = 4;
							}
						}
					}
				}
				if (Liquid.quickSettle)
				{
					Liquid.maxLiquid = Liquid.resLiquid;
					Liquid.cycles = 1;
				}
				if (!base.IsActive)
				{
					Main.hasFocus = false;
				}
				else
				{
					Main.hasFocus = true;
				}
				if (!Main.gameMenu || Main.netMode == 2)
				{
					WorldFile.tempRaining = Main.raining;
					WorldFile.tempRainTime = Main.rainTime;
					WorldFile.tempMaxRain = Main.maxRaining;
				}
				if (!base.IsActive && Main.netMode == 0)
				{
					base.IsMouseVisible = true;
					if (Main.netMode != 2 && Main.myPlayer >= 0)
					{
						Main.player[Main.myPlayer].delayUseItem = true;
					}
					Main.mouseLeftRelease = false;
					Main.mouseRightRelease = false;
					if (Main.gameMenu)
					{
						Main.UpdateMenu();
					}
					Main.gamePaused = true;
					return;
				}
				base.IsMouseVisible = false;
				Main.demonTorch += (float)Main.demonTorchDir * 0.01f;
				if (Main.demonTorch > 1f)
				{
					Main.demonTorch = 1f;
					Main.demonTorchDir = -1;
				}
				if (Main.demonTorch < 0f)
				{
					Main.demonTorch = 0f;
					Main.demonTorchDir = 1;
				}
				int num4 = 7;
				if (this.DiscoStyle == 0)
				{
					Main.DiscoG += num4;
					if (Main.DiscoG >= 255)
					{
						Main.DiscoG = 255;
						this.DiscoStyle++;
					}
					Main.DiscoR -= num4;
					if (Main.DiscoR <= 0)
					{
						Main.DiscoR = 0;
					}
				}
				else
				{
					if (this.DiscoStyle == 1)
					{
						Main.DiscoB += num4;
						if (Main.DiscoB >= 255)
						{
							Main.DiscoB = 255;
							this.DiscoStyle++;
						}
						Main.DiscoG -= num4;
						if (Main.DiscoG <= 0)
						{
							Main.DiscoG = 0;
						}
					}
					else
					{
						Main.DiscoR += num4;
						if (Main.DiscoR >= 255)
						{
							Main.DiscoR = 255;
							this.DiscoStyle = 0;
						}
						Main.DiscoB -= num4;
						if (Main.DiscoB <= 0)
						{
							Main.DiscoB = 0;
						}
					}
				}
				if (Main.gFadeDir == 1)
				{
					Main.gFader += 0.1f;
					Main.gFade = (byte)Main.gFader;
					if (Main.gFade > 150)
					{
						Main.gFadeDir = 0;
					}
				}
				else
				{
					Main.gFader -= 0.1f;
					Main.gFade = (byte)Main.gFader;
					if (Main.gFade < 100)
					{
						Main.gFadeDir = 1;
					}
				}
				Main.wFrCounter += Main.windSpeed * 2f;
				if (Main.wFrCounter > 4f)
				{
					Main.wFrCounter = 0f;
					Main.wFrame += 1f;
				}
				if (Main.wFrCounter < 0f)
				{
					Main.wFrCounter = 4f;
					Main.wFrame -= 1f;
				}
				if (Main.wFrame > 16f)
				{
					Main.wFrame = 1f;
				}
				if (Main.wFrame < 1f)
				{
					Main.wFrame = 16f;
				}
				this.waterfallManager.UpdateFrame();
				byte[] expr_AD0_cp_0 = Main.wallFrameCounter;
				int expr_AD0_cp_1 = 136;
				expr_AD0_cp_0[expr_AD0_cp_1] += 1;
				if (Main.wallFrameCounter[136] >= 5)
				{
					Main.wallFrameCounter[136] = 0;
					byte[] expr_B07_cp_0 = Main.wallFrame;
					int expr_B07_cp_1 = 136;
					expr_B07_cp_0[expr_B07_cp_1] += 1;
					if (Main.wallFrame[136] > 7)
					{
						Main.wallFrame[136] = 0;
					}
				}
				byte[] expr_B3E_cp_0 = Main.wallFrameCounter;
				int expr_B3E_cp_1 = 137;
				expr_B3E_cp_0[expr_B3E_cp_1] += 1;
				if (Main.wallFrameCounter[137] >= 10)
				{
					Main.wallFrameCounter[137] = 0;
					byte[] expr_B76_cp_0 = Main.wallFrame;
					int expr_B76_cp_1 = 137;
					expr_B76_cp_0[expr_B76_cp_1] += 1;
					if (Main.wallFrame[137] > 7)
					{
						Main.wallFrame[137] = 0;
					}
				}
				byte[] expr_BAD_cp_0 = Main.wallFrameCounter;
				int expr_BAD_cp_1 = 144;
				expr_BAD_cp_0[expr_BAD_cp_1] += 1;
				int num5 = 5;
				int num6 = 10;
				if ((int)Main.wallFrameCounter[144] < num5)
				{
					Main.wallFrame[144] = 0;
				}
				else
				{
					if ((int)Main.wallFrameCounter[144] < num5)
					{
						Main.wallFrame[144] = 1;
					}
					else
					{
						if ((int)Main.wallFrameCounter[144] < num5 * 2)
						{
							Main.wallFrame[144] = 2;
						}
						else
						{
							if ((int)Main.wallFrameCounter[144] < num5 * 3)
							{
								Main.wallFrame[144] = 3;
							}
							else
							{
								if ((int)Main.wallFrameCounter[144] < num5 * 4)
								{
									Main.wallFrame[144] = 4;
								}
								else
								{
									if ((int)Main.wallFrameCounter[144] < num5 * 5)
									{
										Main.wallFrame[144] = 5;
									}
									else
									{
										if ((int)Main.wallFrameCounter[144] < num5 * 6)
										{
											Main.wallFrame[144] = 6;
										}
										else
										{
											if ((int)Main.wallFrameCounter[144] < num5 * 7)
											{
												Main.wallFrame[144] = 7;
											}
											else
											{
												if ((int)Main.wallFrameCounter[144] < num5 * (8 + num6))
												{
													Main.wallFrame[144] = 8;
												}
												else
												{
													if ((int)Main.wallFrameCounter[144] < num5 * (9 + num6))
													{
														Main.wallFrame[144] = 7;
													}
													else
													{
														if ((int)Main.wallFrameCounter[144] < num5 * (10 + num6))
														{
															Main.wallFrame[144] = 6;
														}
														else
														{
															if ((int)Main.wallFrameCounter[144] < num5 * (11 + num6))
															{
																Main.wallFrame[144] = 5;
															}
															else
															{
																if ((int)Main.wallFrameCounter[144] < num5 * (12 + num6))
																{
																	Main.wallFrame[144] = 4;
																}
																else
																{
																	if ((int)Main.wallFrameCounter[144] < num5 * (13 + num6))
																	{
																		Main.wallFrame[144] = 3;
																	}
																	else
																	{
																		if ((int)Main.wallFrameCounter[144] < num5 * (14 + num6))
																		{
																			Main.wallFrame[144] = 2;
																		}
																		else
																		{
																			if ((int)Main.wallFrameCounter[144] < num5 * (15 + num6))
																			{
																				Main.wallFrame[144] = 1;
																			}
																			else
																			{
																				Main.wallFrame[144] = 0;
																				if ((int)Main.wallFrameCounter[144] > num5 * (16 + num6 * 2))
																				{
																					Main.wallFrameCounter[144] = 0;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				Main.tileFrameCounter[12]++;
				if (Main.tileFrameCounter[12] > 5)
				{
					Main.tileFrameCounter[12] = 0;
					Main.tileFrame[12]++;
					if (Main.tileFrame[12] >= 10)
					{
						Main.tileFrame[12] = 0;
					}
				}
				Main.tileFrameCounter[17]++;
				if (Main.tileFrameCounter[17] > 5)
				{
					Main.tileFrameCounter[17] = 0;
					Main.tileFrame[17]++;
					if (Main.tileFrame[17] >= 12)
					{
						Main.tileFrame[17] = 0;
					}
				}
				Main.tileFrameCounter[31]++;
				if (Main.tileFrameCounter[31] > 10)
				{
					Main.tileFrameCounter[31] = 0;
					Main.tileFrame[31]++;
					if (Main.tileFrame[31] > 1)
					{
						Main.tileFrame[31] = 0;
					}
				}
				Main.tileFrameCounter[77]++;
				if (Main.tileFrameCounter[77] > 5)
				{
					Main.tileFrameCounter[77] = 0;
					Main.tileFrame[77]++;
					if (Main.tileFrame[77] >= 12)
					{
						Main.tileFrame[77] = 0;
					}
				}
				Main.tileFrameCounter[106]++;
				if (Main.tileFrameCounter[106] > 4)
				{
					Main.tileFrameCounter[106] = 0;
					Main.tileFrame[106]++;
					if (Main.tileFrame[106] >= 2)
					{
						Main.tileFrame[106] = 0;
					}
				}
				Main.tileFrameCounter[207]++;
				if (Main.tileFrameCounter[207] > 4)
				{
					Main.tileFrameCounter[207] = 0;
					Main.tileFrame[207]++;
					if (Main.tileFrame[207] >= 6)
					{
						Main.tileFrame[207] = 0;
					}
				}
				Main.tileFrameCounter[215]++;
				if (Main.tileFrameCounter[215] > 4)
				{
					Main.tileFrameCounter[215] = 0;
					Main.tileFrame[215]++;
					if (Main.tileFrame[215] >= 4)
					{
						Main.tileFrame[215] = 0;
					}
				}
				Main.tileFrameCounter[217]++;
				if (Main.tileFrameCounter[217] > 4)
				{
					Main.tileFrameCounter[217] = 0;
					Main.tileFrame[217]++;
					if (Main.tileFrame[217] >= 5)
					{
						Main.tileFrame[217] = 0;
					}
				}
				Main.tileFrameCounter[218]++;
				if (Main.tileFrameCounter[218] > 4)
				{
					Main.tileFrameCounter[218] = 0;
					Main.tileFrame[218]++;
					if (Main.tileFrame[218] >= 2)
					{
						Main.tileFrame[218] = 0;
					}
				}
				Main.tileFrameCounter[219]++;
				if (Main.tileFrameCounter[219] > 4)
				{
					Main.tileFrameCounter[219] = 0;
					Main.tileFrame[219]++;
					if (Main.tileFrame[219] >= 10)
					{
						Main.tileFrame[219] = 0;
					}
				}
				Main.tileFrameCounter[220]++;
				if (Main.tileFrameCounter[220] > 4)
				{
					Main.tileFrameCounter[220] = 0;
					Main.tileFrame[220]++;
					if (Main.tileFrame[220] >= 4)
					{
						Main.tileFrame[220] = 0;
					}
				}
				Main.tileFrameCounter[231]++;
				if (Main.tileFrameCounter[231] > 16)
				{
					Main.tileFrameCounter[231] = 0;
					Main.tileFrame[231]++;
					if (Main.tileFrame[231] >= 7)
					{
						Main.tileFrame[231] = 0;
					}
				}
				Main.tileFrameCounter[235]++;
				if (Main.tileFrameCounter[235] > 20)
				{
					Main.tileFrameCounter[235] = 0;
					Main.tileFrame[235]++;
					if (Main.tileFrame[235] >= 4)
					{
						Main.tileFrame[235] = 0;
					}
					if (Main.tileFrame[235] > 1)
					{
						Main.tileLighted[235] = true;
					}
					else
					{
						Main.tileLighted[235] = false;
					}
				}
				Main.tileFrameCounter[238]++;
				if (Main.tileFrameCounter[238] > 20)
				{
					Main.tileFrameCounter[238] = 0;
					Main.tileFrame[238]++;
					if (Main.tileFrame[238] >= 4)
					{
						Main.tileFrame[238] = 0;
					}
				}
				Main.tileFrameCounter[243]++;
				if (Main.tileFrameCounter[243] > 4)
				{
					Main.tileFrameCounter[243] = 0;
					Main.tileFrame[243]++;
					if (Main.tileFrame[243] >= 6)
					{
						Main.tileFrame[243] = 0;
					}
				}
				Main.tileFrameCounter[244]++;
				if (Main.tileFrameCounter[244] > 4)
				{
					Main.tileFrameCounter[244] = 0;
					Main.tileFrame[244]++;
					if (Main.tileFrame[244] >= 6)
					{
						Main.tileFrame[244] = 0;
					}
				}
				Main.tileFrameCounter[247]++;
				if (Main.tileFrameCounter[247] > 4)
				{
					Main.tileFrameCounter[247] = 0;
					Main.tileFrame[247]++;
					if (Main.tileFrame[247] > 7)
					{
						Main.tileFrame[247] = 0;
					}
				}
				Main.tileFrameCounter[96]++;
				if (Main.tileFrameCounter[96] > 4)
				{
					Main.tileFrameCounter[96] = 0;
					Main.tileFrame[96]++;
					if (Main.tileFrame[96] > 3)
					{
						Main.tileFrame[96] = 0;
					}
				}
				Main.tileFrameCounter[171]++;
				if (Main.tileFrameCounter[171] > 16)
				{
					Main.tileFrameCounter[171] = 0;
					Main.tileFrame[171]++;
					if (Main.tileFrame[171] > 3)
					{
						Main.tileFrame[171] = 0;
					}
				}
				Main.tileFrameCounter[270]++;
				if (Main.tileFrameCounter[270] > 8)
				{
					Main.tileFrameCounter[270] = 0;
					Main.tileFrame[270]++;
					if (Main.tileFrame[270] > 5)
					{
						Main.tileFrame[270] = 0;
					}
				}
				Main.tileFrame[271] = Main.tileFrame[270];
				Main.tileFrameCounter[272]++;
				if (Main.tileFrameCounter[272] >= 10)
				{
					Main.tileFrameCounter[272] = 0;
					Main.tileFrame[272]++;
					if (Main.tileFrame[272] > 1)
					{
						Main.tileFrame[272] = 0;
					}
				}
				Main.tileFrameCounter[300]++;
				if (Main.tileFrameCounter[300] >= 5)
				{
					Main.tileFrameCounter[300] = 0;
					Main.tileFrame[300]++;
					if (Main.tileFrame[300] > 6)
					{
						Main.tileFrame[300] = 0;
					}
				}
				Main.tileFrameCounter[301]++;
				if (Main.tileFrameCounter[301] >= 5)
				{
					Main.tileFrameCounter[301] = 0;
					Main.tileFrame[301]++;
					if (Main.tileFrame[301] > 7)
					{
						Main.tileFrame[301] = 0;
					}
				}
				Main.tileFrameCounter[302]++;
				if (Main.tileFrameCounter[302] >= 5)
				{
					Main.tileFrameCounter[302] = 0;
					Main.tileFrame[302]++;
					if (Main.tileFrame[302] > 3)
					{
						Main.tileFrame[302] = 0;
					}
				}
				Main.tileFrameCounter[303]++;
				if (Main.tileFrameCounter[303] >= 5)
				{
					Main.tileFrameCounter[303] = 0;
					Main.tileFrame[303]++;
					if (Main.tileFrame[303] > 4)
					{
						Main.tileFrame[303] = 0;
					}
				}
				Main.tileFrameCounter[305]++;
				if (Main.tileFrameCounter[305] >= 5)
				{
					Main.tileFrameCounter[305] = 0;
					Main.tileFrame[305]++;
					if (Main.tileFrame[305] > 11)
					{
						Main.tileFrame[305] = 0;
					}
				}
				Main.tileFrameCounter[306]++;
				if (Main.tileFrameCounter[306] >= 5)
				{
					Main.tileFrameCounter[306] = 0;
					Main.tileFrame[306]++;
					if (Main.tileFrame[306] > 11)
					{
						Main.tileFrame[306] = 0;
					}
				}
				Main.tileFrameCounter[307]++;
				if (Main.tileFrameCounter[307] >= 5)
				{
					Main.tileFrameCounter[307] = 0;
					Main.tileFrame[307]++;
					if (Main.tileFrame[307] > 1)
					{
						Main.tileFrame[307] = 0;
					}
				}
				Main.tileFrameCounter[308]++;
				if (Main.tileFrameCounter[308] >= 5)
				{
					Main.tileFrameCounter[308] = 0;
					Main.tileFrame[308]++;
					if (Main.tileFrame[308] > 7)
					{
						Main.tileFrame[308] = 0;
					}
				}
				Main.CritterCages();
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Main.chatMode && !Main.editSign && !Main.editChest)
				{
					if (Main.frameRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (Main.showFrameRate)
						{
							Main.showFrameRate = false;
						}
						else
						{
							Main.showFrameRate = true;
						}
					}
					Main.frameRelease = false;
				}
				else
				{
					Main.frameRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F9) && !Main.chatMode && !Main.editSign && !Main.editChest)
				{
					if (Main.RGBRelease)
					{
						Lighting.lightCounter += 100;
						Main.PlaySound(12, -1, -1, 1);
						Lighting.lightMode++;
						if (Lighting.lightMode >= 4)
						{
							Lighting.lightMode = 0;
						}
						if (Lighting.lightMode == 2 || Lighting.lightMode == 0)
						{
							Main.renderCount = 0;
							Main.renderNow = true;
							Lighting.BlackOut();
						}
					}
					Main.RGBRelease = false;
				}
				else
				{
					Main.RGBRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F8) && !Main.chatMode && !Main.editSign && !Main.editChest)
				{
					if (Main.netRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (Main.netDiag)
						{
							Main.netDiag = false;
						}
						else
						{
							Main.netDiag = true;
						}
					}
					Main.netRelease = false;
				}
				else
				{
					Main.netRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F7) && !Main.chatMode && !Main.editSign && !Main.editChest)
				{
					if (Main.drawRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (Main.drawDiag)
						{
							Main.drawDiag = false;
						}
						else
						{
							Main.drawDiag = true;
						}
					}
					Main.drawRelease = false;
				}
				else
				{
					Main.drawRelease = true;
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
				{
					if (Main.releaseUI)
					{
						if (Main.hideUI)
						{
							Main.hideUI = false;
						}
						else
						{
							Main.hideUI = true;
						}
					}
					Main.releaseUI = false;
				}
				else
				{
					Main.releaseUI = true;
				}
				if ((Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter))
				{
					if (Main.toggleFullscreen)
					{
						Main.graphics.ToggleFullScreen();
						Main.chatRelease = false;
					}
					Main.toggleFullscreen = false;
				}
				else
				{
					Main.toggleFullscreen = true;
				}
				if (!Main.gamePad || Main.gameMenu)
				{
					Main.oldMouseState = Main.mouseState;
					Main.mouseState = Mouse.GetState();
					Main.mouseX = Main.mouseState.X;
					Main.mouseY = Main.mouseState.Y;
					Main.mouseLeft = false;
					Main.mouseRight = false;
					if (base.IsActive)
					{
						if (Main.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
						{
							Main.mouseLeft = true;
						}
						if (Main.mouseState.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
						{
							Main.mouseRight = true;
						}
					}
				}
				Main.keyState = Keyboard.GetState();
				if (Main.editSign)
				{
					Main.chatMode = false;
				}
				if (!Main.chatMode)
				{
					Main.startChatLine = 0;
				}
				if (Main.chatMode)
				{
					Main.showCount = (int)((float)(Main.screenHeight / 3) / Main.fontMouseText.MeasureString("1").Y) - 1;
					if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Up))
					{
						Main.startChatLine++;
						if (Main.startChatLine + Main.showCount >= Main.numChatLines - 1)
						{
							Main.startChatLine = Main.numChatLines - Main.showCount - 1;
						}
						if (Main.chatLine[Main.startChatLine + Main.showCount].text == "")
						{
							Main.startChatLine--;
						}
					}
					else
					{
						if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Down))
						{
							Main.startChatLine--;
							if (Main.startChatLine < 0)
							{
								Main.startChatLine = 0;
							}
						}
					}
					if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						Main.chatMode = false;
					}
					string text = Main.chatText;
					Main.chatText = Main.GetInputText(Main.chatText);
					int num7 = Main.screenWidth - 330;
					while (Main.fontMouseText.MeasureString(Main.chatText).X > (float)num7)
					{
						Main.chatText = Main.chatText.Substring(0, Main.chatText.Length - 1);
					}
					if (text != Main.chatText)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					if (Main.inputTextEnter && Main.chatRelease)
					{
						if (Main.chatText != "")
						{
							NetMessage.SendData(25, -1, -1, Main.chatText, Main.myPlayer, 0f, 0f, 0f, 0);
						}
						Main.chatText = "";
						Main.chatMode = false;
						Main.chatRelease = false;
						Main.player[Main.myPlayer].releaseHook = false;
						Main.player[Main.myPlayer].releaseThrow = false;
						Main.PlaySound(11, -1, -1, 1);
					}
				}
				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.netMode == 1 && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt))
				{
					if (Main.chatRelease && !Main.chatMode && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.chatMode = true;
						Main.clrInput();
						Main.chatText = "";
					}
					Main.chatRelease = false;
				}
				else
				{
					Main.chatRelease = true;
				}
				if (Main.gameMenu)
				{
					Main.UpdateMenu();
					if (Main.netMode != 2)
					{
						return;
					}
					Main.gamePaused = false;
				}
			}
			if (Main.netMode == 1)
			{
				for (int i = 0; i < 59; i++)
				{
					if (Main.player[Main.myPlayer].inventory[i].IsNotTheSameAs(Main.clientPlayer.inventory[i]))
					{
						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].inventory[i].name, Main.myPlayer, (float)i, (float)Main.player[Main.myPlayer].inventory[i].prefix, 0f, 0);
					}
				}
				if (Main.player[Main.myPlayer].armor[0].IsNotTheSameAs(Main.clientPlayer.armor[0]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[0].name, Main.myPlayer, 59f, (float)Main.player[Main.myPlayer].armor[0].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[1].IsNotTheSameAs(Main.clientPlayer.armor[1]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[1].name, Main.myPlayer, 60f, (float)Main.player[Main.myPlayer].armor[1].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[2].IsNotTheSameAs(Main.clientPlayer.armor[2]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[2].name, Main.myPlayer, 61f, (float)Main.player[Main.myPlayer].armor[2].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[3].IsNotTheSameAs(Main.clientPlayer.armor[3]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[3].name, Main.myPlayer, 62f, (float)Main.player[Main.myPlayer].armor[3].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[4].IsNotTheSameAs(Main.clientPlayer.armor[4]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[4].name, Main.myPlayer, 63f, (float)Main.player[Main.myPlayer].armor[4].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[5].IsNotTheSameAs(Main.clientPlayer.armor[5]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[5].name, Main.myPlayer, 64f, (float)Main.player[Main.myPlayer].armor[5].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[6].IsNotTheSameAs(Main.clientPlayer.armor[6]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[6].name, Main.myPlayer, 65f, (float)Main.player[Main.myPlayer].armor[6].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[7].IsNotTheSameAs(Main.clientPlayer.armor[7]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[7].name, Main.myPlayer, 66f, (float)Main.player[Main.myPlayer].armor[7].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[8].IsNotTheSameAs(Main.clientPlayer.armor[8]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[8].name, Main.myPlayer, 67f, (float)Main.player[Main.myPlayer].armor[8].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[9].IsNotTheSameAs(Main.clientPlayer.armor[9]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[9].name, Main.myPlayer, 68f, (float)Main.player[Main.myPlayer].armor[9].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[10].IsNotTheSameAs(Main.clientPlayer.armor[10]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[10].name, Main.myPlayer, 69f, (float)Main.player[Main.myPlayer].armor[10].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[11].IsNotTheSameAs(Main.clientPlayer.armor[11]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[11].name, Main.myPlayer, 70f, (float)Main.player[Main.myPlayer].armor[11].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[12].IsNotTheSameAs(Main.clientPlayer.armor[12]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[12].name, Main.myPlayer, 71f, (float)Main.player[Main.myPlayer].armor[12].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[13].IsNotTheSameAs(Main.clientPlayer.armor[13]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[13].name, Main.myPlayer, 72f, (float)Main.player[Main.myPlayer].armor[13].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[14].IsNotTheSameAs(Main.clientPlayer.armor[14]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[14].name, Main.myPlayer, 73f, (float)Main.player[Main.myPlayer].armor[14].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].armor[15].IsNotTheSameAs(Main.clientPlayer.armor[15]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[15].name, Main.myPlayer, 74f, (float)Main.player[Main.myPlayer].armor[15].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[0].IsNotTheSameAs(Main.clientPlayer.dye[0]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[0].name, Main.myPlayer, 75f, (float)Main.player[Main.myPlayer].dye[0].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[1].IsNotTheSameAs(Main.clientPlayer.dye[1]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[1].name, Main.myPlayer, 76f, (float)Main.player[Main.myPlayer].dye[1].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[2].IsNotTheSameAs(Main.clientPlayer.dye[2]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[2].name, Main.myPlayer, 77f, (float)Main.player[Main.myPlayer].dye[2].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[3].IsNotTheSameAs(Main.clientPlayer.dye[3]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[3].name, Main.myPlayer, 78f, (float)Main.player[Main.myPlayer].dye[3].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[4].IsNotTheSameAs(Main.clientPlayer.dye[4]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[4].name, Main.myPlayer, 79f, (float)Main.player[Main.myPlayer].dye[4].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[5].IsNotTheSameAs(Main.clientPlayer.dye[5]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[5].name, Main.myPlayer, 80f, (float)Main.player[Main.myPlayer].dye[5].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[6].IsNotTheSameAs(Main.clientPlayer.dye[6]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[6].name, Main.myPlayer, 81f, (float)Main.player[Main.myPlayer].dye[6].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].dye[7].IsNotTheSameAs(Main.clientPlayer.dye[7]))
				{
					NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[7].name, Main.myPlayer, 82f, (float)Main.player[Main.myPlayer].dye[7].prefix, 0f, 0);
				}
				if (Main.player[Main.myPlayer].chest != Main.clientPlayer.chest && Main.player[Main.myPlayer].chest < 0)
				{
					if (Main.player[Main.myPlayer].editedChestName)
					{
						NetMessage.SendData(33, -1, -1, Main.chest[Main.clientPlayer.chest].name, Main.player[Main.myPlayer].chest, 1f, 0f, 0f, 0);
						Main.player[Main.myPlayer].editedChestName = false;
					}
					else
					{
						NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0);
					}
				}
				if (Main.player[Main.myPlayer].talkNPC != Main.clientPlayer.talkNPC)
				{
					NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneEvil != Main.clientPlayer.zoneEvil)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneMeteor != Main.clientPlayer.zoneMeteor)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneDungeon != Main.clientPlayer.zoneDungeon)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneJungle != Main.clientPlayer.zoneJungle)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneHoly != Main.clientPlayer.zoneHoly)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneSnow != Main.clientPlayer.zoneSnow)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneBlood != Main.clientPlayer.zoneBlood)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].zoneCandle != Main.clientPlayer.zoneCandle)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
				if (Main.player[Main.myPlayer].statLife != Main.clientPlayer.statLife || Main.player[Main.myPlayer].statLifeMax != Main.clientPlayer.statLifeMax)
				{
					Main.player[Main.myPlayer].netLife = true;
				}
				if (Main.player[Main.myPlayer].netLifeTime > 0)
				{
					Main.player[Main.myPlayer].netLifeTime--;
				}
				else
				{
					if (Main.player[Main.myPlayer].netLife)
					{
						Main.player[Main.myPlayer].netLife = false;
						Main.player[Main.myPlayer].netLifeTime = 60;
						NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
					}
				}
				if (Main.player[Main.myPlayer].statMana != Main.clientPlayer.statMana || Main.player[Main.myPlayer].statManaMax != Main.clientPlayer.statManaMax)
				{
					Main.player[Main.myPlayer].netMana = true;
				}
				if (Main.player[Main.myPlayer].netManaTime > 0)
				{
					Main.player[Main.myPlayer].netManaTime--;
				}
				else
				{
					if (Main.player[Main.myPlayer].netMana)
					{
						Main.player[Main.myPlayer].netMana = false;
						Main.player[Main.myPlayer].netManaTime = 60;
						NetMessage.SendData(42, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
					}
				}
				bool flag = false;
				for (int j = 0; j < 22; j++)
				{
					if (Main.player[Main.myPlayer].buffType[j] != Main.clientPlayer.buffType[j])
					{
						flag = true;
					}
				}
				if (flag)
				{
					NetMessage.SendData(50, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
					NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				}
			}
			if (Main.netMode == 1)
			{
				Main.clientPlayer = (Player)Main.player[Main.myPlayer].clientClone();
			}
			if (Main.netMode == 0 && (Main.playerInventory || Main.npcChatText != "" || Main.player[Main.myPlayer].sign >= 0 || Main.ingameOptionsWindow) && Main.autoPause)
			{
				if (!Main.chatMode && !Main.editSign && !Main.editChest && !Main.blockInput)
				{
					Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
					if (Main.blockKey != Microsoft.Xna.Framework.Input.Keys.None)
					{
						bool flag2 = false;
						for (int k = 0; k < pressedKeys.Length; k++)
						{
							if (pressedKeys[k] == Main.blockKey)
							{
								pressedKeys[k] = Microsoft.Xna.Framework.Input.Keys.None;
								flag2 = true;
							}
						}
						if (!flag2)
						{
							Main.blockKey = Microsoft.Xna.Framework.Input.Keys.None;
						}
					}
					Main.player[Main.myPlayer].controlInv = false;
					for (int l = 0; l < pressedKeys.Length; l++)
					{
						string text2 = string.Concat(pressedKeys[l]);
						if (text2 == Main.cInv)
						{
							Main.player[Main.myPlayer].controlInv = true;
						}
					}
					if (Main.player[Main.myPlayer].controlInv)
					{
						if (Main.player[Main.myPlayer].releaseInventory)
						{
							Main.player[Main.myPlayer].toggleInv();
						}
						Main.player[Main.myPlayer].releaseInventory = false;
					}
					else
					{
						Main.player[Main.myPlayer].releaseInventory = true;
					}
				}
				if (Main.playerInventory)
				{
					int num8 = (Main.mouseState.ScrollWheelValue - Main.oldMouseState.ScrollWheelValue) / 120;
					Main.focusRecipe += num8;
					if (Main.focusRecipe > Main.numAvailableRecipes - 1)
					{
						Main.focusRecipe = Main.numAvailableRecipes - 1;
					}
					if (Main.focusRecipe < 0)
					{
						Main.focusRecipe = 0;
					}
					Main.player[Main.myPlayer].dropItemCheck();
				}
				Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[0].headSlot;
				Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[1].bodySlot;
				Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[2].legSlot;
				if (!Main.player[Main.myPlayer].hostile)
				{
					if (Main.player[Main.myPlayer].armor[8].headSlot >= 0)
					{
						Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[8].headSlot;
					}
					if (Main.player[Main.myPlayer].armor[9].bodySlot >= 0)
					{
						Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[9].bodySlot;
					}
					if (Main.player[Main.myPlayer].armor[10].legSlot >= 0)
					{
						Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[10].legSlot;
					}
				}
				if (Main.editSign)
				{
					if (Main.player[Main.myPlayer].sign == -1)
					{
						Main.editSign = false;
					}
					else
					{
						Main.npcChatText = Main.GetInputText(Main.npcChatText);
						if (Main.inputTextEnter)
						{
							byte[] bytes = new byte[]
							{
								10
							};
							Main.npcChatText += Encoding.ASCII.GetString(bytes);
						}
						else
						{
							if (Main.inputTextEscape)
							{
								Main.PlaySound(12, -1, -1, 1);
								Main.editSign = false;
								Main.blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
								Main.npcChatText = Main.sign[Main.player[Main.myPlayer].sign].text;
							}
						}
					}
				}
				else
				{
					if (Main.editChest)
					{
						string text3 = Main.GetInputText(Main.npcChatText);
						if (Main.inputTextEnter)
						{
							Main.PlaySound(12, -1, -1, 1);
							Main.editChest = false;
							int num9 = Main.player[Main.myPlayer].chest;
							if (Main.npcChatText == Main.defaultChestName)
							{
								Main.npcChatText = "";
							}
							if (Main.chest[num9].name != Main.npcChatText)
							{
								Main.chest[num9].name = Main.npcChatText;
								if (Main.netMode == 1)
								{
									Main.player[Main.myPlayer].editedChestName = true;
								}
							}
						}
						else
						{
							if (Main.inputTextEscape)
							{
								Main.PlaySound(12, -1, -1, 1);
								Main.editChest = false;
								Main.npcChatText = string.Empty;
								Main.blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
							}
							else
							{
								if (text3.Length <= 20)
								{
									Main.npcChatText = text3;
								}
							}
						}
					}
				}
				Main.gamePaused = true;
				return;
			}
			Main.gamePaused = false;
			if (!Main.dedServ && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0 && Main.netMode != 2)
			{
				Star.UpdateStars();
				Cloud.UpdateClouds();
			}
			Main.numPlayers = 0;
			int m = 0;
			while (m < 255)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.player[m].UpdatePlayer(m);
						goto IL_34BD;
					}
					catch
					{
						goto IL_34BD;
					}
					goto IL_34AE;
				}
				goto IL_34AE;
				IL_34BD:
				m++;
				continue;
				IL_34AE:
				Main.player[m].UpdatePlayer(m);
				goto IL_34BD;
			}
			if (Main.netMode != 1)
			{
				try
				{
					NPC.SpawnNPC();
				}
				catch
				{
				}
			}
			for (int n = 0; n < 255; n++)
			{
				Main.player[n].activeNPCs = 0f;
				Main.player[n].townNPCs = 0f;
			}
			if (Main.wof >= 0 && !Main.npc[Main.wof].active)
			{
				Main.wof = -1;
			}
			if (NPC.golemBoss >= 0 && !Main.npc[NPC.golemBoss].active)
			{
				NPC.golemBoss = -1;
			}
			if (NPC.plantBoss >= 0 && !Main.npc[NPC.plantBoss].active)
			{
				NPC.plantBoss = -1;
			}
			if (NPC.crimsonBoss >= 0 && !Main.npc[NPC.crimsonBoss].active)
			{
				NPC.crimsonBoss = -1;
			}
			int num10 = 0;
			while (num10 < 200)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.npc[num10].UpdateNPC(num10);
						goto IL_35D2;
					}
					catch (Exception)
					{
						Main.npc[num10] = new NPC();
						goto IL_35D2;
					}
					goto IL_35C3;
				}
				goto IL_35C3;
				IL_35D2:
				num10++;
				continue;
				IL_35C3:
				Main.npc[num10].UpdateNPC(num10);
				goto IL_35D2;
			}
			int num11 = 0;
			while (num11 < 500)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.gore[num11].Update();
						goto IL_3619;
					}
					catch
					{
						Main.gore[num11] = new Gore();
						goto IL_3619;
					}
					goto IL_360C;
				}
				goto IL_360C;
				IL_3619:
				num11++;
				continue;
				IL_360C:
				Main.gore[num11].Update();
				goto IL_3619;
			}
			int num12 = 0;
			while (num12 < 1000)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.projectile[num12].Update(num12);
						goto IL_3664;
					}
					catch
					{
						Main.projectile[num12] = new Projectile();
						goto IL_3664;
					}
					goto IL_3655;
				}
				goto IL_3655;
				IL_3664:
				num12++;
				continue;
				IL_3655:
				Main.projectile[num12].Update(num12);
				goto IL_3664;
			}
			int num13 = 0;
			while (num13 < 400)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						Main.item[num13].UpdateItem(num13);
						goto IL_36AF;
					}
					catch
					{
						Main.item[num13] = new Item();
						goto IL_36AF;
					}
					goto IL_36A0;
				}
				goto IL_36A0;
				IL_36AF:
				num13++;
				continue;
				IL_36A0:
				Main.item[num13].UpdateItem(num13);
				goto IL_36AF;
			}
			if (Main.ignoreErrors)
			{
				try
				{
					Dust.UpdateDust();
					goto IL_36F5;
				}
				catch
				{
					for (int num14 = 0; num14 < 6000; num14++)
					{
						Main.dust[num14] = new Dust();
					}
					goto IL_36F5;
				}
			}
			Dust.UpdateDust();
			IL_36F5:
			if (Main.netMode != 2)
			{
				CombatText.UpdateCombatText();
				ItemText.UpdateItemText();
			}
			if (Main.ignoreErrors)
			{
				try
				{
					Main.UpdateTime();
					goto IL_3723;
				}
				catch
				{
					Main.checkForSpawns = 0;
					goto IL_3723;
				}
			}
			Main.UpdateTime();
			IL_3723:
			if (Main.netMode != 1)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						WorldGen.UpdateWorld();
						Main.UpdateInvasion();
						goto IL_374B;
					}
					catch
					{
						goto IL_374B;
					}
				}
				WorldGen.UpdateWorld();
				Main.UpdateInvasion();
			}
			IL_374B:
			if (Main.ignoreErrors)
			{
				try
				{
					if (Main.netMode == 2)
					{
						Main.UpdateServer();
					}
					if (Main.netMode == 1)
					{
						Main.UpdateClient();
					}
					goto IL_3793;
				}
				catch
				{
					int arg_3776_0 = Main.netMode;
					goto IL_3793;
				}
			}
			if (Main.netMode == 2)
			{
				Main.UpdateServer();
			}
			if (Main.netMode == 1)
			{
				Main.UpdateClient();
			}
			IL_3793:
			if (Main.ignoreErrors)
			{
				try
				{
					for (int num15 = 0; num15 < Main.numChatLines; num15++)
					{
						if (Main.chatLine[num15].showTime > 0)
						{
							Main.chatLine[num15].showTime--;
						}
					}
					goto IL_3832;
				}
				catch
				{
					for (int num16 = 0; num16 < Main.numChatLines; num16++)
					{
						Main.chatLine[num16] = new ChatLine();
					}
					goto IL_3832;
				}
			}
			for (int num17 = 0; num17 < Main.numChatLines; num17++)
			{
				if (Main.chatLine[num17].showTime > 0)
				{
					Main.chatLine[num17].showTime--;
				}
			}
			IL_3832:
			Main.upTimer = (float)stopwatch.Elapsed.TotalMilliseconds;
			if (Main.upTimerMaxDelay > 0f)
			{
				Main.upTimerMaxDelay -= 1f;
			}
			else
			{
				Main.upTimerMax = 0f;
			}
			if (Main.upTimer > Main.upTimerMax)
			{
				Main.upTimerMax = Main.upTimer;
				Main.upTimerMaxDelay = 400f;
			}
			base.Update(gameTime);
		}
		private static void UpdateMenu()
		{
			Main.playerInventory = false;
			Main.exitScale = 0.8f;
			if (Main.netMode == 0)
			{
				Main.maxRaining = 0f;
				Main.raining = false;
				if (!Main.grabSky)
				{
					Main.time += 86.4;
					if (!Main.dayTime)
					{
						if (Main.time > 32400.0)
						{
							Main.bloodMoon = false;
							Main.time = 0.0;
							Main.dayTime = true;
							Main.moonPhase++;
							if (Main.moonPhase >= 8)
							{
								Main.moonPhase = 0;
								return;
							}
						}
					}
					else
					{
						if (Main.time > 54000.0)
						{
							Main.time = 0.0;
							Main.dayTime = false;
							return;
						}
					}
				}
			}
			else
			{
				if (Main.netMode == 1)
				{
					Main.UpdateTime();
				}
			}
		}
		public static void clrInput()
		{
			Main.keyCount = 0;
		}
		[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern short GetKeyState(int keyCode);
        public static string GetInputText(string oldString)
        {
            if (!Main.hasFocus)
            {
                return oldString;
            }
            Main.inputTextEnter = false;
            Main.inputTextEscape = false;
            string str = oldString;
            string str1 = "";
            if (str == null)
            {
                str = "";
            }
            bool flag = false;
            if (!Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftControl) && !Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightControl))
            {
                if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftShift) || Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightShift))
                {
                    if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete))
                    {
                        Thread thread = new Thread(() =>
                        {
                            if (oldString.Length > 0)
                            {
                                Clipboard.SetText(oldString);
                            }
                        });
                        thread.SetApartmentState(ApartmentState.STA);
                        thread.Start();
                        while (thread.IsAlive)
                        {
                        }
                        str = "";
                    }
                    if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
                    {
                        Thread thread1 = new Thread(() =>
                        {
                            string text = Clipboard.GetText();
                            for (int i = 0; i < text.Length; i++)
                            {
                                if (text[i] < ' ' || text[i] == '\u007F')
                                {
                                    int num = i;
                                    i = num - 1;
                                    text = text.Replace(string.Concat(text[num]), "");
                                }
                            }
                            str1 = string.Concat(str1, text);
                        });
                        thread1.SetApartmentState(ApartmentState.STA);
                        thread1.Start();
                        while (thread1.IsAlive)
                        {
                        }
                    }
                }
                for (int i1 = 0; i1 < Main.keyCount; i1++)
                {
                    int num1 = Main.keyInt[i1];
                    string str2 = Main.keyString[i1];
                    if (num1 == 13)
                    {
                        Main.inputTextEnter = true;
                    }
                    else if (num1 == 27)
                    {
                        Main.inputTextEscape = true;
                    }
                    else if (num1 >= 32 && num1 != 127)
                    {
                        str1 = string.Concat(str1, str2);
                    }
                }
            }
            else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z))
            {
                str = "";
            }
            else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X))
            {
                Thread thread2 = new Thread(() =>
                {
                    if (oldString.Length > 0)
                    {
                        Clipboard.SetText(oldString);
                    }
                });
                thread2.SetApartmentState(ApartmentState.STA);
                thread2.Start();
                while (thread2.IsAlive)
                {
                }
                str = "";
            }
            else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C) || Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
            {
                Thread thread3 = new Thread(() =>
                {
                    if (oldString.Length > 0)
                    {
                        Clipboard.SetText(oldString);
                    }
                });
                thread3.SetApartmentState(ApartmentState.STA);
                thread3.Start();
                while (thread3.IsAlive)
                {
                }
            }
            else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V))
            {
                Thread thread4 = new Thread(() =>
                {
                    string text = Clipboard.GetText();
                    for (int i = 0; i < text.Length; i++)
                    {
                        if (text[i] < ' ' || text[i] == '\u007F')
                        {
                            int num = i;
                            i = num - 1;
                            text = text.Replace(string.Concat(text[num]), "");
                        }
                    }
                    str1 = string.Concat(str1, text);
                });
                thread4.SetApartmentState(ApartmentState.STA);
                thread4.Start();
                while (thread4.IsAlive)
                {
                }
            }
            Main.keyCount = 0;
            str = string.Concat(str, str1);
            Main.oldInputText = Main.inputText;
            Main.inputText = Keyboard.GetState();
            Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.inputText.GetPressedKeys();
            Microsoft.Xna.Framework.Input.Keys[] keysArray = Main.oldInputText.GetPressedKeys();
            if (!Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back) || !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back))
            {
                Main.backSpaceCount = 15;
            }
            else
            {
                if (Main.backSpaceCount == 0)
                {
                    Main.backSpaceCount = 7;
                    flag = true;
                }
                Main.backSpaceCount = Main.backSpaceCount - 1;
            }
            for (int j = 0; j < (int)pressedKeys.Length; j++)
            {
                bool flag1 = true;
                for (int k = 0; k < (int)keysArray.Length; k++)
                {
                    if (pressedKeys[j] == keysArray[k])
                    {
                        flag1 = false;
                    }
                }
                if (string.Concat(pressedKeys[j]) == "Back" && (flag1 || flag) && str.Length > 0)
                {
                    str = str.Substring(0, str.Length - 1);
                }
            }
            return str;
        }
		protected void MouseText(string cursorText, int rare = 0, byte diff = 0)
		{
			if (this.mouseNPC > -1)
			{
				return;
			}
			if (cursorText == null)
			{
				return;
			}
			int num = Main.mouseX + 10;
			int num2 = Main.mouseY + 10;
			Color color = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			float num23;
			if (Main.toolTip.type > 0)
			{
				rare = Main.toolTip.rare;
				float knockBack = Main.toolTip.knockBack;
				if (Main.player[Main.myPlayer].kbGlove)
				{
					Main.toolTip.knockBack *= 1.7f;
				}
				if (Main.toolTip.ranged && Main.player[Main.myPlayer].armorSteath)
				{
					Main.toolTip.knockBack *= 1f + (1f - Main.player[Main.myPlayer].stealth) * 0.5f;
				}
				int num3 = 20;
				int num4 = 1;
				string[] array = new string[num3];
				bool[] array2 = new bool[num3];
				bool[] array3 = new bool[num3];
				for (int i = 0; i < num3; i++)
				{
					array2[i] = false;
					array3[i] = false;
				}
				array[0] = Main.toolTip.AffixName();
				if (Main.toolTip.stack > 1)
				{
					string[] array4;
					string[] expr_138 = array4 = array;
					int arg_17C_1 = 0;
					object obj = array4[0];
					expr_138[arg_17C_1] = string.Concat(new object[]
					{
						obj,
						" (",
						Main.toolTip.stack,
						")"
					});
				}
				if (Main.toolTip.social)
				{
					array[num4] = Lang.tip[0];
					num4++;
					array[num4] = Lang.tip[1];
					num4++;
				}
				else
				{
					if (Main.toolTip.damage > 0 && !Main.toolTip.notAmmo)
					{
						float num5 = 5E-06f;
						int damage = Main.toolTip.damage;
						if (Main.toolTip.melee)
						{
							array[num4] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num5));
							string[] array5;
							IntPtr intPtr;
							(array5 = array)[(int)(intPtr = (IntPtr)num4)] = array5[(int)intPtr] + Lang.tip[2];
						}
						else
						{
							if (Main.toolTip.ranged)
							{
								float num6 = (float)damage * Main.player[Main.myPlayer].rangedDamage;
								if (Main.toolTip.useAmmo == 1 || Main.toolTip.useAmmo == 323)
								{
									num6 *= Main.player[Main.myPlayer].arrowDamage;
								}
								if (Main.toolTip.useAmmo == 1 && Main.player[Main.myPlayer].archery)
								{
									num6 *= 1.2f;
								}
								if (Main.toolTip.useAmmo == 14 || Main.toolTip.useAmmo == 311)
								{
									num6 *= Main.player[Main.myPlayer].bulletDamage;
								}
								if (Main.toolTip.useAmmo == 771 || Main.toolTip.useAmmo == 246 || Main.toolTip.useAmmo == 312)
								{
									num6 *= Main.player[Main.myPlayer].rocketDamage;
								}
								array[num4] = string.Concat((int)(num6 + num5));
								string[] array6;
								IntPtr intPtr2;
								(array6 = array)[(int)(intPtr2 = (IntPtr)num4)] = array6[(int)intPtr2] + Lang.tip[3];
							}
							else
							{
								if (Main.toolTip.magic)
								{
									array[num4] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num5));
									string[] array7;
									IntPtr intPtr3;
									(array7 = array)[(int)(intPtr3 = (IntPtr)num4)] = array7[(int)intPtr3] + Lang.tip[4];
								}
								else
								{
									if (Main.toolTip.summon)
									{
										array[num4] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num5));
										string[] array8;
										IntPtr intPtr4;
										(array8 = array)[(int)(intPtr4 = (IntPtr)num4)] = array8[(int)intPtr4] + Lang.tip[53];
									}
									else
									{
										array[num4] = string.Concat(damage);
										IntPtr intPtr;
										string[] array9;
										(array9 = array)[(int)(intPtr = (IntPtr)num4)] = array9[(int)intPtr] + Lang.tip[55];
									}
								}
							}
						}
						num4++;
						if (Main.toolTip.melee)
						{
							int num7 = Main.player[Main.myPlayer].meleeCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
							array[num4] = num7 + Lang.tip[5];
							num4++;
						}
						else
						{
							if (Main.toolTip.ranged)
							{
								int num8 = Main.player[Main.myPlayer].rangedCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
								array[num4] = num8 + Lang.tip[5];
								num4++;
							}
							else
							{
								if (Main.toolTip.magic)
								{
									int num9 = Main.player[Main.myPlayer].magicCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
									array[num4] = num9 + Lang.tip[5];
									num4++;
								}
							}
						}
						if (Main.toolTip.useStyle > 0)
						{
							if (Main.toolTip.useAnimation <= 8)
							{
								array[num4] = Lang.tip[6];
							}
							else
							{
								if (Main.toolTip.useAnimation <= 20)
								{
									array[num4] = Lang.tip[7];
								}
								else
								{
									if (Main.toolTip.useAnimation <= 25)
									{
										array[num4] = Lang.tip[8];
									}
									else
									{
										if (Main.toolTip.useAnimation <= 30)
										{
											array[num4] = Lang.tip[9];
										}
										else
										{
											if (Main.toolTip.useAnimation <= 35)
											{
												array[num4] = Lang.tip[10];
											}
											else
											{
												if (Main.toolTip.useAnimation <= 45)
												{
													array[num4] = Lang.tip[11];
												}
												else
												{
													if (Main.toolTip.useAnimation <= 55)
													{
														array[num4] = Lang.tip[12];
													}
													else
													{
														array[num4] = Lang.tip[13];
													}
												}
											}
										}
									}
								}
							}
							num4++;
						}
						float num10 = Main.toolTip.knockBack;
						if (Main.toolTip.summon)
						{
							num10 += Main.player[Main.myPlayer].minionKB;
						}
						if ((Main.player[Main.myPlayer].magicQuiver && Main.toolTip.useAmmo == 1) || Main.toolTip.useAmmo == 323)
						{
							num10 = (float)((int)(num10 * 1.1f));
						}
						if (num10 == 0f)
						{
							array[num4] = Lang.tip[14];
						}
						else
						{
							if ((double)num10 <= 1.5)
							{
								array[num4] = Lang.tip[15];
							}
							else
							{
								if (num10 <= 3f)
								{
									array[num4] = Lang.tip[16];
								}
								else
								{
									if (num10 <= 4f)
									{
										array[num4] = Lang.tip[17];
									}
									else
									{
										if (num10 <= 6f)
										{
											array[num4] = Lang.tip[18];
										}
										else
										{
											if (num10 <= 7f)
											{
												array[num4] = Lang.tip[19];
											}
											else
											{
												if (num10 <= 9f)
												{
													array[num4] = Lang.tip[20];
												}
												else
												{
													if (num10 <= 11f)
													{
														array[num4] = Lang.tip[21];
													}
													else
													{
														array[num4] = Lang.tip[22];
													}
												}
											}
										}
									}
								}
							}
						}
						num4++;
					}
					if (Main.toolTip.headSlot > 0 || Main.toolTip.bodySlot > 0 || Main.toolTip.legSlot > 0 || Main.toolTip.accessory)
					{
						array[num4] = Lang.tip[23];
						num4++;
					}
					if (Main.toolTip.tileWand > 0)
					{
						array[num4] = Lang.tip[52] + Lang.itemName(Main.toolTip.tileWand, false);
						num4++;
					}
					if (Main.toolTip.vanity)
					{
						array[num4] = Lang.tip[24];
						num4++;
					}
					if (Main.toolTip.defense > 0)
					{
						array[num4] = Main.toolTip.defense + Lang.tip[25];
						num4++;
					}
					if (Main.toolTip.pick > 0)
					{
						array[num4] = Main.toolTip.pick + Lang.tip[26];
						num4++;
					}
					if (Main.toolTip.axe > 0)
					{
						array[num4] = Main.toolTip.axe * 5 + Lang.tip[27];
						num4++;
					}
					if (Main.toolTip.hammer > 0)
					{
						array[num4] = Main.toolTip.hammer + Lang.tip[28];
						num4++;
					}
					if (Main.toolTip.tileBoost != 0)
					{
						int tileBoost = Main.toolTip.tileBoost;
						if (tileBoost > 0)
						{
							array[num4] = "+" + tileBoost + Lang.tip[54];
						}
						else
						{
							array[num4] = tileBoost + Lang.tip[54];
						}
						num4++;
					}
					if (Main.toolTip.healLife > 0)
					{
						array[num4] = string.Concat(new object[]
						{
							Lang.tip[29],
							" ",
							Main.toolTip.healLife,
							" ",
							Lang.tip[30]
						});
						num4++;
					}
					if (Main.toolTip.healMana > 0)
					{
						array[num4] = string.Concat(new object[]
						{
							Lang.tip[29],
							" ",
							Main.toolTip.healMana,
							" ",
							Lang.tip[31]
						});
						num4++;
					}
					if (Main.toolTip.mana > 0 && (Main.toolTip.type != 127 || !Main.player[Main.myPlayer].spaceGun))
					{
						array[num4] = string.Concat(new object[]
						{
							Lang.tip[32],
							" ",
							(int)((float)Main.toolTip.mana * Main.player[Main.myPlayer].manaCost),
							" ",
							Lang.tip[31]
						});
						num4++;
					}
					if (Main.toolTip.createWall > 0 || Main.toolTip.createTile > -1)
					{
						if (Main.toolTip.type != 213 && Main.toolTip.type != 832)
						{
							array[num4] = Lang.tip[33];
							num4++;
						}
					}
					else
					{
						if (Main.toolTip.ammo > 0 && !Main.toolTip.notAmmo)
						{
							array[num4] = Lang.tip[34];
							num4++;
						}
						else
						{
							if (Main.toolTip.consumable)
							{
								array[num4] = Lang.tip[35];
								num4++;
							}
						}
					}
					if (Main.toolTip.material)
					{
						array[num4] = Lang.tip[36];
						num4++;
					}
					if (Main.toolTip.toolTip != null)
					{
						array[num4] = Main.toolTip.toolTip;
						num4++;
					}
					if (Main.toolTip.toolTip2 != null)
					{
						array[num4] = Main.toolTip.toolTip2;
						num4++;
					}
					if (Main.toolTip.buffTime > 0)
					{
						string text;
						if (Main.toolTip.buffTime / 60 >= 60)
						{
							text = Math.Round((double)(Main.toolTip.buffTime / 60) / 60.0) + Lang.tip[37];
						}
						else
						{
							text = Math.Round((double)Main.toolTip.buffTime / 60.0) + Lang.tip[38];
						}
						array[num4] = text;
						num4++;
					}
					if (Main.toolTip.prefix > 0)
					{
						if (Main.cpItem == null || Main.cpItem.netID != Main.toolTip.netID)
						{
							Main.cpItem = new Item();
							Main.cpItem.netDefaults(Main.toolTip.netID);
						}
						if (Main.cpItem.damage != Main.toolTip.damage)
						{
							double num11 = (double)((float)Main.toolTip.damage - (float)Main.cpItem.damage);
							num11 = num11 / (double)((float)Main.cpItem.damage) * 100.0;
							num11 = Math.Round(num11);
							if (num11 > 0.0)
							{
								array[num4] = "+" + num11 + Lang.tip[39];
							}
							else
							{
								array[num4] = num11 + Lang.tip[39];
							}
							if (num11 < 0.0)
							{
								array3[num4] = true;
							}
							array2[num4] = true;
							num4++;
						}
						if (Main.cpItem.useAnimation != Main.toolTip.useAnimation)
						{
							double num12 = (double)((float)Main.toolTip.useAnimation - (float)Main.cpItem.useAnimation);
							num12 = num12 / (double)((float)Main.cpItem.useAnimation) * 100.0;
							num12 = Math.Round(num12);
							num12 *= -1.0;
							if (num12 > 0.0)
							{
								array[num4] = "+" + num12 + Lang.tip[40];
							}
							else
							{
								array[num4] = num12 + Lang.tip[40];
							}
							if (num12 < 0.0)
							{
								array3[num4] = true;
							}
							array2[num4] = true;
							num4++;
						}
						if (Main.cpItem.crit != Main.toolTip.crit)
						{
							double num13 = (double)((float)Main.toolTip.crit - (float)Main.cpItem.crit);
							if (num13 > 0.0)
							{
								array[num4] = "+" + num13 + Lang.tip[41];
							}
							else
							{
								array[num4] = num13 + Lang.tip[41];
							}
							if (num13 < 0.0)
							{
								array3[num4] = true;
							}
							array2[num4] = true;
							num4++;
						}
						if (Main.cpItem.mana != Main.toolTip.mana)
						{
							double num14 = (double)((float)Main.toolTip.mana - (float)Main.cpItem.mana);
							num14 = num14 / (double)((float)Main.cpItem.mana) * 100.0;
							num14 = Math.Round(num14);
							if (num14 > 0.0)
							{
								array[num4] = "+" + num14 + Lang.tip[42];
							}
							else
							{
								array[num4] = num14 + Lang.tip[42];
							}
							if (num14 > 0.0)
							{
								array3[num4] = true;
							}
							array2[num4] = true;
							num4++;
						}
						if (Main.cpItem.scale != Main.toolTip.scale)
						{
							double num15 = (double)(Main.toolTip.scale - Main.cpItem.scale);
							num15 = num15 / (double)Main.cpItem.scale * 100.0;
							num15 = Math.Round(num15);
							if (num15 > 0.0)
							{
								array[num4] = "+" + num15 + Lang.tip[43];
							}
							else
							{
								array[num4] = num15 + Lang.tip[43];
							}
							if (num15 < 0.0)
							{
								array3[num4] = true;
							}
							array2[num4] = true;
							num4++;
						}
						if (Main.cpItem.shootSpeed != Main.toolTip.shootSpeed)
						{
							double num16 = (double)(Main.toolTip.shootSpeed - Main.cpItem.shootSpeed);
							num16 = num16 / (double)Main.cpItem.shootSpeed * 100.0;
							num16 = Math.Round(num16);
							if (num16 > 0.0)
							{
								array[num4] = "+" + num16 + Lang.tip[44];
							}
							else
							{
								array[num4] = num16 + Lang.tip[44];
							}
							if (num16 < 0.0)
							{
								array3[num4] = true;
							}
							array2[num4] = true;
							num4++;
						}
						if (Main.cpItem.knockBack != knockBack)
						{
							double num17 = (double)(knockBack - Main.cpItem.knockBack);
							num17 = num17 / (double)Main.cpItem.knockBack * 100.0;
							num17 = Math.Round(num17);
							if (num17 > 0.0)
							{
								array[num4] = "+" + num17 + Lang.tip[45];
							}
							else
							{
								array[num4] = num17 + Lang.tip[45];
							}
							if (num17 < 0.0)
							{
								array3[num4] = true;
							}
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 62)
						{
							array[num4] = "+1" + Lang.tip[25];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 63)
						{
							array[num4] = "+2" + Lang.tip[25];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 64)
						{
							array[num4] = "+3" + Lang.tip[25];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 65)
						{
							array[num4] = "+4" + Lang.tip[25];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 66)
						{
							array[num4] = "+20 " + Lang.tip[31];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 67)
						{
							array[num4] = "+2" + Lang.tip[5];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 68)
						{
							array[num4] = "+4" + Lang.tip[5];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 69)
						{
							array[num4] = "+1" + Lang.tip[39];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 70)
						{
							array[num4] = "+2" + Lang.tip[39];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 71)
						{
							array[num4] = "+3" + Lang.tip[39];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 72)
						{
							array[num4] = "+4" + Lang.tip[39];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 73)
						{
							array[num4] = "+1" + Lang.tip[46];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 74)
						{
							array[num4] = "+2" + Lang.tip[46];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 75)
						{
							array[num4] = "+3" + Lang.tip[46];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 76)
						{
							array[num4] = "+4" + Lang.tip[46];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 77)
						{
							array[num4] = "+1" + Lang.tip[47];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 78)
						{
							array[num4] = "+2" + Lang.tip[47];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 79)
						{
							array[num4] = "+3" + Lang.tip[47];
							array2[num4] = true;
							num4++;
						}
						if (Main.toolTip.prefix == 80)
						{
							array[num4] = "+4" + Lang.tip[47];
							array2[num4] = true;
							num4++;
						}
					}
					if (Main.toolTip.wornArmor && Main.player[Main.myPlayer].setBonus != "")
					{
						array[num4] = Lang.tip[48] + " " + Main.player[Main.myPlayer].setBonus;
						num4++;
					}
				}
				if (Main.npcShop > 0)
				{
					if (Main.toolTip.value > 0)
					{
						string text2 = "";
						int num18 = 0;
						int num19 = 0;
						int num20 = 0;
						int num21 = 0;
						int num22 = Main.toolTip.value * Main.toolTip.stack;
						if (!Main.toolTip.buy)
						{
							num22 = Main.toolTip.value / 5 * Main.toolTip.stack;
						}
						if (num22 < 1)
						{
							num22 = 1;
						}
						if (num22 >= 1000000)
						{
							num18 = num22 / 1000000;
							num22 -= num18 * 1000000;
						}
						if (num22 >= 10000)
						{
							num19 = num22 / 10000;
							num22 -= num19 * 10000;
						}
						if (num22 >= 100)
						{
							num20 = num22 / 100;
							num22 -= num20 * 100;
						}
						if (num22 >= 1)
						{
							num21 = num22;
						}
						if (num18 > 0)
						{
							object obj = text2;
							text2 = string.Concat(new object[]
							{
								obj,
								num18,
								" ",
								Lang.inter[15],
								" "
							});
						}
						if (num19 > 0)
						{
							object obj = text2;
							text2 = string.Concat(new object[]
							{
								obj,
								num19,
								" ",
								Lang.inter[16],
								" "
							});
						}
						if (num20 > 0)
						{
							object obj = text2;
							text2 = string.Concat(new object[]
							{
								obj,
								num20,
								" ",
								Lang.inter[17],
								" "
							});
						}
						if (num21 > 0)
						{
							object obj = text2;
							text2 = string.Concat(new object[]
							{
								obj,
								num21,
								" ",
								Lang.inter[18],
								" "
							});
						}
						if (!Main.toolTip.buy)
						{
							array[num4] = Lang.tip[49] + " " + text2;
						}
						else
						{
							array[num4] = Lang.tip[50] + " " + text2;
						}
						num4++;
						num23 = (float)Main.mouseTextColor / 255f;
						if (num18 > 0)
						{
							color = new Color((int)((byte)(220f * num23)), (int)((byte)(220f * num23)), (int)((byte)(198f * num23)), (int)Main.mouseTextColor);
						}
						else
						{
							if (num19 > 0)
							{
								color = new Color((int)((byte)(224f * num23)), (int)((byte)(201f * num23)), (int)((byte)(92f * num23)), (int)Main.mouseTextColor);
							}
							else
							{
								if (num20 > 0)
								{
									color = new Color((int)((byte)(181f * num23)), (int)((byte)(192f * num23)), (int)((byte)(193f * num23)), (int)Main.mouseTextColor);
								}
								else
								{
									if (num21 > 0)
									{
										color = new Color((int)((byte)(246f * num23)), (int)((byte)(138f * num23)), (int)((byte)(96f * num23)), (int)Main.mouseTextColor);
									}
								}
							}
						}
					}
					else
					{
						num23 = (float)Main.mouseTextColor / 255f;
						array[num4] = Lang.tip[51];
						num4++;
						color = new Color((int)((byte)(120f * num23)), (int)((byte)(120f * num23)), (int)((byte)(120f * num23)), (int)Main.mouseTextColor);
					}
				}
				Vector2 vector = default(Vector2);
				int num24 = 0;
				for (int j = 0; j < num4; j++)
				{
					Vector2 vector2 = Main.fontMouseText.MeasureString(array[j]);
					if (vector2.X > vector.X)
					{
						vector.X = vector2.X;
					}
					vector.Y += vector2.Y + (float)num24;
				}
				if ((float)num + vector.X + 4f > (float)Main.screenWidth)
				{
					num = (int)((float)Main.screenWidth - vector.X - 4f);
				}
				if ((float)num2 + vector.Y + 4f > (float)Main.screenHeight)
				{
					num2 = (int)((float)Main.screenHeight - vector.Y - 4f);
				}
				int num25 = 0;
				num23 = (float)Main.mouseTextColor / 255f;
				for (int k = 0; k < num4; k++)
				{
					for (int l = 0; l < 5; l++)
					{
						int num26 = num;
						int num27 = num2 + num25;
						Color color2 = Color.Black;
						if (l == 0)
						{
							num26 -= 2;
						}
						else
						{
							if (l == 1)
							{
								num26 += 2;
							}
							else
							{
								if (l == 2)
								{
									num27 -= 2;
								}
								else
								{
									if (l == 3)
									{
										num27 += 2;
									}
									else
									{
										color2 = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
										if (k == 0)
										{
											if (rare == -1)
											{
												color2 = new Color((int)((byte)(130f * num23)), (int)((byte)(130f * num23)), (int)((byte)(130f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 1)
											{
												color2 = new Color((int)((byte)(150f * num23)), (int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 2)
											{
												color2 = new Color((int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)((byte)(150f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 3)
											{
												color2 = new Color((int)((byte)(255f * num23)), (int)((byte)(200f * num23)), (int)((byte)(150f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 4)
											{
												color2 = new Color((int)((byte)(255f * num23)), (int)((byte)(150f * num23)), (int)((byte)(150f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 5)
											{
												color2 = new Color((int)((byte)(255f * num23)), (int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 6)
											{
												color2 = new Color((int)((byte)(210f * num23)), (int)((byte)(160f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 7)
											{
												color2 = new Color((int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)((byte)(10f * num23)), (int)Main.mouseTextColor);
											}
											if (rare == 8)
											{
												color2 = new Color((int)((byte)(255f * num23)), (int)((byte)(255f * num23)), (int)((byte)(10f * num23)), (int)Main.mouseTextColor);
											}
											if (rare >= 9)
											{
												color2 = new Color((int)((byte)(5f * num23)), (int)((byte)(200f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
											}
											if (diff == 1)
											{
												color2 = new Color((int)((byte)((float)Main.mcColor.R * num23)), (int)((byte)((float)Main.mcColor.G * num23)), (int)((byte)((float)Main.mcColor.B * num23)), (int)Main.mouseTextColor);
											}
											if (diff == 2)
											{
												color2 = new Color((int)((byte)((float)Main.hcColor.R * num23)), (int)((byte)((float)Main.hcColor.G * num23)), (int)((byte)((float)Main.hcColor.B * num23)), (int)Main.mouseTextColor);
											}
										}
										else
										{
											if (array2[k])
											{
												if (array3[k])
												{
													color2 = new Color((int)((byte)(190f * num23)), (int)((byte)(120f * num23)), (int)((byte)(120f * num23)), (int)Main.mouseTextColor);
												}
												else
												{
													color2 = new Color((int)((byte)(120f * num23)), (int)((byte)(190f * num23)), (int)((byte)(120f * num23)), (int)Main.mouseTextColor);
												}
											}
											else
											{
												if (k == num4 - 1)
												{
													color2 = color;
												}
											}
										}
									}
								}
							}
						}
						Main.spriteBatch.DrawString(Main.fontMouseText, array[k], new Vector2((float)num26, (float)num27), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					num25 += (int)(Main.fontMouseText.MeasureString(array[k]).Y + (float)num24);
				}
				return;
			}
			if (Main.buffString != "" && Main.buffString != null)
			{
				for (int m = 0; m < 5; m++)
				{
					int num28 = num;
					int num29 = num2 + (int)Main.fontMouseText.MeasureString(Main.buffString).Y;
					Color black = Color.Black;
					if (m == 0)
					{
						num28 -= 2;
					}
					else
					{
						if (m == 1)
						{
							num28 += 2;
						}
						else
						{
							if (m == 2)
							{
								num29 -= 2;
							}
							else
							{
								if (m == 3)
								{
									num29 += 2;
								}
								else
								{
									black = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
								}
							}
						}
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, Main.buffString, new Vector2((float)num28, (float)num29), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			Vector2 vector3 = Main.fontMouseText.MeasureString(cursorText);
			if ((float)num + vector3.X + 4f > (float)Main.screenWidth)
			{
				num = (int)((float)Main.screenWidth - vector3.X - 4f);
			}
			if ((float)num2 + vector3.Y + 4f > (float)Main.screenHeight)
			{
				num2 = (int)((float)Main.screenHeight - vector3.Y - 4f);
			}
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)(num2 - 2)), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)(num2 + 2)), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)(num - 2), (float)num2), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)(num + 2), (float)num2), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			num23 = (float)Main.mouseTextColor / 255f;
			Color color3 = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			if (rare == -10)
			{
				color3 = new Color((int)((byte)(65f * num23)), (int)((byte)(255f * num23)), (int)((byte)(110f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == -1)
			{
				color3 = new Color((int)((byte)(130f * num23)), (int)((byte)(130f * num23)), (int)((byte)(130f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 1)
			{
				color3 = new Color((int)((byte)(150f * num23)), (int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 2)
			{
				color3 = new Color((int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)((byte)(150f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 3)
			{
				color3 = new Color((int)((byte)(255f * num23)), (int)((byte)(200f * num23)), (int)((byte)(150f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 4)
			{
				color3 = new Color((int)((byte)(255f * num23)), (int)((byte)(150f * num23)), (int)((byte)(150f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 5)
			{
				color3 = new Color((int)((byte)(255f * num23)), (int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 6)
			{
				color3 = new Color((int)((byte)(210f * num23)), (int)((byte)(160f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 7)
			{
				color3 = new Color((int)((byte)(150f * num23)), (int)((byte)(255f * num23)), (int)((byte)(10f * num23)), (int)Main.mouseTextColor);
			}
			if (rare == 8)
			{
				color3 = new Color((int)((byte)(255f * num23)), (int)((byte)(255f * num23)), (int)((byte)(10f * num23)), (int)Main.mouseTextColor);
			}
			if (rare >= 9)
			{
				color3 = new Color((int)((byte)(5f * num23)), (int)((byte)(200f * num23)), (int)((byte)(255f * num23)), (int)Main.mouseTextColor);
			}
			if (diff == 1)
			{
				color3 = new Color((int)((byte)((float)Main.mcColor.R * num23)), (int)((byte)((float)Main.mcColor.G * num23)), (int)((byte)((float)Main.mcColor.B * num23)), (int)Main.mouseTextColor);
			}
			if (diff == 2)
			{
				color3 = new Color((int)((byte)((float)Main.hcColor.R * num23)), (int)((byte)((float)Main.hcColor.G * num23)), (int)((byte)((float)Main.hcColor.B * num23)), (int)Main.mouseTextColor);
			}
			Main.spriteBatch.DrawString(Main.fontMouseText, cursorText, new Vector2((float)num, (float)num2), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
		}
		protected void DrawFPS()
		{
			if (Main.showFrameRate)
			{
				string text = string.Concat(Main.frameRate);
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					" (",
					Liquid.numLiquid + LiquidBuffer.numLiquidBuffer,
					")"
				});
				object obj2 = text;
				text = string.Concat(new object[]
				{
					obj2,
					" (",
					(int)(Main.gfxQuality * 100f),
					"%)"
				});
				int num = 4;
				if (!Main.gameMenu)
				{
					num = Main.screenHeight - 24;
				}
				Main.spriteBatch.DrawString(Main.fontMouseText, text + " " + Main.debugWords, new Vector2(4f, (float)num), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
		}
		public static Color shine(Color newColor, int type)
		{
			int num = (int)newColor.R;
			int num2 = (int)newColor.G;
			int num3 = (int)newColor.B;
			float num4 = 0.6f;
			if (type == 25)
			{
				num = (int)((float)newColor.R * 0.95f);
				num2 = (int)((float)newColor.G * 0.85f);
				num3 = (int)((double)((float)newColor.B) * 1.1);
			}
			else
			{
				if (type == 117)
				{
					num = (int)((float)newColor.R * 1.1f);
					num2 = (int)((float)newColor.G * 1f);
					num3 = (int)((double)((float)newColor.B) * 1.2);
				}
				else
				{
					if (type == 204)
					{
						num4 = 0.3f + (float)Main.mouseTextColor / 300f;
						num = (int)((float)newColor.R * (1.3f * num4));
						if (num > 255)
						{
							num = 255;
						}
						return new Color(num, num2, num3, 255);
					}
					if (type == 211)
					{
						num4 = 0.3f + (float)Main.mouseTextColor / 300f;
						num2 = (int)((float)newColor.G * (1.5f * num4));
						num3 = (int)((float)newColor.B * (1.1f * num4));
					}
					else
					{
						if (type == 147 || type == 161)
						{
							num = (int)((float)newColor.R * 1.1f);
							num2 = (int)((float)newColor.G * 1.12f);
							num3 = (int)((double)((float)newColor.B) * 1.15);
						}
						else
						{
							if (type == 163)
							{
								num = (int)((float)newColor.R * 1.05f);
								num2 = (int)((float)newColor.G * 1.1f);
								num3 = (int)((double)((float)newColor.B) * 1.15);
							}
							else
							{
								if (type == 164)
								{
									num = (int)((float)newColor.R * 1.1f);
									num2 = (int)((float)newColor.G * 1.1f);
									num3 = (int)((double)((float)newColor.B) * 1.2);
								}
								else
								{
									if (type == 178)
									{
										num4 = 0.5f;
										num = (int)((float)newColor.R * (1f + num4));
										num2 = (int)((float)newColor.G * (1f + num4));
										num3 = (int)((float)newColor.B * (1f + num4));
									}
									else
									{
										if (type == 185 || type == 186)
										{
											num4 = 0.3f;
											num = (int)((float)newColor.R * (1f + num4));
											num2 = (int)((float)newColor.G * (1f + num4));
											num3 = (int)((float)newColor.B * (1f + num4));
										}
										else
										{
											if (type >= 262 && type <= 268)
											{
												num3 += 100;
												num += 100;
												num2 += 100;
											}
											else
											{
												num = (int)((float)newColor.R * (1f + num4));
												num2 = (int)((float)newColor.G * (1f + num4));
												num3 = (int)((float)newColor.B * (1f + num4));
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			newColor.R = (byte)num;
			newColor.G = (byte)num2;
			newColor.B = (byte)num3;
			return new Color((int)((byte)num), (int)((byte)num2), (int)((byte)num3), (int)newColor.A);
		}
		public static bool canDrawColorTile(int i, int j)
		{
			return Main.tile[i, j] != null && Main.tile[i, j].color() > 0 && (int)Main.tile[i, j].color() < Main.numTileColors && Main.tileAltTextureDrawn[(int)Main.tile[i, j].type, (int)Main.tile[i, j].color()] && Main.tileAltTextureInit[(int)Main.tile[i, j].type, (int)Main.tile[i, j].color()];
		}
		public static bool canDrawColorWall(int i, int j)
		{
			return Main.tile[i, j] != null && Main.tile[i, j].wallColor() > 0 && Main.wallAltTextureDrawn[(int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor()] && Main.wallAltTextureInit[(int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor()];
		}
		protected void DrawTiles(bool solidOnly = true)
		{
			if (!solidOnly)
			{
				Main.critterCage = false;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - Main.gfxQuality) + 30f * Main.gfxQuality);
			int num2 = (int)(50f * (1f - Main.gfxQuality) + 2f * Main.gfxQuality);
			Vector2 value = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				value = default(Vector2);
			}
			int num3 = 0;
			int[] array = new int[1000];
			int[] array2 = new int[1000];
			int num4 = array.Length - 1;
			int num5 = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
			int num6 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
			int num7 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f);
			int num8 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5;
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num6 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX;
			}
			if (num7 < 0)
			{
				num7 = 0;
			}
			if (num8 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY;
			}
			if (Main.sectionManager.FrameSectionsLeft > 0)
			{
				WorldGen.SectionTileFrameWithCheck(num5, num7, num6, num8);
			}
			int num9 = 16;
			Color[] array3 = new Color[9];
			for (int i = num7; i < num8 + 4; i++)
			{
				for (int j = num5 - 2; j < num6 + 2; j++)
				{
					Tile tile = Main.tile[j, i];
					if (tile == null)
					{
						tile = new Tile();
						Main.tile[j, i] = tile;
						Main.mapTime += 60;
					}
					ushort type = tile.type;
					bool flag = Main.tileSolid[(int)type];
					if (type == 11)
					{
						flag = true;
					}
					if (tile.active() && flag == solidOnly)
					{
						if (!Main.tileSetsLoaded[(int)type])
						{
							this.LoadTiles((int)type);
						}
						SpriteEffects effects = SpriteEffects.None;
						if (type == 3 || type == 13 || type == 20 || type == 24 || type == 49 || type == 50 || type == 52 || type == 61 || type == 62 || type == 71 || type == 73 || type == 74 || type == 81 || type == 82 || type == 83 || type == 84 || type == 91 || type == 92 || type == 93 || type == 110 || type == 113 || type == 115 || type == 135 || type == 141 || type == 165 || type == 174 || type == 201 || type == 205 || type == 227 || type == 270 || type == 271)
						{
							if (j % 2 == 1)
							{
								effects = SpriteEffects.FlipHorizontally;
							}
						}
						else
						{
							if (type == 184)
							{
								if (tile.frameY < 108)
								{
									if (j % 2 == 1)
									{
										effects = SpriteEffects.FlipHorizontally;
									}
								}
								else
								{
									if (i % 2 == 1)
									{
										effects = SpriteEffects.FlipVertically;
									}
								}
							}
							else
							{
								if (type == 185 && tile.frameY == 0 && j % 2 == 1)
								{
									effects = SpriteEffects.FlipHorizontally;
								}
							}
						}
						Color color = Lighting.GetColor(j, i);
						int num10 = 0;
						int num11 = 16;
						if (type == 4 && WorldGen.SolidTile(j, i - 1))
						{
							num10 = 2;
							if (WorldGen.SolidTile(j - 1, i + 1) || WorldGen.SolidTile(j + 1, i + 1))
							{
								num10 = 4;
							}
						}
						if (type >= 275 && type <= 282)
						{
							num10 = 2;
						}
						if (type == 285 || type == 286 || type == 309 || type == 310)
						{
							num10 = 2;
						}
						if (type == 100 || type == 283)
						{
							num10 = 2;
						}
						if (type == 78 || type == 85 || type == 210 || type == 133 || type == 134 || type == 233)
						{
							num10 = 2;
						}
						if (type == 33 || type == 49 || type == 174)
						{
							num10 = -4;
						}
						if (type == 3 || type == 4 || type == 5 || type == 24 || type == 33 || type == 49 || type == 61 || type == 71 || type == 110 || type == 174 || type == 201)
						{
							num11 = 20;
						}
						else
						{
							if (type == 15 || type == 14 || type == 16 || type == 17 || type == 18 || type == 20 || type == 21 || type == 26 || type == 27 || type == 32 || type == 69 || type == 72 || type == 77 || type == 80)
							{
								num11 = 18;
							}
							else
							{
								if (type == 137)
								{
									num11 = 18;
								}
								else
								{
									if (type == 135)
									{
										num10 = 2;
										num11 = 18;
									}
									else
									{
										if (type == 254)
										{
											num10 = 2;
										}
										else
										{
											if (type == 132)
											{
												num10 = 2;
												num11 = 18;
											}
											else
											{
												num11 = 16;
											}
										}
									}
								}
							}
						}
						if (type == 52)
						{
							num10 -= 2;
						}
						if (type == 231 || type == 238)
						{
							num10 += 2;
						}
						if (type == 207)
						{
							num10 = 2;
						}
						if (type == 4 || type == 5)
						{
							num9 = 20;
						}
						else
						{
							num9 = 16;
						}
						if (type == 73 || type == 74 || type == 113)
						{
							num10 -= 12;
							num11 = 32;
						}
						if (type == 227)
						{
							num9 = 32;
							num11 = 38;
							if (tile.frameX == 238)
							{
								num10 -= 6;
							}
							else
							{
								num10 -= 20;
							}
						}
						if (type == 185 || type == 186 || type == 187)
						{
							num10 = 2;
							if (type == 185)
							{
								if (tile.frameY == 18 && tile.frameX >= 576 && tile.frameX <= 882)
								{
									Main.tileShine2[185] = true;
								}
								else
								{
									Main.tileShine2[185] = false;
								}
							}
							else
							{
								if (type == 186)
								{
									if (tile.frameX >= 864 && tile.frameX <= 1170)
									{
										Main.tileShine2[186] = true;
									}
									else
									{
										Main.tileShine2[186] = false;
									}
								}
							}
						}
						if (type == 178 && tile.frameY <= 36)
						{
							num10 = 2;
						}
						if (type == 184)
						{
							num9 = 20;
							if (tile.frameY <= 36)
							{
								num10 = 2;
							}
							else
							{
								if (tile.frameY <= 108)
								{
									num10 = -2;
								}
							}
						}
						if (type == 28)
						{
							num10 += 2;
						}
						if (type == 81)
						{
							num10 -= 8;
							num11 = 26;
							num9 = 24;
						}
						if (type == 105)
						{
							num10 = 2;
						}
						if (type == 124)
						{
							num11 = 18;
						}
						if (type == 137)
						{
							num11 = 18;
						}
						if (type == 138)
						{
							num11 = 18;
						}
						if (type == 139 || type == 142 || type == 143)
						{
							num10 = 2;
						}
						int num12 = 0;
						if (tile.halfBrick())
						{
							num12 = 8;
						}
						int num13 = Main.tileFrame[(int)type] * 38;
						int num14 = 0;
						if (type == 272)
						{
							num13 = 0;
						}
						if (type == 106)
						{
							num13 = Main.tileFrame[(int)type] * 54;
						}
						if (type >= 300 && type <= 308)
						{
							num13 = Main.tileFrame[(int)type] * 54;
							num10 = 2;
						}
						if (type == 12)
						{
							num13 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 96)
						{
							num13 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 238)
						{
							num13 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 31)
						{
							num13 = Main.tileFrame[(int)type] * 36;
						}
						if (type == 215)
						{
							num13 = Main.tileFrame[(int)type] * 36;
							num10 = 2;
						}
						if (type == 231)
						{
							num13 = Main.tileFrame[(int)type] * 54;
							num10 = 2;
						}
						if (type == 243)
						{
							num13 = Main.tileFrame[(int)type] * 54;
							num10 = 2;
						}
						if (type == 247)
						{
							num13 = Main.tileFrame[(int)type] * 54;
							num10 = 2;
						}
						if (type == 244)
						{
							num10 = 2;
							if (tile.frameX < 54)
							{
								num13 = Main.tileFrame[(int)type] * 36;
							}
							else
							{
								num13 = 0;
							}
						}
						if (type == 235)
						{
							num13 = Main.tileFrame[(int)type] * 18;
						}
						if (type == 217 || type == 218)
						{
							num13 = Main.tileFrame[(int)type] * 36;
							num10 = 2;
						}
						if (type == 219 || type == 220)
						{
							num13 = Main.tileFrame[(int)type] * 54;
							num10 = 2;
						}
						if (type == 270 || type == 271)
						{
							int k = Main.tileFrame[(int)type] + j % 6;
							if (j % 2 == 0)
							{
								k += 3;
							}
							if (j % 3 == 0)
							{
								k += 3;
							}
							if (j % 4 == 0)
							{
								k += 3;
							}
							while (k > 5)
							{
								k -= 6;
							}
							num14 = k * 18;
							num13 = 0;
						}
						if ((type >= 275 && type <= 281) || type == 296 || type == 297 || type == 309)
						{
							Main.critterCage = true;
							int num15 = j - (int)(tile.frameX / 18);
							int num16 = i - (int)(tile.frameY / 18);
							int num17 = num15 / 6 * (num16 / 4);
							num17 %= Main.cageFrames;
							if (type == 275)
							{
								num13 = Main.bunnyCageFrame[num17] * 54;
							}
							if (type == 276)
							{
								num13 = Main.squirrelCageFrame[num17] * 54;
							}
							if (type == 277)
							{
								num13 = Main.mallardCageFrame[num17] * 54;
							}
							if (type == 278)
							{
								num13 = Main.duckCageFrame[num17] * 54;
							}
							if (type == 279)
							{
								num13 = Main.birdCageFrame[num17] * 54;
							}
							if (type == 280)
							{
								num13 = Main.blueBirdCageFrame[num17] * 54;
							}
							if (type == 281)
							{
								num13 = Main.redBirdCageFrame[num17] * 54;
							}
							if (type == 296)
							{
								num13 = Main.scorpionCageFrame[0, num17] * 54;
							}
							if (type == 297)
							{
								num13 = Main.scorpionCageFrame[0, num17] * 54;
							}
							if (type == 309)
							{
								num13 = Main.penguinCageFrame[num17] * 54;
							}
						}
						else
						{
							if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310)
							{
								Main.critterCage = true;
								int num18 = j - (int)(tile.frameX / 18);
								int num19 = i - (int)(tile.frameY / 18);
								int num20 = num18 / 3 * (num19 / 3);
								num20 %= Main.cageFrames;
								if (type == 285)
								{
									num13 = Main.snailCageFrame[num20] * 36;
								}
								if (type == 286)
								{
									num13 = Main.snail2CageFrame[num20] * 36;
								}
								if (type == 298)
								{
									num13 = Main.frogCageFrame[num20] * 36;
								}
								if (type == 299)
								{
									num13 = Main.mouseCageFrame[num20] * 36;
								}
								if (type == 310)
								{
									num13 = Main.wormCageFrame[num20] * 36;
								}
							}
							else
							{
								if (type == 282 || (type >= 288 && type <= 295))
								{
									Main.critterCage = true;
									int num21 = j - (int)(tile.frameX / 18);
									int num22 = i - (int)(tile.frameY / 18);
									int num23 = num21 / 2 * (num22 / 3);
									num23 %= Main.cageFrames;
									if (type == 282)
									{
										num13 = Main.fishBowlFrame[num23] * 36;
									}
									else
									{
										int num24 = (int)(type - 288);
										num13 = Main.butterflyCageFrame[num24, num23] * 36;
									}
								}
							}
						}
						if (type == 207)
						{
							if (tile.frameY >= 72)
							{
								num13 = Main.tileFrame[(int)type];
								int num25 = j;
								if (tile.frameX % 36 != 0)
								{
									num25--;
								}
								num13 += num25 % 6;
								if (num13 >= 6)
								{
									num13 -= 6;
								}
								num13 *= 72;
							}
							else
							{
								num13 = 0;
							}
						}
						if (Main.player[Main.myPlayer].findTreasure)
						{
							bool flag2 = false;
							if (type == 185 && tile.frameY == 18 && tile.frameX >= 576 && tile.frameX <= 882)
							{
								flag2 = true;
							}
							if (type == 186 && tile.frameX >= 864 && tile.frameX <= 1170)
							{
								flag2 = true;
							}
							if (flag2 || type == 6 || type == 7 || type == 8 || type == 9 || type == 12 || type == 21 || type == 22 || type == 28 || type == 107 || type == 108 || type == 111 || (type >= 63 && type <= 68) || Main.tileAlch[(int)type] || type == 166 || type == 167 || type == 168 || type == 169 || type == 178 || type == 211 || type == 221 || type == 222 || type == 223 || type == 236)
							{
								byte b = 200;
								byte b2 = 170;
								if (color.R < b)
								{
									color.R = b;
								}
								if (color.G < b2)
								{
									color.G = b2;
								}
								color.A = Main.mouseTextColor;
								if (!Main.gamePaused && base.IsActive && Main.rand.Next(60) == 0)
								{
									int num26 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
									Main.dust[num26].fadeIn = 1f;
									Main.dust[num26].velocity *= 0.1f;
									Main.dust[num26].noLight = true;
								}
							}
						}
						if (!Main.gamePaused && base.IsActive && (Lighting.lightMode < 2 || Main.rand.Next(4) == 0))
						{
							if (type == 238 && Main.rand.Next(10) == 0)
							{
								int num27 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 168, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num27].noGravity = true;
								Main.dust[num27].alpha = 200;
							}
							if (type == 244 && tile.frameX == 18 && tile.frameY == 18 && Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(500) == 0)
								{
									Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 415, (float)Main.rand.Next(51, 101) * 0.01f);
								}
								else
								{
									if (Main.rand.Next(250) == 0)
									{
										Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 414, (float)Main.rand.Next(51, 101) * 0.01f);
									}
									else
									{
										if (Main.rand.Next(80) == 0)
										{
											Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 413, (float)Main.rand.Next(51, 101) * 0.01f);
										}
										else
										{
											if (Main.rand.Next(10) == 0)
											{
												Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 412, (float)Main.rand.Next(51, 101) * 0.01f);
											}
											else
											{
												if (Main.rand.Next(3) == 0)
												{
													Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 411, (float)Main.rand.Next(51, 101) * 0.01f);
												}
											}
										}
									}
								}
							}
							if (type == 139 && tile.frameX == 36 && tile.frameY % 36 == 0 && Main.time % 7.0 == 0.0 && Main.rand.Next(3) == 0)
							{
								int num28 = Main.rand.Next(570, 573);
								Vector2 position = new Vector2((float)(j * 16 + 8), (float)(i * 16 - 8));
								Vector2 velocity = new Vector2(Main.windSpeed * 2f, -0.5f);
								velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
								velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
								if (num28 == 572)
								{
									position.X -= 8f;
								}
								if (num28 == 571)
								{
									position.X -= 4f;
								}
								Gore.NewGore(position, velocity, num28, 0.8f);
							}
							if (type == 165 && tile.frameX >= 162 && tile.frameX <= 214 && tile.frameY == 72 && Main.rand.Next(60) == 0)
							{
								int num29 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16 + 6)), 8, 4, 153, 0f, 0f, 0, default(Color), 1f);
								Main.dust[num29].scale -= (float)Main.rand.Next(3) * 0.1f;
								Main.dust[num29].velocity.Y = 0f;
								Dust expr_12DF_cp_0 = Main.dust[num29];
								expr_12DF_cp_0.velocity.X = expr_12DF_cp_0.velocity.X * 0.05f;
								Main.dust[num29].alpha = 100;
							}
							if (type == 42 && tile.frameX == 0 && tile.frameY == 270)
							{
								if (Main.rand.Next(50) == 0)
								{
									int num30 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 4)), 8, 8, 58, 0f, 0f, 150, default(Color), 1f);
									Main.dust[num30].velocity *= 0.5f;
								}
								if (Main.rand.Next(100) == 0)
								{
									int num31 = Gore.NewGore(new Vector2((float)(j * 16 - 2), (float)(i * 16 - 4)), default(Vector2), Main.rand.Next(16, 18), 1f);
									Main.gore[num31].scale *= 0.7f;
									Main.gore[num31].velocity *= 0.25f;
								}
							}
							if (type == 215 && Main.rand.Next(2) == 0 && ((Main.drawToScreen && Main.rand.Next(4) == 0) || !Main.drawToScreen) && tile.frameY == 0)
							{
								int num32 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 - 4)), 8, 8, 31, 0f, 0f, 100, default(Color), 1f);
								if (tile.frameX == 0)
								{
									Dust expr_14AC_cp_0 = Main.dust[num32];
									expr_14AC_cp_0.position.X = expr_14AC_cp_0.position.X + (float)Main.rand.Next(8);
								}
								if (tile.frameX == 36)
								{
									Dust expr_14DC_cp_0 = Main.dust[num32];
									expr_14DC_cp_0.position.X = expr_14DC_cp_0.position.X - (float)Main.rand.Next(8);
								}
								Main.dust[num32].alpha += Main.rand.Next(100);
								Main.dust[num32].velocity *= 0.2f;
								Dust expr_153E_cp_0 = Main.dust[num32];
								expr_153E_cp_0.velocity.Y = expr_153E_cp_0.velocity.Y - (0.5f + (float)Main.rand.Next(10) * 0.1f);
								Main.dust[num32].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
								if (Main.rand.Next(4) == 0)
								{
									num32 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 8, 8, 6, 0f, 0f, 0, default(Color), 1f);
									if (tile.frameX == 0)
									{
										Dust expr_15E8_cp_0 = Main.dust[num32];
										expr_15E8_cp_0.position.X = expr_15E8_cp_0.position.X + (float)Main.rand.Next(8);
									}
									if (tile.frameX == 36)
									{
										Dust expr_1618_cp_0 = Main.dust[num32];
										expr_1618_cp_0.position.X = expr_1618_cp_0.position.X - (float)Main.rand.Next(8);
									}
									if (Main.rand.Next(20) != 0)
									{
										Main.dust[num32].noGravity = true;
										Main.dust[num32].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
										Dust expr_1686_cp_0 = Main.dust[num32];
										expr_1686_cp_0.velocity.Y = expr_1686_cp_0.velocity.Y - 1f;
									}
								}
							}
							if (type == 4 && Main.rand.Next(40) == 0 && tile.frameX < 66)
							{
								int num33 = (int)(tile.frameY / 22);
								if (num33 == 0)
								{
									num33 = 6;
								}
								else
								{
									if (num33 == 8)
									{
										num33 = 75;
									}
									else
									{
										if (num33 == 9)
										{
											num33 = 135;
										}
										else
										{
											if (num33 == 10)
											{
												num33 = 158;
											}
											else
											{
												if (num33 == 11)
												{
													num33 = 169;
												}
												else
												{
													if (num33 == 12)
													{
														num33 = 156;
													}
													else
													{
														num33 = 58 + num33;
													}
												}
											}
										}
									}
								}
								int num34;
								if (tile.frameX == 22)
								{
									num34 = Dust.NewDust(new Vector2((float)(j * 16 + 6), (float)(i * 16)), 4, 4, num33, 0f, 0f, 100, default(Color), 1f);
								}
								if (tile.frameX == 44)
								{
									num34 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16)), 4, 4, num33, 0f, 0f, 100, default(Color), 1f);
								}
								else
								{
									num34 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16)), 4, 4, num33, 0f, 0f, 100, default(Color), 1f);
								}
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num34].noGravity = true;
								}
								Main.dust[num34].velocity *= 0.3f;
								Dust expr_1838_cp_0 = Main.dust[num34];
								expr_1838_cp_0.velocity.Y = expr_1838_cp_0.velocity.Y - 1.5f;
							}
							if (type == 93 && Main.rand.Next(40) == 0 && tile.frameX == 0 && (tile.frameY == 0 || tile.frameY == 324 || tile.frameY == 378 || tile.frameY == 432 || tile.frameY == 540 || tile.frameY == 756 || tile.frameY == 810 || tile.frameY == 864))
							{
								int num35 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num35].noGravity = true;
								}
								Main.dust[num35].velocity *= 0.3f;
								Dust expr_1960_cp_0 = Main.dust[num35];
								expr_1960_cp_0.velocity.Y = expr_1960_cp_0.velocity.Y - 1.5f;
							}
							if (type == 100 && Main.rand.Next(40) == 0 && tile.frameX < 36 && (tile.frameY == 0 || tile.frameY == 72 || tile.frameY == 180 || tile.frameY == 252 || tile.frameY == 288 || tile.frameY == 360 || tile.frameY == 432 || tile.frameY == 504 || tile.frameY == 540 || tile.frameY == 576))
							{
								int num36;
								if (tile.frameX == 0)
								{
									if (Main.rand.Next(3) == 0)
									{
										num36 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
									}
									else
									{
										num36 = Dust.NewDust(new Vector2((float)(j * 16 + 14), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
									}
								}
								else
								{
									if (Main.rand.Next(3) == 0)
									{
										num36 = Dust.NewDust(new Vector2((float)(j * 16 + 6), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
									}
									else
									{
										num36 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
									}
								}
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num36].noGravity = true;
								}
								Main.dust[num36].velocity *= 0.3f;
								Dust expr_1B91_cp_0 = Main.dust[num36];
								expr_1B91_cp_0.velocity.Y = expr_1B91_cp_0.velocity.Y - 1.5f;
							}
							if (type == 98 && Main.rand.Next(40) == 0 && tile.frameY == 0 && tile.frameX == 0)
							{
								int num37 = Dust.NewDust(new Vector2((float)(j * 16 + 12), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Color), 1f);
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num37].noGravity = true;
								}
								Main.dust[num37].velocity *= 0.3f;
								Dust expr_1C58_cp_0 = Main.dust[num37];
								expr_1C58_cp_0.velocity.Y = expr_1C58_cp_0.velocity.Y - 1.5f;
							}
							if (type == 49 && Main.rand.Next(2) == 0)
							{
								int num38 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 - 4)), 4, 4, 172, 0f, 0f, 100, default(Color), 1f);
								if (Main.rand.Next(3) == 0)
								{
									Main.dust[num38].scale = 0.5f;
								}
								else
								{
									Main.dust[num38].scale = 0.9f;
									Main.dust[num38].noGravity = true;
								}
								Main.dust[num38].velocity *= 0.3f;
								Dust expr_1D2F_cp_0 = Main.dust[num38];
								expr_1D2F_cp_0.velocity.Y = expr_1D2F_cp_0.velocity.Y - 1.5f;
							}
							if (type == 34 && Main.rand.Next(40) == 0 && tile.frameX < 54)
							{
								int l = (int)(tile.frameY / 18);
								int num39 = 0;
								while (l >= 3)
								{
									l -= 3;
									num39++;
								}
								if (l == 1 && num39 != 6 && num39 != 7 && num39 != 8 && num39 != 9 && num39 != 10 && num39 != 11 && num39 != 14 && num39 != 15 && num39 != 17 && num39 != 18 && num39 != 20 && num39 != 22 && (tile.frameX == 0 || tile.frameX == 36))
								{
									int num40 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 + 2)), 14, 6, 6, 0f, 0f, 100, default(Color), 1f);
									if (Main.rand.Next(3) != 0)
									{
										Main.dust[num40].noGravity = true;
									}
									Main.dust[num40].velocity *= 0.3f;
									Dust expr_1E94_cp_0 = Main.dust[num40];
									expr_1E94_cp_0.velocity.Y = expr_1E94_cp_0.velocity.Y - 1.5f;
								}
							}
							if (type == 22 && Main.rand.Next(400) == 0)
							{
								Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Color), 1f);
							}
							else
							{
								if ((type == 23 || type == 24 || type == 32) && Main.rand.Next(500) == 0)
								{
									Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Color), 1f);
								}
								else
								{
									if (type == 25 && Main.rand.Next(700) == 0)
									{
										Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Color), 1f);
									}
									else
									{
										if (type == 112 && Main.rand.Next(700) == 0)
										{
											Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Color), 1f);
										}
										else
										{
											if (type == 31 && Main.rand.Next(20) == 0)
											{
												if (tile.frameX >= 36)
												{
													int num41 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 5, 0f, 0f, 100, default(Color), 1f);
													Main.dust[num41].velocity.Y = 0f;
													Dust expr_2092_cp_0 = Main.dust[num41];
													expr_2092_cp_0.velocity.X = expr_2092_cp_0.velocity.X * 0.3f;
												}
												else
												{
													Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Color), 1f);
												}
											}
											else
											{
												if (type == 26 && Main.rand.Next(20) == 0)
												{
													if (tile.frameX >= 54)
													{
														int num42 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 5, 0f, 0f, 100, default(Color), 1f);
														Main.dust[num42].scale = 1.5f;
														Main.dust[num42].noGravity = true;
														Main.dust[num42].velocity *= 0.75f;
													}
													else
													{
														Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Color), 1f);
													}
												}
												else
												{
													if ((type == 71 || type == 72) && Main.rand.Next(500) == 0)
													{
														Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 41, 0f, 0f, 250, default(Color), 0.8f);
													}
													else
													{
														if ((type == 17 || type == 77 || type == 133) && Main.rand.Next(40) == 0)
														{
															if (tile.frameX == 18 & tile.frameY == 18)
															{
																int num43 = Dust.NewDust(new Vector2((float)(j * 16 - 4), (float)(i * 16 - 6)), 8, 6, 6, 0f, 0f, 100, default(Color), 1f);
																if (Main.rand.Next(3) != 0)
																{
																	Main.dust[num43].noGravity = true;
																}
															}
														}
														else
														{
															if (type == 37 && Main.rand.Next(250) == 0)
															{
																int num44 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 6, 0f, 0f, 0, default(Color), (float)Main.rand.Next(3));
																if (Main.dust[num44].scale > 1f)
																{
																	Main.dust[num44].noGravity = true;
																}
															}
															else
															{
																if ((type == 58 || type == 76) && Main.rand.Next(250) == 0)
																{
																	int num45 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 6, 0f, 0f, 0, default(Color), (float)Main.rand.Next(3));
																	if (Main.dust[num45].scale > 1f)
																	{
																		Main.dust[num45].noGravity = true;
																	}
																	Main.dust[num45].noLight = true;
																}
																else
																{
																	if (type == 61)
																	{
																		if (tile.frameX == 144)
																		{
																			if (Main.rand.Next(60) == 0)
																			{
																				int num46 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 44, 0f, 0f, 250, default(Color), 0.4f);
																				Main.dust[num46].fadeIn = 0.7f;
																			}
																			color.A = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
																			color.R = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
																			color.B = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
																			color.G = (byte)(245f - (float)Main.mouseTextColor * 1.5f);
																		}
																	}
																	else
																	{
																		if (Main.tileShine[(int)type] > 0)
																		{
																			Main.tileShine[211] = 500;
																			if (color.R > 20 || color.B > 20 || color.G > 20)
																			{
																				int num47 = (int)color.R;
																				if ((int)color.G > num47)
																				{
																					num47 = (int)color.G;
																				}
																				if ((int)color.B > num47)
																				{
																					num47 = (int)color.B;
																				}
																				num47 /= 30;
																				if (Main.rand.Next(Main.tileShine[(int)type]) < num47 && (type != 21 || (tile.frameX >= 36 && tile.frameX < 180) || (tile.frameX >= 360 && tile.frameX < 1008)))
																				{
																					Color white = Color.White;
																					if (type == 178)
																					{
																						int num48 = (int)(tile.frameX / 18);
																						if (num48 == 0)
																						{
																							white = new Color(255, 0, 255, 255);
																						}
																						else
																						{
																							if (num48 == 1)
																							{
																								white = new Color(255, 255, 0, 255);
																							}
																							else
																							{
																								if (num48 == 2)
																								{
																									white = new Color(0, 0, 255, 255);
																								}
																								else
																								{
																									if (num48 == 3)
																									{
																										white = new Color(0, 255, 0, 255);
																									}
																									else
																									{
																										if (num48 == 4)
																										{
																											white = new Color(255, 0, 0, 255);
																										}
																										else
																										{
																											if (num48 == 5)
																											{
																												white = new Color(255, 255, 255, 255);
																											}
																											else
																											{
																												if (num48 == 6)
																												{
																													white = new Color(255, 255, 0, 255);
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																						int num49 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
																						Main.dust[num49].velocity *= 0f;
																					}
																					else
																					{
																						if (type == 63)
																						{
																							white = new Color(0, 0, 255, 255);
																						}
																						if (type == 64)
																						{
																							white = new Color(255, 0, 0, 255);
																						}
																						if (type == 65)
																						{
																							white = new Color(0, 255, 0, 255);
																						}
																						if (type == 66)
																						{
																							white = new Color(255, 255, 0, 255);
																						}
																						if (type == 67)
																						{
																							white = new Color(255, 0, 255, 255);
																						}
																						if (type == 68)
																						{
																							white = new Color(255, 255, 255, 255);
																						}
																						if (type == 12)
																						{
																							white = new Color(255, 0, 0, 255);
																						}
																						if (type == 204)
																						{
																							white = new Color(255, 0, 0, 255);
																						}
																						if (type == 211)
																						{
																							white = new Color(50, 255, 100, 255);
																						}
																						int num50 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
																						Main.dust[num50].velocity *= 0f;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						if (type == 269 || type == 128)
						{
							int num51 = (int)(tile.frameY / 18);
							if (num51 == 2)
							{
								if (tile.frameX >= 100)
								{
									bool flag3 = false;
									int m = (int)Main.tile[j, i - 1].frameX;
									if (m >= 100)
									{
										int num52 = 0;
										while (m >= 100)
										{
											num52++;
											m -= 100;
										}
										int num53 = num52;
										if (num53 <= 36)
										{
											if (num53 != 15 && num53 != 36)
											{
												goto IL_28FE;
											}
										}
										else
										{
											switch (num53)
											{
											case 41:
											case 42:
												break;
											default:
												switch (num53)
												{
												case 58:
												case 59:
												case 60:
												case 61:
												case 62:
												case 63:
													break;
												default:
													goto IL_28FE;
												}
												break;
											}
										}
										flag3 = true;
									}
									IL_28FE:
									if (!flag3)
									{
										array[num3] = j;
										array2[num3] = i;
										num3++;
									}
								}
								if (Main.tile[j, i - 1].frameX >= 100)
								{
									array[num3] = j;
									array2[num3] = i - 1;
									num3++;
								}
								if (Main.tile[j, i - 2].frameX >= 100)
								{
									array[num3] = j;
									array2[num3] = i - 2;
									num3++;
								}
							}
						}
						if (type == 5 && tile.frameY >= 198 && tile.frameX >= 22)
						{
							array[num3] = j;
							array2[num3] = i;
							num3++;
						}
						if (type == 237 && tile.frameX == 18 && tile.frameY == 0)
						{
							array[num3] = j;
							array2[num3] = i;
							num3++;
						}
						if (type == 72 && tile.frameX >= 36)
						{
							int num54 = 0;
							if (tile.frameY == 18)
							{
								num54 = 1;
							}
							else
							{
								if (tile.frameY == 36)
								{
									num54 = 2;
								}
							}
							Main.spriteBatch.Draw(Main.shroomCapTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 22), (float)(i * 16 - (int)Main.screenPosition.Y - 26)) + value, new Rectangle?(new Rectangle(num54 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
						}
						if (color.R > 1 || color.G > 1 || color.B > 1)
						{
							if (Main.tile[j - 1, i] == null)
							{
								Main.tile[j - 1, i] = new Tile();
							}
							if (Main.tile[j + 1, i] == null)
							{
								Main.tile[j + 1, i] = new Tile();
							}
							if (Main.tile[j, i - 1] == null)
							{
								Main.tile[j, i - 1] = new Tile();
							}
							if (Main.tile[j, i + 1] == null)
							{
								Main.tile[j, i + 1] = new Tile();
							}
							if (solidOnly && flag && !tile.inActive() && !Main.tileSolidTop[(int)type] && (Main.tile[j - 1, i].liquid > 0 || Main.tile[j + 1, i].liquid > 0 || Main.tile[j, i - 1].liquid > 0 || Main.tile[j, i + 1].liquid > 0))
							{
								bool flag4 = false;
								if (tile.halfBrick())
								{
									int num55 = 160;
									if (((int)Main.tile[j - 1, i].liquid > num55 || (int)Main.tile[j + 1, i].liquid > num55) && this.waterfallManager.CheckForWaterfall(j, i))
									{
										flag4 = true;
									}
								}
								if (!flag4)
								{
									Color color2 = Lighting.GetColor(j, i);
									int num56 = 0;
									bool flag5 = false;
									bool flag6 = false;
									bool flag7 = false;
									bool flag8 = false;
									int num57 = 0;
									bool flag9 = false;
									if ((int)Main.tile[j - 1, i].liquid > num56)
									{
										num56 = (int)Main.tile[j - 1, i].liquid;
										flag5 = true;
									}
									else
									{
										if (Main.tile[j - 1, i].liquid > 0)
										{
											flag5 = true;
										}
									}
									if ((int)Main.tile[j + 1, i].liquid > num56)
									{
										num56 = (int)Main.tile[j + 1, i].liquid;
										flag6 = true;
									}
									else
									{
										if (Main.tile[j + 1, i].liquid > 0)
										{
											num56 = (int)Main.tile[j + 1, i].liquid;
											flag6 = true;
										}
									}
									if (Main.tile[j, i - 1].liquid > 0)
									{
										flag7 = true;
									}
									if (Main.tile[j, i + 1].liquid > 240)
									{
										flag8 = true;
									}
									if (Main.tile[j - 1, i].liquid > 0)
									{
										if (Main.tile[j - 1, i].lava())
										{
											num57 = 1;
										}
										else
										{
											if (Main.tile[j - 1, i].honey())
											{
												num57 = 11;
											}
											else
											{
												flag9 = true;
											}
										}
									}
									if (Main.tile[j + 1, i].liquid > 0)
									{
										if (Main.tile[j + 1, i].lava())
										{
											num57 = 1;
										}
										else
										{
											if (Main.tile[j + 1, i].honey())
											{
												num57 = 11;
											}
											else
											{
												flag9 = true;
											}
										}
									}
									if (Main.tile[j, i - 1].liquid > 0)
									{
										if (Main.tile[j, i - 1].lava())
										{
											num57 = 1;
										}
										else
										{
											if (Main.tile[j, i - 1].honey())
											{
												num57 = 11;
											}
											else
											{
												flag9 = true;
											}
										}
									}
									if (Main.tile[j, i + 1].liquid > 0)
									{
										if (Main.tile[j, i + 1].lava())
										{
											num57 = 1;
										}
										else
										{
											if (Main.tile[j, i + 1].honey())
											{
												num57 = 11;
											}
											else
											{
												flag9 = true;
											}
										}
									}
									if (num57 == 0)
									{
										num57 = Main.waterStyle;
									}
									if (!flag9 || num57 != 1)
									{
										Vector2 value2 = new Vector2((float)(j * 16), (float)(i * 16));
										Rectangle value3 = new Rectangle(0, 4, 16, 16);
										if (flag8 && (flag5 || flag6))
										{
											flag5 = true;
											flag6 = true;
										}
										if ((!flag7 || (!flag5 && !flag6)) && (!flag8 || !flag7))
										{
											if (flag7)
											{
												value3 = new Rectangle(0, 4, 16, 4);
												if (tile.halfBrick() || tile.slope() != 0)
												{
													value3 = new Rectangle(0, 4, 16, 12);
												}
											}
											else
											{
												if (flag8 && !flag5 && !flag6)
												{
													value2 = new Vector2((float)(j * 16), (float)(i * 16 + 12));
													value3 = new Rectangle(0, 4, 16, 4);
												}
												else
												{
													float num58 = (float)(256 - num56);
													num58 /= 32f;
													int y = 4;
													if (Main.tile[j, i - 1].liquid == 0 && !WorldGen.SolidTile(j, i - 1))
													{
														y = 0;
													}
													if ((flag5 && flag6) || tile.halfBrick() || tile.slope() != 0)
													{
														value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num58 * 2));
														value3 = new Rectangle(0, y, 16, 16 - (int)num58 * 2);
													}
													else
													{
														if (flag5)
														{
															value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num58 * 2));
															value3 = new Rectangle(0, y, 4, 16 - (int)num58 * 2);
														}
														else
														{
															value2 = new Vector2((float)(j * 16 + 12), (float)(i * 16 + (int)num58 * 2));
															value3 = new Rectangle(0, y, 4, 16 - (int)num58 * 2);
														}
													}
												}
											}
										}
										float num59 = 0.5f;
										if (num57 == 1)
										{
											num59 = 2f;
										}
										if (num57 == 1)
										{
											num59 = 1f;
										}
										if (num57 == 11)
										{
											num59 *= 1.7f;
											if (num59 > 1f)
											{
												num59 = 1f;
											}
										}
										if ((double)i < Main.worldSurface || num59 > 1f)
										{
											num59 = 1f;
											if (Main.tile[j + 1, i].wall > 0 || Main.tile[j - 1, i].wall > 0 || Main.tile[j, i + 1].wall > 0 || Main.tile[j, i - 1].wall > 0)
											{
												num59 = 0.65f;
											}
											if (tile.wall > 0)
											{
												num59 = 0.5f;
											}
										}
										if (tile.halfBrick() && Main.tile[j, i - 1].liquid > 0 && tile.wall > 0)
										{
											num59 = 0f;
										}
										float num60 = (float)color2.R * num59;
										float num61 = (float)color2.G * num59;
										float num62 = (float)color2.B * num59;
										float num63 = (float)color2.A * num59;
										color2 = new Color((int)((byte)num60), (int)((byte)num61), (int)((byte)num62), (int)((byte)num63));
										Main.spriteBatch.Draw(Main.liquidTexture[num57], value2 - Main.screenPosition + value, new Rectangle?(value3), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
							}
							if (type == 51)
							{
								Color color3 = Lighting.GetColor(j, i);
								float num64 = 0.5f;
								float num65 = (float)color3.R * num64;
								float num66 = (float)color3.G * num64;
								float num67 = (float)color3.B * num64;
								float num68 = (float)color3.A * num64;
								color3 = new Color((int)((byte)num65), (int)((byte)num66), (int)((byte)num67), (int)((byte)num68));
								if (Main.canDrawColorTile(j, i))
								{
									Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color3, 0f, default(Vector2), 1f, effects, 0f);
								}
								else
								{
									Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color3, 0f, default(Vector2), 1f, effects, 0f);
								}
							}
							else
							{
								if (type == 171)
								{
									if (tile.frameX >= 10)
									{
										int num69 = 0;
										if ((tile.frameY & 1) == 1)
										{
											num69++;
										}
										if ((tile.frameY & 2) == 2)
										{
											num69 += 2;
										}
										if ((tile.frameY & 4) == 4)
										{
											num69 += 4;
										}
										int num70 = 0;
										if ((tile.frameY & 8) == 8)
										{
											num70++;
										}
										if ((tile.frameY & 16) == 16)
										{
											num70 += 2;
										}
										if ((tile.frameY & 32) == 32)
										{
											num70 += 4;
										}
										int num71 = 0;
										if ((tile.frameY & 64) == 64)
										{
											num71++;
										}
										if ((tile.frameY & 128) == 128)
										{
											num71 += 2;
										}
										if ((tile.frameY & 256) == 256)
										{
											num71 += 4;
										}
										if ((tile.frameY & 512) == 512)
										{
											num71 += 8;
										}
										int num72 = 0;
										if ((tile.frameY & 1024) == 1024)
										{
											num72++;
										}
										if ((tile.frameY & 2048) == 2048)
										{
											num72 += 2;
										}
										if ((tile.frameY & 4096) == 4096)
										{
											num72 += 4;
										}
										if ((tile.frameY & 8192) == 8192)
										{
											num72 += 8;
										}
										Color color4 = Lighting.GetColor(j + 1, i + 4);
										Main.spriteBatch.Draw(Main.xmasTree[0], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(0, 0, 64, 128)), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										if (num69 > 0)
										{
											num69--;
											Color color5 = color4;
											if (num69 != 3)
											{
												color5 = new Color(255, 255, 255, 255);
											}
											Main.spriteBatch.Draw(Main.xmasTree[3], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(66 * num69, 0, 64, 128)), color5, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										if (num70 > 0)
										{
											num70--;
											Main.spriteBatch.Draw(Main.xmasTree[1], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(66 * num70, 0, 64, 128)), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										if (num71 > 0)
										{
											num71--;
											Main.spriteBatch.Draw(Main.xmasTree[2], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(66 * num71, 0, 64, 128)), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
										if (num72 > 0)
										{
											num72--;
											Main.spriteBatch.Draw(Main.xmasTree[4], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(66 * num72, 130 * Main.tileFrame[171], 64, 128)), new Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
								}
								else
								{
									if (type == 160 && !tile.halfBrick())
									{
										Color color6 = default(Color);
										color6 = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB, 255);
										if (tile.inActive())
										{
											color6 = tile.actColor(color6);
										}
										if (tile.slope() == 0)
										{
											Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color6, 0f, default(Vector2), 1f, effects, 0f);
										}
										else
										{
											if (tile.slope() > 2)
											{
												if (tile.slope() == 3)
												{
													for (int n = 0; n < 8; n++)
													{
														int num73 = 2;
														int num74 = n * 2;
														int num75 = n * -2;
														int num76 = 16 - n * 2;
														if (Main.canDrawColorTile(j, i))
														{
															Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num74, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + n * num73 + num75)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num74, (int)(tile.frameY + 16) - num76, num73, num76)), color6, 0f, default(Vector2), 1f, effects, 0f);
														}
														else
														{
															Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num74, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + n * num73 + num75)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num74, (int)(tile.frameY + 16) - num76, num73, num76)), color6, 0f, default(Vector2), 1f, effects, 0f);
														}
													}
												}
												else
												{
													for (int num77 = 0; num77 < 8; num77++)
													{
														int num78 = 2;
														int num79 = 16 - num77 * num78 - num78;
														int num80 = 16 - num77 * num78;
														int num81 = num77 * -2;
														if (Main.canDrawColorTile(j, i))
														{
															Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num79, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num77 * num78 + num81)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num79, (int)(tile.frameY + 16) - num80, num78, num80)), color6, 0f, default(Vector2), 1f, effects, 0f);
														}
														else
														{
															Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num79, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num77 * num78 + num81)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num79, (int)(tile.frameY + 16) - num80, num78, num80)), color6, 0f, default(Vector2), 1f, effects, 0f);
														}
													}
												}
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, 16, 2)), color6, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, 16, 2)), color6, 0f, default(Vector2), 1f, effects, 0f);
												}
											}
											else
											{
												if (tile.slope() == 1)
												{
													for (int num82 = 0; num82 < 8; num82++)
													{
														int num83 = 2;
														int num84 = num82 * 2;
														int height = 14 - num82 * num83;
														Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num84, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num82 * num83)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num84, (int)tile.frameY, num83, height)), color6, 0f, default(Vector2), 1f, effects, 0f);
													}
												}
												if (tile.slope() == 2)
												{
													for (int num85 = 0; num85 < 8; num85++)
													{
														int num86 = 2;
														int num87 = 16 - num85 * num86 - num86;
														int height2 = 14 - num85 * num86;
														Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num87, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num85 * num86)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num87, (int)tile.frameY, num86, height2)), color6, 0f, default(Vector2), 1f, effects, 0f);
													}
												}
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 14)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 14), 16, 2)), color6, 0f, default(Vector2), 1f, effects, 0f);
											}
										}
									}
									else
									{
										if (tile.slope() > 0)
										{
											if (tile.inActive())
											{
												color = tile.actColor(color);
											}
											else
											{
												if (Main.tileShine2[(int)type])
												{
													color = Main.shine(color, (int)type);
												}
											}
											if (tile.type == 19)
											{
												if (Main.canDrawColorTile(j, i))
												{
													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
												}
												if (tile.slope() == 1 && Main.tile[j + 1, i + 1].active() && Main.tile[j + 1, i + 1].slope() != 2 && !Main.tile[j + 1, i + 1].halfBrick())
												{
													if (Main.tile[j + 1, i + 1].type == 19 && Main.tile[j + 1, i + 1].slope() == 0)
													{
														if (Main.canDrawColorTile(j, i))
														{
															Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(324, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
														}
														else
														{
															Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(324, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
														}
													}
													else
													{
														if (Main.canDrawColorTile(j, i))
														{
															Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(198, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
														}
														else
														{
															Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(198, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
														}
													}
												}
												else
												{
													if (tile.slope() == 2 && Main.tile[j - 1, i + 1].active() && Main.tile[j - 1, i + 1].slope() != 1 && !Main.tile[j - 1, i + 1].halfBrick())
													{
														if (Main.tile[j - 1, i + 1].type == 19 && Main.tile[j - 1, i + 1].slope() == 0)
														{
															if (Main.canDrawColorTile(j, i))
															{
																Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(306, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(306, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
														}
														else
														{
															if (Main.canDrawColorTile(j, i))
															{
																Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(162, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 16)) + value, new Rectangle?(new Rectangle(162, (int)tile.frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
														}
													}
												}
											}
											else
											{
												if (tile.slope() > 2)
												{
													if (tile.slope() == 3)
													{
														for (int num88 = 0; num88 < 8; num88++)
														{
															int num89 = 2;
															int num90 = num88 * 2;
															int num91 = num88 * -2;
															int num92 = 16 - num88 * 2;
															if (Main.canDrawColorTile(j, i))
															{
																Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num90, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num88 * num89 + num91)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num90, (int)(tile.frameY + 16) - num92, num89, num92)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num90, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num88 * num89 + num91)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num90, (int)(tile.frameY + 16) - num92, num89, num92)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
														}
													}
													else
													{
														for (int num93 = 0; num93 < 8; num93++)
														{
															int num94 = 2;
															int num95 = 16 - num93 * num94 - num94;
															int num96 = 16 - num93 * num94;
															int num97 = num93 * -2;
															if (Main.canDrawColorTile(j, i))
															{
																Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num95, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num93 * num94 + num97)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num95, (int)(tile.frameY + 16) - num96, num94, num96)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num95, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num93 * num94 + num97)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num95, (int)(tile.frameY + 16) - num96, num94, num96)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
														}
													}
													if (Main.canDrawColorTile(j, i))
													{
														Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
													}
													else
													{
														Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
													}
												}
												else
												{
													if (tile.slope() == 1)
													{
														for (int num98 = 0; num98 < 8; num98++)
														{
															int num99 = 2;
															int num100 = num98 * 2;
															int height3 = 14 - num98 * num99;
															if (Main.canDrawColorTile(j, i))
															{
																Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num100, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num98 * num99)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num100, (int)tile.frameY, num99, height3)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num100, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num98 * num99)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num100, (int)tile.frameY, num99, height3)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
														}
													}
													if (tile.slope() == 2)
													{
														for (int num101 = 0; num101 < 8; num101++)
														{
															int num102 = 2;
															int num103 = 16 - num101 * num102 - num102;
															int height4 = 14 - num101 * num102;
															if (Main.canDrawColorTile(j, i))
															{
																Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num103, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num101 * num102)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num103, (int)tile.frameY, num102, height4)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num103, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num101 * num102)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num103, (int)tile.frameY, num102, height4)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
														}
													}
													if (Main.canDrawColorTile(j, i))
													{
														Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 14)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 14), 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
													}
													else
													{
														Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 14)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 14), 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
													}
												}
											}
										}
										else
										{
											if (type == 129)
											{
												Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
											}
											else
											{
												if (Main.tileAlch[(int)type])
												{
													num11 = 20;
													num10 = -1;
													int num104 = (int)type;
													int num105 = (int)(tile.frameX / 18);
													if (num104 > 82)
													{
														if (num105 == 0 && Main.dayTime)
														{
															num104 = 84;
														}
														if (num105 == 1 && !Main.dayTime)
														{
															num104 = 84;
														}
														if (num105 == 3 && Main.bloodMoon)
														{
															num104 = 84;
														}
														if (num105 == 4 && (Main.raining || Main.cloudAlpha > 0f))
														{
															num104 = 84;
														}
													}
													if (num104 == 84)
													{
														if (num105 == 0 && Main.rand.Next(100) == 0)
														{
															int num106 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 - 4)), 16, 16, 19, 0f, 0f, 160, default(Color), 0.1f);
															Dust expr_529C_cp_0 = Main.dust[num106];
															expr_529C_cp_0.velocity.X = expr_529C_cp_0.velocity.X / 2f;
															Dust expr_52BA_cp_0 = Main.dust[num106];
															expr_52BA_cp_0.velocity.Y = expr_52BA_cp_0.velocity.Y / 2f;
															Main.dust[num106].noGravity = true;
															Main.dust[num106].fadeIn = 1f;
														}
														if (num105 == 1 && Main.rand.Next(100) == 0)
														{
															Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 41, 0f, 0f, 250, default(Color), 0.8f);
														}
														if (num105 == 3)
														{
															if (Main.rand.Next(200) == 0)
															{
																int num107 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Color), 0.2f);
																Main.dust[num107].fadeIn = 1.2f;
															}
															if (Main.rand.Next(75) == 0)
															{
																int num108 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 27, 0f, 0f, 100, default(Color), 1f);
																Dust expr_53FD_cp_0 = Main.dust[num108];
																expr_53FD_cp_0.velocity.X = expr_53FD_cp_0.velocity.X / 2f;
																Dust expr_541B_cp_0 = Main.dust[num108];
																expr_541B_cp_0.velocity.Y = expr_541B_cp_0.velocity.Y / 2f;
															}
														}
														if (num105 == 4 && Main.rand.Next(150) == 0)
														{
															int num109 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 8, 16, 0f, 0f, 0, default(Color), 1f);
															Dust expr_5490_cp_0 = Main.dust[num109];
															expr_5490_cp_0.velocity.X = expr_5490_cp_0.velocity.X / 3f;
															Dust expr_54AE_cp_0 = Main.dust[num109];
															expr_54AE_cp_0.velocity.Y = expr_54AE_cp_0.velocity.Y / 3f;
															Dust expr_54CC_cp_0 = Main.dust[num109];
															expr_54CC_cp_0.velocity.Y = expr_54CC_cp_0.velocity.Y - 0.7f;
															Main.dust[num109].alpha = 50;
															Main.dust[num109].scale *= 0.1f;
															Main.dust[num109].fadeIn = 0.9f;
															Main.dust[num109].noGravity = true;
														}
														if (num105 == 5)
														{
															if (Main.rand.Next(40) == 0)
															{
																int num110 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 - 6)), 16, 16, 6, 0f, 0f, 0, default(Color), 1.5f);
																Dust expr_5585_cp_0 = Main.dust[num110];
																expr_5585_cp_0.velocity.Y = expr_5585_cp_0.velocity.Y - 2f;
																Main.dust[num110].noGravity = true;
															}
															color.A = (byte)(Main.mouseTextColor / 2);
															color.G = Main.mouseTextColor;
															color.B = Main.mouseTextColor;
														}
													}
													if (Main.canDrawColorTile(j, i))
													{
														Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
													}
													else
													{
														this.LoadTiles(num104);
														Main.spriteBatch.Draw(Main.tileTexture[num104], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
													}
												}
												else
												{
													if (type == 80)
													{
														bool flag10 = false;
														bool flag11 = false;
														bool flag12 = false;
														if (!Main.canDrawColorTile(j, i))
														{
															int num111 = j;
															if (tile.frameX == 36)
															{
																num111--;
															}
															if (tile.frameX == 54)
															{
																num111++;
															}
															if (tile.frameX == 108)
															{
																if (tile.frameY == 18)
																{
																	num111--;
																}
																else
																{
																	num111++;
																}
															}
															int num112 = i;
															bool flag13 = false;
															if (Main.tile[num111, num112].type == 80 && Main.tile[num111, num112].active())
															{
																flag13 = true;
															}
															while (!Main.tile[num111, num112].active() || !Main.tileSolid[(int)Main.tile[num111, num112].type] || !flag13)
															{
																if (Main.tile[num111, num112].type == 80 && Main.tile[num111, num112].active())
																{
																	flag13 = true;
																}
																num112++;
																if (num112 > i + 20)
																{
																	break;
																}
															}
															if (Main.tile[num111, num112].type == 112)
															{
																flag10 = true;
															}
															if (Main.tile[num111, num112].type == 116)
															{
																flag11 = true;
															}
															if (Main.tile[num111, num112].type == 234)
															{
																flag12 = true;
															}
														}
														if (flag10)
														{
															Main.spriteBatch.Draw(Main.evilCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
														}
														else
														{
															if (flag12)
															{
																Main.spriteBatch.Draw(Main.crimsonCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																if (flag11)
																{
																	Main.spriteBatch.Draw(Main.goodCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																}
																else
																{
																	if (Main.canDrawColorTile(j, i))
																	{
																		Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																	}
																	else
																	{
																		Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																	}
																}
															}
														}
													}
													else
													{
														if (type == 272 && !tile.halfBrick() && !Main.tile[j - 1, i].halfBrick() && !Main.tile[j + 1, i].halfBrick())
														{
															int num113 = Main.tileFrame[(int)type];
															num113 += j % 2;
															num113 += i % 2;
															num113 += j % 3;
															for (num113 += i % 3; num113 > 1; num113 -= 2)
															{
															}
															num113 *= 90;
															if (Main.canDrawColorTile(j, i))
															{
																Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY + num113, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
															else
															{
																Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY + num113, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
															}
														}
														else
														{
															if (type == 160)
															{
																color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB, 255);
															}
															if (type != 19 && Main.tileSolid[(int)type] && !tile.halfBrick() && (Main.tile[j - 1, i].halfBrick() || Main.tile[j + 1, i].halfBrick()))
															{
																if (tile.inActive())
																{
																	color = tile.actColor(color);
																}
																else
																{
																	if (Main.tileShine2[(int)type])
																	{
																		color = Main.shine(color, (int)type);
																	}
																}
																if (Main.tile[j - 1, i].halfBrick() && Main.tile[j + 1, i].halfBrick())
																{
																	if (Main.canDrawColorTile(j, i))
																	{
																		Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 8)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																		Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(126, 0, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																	}
																	else
																	{
																		Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 8)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																		Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(126, 0, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																	}
																}
																else
																{
																	if (Main.tile[j - 1, i].halfBrick())
																	{
																		if (Main.canDrawColorTile(j, i))
																		{
																			Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 8)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																			Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + 4f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)(tile.frameX + 4), (int)tile.frameY, num9 - 4, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																			Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(126, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																		}
																		else
																		{
																			Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 8)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																			Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + 4f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)(tile.frameX + 4), (int)tile.frameY, num9 - 4, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																			Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(126, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																		}
																	}
																	else
																	{
																		if (Main.tile[j + 1, i].halfBrick())
																		{
																			if (Main.canDrawColorTile(j, i))
																			{
																				Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 8)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																				Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9 - 4, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																				Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + 12f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(138, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																			}
																			else
																			{
																				Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 8)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)(tile.frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																				Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9 - 4, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																				Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + 12f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(138, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
																			}
																		}
																		else
																		{
																			if (Main.canDrawColorTile(j, i))
																			{
																				Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																			}
																			else
																			{
																				Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																			}
																		}
																	}
																}
															}
															else
															{
																if (Lighting.lightMode < 2 && Main.tileSolid[(int)type] && type != 137 && type != 235 && !tile.halfBrick() && !tile.inActive())
																{
																	if ((int)color.R > num || (double)color.G > (double)num * 1.1 || (double)color.B > (double)num * 1.2)
																	{
																		Lighting.GetColor9Slice(j, i, ref array3);
																		bool flag14 = tile.inActive();
																		bool flag15 = Main.tileShine2[(int)type];
																		Texture2D texture;
																		if (Main.canDrawColorTile(j, i))
																		{
																			texture = Main.tileAltTexture[(int)type, (int)tile.color()];
																		}
																		else
																		{
																			texture = Main.tileTexture[(int)type];
																		}
																		for (int num114 = 0; num114 < 9; num114++)
																		{
																			int num115 = 0;
																			int num116 = 0;
																			int width = 4;
																			int height5 = 4;
																			switch (num114)
																			{
																			case 1:
																				width = 8;
																				num115 = 4;
																				break;
																			case 2:
																				num115 = 12;
																				break;
																			case 3:
																				height5 = 8;
																				num116 = 4;
																				break;
																			case 4:
																				width = 8;
																				height5 = 8;
																				num115 = 4;
																				num116 = 4;
																				break;
																			case 5:
																				num115 = 12;
																				num116 = 4;
																				height5 = 8;
																				break;
																			case 6:
																				num116 = 12;
																				break;
																			case 7:
																				width = 8;
																				height5 = 4;
																				num115 = 4;
																				num116 = 12;
																				break;
																			case 8:
																				num115 = 12;
																				num116 = 12;
																				break;
																			}
																			Color color7 = color;
																			Color color8 = array3[num114];
																			color7.R = (byte)((color.R + color8.R) / 2);
																			color7.G = (byte)((color.G + color8.G) / 2);
																			color7.B = (byte)((color.B + color8.B) / 2);
																			if (flag14)
																			{
																				color7 = tile.actColor(color7);
																			}
																			else
																			{
																				if (flag15)
																				{
																					color7 = Main.shine(color7, (int)type);
																				}
																			}
																			Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num115, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num116)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num115, (int)tile.frameY + num116, width, height5)), color7, 0f, default(Vector2), 1f, effects, 0f);
																		}
																	}
																	else
																	{
																		if ((int)color.R > num2 || (double)color.G > (double)num2 * 1.1 || (double)color.B > (double)num2 * 1.2)
																		{
																			Lighting.GetColor4Slice(j, i, ref array3);
																			bool flag16 = tile.inActive();
																			bool flag17 = Main.tileShine2[(int)type];
																			Texture2D texture;
																			if (Main.canDrawColorTile(j, i))
																			{
																				texture = Main.tileAltTexture[(int)type, (int)tile.color()];
																			}
																			else
																			{
																				texture = Main.tileTexture[(int)type];
																			}
																			for (int num117 = 0; num117 < 4; num117++)
																			{
																				int num118 = 0;
																				int num119 = 0;
																				switch (num117)
																				{
																				case 1:
																					num118 = 8;
																					break;
																				case 2:
																					num119 = 8;
																					break;
																				case 3:
																					num118 = 8;
																					num119 = 8;
																					break;
																				}
																				Color color9 = color;
																				Color color10 = array3[num117];
																				color9.R = (byte)((color.R + color10.R) / 2);
																				color9.G = (byte)((color.G + color10.G) / 2);
																				color9.B = (byte)((color.B + color10.B) / 2);
																				if (flag16)
																				{
																					color9 = tile.actColor(color9);
																				}
																				else
																				{
																					if (flag17)
																					{
																						color9 = Main.shine(color9, (int)type);
																					}
																				}
																				Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num118, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num119)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num118, (int)tile.frameY + num119, 8, 8)), color9, 0f, default(Vector2), 1f, effects, 0f);
																			}
																		}
																		else
																		{
																			if (tile.inActive())
																			{
																				color = tile.actColor(color);
																			}
																			else
																			{
																				if (Main.tileShine2[(int)type])
																				{
																					color = Main.shine(color, (int)type);
																				}
																			}
																			Texture2D texture;
																			if (Main.canDrawColorTile(j, i))
																			{
																				texture = Main.tileAltTexture[(int)type, (int)tile.color()];
																			}
																			else
																			{
																				texture = Main.tileTexture[(int)type];
																			}
																			Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																		}
																	}
																}
																else
																{
																	if (Lighting.lightMode < 2 && Main.tileShine2[(int)type])
																	{
																		if (type == 21)
																		{
																			if (tile.frameX >= 36 && tile.frameX < 178)
																			{
																				color = Main.shine(color, (int)type);
																			}
																		}
																		else
																		{
																			if (!tile.inActive())
																			{
																				color = Main.shine(color, (int)type);
																			}
																		}
																	}
																	if (tile.inActive())
																	{
																		color = tile.actColor(color);
																	}
																	if (type == 128 || type == 269)
																	{
																		int num120;
																		for (num120 = (int)tile.frameX; num120 >= 100; num120 -= 100)
																		{
																		}
																		Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle(num120, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																	}
																	else
																	{
																		if (type == 5)
																		{
																			int num121 = -1;
																			int num122 = j;
																			int num123 = i;
																			if (tile.frameX == 66 && tile.frameY <= 45)
																			{
																				num122++;
																			}
																			if (tile.frameX == 88 && tile.frameY >= 66 && tile.frameY <= 110)
																			{
																				num122--;
																			}
																			if (tile.frameX == 22 && tile.frameY >= 132)
																			{
																				num122--;
																			}
																			if (tile.frameX == 44 && tile.frameY >= 132)
																			{
																				num122++;
																			}
																			while (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 5)
																			{
																				num123++;
																			}
																			if (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 23)
																			{
																				num121 = 0;
																			}
																			if (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 60)
																			{
																				num121 = 1;
																			}
																			if (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 70)
																			{
																				num121 = 6;
																			}
																			if (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 60 && (double)num123 > Main.worldSurface)
																			{
																				num121 = 5;
																			}
																			if (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 109)
																			{
																				num121 = 2;
																			}
																			if (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 147)
																			{
																				num121 = 3;
																				if (WorldGen.snowBG == 0)
																				{
																					num121 = -1;
																				}
																			}
																			if (Main.tile[num122, num123].active() && Main.tile[num122, num123].type == 199)
																			{
																				num121 = 4;
																			}
																			if (num121 == -1 || Main.canDrawColorTile(j, i))
																			{
																				if (Main.canDrawColorTile(j, i))
																				{
																					Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																				}
																				else
																				{
																					Main.spriteBatch.Draw(Main.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																				}
																			}
																			else
																			{
																				Main.spriteBatch.Draw(Main.woodTexture[num121], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																			}
																		}
																		else
																		{
																			if (num12 == 8 && (!Main.tile[j, i + 1].active() || !Main.tileSolid[(int)Main.tile[j, i + 1].type] || Main.tile[j, i + 1].halfBrick()))
																			{
																				Texture2D texture;
																				if (Main.canDrawColorTile(j, i))
																				{
																					texture = Main.tileAltTexture[(int)type, (int)tile.color()];
																				}
																				else
																				{
																					texture = Main.tileTexture[(int)type];
																				}
																				if (type == 19)
																				{
																					Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num12)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), color, 0f, default(Vector2), 1f, effects, 0f);
																				}
																				else
																				{
																					Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num12)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11 - num12 - 4)), color, 0f, default(Vector2), 1f, effects, 0f);
																					Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + 12)) + value, new Rectangle?(new Rectangle(144, 66, num9, 4)), color, 0f, default(Vector2), 1f, effects, 0f);
																				}
																			}
																			else
																			{
																				Texture2D texture;
																				if (Main.canDrawColorTile(j, i))
																				{
																					texture = Main.tileAltTexture[(int)type, (int)tile.color()];
																				}
																				else
																				{
																					texture = Main.tileTexture[(int)type];
																				}
																				Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10 + num12)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num14, (int)tile.frameY + num13, num9, num11 - num12)), color, 0f, default(Vector2), 1f, effects, 0f);
																			}
																			if (type == 286)
																			{
																				Main.spriteBatch.Draw(Main.glowSnailTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num14, (int)tile.frameY + num13, num9, num11)), new Color(75, 100, 255, 0), 0f, default(Vector2), 1f, effects, 0f);
																			}
																			if (type == 270)
																			{
																				Main.spriteBatch.Draw(Main.fireflyJarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num14, (int)tile.frameY, num9, num11)), new Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
																			}
																			if (type == 271)
																			{
																				Main.spriteBatch.Draw(Main.lightningbugJarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX + num14, (int)tile.frameY, num9, num11)), new Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
																			}
																			if (type == 149 && tile.frameX < 54)
																			{
																				Main.spriteBatch.Draw(Main.xmasLightTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
																			}
																			if (type == 300 || type == 302 || type == 303 || type == 306)
																			{
																				int num124 = 9;
																				if (type == 302)
																				{
																					num124 = 10;
																				}
																				if (type == 303)
																				{
																					num124 = 11;
																				}
																				if (type == 306)
																				{
																					num124 = 12;
																				}
																				Main.spriteBatch.Draw(Main.FlameTexture[num124], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY + num13, num9, num11)), new Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
																			}
																			else
																			{
																				if (Main.tileFlame[(int)type])
																				{
																					int num125 = (int)type;
																					int num126 = 0;
																					if (num125 == 4)
																					{
																						num126 = 0;
																					}
																					else
																					{
																						if (num125 == 33 || num125 == 174)
																						{
																							num126 = 1;
																						}
																						else
																						{
																							if (num125 == 100 || num125 == 173)
																							{
																								num126 = 2;
																							}
																							else
																							{
																								if (num125 == 34)
																								{
																									num126 = 3;
																								}
																								else
																								{
																									if (num125 == 93)
																									{
																										num126 = 4;
																									}
																									else
																									{
																										if (num125 == 49)
																										{
																											num126 = 5;
																										}
																										else
																										{
																											if (num125 == 98)
																											{
																												num126 = 6;
																											}
																											else
																											{
																												if (num125 == 35)
																												{
																													num126 = 7;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																					if (num126 == 7)
																					{
																						for (int num127 = 0; num127 < 4; num127++)
																						{
																							float num128 = (float)Main.rand.Next(-10, 11) * 0.15f;
																							float num129 = (float)Main.rand.Next(-10, 10) * 0.15f;
																							Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num128, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num129) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																						}
																					}
																					if (num126 == 1)
																					{
																						int num130 = (int)(Main.tile[j, i].frameY / 22);
																						if (num130 == 5 || num130 == 6 || num130 == 7 || num130 == 10)
																						{
																							for (int num131 = 0; num131 < 7; num131++)
																							{
																								float num132 = (float)Main.rand.Next(-10, 11) * 0.075f;
																								float num133 = (float)Main.rand.Next(-10, 11) * 0.075f;
																								Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num132, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num133) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																							}
																						}
																						else
																						{
																							if (num130 == 8)
																							{
																								for (int num134 = 0; num134 < 7; num134++)
																								{
																									float num135 = (float)Main.rand.Next(-10, 11) * 0.3f;
																									float num136 = (float)Main.rand.Next(-10, 11) * 0.3f;
																									Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num135, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num136) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																								}
																							}
																							else
																							{
																								if (num130 == 12)
																								{
																									for (int num137 = 0; num137 < 7; num137++)
																									{
																										float num138 = (float)Main.rand.Next(-10, 11) * 0.1f;
																										float num139 = (float)Main.rand.Next(-10, 1) * 0.15f;
																										Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num138, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num139) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																									}
																								}
																								else
																								{
																									if (num130 == 14)
																									{
																										for (int num140 = 0; num140 < 8; num140++)
																										{
																											float num141 = (float)Main.rand.Next(-10, 11) * 0.1f;
																											float num142 = (float)Main.rand.Next(-10, 11) * 0.1f;
																											Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num141, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num142) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
																										}
																									}
																									else
																									{
																										if (num130 == 16)
																										{
																											for (int num143 = 0; num143 < 4; num143++)
																											{
																												float num144 = (float)Main.rand.Next(-10, 11) * 0.15f;
																												float num145 = (float)Main.rand.Next(-10, 11) * 0.15f;
																												Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num144, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num145) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
																											}
																										}
																										else
																										{
																											for (int num146 = 0; num146 < 7; num146++)
																											{
																												float num147 = (float)Main.rand.Next(-10, 11) * 0.15f;
																												float num148 = (float)Main.rand.Next(-10, 1) * 0.35f;
																												Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num147, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num148) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																					else
																					{
																						if (num126 == 2)
																						{
																							int num149 = (int)(Main.tile[j, i].frameY / 36);
																							if (num149 == 3)
																							{
																								for (int num150 = 0; num150 < 3; num150++)
																								{
																									float num151 = (float)Main.rand.Next(-10, 11) * 0.05f;
																									float num152 = (float)Main.rand.Next(-10, 11) * 0.15f;
																									Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num151, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num152) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																								}
																							}
																							else
																							{
																								if (num149 == 6)
																								{
																									for (int num153 = 0; num153 < 5; num153++)
																									{
																										float num154 = (float)Main.rand.Next(-10, 11) * 0.15f;
																										float num155 = (float)Main.rand.Next(-10, 11) * 0.15f;
																										Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num154, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num155) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
																									}
																								}
																								else
																								{
																									if (num149 == 9)
																									{
																										for (int num156 = 0; num156 < 7; num156++)
																										{
																											float num157 = (float)Main.rand.Next(-10, 11) * 0.3f;
																											float num158 = (float)Main.rand.Next(-10, 11) * 0.3f;
																											Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num157, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num158) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
																										}
																									}
																									else
																									{
																										if (num149 == 11)
																										{
																											for (int num159 = 0; num159 < 7; num159++)
																											{
																												float num160 = (float)Main.rand.Next(-10, 11) * 0.1f;
																												float num161 = (float)Main.rand.Next(-10, 1) * 0.15f;
																												Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num160, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num161) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																											}
																										}
																										else
																										{
																											if (num149 == 13)
																											{
																												for (int num162 = 0; num162 < 8; num162++)
																												{
																													float num163 = (float)Main.rand.Next(-10, 11) * 0.1f;
																													float num164 = (float)Main.rand.Next(-10, 11) * 0.1f;
																													Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num163, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num164) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
																												}
																											}
																											else
																											{
																												for (int num165 = 0; num165 < 7; num165++)
																												{
																													float num166 = (float)Main.rand.Next(-10, 11) * 0.15f;
																													float num167 = (float)Main.rand.Next(-10, 1) * 0.35f;
																													Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num166, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num167) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																						else
																						{
																							if (num126 == 3)
																							{
																								int num168 = (int)(Main.tile[j, i].frameY / 54);
																								if (num168 == 8)
																								{
																									for (int num169 = 0; num169 < 7; num169++)
																									{
																										float num170 = (float)Main.rand.Next(-10, 11) * 0.075f;
																										float num171 = (float)Main.rand.Next(-10, 11) * 0.075f;
																										Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num170, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num171) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																									}
																								}
																								else
																								{
																									if (num168 == 9)
																									{
																										for (int num172 = 0; num172 < 3; num172++)
																										{
																											float num173 = (float)Main.rand.Next(-10, 11) * 0.05f;
																											float num174 = (float)Main.rand.Next(-10, 11) * 0.15f;
																											Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num173, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num174) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																										}
																									}
																									else
																									{
																										if (num168 == 11)
																										{
																											for (int num175 = 0; num175 < 7; num175++)
																											{
																												float num176 = (float)Main.rand.Next(-10, 11) * 0.3f;
																												float num177 = (float)Main.rand.Next(-10, 11) * 0.3f;
																												Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num176, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num177) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																											}
																										}
																										else
																										{
																											if (num168 == 15)
																											{
																												for (int num178 = 0; num178 < 7; num178++)
																												{
																													float num179 = (float)Main.rand.Next(-10, 11) * 0.1f;
																													float num180 = (float)Main.rand.Next(-10, 1) * 0.15f;
																													Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num179, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num180) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																												}
																											}
																											else
																											{
																												if (num168 == 17 || num168 == 20)
																												{
																													for (int num181 = 0; num181 < 7; num181++)
																													{
																														float num182 = (float)Main.rand.Next(-10, 11) * 0.075f;
																														float num183 = (float)Main.rand.Next(-10, 11) * 0.075f;
																														Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num182, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num183) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																													}
																												}
																												else
																												{
																													if (num168 == 18)
																													{
																														for (int num184 = 0; num184 < 8; num184++)
																														{
																															float num185 = (float)Main.rand.Next(-10, 11) * 0.1f;
																															float num186 = (float)Main.rand.Next(-10, 11) * 0.1f;
																															Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num185, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num186) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
																														}
																													}
																													else
																													{
																														for (int num187 = 0; num187 < 7; num187++)
																														{
																															float num188 = (float)Main.rand.Next(-10, 11) * 0.15f;
																															float num189 = (float)Main.rand.Next(-10, 1) * 0.35f;
																															Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num188, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num189) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																							else
																							{
																								if (num126 == 4)
																								{
																									int num190 = (int)(Main.tile[j, i].frameY / 54);
																									if (num190 == 1)
																									{
																										for (int num191 = 0; num191 < 3; num191++)
																										{
																											float num192 = (float)Main.rand.Next(-10, 11) * 0.15f;
																											float num193 = (float)Main.rand.Next(-10, 11) * 0.15f;
																											Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num192, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num193) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																										}
																									}
																									else
																									{
																										if (num190 == 2 || num190 == 4)
																										{
																											for (int num194 = 0; num194 < 7; num194++)
																											{
																												float num195 = (float)Main.rand.Next(-10, 11) * 0.075f;
																												float num196 = (float)Main.rand.Next(-10, 11) * 0.075f;
																												Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num195, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num196) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																											}
																										}
																										else
																										{
																											if (num190 == 3)
																											{
																												for (int num197 = 0; num197 < 7; num197++)
																												{
																													float num198 = (float)Main.rand.Next(-10, 11) * 0.2f;
																													float num199 = (float)Main.rand.Next(-20, 1) * 0.35f;
																													Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num198, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num199) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
																												}
																											}
																											else
																											{
																												if (num190 == 5)
																												{
																													for (int num200 = 0; num200 < 7; num200++)
																													{
																														float num201 = (float)Main.rand.Next(-10, 11) * 0.3f;
																														float num202 = (float)Main.rand.Next(-10, 11) * 0.3f;
																														Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num201, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num202) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																													}
																												}
																												else
																												{
																													if (num190 == 9)
																													{
																														for (int num203 = 0; num203 < 7; num203++)
																														{
																															float num204 = (float)Main.rand.Next(-10, 11) * 0.1f;
																															float num205 = (float)Main.rand.Next(-10, 1) * 0.15f;
																															Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num204, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num205) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
																														}
																													}
																													else
																													{
																														if (num190 == 13)
																														{
																															for (int num206 = 0; num206 < 8; num206++)
																															{
																																float num207 = (float)Main.rand.Next(-10, 11) * 0.1f;
																																float num208 = (float)Main.rand.Next(-10, 11) * 0.1f;
																																Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num207, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num208) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
																															}
																														}
																														else
																														{
																															if (num190 == 12)
																															{
																																float num209 = (float)Main.rand.Next(-10, 11) * 0.01f;
																																float num210 = (float)Main.rand.Next(-10, 11) * 0.01f;
																																Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num209, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num210) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(Main.rand.Next(90, 111), Main.rand.Next(90, 111), Main.rand.Next(90, 111), 0), 0f, default(Vector2), 1f, effects, 0f);
																															}
																															else
																															{
																																for (int num211 = 0; num211 < 7; num211++)
																																{
																																	float num212 = (float)Main.rand.Next(-10, 11) * 0.15f;
																																	float num213 = (float)Main.rand.Next(-10, 1) * 0.35f;
																																	Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num212, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num213) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																								else
																								{
																									for (int num214 = 0; num214 < 7; num214++)
																									{
																										float num215 = (float)Main.rand.Next(-10, 11) * 0.15f;
																										float num216 = (float)Main.rand.Next(-10, 1) * 0.35f;
																										Main.spriteBatch.Draw(Main.FlameTexture[num126], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + num215, (float)(i * 16 - (int)Main.screenPosition.Y + num10) + num216) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																			if (type == 144)
																			{
																				Main.spriteBatch.Draw(Main.timerTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
																			}
																			if (type == 237)
																			{
																				Main.spriteBatch.Draw(Main.sunAltarTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num10)) + value, new Rectangle?(new Rectangle((int)tile.frameX, (int)tile.frameY, num9, num11)), new Color((int)(Main.mouseTextColor / 2), (int)(Main.mouseTextColor / 2), (int)(Main.mouseTextColor / 2), 0), 0f, default(Vector2), 1f, effects, 0f);
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			for (int num217 = array.Length - 1; num217 > num4; num217--)
			{
				int num218 = array[num217];
				int num219 = array2[num217];
				Tile tile2 = Main.tile[num218, num219];
				ushort type2 = tile2.type;
				if ((type2 == 128 || type2 == 269) && tile2.frameX >= 100)
				{
					int num220 = (int)(tile2.frameY / 18);
					int num221 = (int)tile2.frameX;
					int num222 = 0;
					while (num221 >= 100)
					{
						num222++;
						num221 -= 100;
					}
					int num223 = -4;
					SpriteEffects effects2 = SpriteEffects.FlipHorizontally;
					if (num221 >= 36)
					{
						effects2 = SpriteEffects.None;
						num223 = -4;
					}
					if (num220 == 0)
					{
						this.LoadArmorHead(num222);
						Main.spriteBatch.Draw(Main.armorHeadTexture[num222], new Vector2((float)(num218 * 16 - (int)Main.screenPosition.X + num223), (float)(num219 * 16 - (int)Main.screenPosition.Y - 12)) + value, new Rectangle?(new Rectangle(0, 0, 40, 36)), Lighting.GetColor(num218, num219), 0f, default(Vector2), 1f, effects2, 0f);
					}
					else
					{
						if (num220 == 1)
						{
							int num224 = -1;
							int num53 = num222;
							if (num53 <= 36)
							{
								if (num53 != 15)
								{
									if (num53 == 36)
									{
										num224 = 89;
									}
								}
								else
								{
									num224 = 88;
								}
							}
							else
							{
								switch (num53)
								{
								case 41:
									num224 = 97;
									break;
								case 42:
									num224 = 90;
									break;
								default:
									switch (num53)
									{
									case 58:
										num224 = 91;
										break;
									case 59:
										num224 = 92;
										break;
									case 60:
										num224 = 93;
										break;
									case 61:
										num224 = 94;
										break;
									case 62:
										num224 = 95;
										break;
									case 63:
										num224 = 96;
										break;
									}
									break;
								}
							}
							if (num224 != -1)
							{
								this.LoadArmorLegs(num224);
								Main.spriteBatch.Draw(Main.armorLegTexture[num224], new Vector2((float)(num218 * 16 - (int)Main.screenPosition.X + num223), (float)(num219 * 16 - (int)Main.screenPosition.Y - 28)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num218, num219), 0f, default(Vector2), 1f, effects2, 0f);
							}
							this.LoadArmorBody(num222);
							if (type2 == 269)
							{
								Main.spriteBatch.Draw(Main.femaleBodyTexture[num222], new Vector2((float)(num218 * 16 - (int)Main.screenPosition.X + num223), (float)(num219 * 16 - (int)Main.screenPosition.Y - 28)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num218, num219), 0f, default(Vector2), 1f, effects2, 0f);
							}
							else
							{
								Main.spriteBatch.Draw(Main.armorBodyTexture[num222], new Vector2((float)(num218 * 16 - (int)Main.screenPosition.X + num223), (float)(num219 * 16 - (int)Main.screenPosition.Y - 28)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num218, num219), 0f, default(Vector2), 1f, effects2, 0f);
							}
						}
						else
						{
							if (num220 == 2)
							{
								this.LoadArmorLegs(num222);
								Main.spriteBatch.Draw(Main.armorLegTexture[num222], new Vector2((float)(num218 * 16 - (int)Main.screenPosition.X + num223), (float)(num219 * 16 - (int)Main.screenPosition.Y - 44)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num218, num219), 0f, default(Vector2), 1f, effects2, 0f);
							}
						}
					}
				}
			}
			for (int num225 = 0; num225 < num3; num225++)
			{
				int num226 = array[num225];
				int num227 = array2[num225];
				Tile tile3 = Main.tile[num226, num227];
				ushort type3 = tile3.type;
				if (type3 == 237)
				{
					Main.spriteBatch.Draw(Main.sunOrbTexture, new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X) + (float)num9 / 2f, (float)(num227 * 16 - (int)Main.screenPosition.Y - 36)) + value, new Rectangle?(new Rectangle(0, 0, Main.sunOrbTexture.Width, Main.sunOrbTexture.Height)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0), Main.sunCircle, new Vector2((float)(Main.sunOrbTexture.Width / 2), (float)(Main.sunOrbTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
				}
				if ((type3 == 128 || type3 == 269) && tile3.frameX >= 100)
				{
					int num228 = (int)(tile3.frameY / 18);
					int num229 = (int)tile3.frameX;
					int num230 = 0;
					while (num229 >= 100)
					{
						num230++;
						num229 -= 100;
					}
					int num231 = -4;
					SpriteEffects effects3 = SpriteEffects.FlipHorizontally;
					if (num229 >= 36)
					{
						effects3 = SpriteEffects.None;
						num231 = -4;
					}
					if (num228 == 0)
					{
						this.LoadArmorHead(num230);
						Main.spriteBatch.Draw(Main.armorHeadTexture[num230], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X + num231), (float)(num227 * 16 - (int)Main.screenPosition.Y - 12)) + value, new Rectangle?(new Rectangle(0, 0, 40, 36)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, effects3, 0f);
					}
					else
					{
						if (num228 == 1)
						{
							int num232 = -1;
							int num53 = num230;
							if (num53 <= 36)
							{
								if (num53 != 15)
								{
									if (num53 == 36)
									{
										num232 = 89;
									}
								}
								else
								{
									num232 = 88;
								}
							}
							else
							{
								switch (num53)
								{
								case 41:
									num232 = 97;
									break;
								case 42:
									num232 = 90;
									break;
								default:
									switch (num53)
									{
									case 58:
										num232 = 91;
										break;
									case 59:
										num232 = 92;
										break;
									case 60:
										num232 = 93;
										break;
									case 61:
										num232 = 94;
										break;
									case 62:
										num232 = 95;
										break;
									case 63:
										num232 = 96;
										break;
									}
									break;
								}
							}
							if (num232 != -1)
							{
								this.LoadArmorLegs(num232);
								Main.spriteBatch.Draw(Main.armorLegTexture[num232], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X + num231), (float)(num227 * 16 - (int)Main.screenPosition.Y - 28)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, effects3, 0f);
							}
							this.LoadArmorBody(num230);
							if (type3 == 269)
							{
								Main.spriteBatch.Draw(Main.femaleBodyTexture[num230], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X + num231), (float)(num227 * 16 - (int)Main.screenPosition.Y - 28)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, effects3, 0f);
							}
							else
							{
								Main.spriteBatch.Draw(Main.armorBodyTexture[num230], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X + num231), (float)(num227 * 16 - (int)Main.screenPosition.Y - 28)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, effects3, 0f);
							}
						}
						else
						{
							if (num228 == 2)
							{
								this.LoadArmorLegs(num230);
								Main.spriteBatch.Draw(Main.armorLegTexture[num230], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X + num231), (float)(num227 * 16 - (int)Main.screenPosition.Y - 44)) + value, new Rectangle?(new Rectangle(0, 0, 40, 54)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, effects3, 0f);
							}
						}
					}
				}
				try
				{
					if (type3 == 5 && tile3.frameY >= 198 && tile3.frameX >= 22)
					{
						int num233 = 0;
						if (tile3.frameX == 22)
						{
							if (tile3.frameY == 220)
							{
								num233 = 1;
							}
							else
							{
								if (tile3.frameY == 242)
								{
									num233 = 2;
								}
							}
							int num234 = 0;
							int num235 = 80;
							int num236 = 80;
							int num237 = 32;
							int num238 = 0;
							int num239 = num227;
							while (num239 < num227 + 100)
							{
								if (Main.tile[num226, num239].type == 2)
								{
									num234 = Main.GetTreeStyle(num226);
									break;
								}
								if (Main.tile[num226, num239].type == 23)
								{
									num234 = 1;
									break;
								}
								if (Main.tile[num226, num239].type == 70)
								{
									num234 = 14;
									break;
								}
								if (Main.tile[num226, num239].type == 60)
								{
									num234 = 2;
									if (WorldGen.jungleBG == 1)
									{
										num234 = 11;
									}
									if ((double)num239 > Main.worldSurface)
									{
										num234 = 13;
									}
									num235 = 114;
									num236 = 96;
									num237 = 48;
									break;
								}
								if (Main.tile[num226, num239].type == 147)
								{
									num234 = 4;
									if (WorldGen.snowBG == 0)
									{
										num234 = 12;
										break;
									}
									break;
								}
								else
								{
									if (Main.tile[num226, num239].type == 199)
									{
										num234 = 5;
										break;
									}
									if (Main.tile[num226, num239].type == 109)
									{
										num234 = 3;
										num236 = 140;
										if (num226 % 3 == 1)
										{
											num233 += 3;
											break;
										}
										if (num226 % 3 == 2)
										{
											num233 += 6;
											break;
										}
										break;
									}
									else
									{
										num239++;
									}
								}
							}
							if (num234 == 14)
							{
								float num240 = (float)Main.rand.Next(28, 42) * 0.005f;
								num240 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
								Lighting.addLight(num226, num227, 0.1f, 0.2f + num240 / 2f, 0.7f + num240);
							}
							if (tile3.color() > 0)
							{
								Main.checkTreeAlt[num234, (int)tile3.color()] = true;
							}
							if (tile3.color() > 0 && Main.treeAltTextureDrawn[num234, (int)tile3.color()])
							{
								Main.spriteBatch.Draw(Main.treeTopAltTexture[num234, (int)tile3.color()], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X - num237), (float)(num227 * 16 - (int)Main.screenPosition.Y - num236 + 16 + num238)) + value, new Rectangle?(new Rectangle(num233 * (num235 + 2), 0, num235, num236)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								Main.spriteBatch.Draw(Main.treeTopTexture[num234], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X - num237), (float)(num227 * 16 - (int)Main.screenPosition.Y - num236 + 16 + num238)) + value, new Rectangle?(new Rectangle(num233 * (num235 + 2), 0, num235, num236)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
						else
						{
							if (tile3.frameX == 44)
							{
								if (tile3.frameY == 220)
								{
									num233 = 1;
								}
								else
								{
									if (tile3.frameY == 242)
									{
										num233 = 2;
									}
								}
								int num241 = 0;
								int num242 = num227;
								while (num242 < num227 + 100)
								{
									if (Main.tile[num226 + 1, num242].type == 2)
									{
										num241 = Main.GetTreeStyle(num226 + 1);
										break;
									}
									if (Main.tile[num226 + 1, num242].type == 23)
									{
										num241 = 1;
										break;
									}
									if (Main.tile[num226 + 1, num242].type == 70)
									{
										num241 = 14;
										break;
									}
									if (Main.tile[num226 + 1, num242].type == 60)
									{
										num241 = 2;
										if ((double)num242 > Main.worldSurface)
										{
											num241 = 13;
											break;
										}
										break;
									}
									else
									{
										if (Main.tile[num226 + 1, num242].type == 147)
										{
											num241 = 4;
											if (WorldGen.snowBG == 0)
											{
												num241 = 12;
												break;
											}
											break;
										}
										else
										{
											if (Main.tile[num226 + 1, num242].type == 199)
											{
												num241 = 5;
												break;
											}
											if (Main.tile[num226 + 1, num242].type == 109)
											{
												num241 = 3;
												if (num226 % 3 == 1)
												{
													num233 += 3;
													break;
												}
												if (num226 % 3 == 2)
												{
													num233 += 6;
													break;
												}
												break;
											}
											else
											{
												num242++;
											}
										}
									}
								}
								if (num241 == 14)
								{
									float num243 = (float)Main.rand.Next(28, 42) * 0.005f;
									num243 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
									Lighting.addLight(num226, num227, 0.1f, 0.2f + num243 / 2f, 0.7f + num243);
								}
								if (tile3.color() > 0)
								{
									Main.checkTreeAlt[num241, (int)tile3.color()] = true;
								}
								if (tile3.color() > 0 && Main.treeAltTextureDrawn[num241, (int)tile3.color()])
								{
									Main.spriteBatch.Draw(Main.treeBranchAltTexture[num241, (int)tile3.color()], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X - 24), (float)(num227 * 16 - (int)Main.screenPosition.Y - 12)) + value, new Rectangle?(new Rectangle(0, num233 * 42, 40, 40)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
								else
								{
									Main.spriteBatch.Draw(Main.treeBranchTexture[num241], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X - 24), (float)(num227 * 16 - (int)Main.screenPosition.Y - 12)) + value, new Rectangle?(new Rectangle(0, num233 * 42, 40, 40)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
							else
							{
								if (tile3.frameX == 66)
								{
									if (tile3.frameY == 220)
									{
										num233 = 1;
									}
									else
									{
										if (tile3.frameY == 242)
										{
											num233 = 2;
										}
									}
									int num244 = 0;
									int num245 = num227;
									while (num245 < num227 + 100)
									{
										if (Main.tile[num226 - 1, num245].type == 2)
										{
											num244 = Main.GetTreeStyle(num226 - 1);
											break;
										}
										if (Main.tile[num226 - 1, num245].type == 23)
										{
											num244 = 1;
											break;
										}
										if (Main.tile[num226 - 1, num245].type == 70)
										{
											num244 = 14;
											break;
										}
										if (Main.tile[num226 - 1, num245].type == 60)
										{
											num244 = 2;
											if ((double)num245 > Main.worldSurface)
											{
												num244 = 13;
												break;
											}
											break;
										}
										else
										{
											if (Main.tile[num226 - 1, num245].type == 147)
											{
												num244 = 4;
												if (WorldGen.snowBG == 0)
												{
													num244 = 12;
													break;
												}
												break;
											}
											else
											{
												if (Main.tile[num226 - 1, num245].type == 199)
												{
													num244 = 5;
													break;
												}
												if (Main.tile[num226 - 1, num245].type == 109)
												{
													num244 = 3;
													if (num226 % 3 == 1)
													{
														num233 += 3;
														break;
													}
													if (num226 % 3 == 2)
													{
														num233 += 6;
														break;
													}
													break;
												}
												else
												{
													num245++;
												}
											}
										}
									}
									if (num244 == 14)
									{
										float num246 = (float)Main.rand.Next(28, 42) * 0.005f;
										num246 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
										Lighting.addLight(num226, num227, 0.1f, 0.2f + num246 / 2f, 0.7f + num246);
									}
									if (tile3.color() > 0)
									{
										Main.checkTreeAlt[num244, (int)tile3.color()] = true;
									}
									if (tile3.color() > 0 && Main.treeAltTextureDrawn[num244, (int)tile3.color()])
									{
										Main.spriteBatch.Draw(Main.treeBranchAltTexture[num244, (int)tile3.color()], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X), (float)(num227 * 16 - (int)Main.screenPosition.Y - 12)) + value, new Rectangle?(new Rectangle(42, num233 * 42, 40, 40)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
									else
									{
										Main.spriteBatch.Draw(Main.treeBranchTexture[num244], new Vector2((float)(num226 * 16 - (int)Main.screenPosition.X), (float)(num227 * 16 - (int)Main.screenPosition.Y - 12)) + value, new Rectangle?(new Rectangle(42, num233 * 42, 40, 40)), Lighting.GetColor(num226, num227), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
					}
				}
				catch
				{
				}
			}
			if (solidOnly)
			{
				Main.renderTimer[0] = (float)stopwatch.Elapsed.TotalMilliseconds;
				return;
			}
			Main.renderTimer[1] = (float)stopwatch.Elapsed.TotalMilliseconds;
		}
		protected void DrawGore()
		{
			for (int i = 0; i < 500; i++)
			{
				if (Main.gore[i].active && Main.gore[i].type > 0)
				{
					this.LoadGore(Main.gore[i].type);
					Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)Main.goreTexture[Main.gore[i].type].Height * 0.5) / 16.0)));
					Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Rectangle?(new Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
				}
			}
		}
		protected void DrawHB(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
		{
			if (Health <= 0)
			{
				return;
			}
			float num = (float)Health / (float)MaxHealth;
			int num2 = (int)(36f * num);
			float num3 = X - 18f * scale;
			float num4 = Y;
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				num4 -= Main.screenPosition.Y;
				num4 = Main.screenPosition.Y + (float)Main.screenHeight - num4;
			}
			float num5 = 0f;
			float num6 = 255f;
			num -= 0.1f;
			float num7;
			float num8;
			if ((double)num > 0.5)
			{
				num7 = 255f;
				num8 = 255f * (1f - num) * 2f;
			}
			else
			{
				num7 = 255f * num * 2f;
				num8 = 255f;
			}
			float num9 = 0.95f;
			num8 = num8 * alpha * num9;
			num7 = num7 * alpha * num9;
			num6 = num6 * alpha * num9;
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			if (num8 > 255f)
			{
				num8 = 255f;
			}
			if (num7 < 0f)
			{
				num7 = 0f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (num6 < 0f)
			{
				num6 = 0f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			Color color = new Color((int)((byte)num8), (int)((byte)num7), (int)((byte)num5), (int)((byte)num6));
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num2 < 34)
			{
				if (num2 < 36)
				{
					Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(2, 0, 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 < 34)
				{
					Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)(num2 + 2) * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(num2 + 2, 0, 36 - num2 - 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 > 2)
				{
					Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, num2 - 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X + (float)(num2 - 2) * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(32, 0, 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				return;
			}
			if (num2 < 36)
			{
				Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(num3 - Main.screenPosition.X + (float)num2 * scale, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(num2, 0, 36 - num2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(num3 - Main.screenPosition.X, num4 - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, num2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
		}
		public static float NPCAddHeight(int i)
		{
			float num = 0f;
			if (Main.npc[i].type == 125)
			{
				num = 30f;
			}
			else
			{
				if (Main.npc[i].type == 205)
				{
					num = 8f;
				}
				else
				{
					if (Main.npc[i].type == 182)
					{
						num = 24f;
					}
					else
					{
						if (Main.npc[i].type == 178)
						{
							num = 2f;
						}
						else
						{
							if (Main.npc[i].type == 126)
							{
								num = 30f;
							}
							else
							{
								if (Main.npc[i].type == 6 || Main.npc[i].type == 173)
								{
									num = 26f;
								}
								else
								{
									if (Main.npc[i].type == 94)
									{
										num = 14f;
									}
									else
									{
										if (Main.npc[i].type == 7 || Main.npc[i].type == 8 || Main.npc[i].type == 9)
										{
											num = 13f;
										}
										else
										{
											if (Main.npc[i].type == 98 || Main.npc[i].type == 99 || Main.npc[i].type == 100)
											{
												num = 13f;
											}
											else
											{
												if (Main.npc[i].type == 95 || Main.npc[i].type == 96 || Main.npc[i].type == 97)
												{
													num = 13f;
												}
												else
												{
													if (Main.npc[i].type == 10 || Main.npc[i].type == 11 || Main.npc[i].type == 12)
													{
														num = 8f;
													}
													else
													{
														if (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15)
														{
															num = 26f;
														}
														else
														{
															if (Main.npc[i].type == 175)
															{
																num = 4f;
															}
															else
															{
																if (Main.npc[i].type == 48)
																{
																	num = 32f;
																}
																else
																{
																	if (Main.npc[i].type == 49 || Main.npc[i].type == 51)
																	{
																		num = 4f;
																	}
																	else
																	{
																		if (Main.npc[i].type == 60)
																		{
																			num = 10f;
																		}
																		else
																		{
																			if (Main.npc[i].type == 62 || Main.npc[i].type == 66 || Main.npc[i].type == 156)
																			{
																				num = 14f;
																			}
																			else
																			{
																				if (Main.npc[i].type == 63 || Main.npc[i].type == 64 || Main.npc[i].type == 103)
																				{
																					num = 4f;
																				}
																				else
																				{
																					if (Main.npc[i].type == 65)
																					{
																						num = 14f;
																					}
																					else
																					{
																						if (Main.npc[i].type == 69)
																						{
																							num = 4f;
																						}
																						else
																						{
																							if (Main.npc[i].type == 70)
																							{
																								num = -4f;
																							}
																							else
																							{
																								if (Main.npc[i].type == 72)
																								{
																									num = -2f;
																								}
																								else
																								{
																									if (Main.npc[i].type == 83 || Main.npc[i].type == 84)
																									{
																										num = 20f;
																									}
																									else
																									{
																										if (Main.npc[i].type == 150 || Main.npc[i].type == 151 || Main.npc[i].type == 158)
																										{
																											num = 10f;
																										}
																										else
																										{
																											if (Main.npc[i].type == 152)
																											{
																												num = 6f;
																											}
																											else
																											{
																												if (Main.npc[i].type == 153 || Main.npc[i].type == 154)
																												{
																													num = 4f;
																												}
																												else
																												{
																													if (Main.npc[i].type == 165 || Main.npc[i].type == 237 || Main.npc[i].type == 238 || Main.npc[i].type == 240)
																													{
																														num = 10f;
																													}
																													else
																													{
																														if (Main.npc[i].type == 39 || Main.npc[i].type == 40 || Main.npc[i].type == 41)
																														{
																															num = 26f;
																														}
																														else
																														{
																															if (Main.npc[i].type >= 87 && Main.npc[i].type <= 92)
																															{
																																num = 56f;
																															}
																															else
																															{
																																if (Main.npc[i].type >= 134 && Main.npc[i].type <= 136)
																																{
																																	num = 30f;
																																}
																																else
																																{
																																	if (Main.npc[i].type == 169)
																																	{
																																		num = 8f;
																																	}
																																	else
																																	{
																																		if (Main.npc[i].type == 174)
																																		{
																																			num = 6f;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return num * Main.npc[i].scale;
		}
		protected void DrawNPCs(bool behindTiles = false)
		{
			bool flag = false;
			Rectangle rectangle = new Rectangle((int)Main.screenPosition.X - 300, (int)Main.screenPosition.Y - 300, Main.screenWidth + 600, Main.screenHeight + 600);
			for (int i = 199; i >= 0; i--)
			{
				try
				{
					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 369)
					{
						this.LoadNPC(Main.npc[i].type);
						if (Main.npc[i].behindTiles == behindTiles)
						{
							if (Main.npc[i].setFrameSize)
							{
								Main.npc[i].frame = new Rectangle(0, 0, Main.npcTexture[Main.npc[i].type].Width, Main.npcTexture[Main.npc[i].type].Height / Main.npcFrameCount[Main.npc[i].type]);
								Main.npc[i].setFrameSize = false;
							}
							if (Main.npc[i].type == 125 || Main.npc[i].type == 126)
							{
								if (!flag)
								{
									flag = true;
									for (int j = 0; j < 200; j++)
									{
										if (Main.npc[j].active && i != j && (Main.npc[j].type == 125 || Main.npc[j].type == 126))
										{
											float num = Main.npc[j].position.X + (float)Main.npc[j].width * 0.5f;
											float num2 = Main.npc[j].position.Y + (float)Main.npc[j].height * 0.5f;
											Vector2 vector = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f, Main.npc[i].position.Y + (float)Main.npc[i].height * 0.5f);
											float num3 = num - vector.X;
											float num4 = num2 - vector.Y;
											float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
											bool flag2 = true;
											float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
											if (num5 > 2000f)
											{
												flag2 = false;
											}
											while (flag2)
											{
												num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
												if (num5 < 40f)
												{
													flag2 = false;
												}
												else
												{
													num5 = (float)Main.chain12Texture.Height / num5;
													num3 *= num5;
													num4 *= num5;
													vector.X += num3;
													vector.Y += num4;
													num3 = num - vector.X;
													num4 = num2 - vector.Y;
													Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
													Main.spriteBatch.Draw(Main.chain12Texture, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain12Texture.Width, Main.chain12Texture.Height)), color, rotation, new Vector2((float)Main.chain12Texture.Width * 0.5f, (float)Main.chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
												}
											}
										}
									}
								}
							}
							else
							{
								if (Main.npc[i].type == 263 && Main.npc[i].aiStyle == 52 && NPC.plantBoss >= 0)
								{
									Vector2 vector2 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
									float num6 = Main.npc[NPC.plantBoss].center().X - vector2.X;
									float num7 = Main.npc[NPC.plantBoss].center().Y - vector2.Y;
									float rotation2 = (float)Math.Atan2((double)num7, (double)num6) - 1.57f;
									bool flag3 = true;
									while (flag3)
									{
										int num8 = 16;
										int num9 = 32;
										float num10 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
										if (num10 < (float)num9)
										{
											num8 = (int)num10 - num9 + num8;
											flag3 = false;
										}
										num10 = (float)num8 / num10;
										num6 *= num10;
										num7 *= num10;
										vector2.X += num6;
										vector2.Y += num7;
										num6 = Main.npc[NPC.plantBoss].center().X - vector2.X;
										num7 = Main.npc[NPC.plantBoss].center().Y - vector2.Y;
										Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
										Main.spriteBatch.Draw(Main.chain26Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain26Texture.Width, num8)), color2, rotation2, new Vector2((float)Main.chain26Texture.Width * 0.5f, (float)Main.chain26Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									if (Main.npc[i].type == 264 && Main.npc[i].aiStyle == 53 && NPC.plantBoss >= 0)
									{
										int plantBoss = NPC.plantBoss;
										Vector2 vector3 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
										float num11 = Main.npc[plantBoss].center().X - vector3.X;
										float num12 = Main.npc[plantBoss].center().Y - vector3.Y;
										float rotation3 = (float)Math.Atan2((double)num12, (double)num11) - 1.57f;
										bool flag4 = true;
										while (flag4)
										{
											int num13 = 16;
											int num14 = 32;
											float num15 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
											if (num15 < (float)num14)
											{
												num13 = (int)num15 - num14 + num13;
												flag4 = false;
											}
											num15 = (float)num13 / num15;
											num11 *= num15;
											num12 *= num15;
											vector3.X += num11;
											vector3.Y += num12;
											num11 = Main.npc[plantBoss].center().X - vector3.X;
											num12 = Main.npc[plantBoss].center().Y - vector3.Y;
											Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
											Main.spriteBatch.Draw(Main.chain27Texture, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain27Texture.Width, num13)), color3, rotation3, new Vector2((float)Main.chain27Texture.Width * 0.5f, (float)Main.chain27Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
										}
									}
								}
							}
							if (rectangle.Intersects(new Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height)))
							{
								if (Main.npc[i].type == 101)
								{
									bool flag5 = true;
									Vector2 vector4 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
									float num16 = Main.npc[i].ai[0] * 16f + 8f - vector4.X;
									float num17 = Main.npc[i].ai[1] * 16f + 8f - vector4.Y;
									float rotation4 = (float)Math.Atan2((double)num17, (double)num16) - 1.57f;
									bool flag6 = true;
									while (flag6)
									{
										float num18 = 0.75f;
										int height = 28;
										float num19 = (float)Math.Sqrt((double)(num16 * num16 + num17 * num17));
										if (num19 < 28f * num18)
										{
											height = (int)num19 - 40 + 28;
											flag6 = false;
										}
										num19 = 20f * num18 / num19;
										num16 *= num19;
										num17 *= num19;
										vector4.X += num16;
										vector4.Y += num17;
										num16 = Main.npc[i].ai[0] * 16f + 8f - vector4.X;
										num17 = Main.npc[i].ai[1] * 16f + 8f - vector4.Y;
										Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
										if (!flag5)
										{
											flag5 = true;
											Main.spriteBatch.Draw(Main.chain10Texture, new Vector2(vector4.X - Main.screenPosition.X, vector4.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain10Texture.Width, height)), color4, rotation4, new Vector2((float)Main.chain10Texture.Width * 0.5f, (float)Main.chain10Texture.Height * 0.5f), num18, SpriteEffects.None, 0f);
										}
										else
										{
											flag5 = false;
											Main.spriteBatch.Draw(Main.chain11Texture, new Vector2(vector4.X - Main.screenPosition.X, vector4.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain10Texture.Width, height)), color4, rotation4, new Vector2((float)Main.chain10Texture.Width * 0.5f, (float)Main.chain10Texture.Height * 0.5f), num18, SpriteEffects.None, 0f);
										}
									}
								}
								else
								{
									if (Main.npc[i].aiStyle == 13)
									{
										Vector2 vector5 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
										float num20 = Main.npc[i].ai[0] * 16f + 8f - vector5.X;
										float num21 = Main.npc[i].ai[1] * 16f + 8f - vector5.Y;
										float rotation5 = (float)Math.Atan2((double)num21, (double)num20) - 1.57f;
										bool flag7 = true;
										while (flag7)
										{
											int num22 = 28;
											int num23 = 40;
											if (Main.npc[i].type == 259 || Main.npc[i].type == 260)
											{
												num23 = 20;
												num22 = 12;
											}
											float num24 = (float)Math.Sqrt((double)(num20 * num20 + num21 * num21));
											if (num24 < (float)num23)
											{
												num22 = (int)num24 - num23 + num22;
												flag7 = false;
											}
											num24 = (float)num22 / num24;
											num20 *= num24;
											num21 *= num24;
											vector5.X += num20;
											vector5.Y += num21;
											num20 = Main.npc[i].ai[0] * 16f + 8f - vector5.X;
											num21 = Main.npc[i].ai[1] * 16f + 8f - vector5.Y;
											Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
											if (Main.npc[i].type == 259 || Main.npc[i].type == 260)
											{
												color5.B = 255;
												if (color5.R < 100)
												{
													color5.R = 100;
												}
												if (color5.G < 150)
												{
													color5.G = 150;
												}
											}
											if (Main.npc[i].type == 56)
											{
												Main.spriteBatch.Draw(Main.chain5Texture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain4Texture.Width, num22)), color5, rotation5, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
											}
											else
											{
												if (Main.npc[i].type == 175)
												{
													Main.spriteBatch.Draw(Main.chain14Texture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain14Texture.Width, num22)), color5, rotation5, new Vector2((float)Main.chain14Texture.Width * 0.5f, (float)Main.chain14Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
												}
												else
												{
													if (Main.npc[i].type == 259)
													{
														Main.spriteBatch.Draw(Main.chain24Texture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain24Texture.Width, num22)), color5, rotation5, new Vector2((float)Main.chain24Texture.Width * 0.5f, (float)Main.chain24Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
													}
													else
													{
														if (Main.npc[i].type == 260)
														{
															Main.spriteBatch.Draw(Main.chain25Texture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain25Texture.Width, num22)), color5, rotation5, new Vector2((float)Main.chain25Texture.Width * 0.5f, (float)Main.chain25Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
														}
														else
														{
															Main.spriteBatch.Draw(Main.chain4Texture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain4Texture.Width, num22)), color5, rotation5, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
														}
													}
												}
											}
										}
									}
								}
								if (Main.npc[i].type == 327)
								{
									float rotation6 = 0f;
									Vector2 vector6 = new Vector2(Main.npc[i].center().X, Main.npc[i].center().Y + 80f);
									int num25 = (int)Main.npc[i].localAI[1];
									Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
									Main.spriteBatch.Draw(Main.pumpkingCloakTexture, new Vector2(vector6.X - Main.screenPosition.X, vector6.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, Main.pumpkingCloakTexture.Height / 5 * num25, Main.pumpkingCloakTexture.Width, Main.pumpkingCloakTexture.Height / 5)), color6, rotation6, new Vector2((float)Main.pumpkingCloakTexture.Width * 0.5f, (float)Main.pumpkingCloakTexture.Height * 0.5f / 5f), 1f, SpriteEffects.None, 0f);
								}
								if (Main.npc[i].type == 328)
								{
									Vector2 vector7 = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f - 5f * Main.npc[i].ai[0], Main.npc[i].position.Y + 20f);
									for (int k = 0; k < 2; k++)
									{
										float num26 = Main.npc[(int)Main.npc[i].ai[1]].position.X + (float)(Main.npc[(int)Main.npc[i].ai[1]].width / 2) - vector7.X;
										float num27 = Main.npc[(int)Main.npc[i].ai[1]].position.Y + (float)(Main.npc[(int)Main.npc[i].ai[1]].height / 2) - 30f - vector7.Y;
										float num28;
										if (k == 0)
										{
											num26 -= 200f * Main.npc[i].ai[0];
											num27 += 130f;
											num28 = (float)Math.Sqrt((double)(num26 * num26 + num27 * num27));
											num28 = 92f / num28;
											vector7.X += num26 * num28;
											vector7.Y += num27 * num28;
										}
										else
										{
											num26 -= 50f * Main.npc[i].ai[0];
											num27 += 80f;
											num28 = (float)Math.Sqrt((double)(num26 * num26 + num27 * num27));
											num28 = 60f / num28;
											vector7.X += num26 * num28;
											vector7.Y += num27 * num28;
										}
										float rotation7 = (float)Math.Atan2((double)num27, (double)num26) - 1.57f;
										Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
										Main.spriteBatch.Draw(Main.pumpkingArmTexture, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.pumpkingArmTexture.Width, Main.pumpkingArmTexture.Height)), color7, rotation7, new Vector2((float)Main.pumpkingArmTexture.Width * 0.5f, (float)Main.pumpkingArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
										if (k == 0)
										{
											vector7.X += num26 * num28 / 2f;
											vector7.Y += num27 * num28 / 2f;
										}
									}
								}
								if (Main.npc[i].type == 36)
								{
									Vector2 vector8 = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f - 5f * Main.npc[i].ai[0], Main.npc[i].position.Y + 20f);
									for (int l = 0; l < 2; l++)
									{
										float num29 = Main.npc[(int)Main.npc[i].ai[1]].position.X + (float)(Main.npc[(int)Main.npc[i].ai[1]].width / 2) - vector8.X;
										float num30 = Main.npc[(int)Main.npc[i].ai[1]].position.Y + (float)(Main.npc[(int)Main.npc[i].ai[1]].height / 2) - vector8.Y;
										float num31;
										if (l == 0)
										{
											num29 -= 200f * Main.npc[i].ai[0];
											num30 += 130f;
											num31 = (float)Math.Sqrt((double)(num29 * num29 + num30 * num30));
											num31 = 92f / num31;
											vector8.X += num29 * num31;
											vector8.Y += num30 * num31;
										}
										else
										{
											num29 -= 50f * Main.npc[i].ai[0];
											num30 += 80f;
											num31 = (float)Math.Sqrt((double)(num29 * num29 + num30 * num30));
											num31 = 60f / num31;
											vector8.X += num29 * num31;
											vector8.Y += num30 * num31;
										}
										float rotation8 = (float)Math.Atan2((double)num30, (double)num29) - 1.57f;
										Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
										Main.spriteBatch.Draw(Main.boneArmTexture, new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color8, rotation8, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
										if (l == 0)
										{
											vector8.X += num29 * num31 / 2f;
											vector8.Y += num30 * num31 / 2f;
										}
										else
										{
											if (base.IsActive)
											{
												vector8.X += num29 * num31 - 16f;
												vector8.Y += num30 * num31 - 6f;
												int num32 = Dust.NewDust(new Vector2(vector8.X, vector8.Y), 30, 10, 5, num29 * 0.02f, num30 * 0.02f, 0, default(Color), 2f);
												Main.dust[num32].noGravity = true;
											}
										}
									}
								}
								if (Main.npc[i].aiStyle == 47)
								{
									Vector2 vector9 = new Vector2(Main.npc[i].center().X, Main.npc[i].center().Y);
									float num33 = Main.npc[NPC.golemBoss].center().X - vector9.X;
									float num34 = Main.npc[NPC.golemBoss].center().Y - vector9.Y;
									num34 -= 7f;
									if (Main.npc[i].type == 247)
									{
										num33 -= 70f;
									}
									else
									{
										num33 += 66f;
									}
									float rotation9 = (float)Math.Atan2((double)num34, (double)num33) - 1.57f;
									bool flag8 = true;
									while (flag8)
									{
										float num35 = (float)Math.Sqrt((double)(num33 * num33 + num34 * num34));
										if (num35 < 16f)
										{
											flag8 = false;
										}
										else
										{
											num35 = 16f / num35;
											num33 *= num35;
											num34 *= num35;
											vector9.X += num33;
											vector9.Y += num34;
											num33 = Main.npc[NPC.golemBoss].center().X - vector9.X;
											num34 = Main.npc[NPC.golemBoss].center().Y - vector9.Y;
											num34 -= 7f;
											if (Main.npc[i].type == 247)
											{
												num33 -= 70f;
											}
											else
											{
												num33 += 66f;
											}
											Color color9 = Lighting.GetColor((int)vector9.X / 16, (int)(vector9.Y / 16f));
											Main.spriteBatch.Draw(Main.chain21Texture, new Vector2(vector9.X - Main.screenPosition.X, vector9.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain21Texture.Width, Main.chain21Texture.Height)), color9, rotation9, new Vector2((float)Main.chain21Texture.Width * 0.5f, (float)Main.chain21Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
										}
									}
								}
								if (Main.npc[i].aiStyle >= 33 && Main.npc[i].aiStyle <= 36)
								{
									Vector2 vector10 = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f - 5f * Main.npc[i].ai[0], Main.npc[i].position.Y + 20f);
									for (int m = 0; m < 2; m++)
									{
										float num36 = Main.npc[(int)Main.npc[i].ai[1]].position.X + (float)(Main.npc[(int)Main.npc[i].ai[1]].width / 2) - vector10.X;
										float num37 = Main.npc[(int)Main.npc[i].ai[1]].position.Y + (float)(Main.npc[(int)Main.npc[i].ai[1]].height / 2) - vector10.Y;
										float num38;
										if (m == 0)
										{
											num36 -= 200f * Main.npc[i].ai[0];
											num37 += 130f;
											num38 = (float)Math.Sqrt((double)(num36 * num36 + num37 * num37));
											num38 = 92f / num38;
											vector10.X += num36 * num38;
											vector10.Y += num37 * num38;
										}
										else
										{
											num36 -= 50f * Main.npc[i].ai[0];
											num37 += 80f;
											num38 = (float)Math.Sqrt((double)(num36 * num36 + num37 * num37));
											num38 = 60f / num38;
											vector10.X += num36 * num38;
											vector10.Y += num37 * num38;
										}
										float rotation10 = (float)Math.Atan2((double)num37, (double)num36) - 1.57f;
										Color color10 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
										Main.spriteBatch.Draw(Main.boneArm2Texture, new Vector2(vector10.X - Main.screenPosition.X, vector10.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color10, rotation10, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
										if (m == 0)
										{
											vector10.X += num36 * num38 / 2f;
											vector10.Y += num37 * num38 / 2f;
										}
										else
										{
											if (base.IsActive)
											{
												vector10.X += num36 * num38 - 16f;
												vector10.Y += num37 * num38 - 6f;
												int num39 = Dust.NewDust(new Vector2(vector10.X, vector10.Y), 30, 10, 6, num36 * 0.02f, num37 * 0.02f, 0, default(Color), 2.5f);
												Main.dust[num39].noGravity = true;
											}
										}
									}
								}
								if (Main.npc[i].aiStyle == 20)
								{
									Vector2 vector11 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
									float num40 = Main.npc[i].ai[1] - vector11.X;
									float num41 = Main.npc[i].ai[2] - vector11.Y;
									float num42 = (float)Math.Atan2((double)num41, (double)num40) - 1.57f;
									Main.npc[i].rotation = num42;
									bool flag9 = true;
									while (flag9)
									{
										int height2 = 12;
										float num43 = (float)Math.Sqrt((double)(num40 * num40 + num41 * num41));
										if (num43 < 20f)
										{
											height2 = (int)num43 - 20 + 12;
											flag9 = false;
										}
										num43 = 12f / num43;
										num40 *= num43;
										num41 *= num43;
										vector11.X += num40;
										vector11.Y += num41;
										num40 = Main.npc[i].ai[1] - vector11.X;
										num41 = Main.npc[i].ai[2] - vector11.Y;
										Color color11 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
										Main.spriteBatch.Draw(Main.chainTexture, new Vector2(vector11.X - Main.screenPosition.X, vector11.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chainTexture.Width, height2)), color11, num42, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
									}
									Main.spriteBatch.Draw(Main.spikeBaseTexture, new Vector2(Main.npc[i].ai[1] - Main.screenPosition.X, Main.npc[i].ai[2] - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.spikeBaseTexture.Width, Main.spikeBaseTexture.Height)), Lighting.GetColor((int)Main.npc[i].ai[1] / 16, (int)(Main.npc[i].ai[2] / 16f)), num42 - 0.75f, new Vector2((float)Main.spikeBaseTexture.Width * 0.5f, (float)Main.spikeBaseTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
								}
								Color color12 = Lighting.GetColor((int)((double)Main.npc[i].position.X + (double)Main.npc[i].width * 0.5) / 16, (int)(((double)Main.npc[i].position.Y + (double)Main.npc[i].height * 0.5) / 16.0));
								if (Main.npc[i].type >= 277 && Main.npc[i].type <= 280)
								{
									if (color12.R < 255)
									{
										color12.R = 255;
									}
									if (color12.G < 175)
									{
										color12.G = 175;
									}
								}
								if (behindTiles && Main.npc[i].type != 113 && Main.npc[i].type != 114)
								{
									int num44 = (int)((Main.npc[i].position.X - 8f) / 16f);
									int num45 = (int)((Main.npc[i].position.X + (float)Main.npc[i].width + 8f) / 16f);
									int num46 = (int)((Main.npc[i].position.Y - 8f) / 16f);
									int num47 = (int)((Main.npc[i].position.Y + (float)Main.npc[i].height + 8f) / 16f);
									for (int n = num44; n <= num45; n++)
									{
										for (int num48 = num46; num48 <= num47; num48++)
										{
											if (Lighting.Brightness(n, num48) == 0f)
											{
												color12 = Color.Black;
											}
										}
									}
								}
								float num49 = 1f;
								float num50 = 1f;
								float num51 = 1f;
								float num52 = 1f;
								if (Main.npc[i].poisoned)
								{
									if (Main.rand.Next(30) == 0)
									{
										int num53 = Dust.NewDust(Main.npc[i].position, Main.npc[i].width, Main.npc[i].height, 46, 0f, 0f, 120, default(Color), 0.2f);
										Main.dust[num53].noGravity = true;
										Main.dust[num53].fadeIn = 1.9f;
									}
									num49 *= 0.65f;
									num51 *= 0.75f;
									color12 = Main.buffColor(color12, num49, num50, num51, num52);
								}
								if (Main.npc[i].venom)
								{
									if (Main.rand.Next(10) == 0)
									{
										int num54 = Dust.NewDust(Main.npc[i].position, Main.npc[i].width, Main.npc[i].height, 171, 0f, 0f, 100, default(Color), 0.5f);
										Main.dust[num54].noGravity = true;
										Main.dust[num54].fadeIn = 1.5f;
									}
									num50 *= 0.45f;
									num49 *= 0.75f;
									color12 = Main.buffColor(color12, num49, num50, num51, num52);
								}
								if (Main.npc[i].midas)
								{
									num51 *= 0.3f;
									num49 *= 0.85f;
									color12 = Main.buffColor(color12, num49, num50, num51, num52);
								}
								if (Main.npc[i].onFire)
								{
									if (Main.rand.Next(4) < 3)
									{
										int num55 = Dust.NewDust(new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f), Main.npc[i].width + 4, Main.npc[i].height + 4, 6, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, default(Color), 3.5f);
										Main.dust[num55].noGravity = true;
										Main.dust[num55].velocity *= 1.8f;
										Dust expr_24BA_cp_0 = Main.dust[num55];
										expr_24BA_cp_0.velocity.Y = expr_24BA_cp_0.velocity.Y - 0.5f;
										if (Main.rand.Next(4) == 0)
										{
											Main.dust[num55].noGravity = false;
											Main.dust[num55].scale *= 0.5f;
										}
									}
									Lighting.addLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
								}
								if (Main.npc[i].dripping && Main.rand.Next(4) != 0)
								{
									Vector2 position = Main.npc[i].position;
									position.X -= 2f;
									position.Y -= 2f;
									if (Main.rand.Next(2) == 0)
									{
										int num56 = Dust.NewDust(position, Main.npc[i].width + 4, Main.npc[i].height + 2, 211, 0f, 0f, 50, default(Color), 0.8f);
										if (Main.rand.Next(2) == 0)
										{
											Main.dust[num56].alpha += 25;
										}
										if (Main.rand.Next(2) == 0)
										{
											Main.dust[num56].alpha += 25;
										}
										Main.dust[num56].noLight = true;
										Main.dust[num56].velocity *= 0.2f;
										Dust expr_2671_cp_0 = Main.dust[num56];
										expr_2671_cp_0.velocity.Y = expr_2671_cp_0.velocity.Y + 0.2f;
										Main.dust[num56].velocity += Main.npc[i].velocity;
									}
									else
									{
										int num57 = Dust.NewDust(position, Main.npc[i].width + 8, Main.npc[i].height + 8, 211, 0f, 0f, 50, default(Color), 1.1f);
										if (Main.rand.Next(2) == 0)
										{
											Main.dust[num57].alpha += 25;
										}
										if (Main.rand.Next(2) == 0)
										{
											Main.dust[num57].alpha += 25;
										}
										Main.dust[num57].noLight = true;
										Main.dust[num57].noGravity = true;
										Main.dust[num57].velocity *= 0.2f;
										Dust expr_277C_cp_0 = Main.dust[num57];
										expr_277C_cp_0.velocity.Y = expr_277C_cp_0.velocity.Y + 1f;
										Main.dust[num57].velocity += Main.npc[i].velocity;
									}
								}
								if (Main.npc[i].ichor)
								{
									color12 = new Color(255, 255, 0, 255);
								}
								if (Main.npc[i].onFrostBurn)
								{
									if (Main.rand.Next(4) < 3)
									{
										int num58 = Dust.NewDust(new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f), Main.npc[i].width + 4, Main.npc[i].height + 4, 135, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, default(Color), 3.5f);
										Main.dust[num58].noGravity = true;
										Main.dust[num58].velocity *= 1.8f;
										Dust expr_28CA_cp_0 = Main.dust[num58];
										expr_28CA_cp_0.velocity.Y = expr_28CA_cp_0.velocity.Y - 0.5f;
										if (Main.rand.Next(4) == 0)
										{
											Main.dust[num58].noGravity = false;
											Main.dust[num58].scale *= 0.5f;
										}
									}
									Lighting.addLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
								}
								if (Main.npc[i].onFire2)
								{
									if (Main.rand.Next(4) < 3)
									{
										int num59 = Dust.NewDust(new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f), Main.npc[i].width + 4, Main.npc[i].height + 4, 75, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, default(Color), 3.5f);
										Main.dust[num59].noGravity = true;
										Main.dust[num59].velocity *= 1.8f;
										Dust expr_2A4A_cp_0 = Main.dust[num59];
										expr_2A4A_cp_0.velocity.Y = expr_2A4A_cp_0.velocity.Y - 0.5f;
										if (Main.rand.Next(4) == 0)
										{
											Main.dust[num59].noGravity = false;
											Main.dust[num59].scale *= 0.5f;
										}
									}
									Lighting.addLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
								}
								if (Main.player[Main.myPlayer].detectCreature && Main.npc[i].lifeMax > 1)
								{
									byte b;
									byte b2;
									byte b3;
									if (Main.npc[i].friendly || Main.npc[i].catchItem > 0 || (Main.npc[i].damage == 0 && Main.npc[i].lifeMax == 5))
									{
										b = 50;
										b2 = 255;
										b3 = 50;
									}
									else
									{
										b = 255;
										b2 = 50;
										b3 = 50;
									}
									if (color12.R < b)
									{
										color12.R = b;
									}
									if (color12.G < b2)
									{
										color12.G = b2;
									}
									if (color12.B < b3)
									{
										color12.B = b3;
									}
								}
								if (Main.npc[i].type == 50)
								{
									Vector2 vector12 = default(Vector2);
									float num60 = 0f;
									vector12.Y -= Main.npc[i].velocity.Y;
									vector12.X -= Main.npc[i].velocity.X * 2f;
									num60 += Main.npc[i].velocity.X * 0.05f;
									if (Main.npc[i].frame.Y == 120)
									{
										vector12.Y += 2f;
									}
									if (Main.npc[i].frame.Y == 360)
									{
										vector12.Y -= 2f;
									}
									if (Main.npc[i].frame.Y == 480)
									{
										vector12.Y -= 6f;
									}
									Main.spriteBatch.Draw(Main.ninjaTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) + vector12.X, Main.npc[i].position.Y - Main.screenPosition.Y + (float)(Main.npc[i].height / 2) + vector12.Y), new Rectangle?(new Rectangle(0, 0, Main.ninjaTexture.Width, Main.ninjaTexture.Height)), color12, num60, new Vector2((float)(Main.ninjaTexture.Width / 2), (float)(Main.ninjaTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
								}
								if (Main.npc[i].type == 71)
								{
									Vector2 vector13 = default(Vector2);
									float num61 = 0f;
									vector13.Y -= Main.npc[i].velocity.Y * 0.3f;
									vector13.X -= Main.npc[i].velocity.X * 0.6f;
									num61 += Main.npc[i].velocity.X * 0.09f;
									if (Main.npc[i].frame.Y == 120)
									{
										vector13.Y += 2f;
									}
									if (Main.npc[i].frame.Y == 360)
									{
										vector13.Y -= 2f;
									}
									if (Main.npc[i].frame.Y == 480)
									{
										vector13.Y -= 6f;
									}
									Main.spriteBatch.Draw(Main.itemTexture[327], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) + vector13.X, Main.npc[i].position.Y - Main.screenPosition.Y + (float)(Main.npc[i].height / 2) + vector13.Y), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[327].Width, Main.itemTexture[327].Height)), color12, num61, new Vector2((float)(Main.itemTexture[327].Width / 2), (float)(Main.itemTexture[327].Height / 2)), 1f, SpriteEffects.None, 0f);
								}
								if (Main.npc[i].type == 69)
								{
									Main.spriteBatch.Draw(Main.antLionTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height + 14f), new Rectangle?(new Rectangle(0, 0, Main.antLionTexture.Width, Main.antLionTexture.Height)), color12, -Main.npc[i].rotation * 0.3f, new Vector2((float)(Main.antLionTexture.Width / 2), (float)(Main.antLionTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
								}
								float num62 = 0f;
								float num63 = Main.NPCAddHeight(i);
								Vector2 origin = new Vector2((float)(Main.npcTexture[Main.npc[i].type].Width / 2), (float)(Main.npcTexture[Main.npc[i].type].Height / Main.npcFrameCount[Main.npc[i].type] / 2));
								if (Main.npc[i].type == 108 || Main.npc[i].type == 124)
								{
									num62 = 2f;
								}
								if (Main.npc[i].type == 357)
								{
									num62 = Main.npc[i].localAI[0];
								}
								if (Main.npc[i].type == 4)
								{
									origin = new Vector2(55f, 107f);
								}
								else
								{
									if (Main.npc[i].type == 125)
									{
										origin = new Vector2(55f, 107f);
									}
									else
									{
										if (Main.npc[i].type == 126)
										{
											origin = new Vector2(55f, 107f);
										}
										else
										{
											if (Main.npc[i].type == 63 || Main.npc[i].type == 64 || Main.npc[i].type == 103)
											{
												origin.Y += 4f;
											}
											else
											{
												if (Main.npc[i].type == 69)
												{
													origin.Y += 8f;
												}
												else
												{
													if (Main.npc[i].type == 262)
													{
														origin.Y = 77f;
														num63 += 26f;
													}
													else
													{
														if (Main.npc[i].type == 264)
														{
															origin.Y = 21f;
															num63 += 2f;
														}
														else
														{
															if (Main.npc[i].type == 266)
															{
																num63 += 50f;
															}
															else
															{
																if (Main.npc[i].type == 268)
																{
																	num63 += 16f;
																}
																else
																{
																	if (Main.npc[i].type == 288)
																	{
																		num63 += 6f;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
								if (Main.npc[i].aiStyle == 10 || Main.npc[i].type == 72)
								{
									color12 = Color.White;
								}
								SpriteEffects effects = SpriteEffects.None;
								if (Main.npc[i].spriteDirection == 1)
								{
									effects = SpriteEffects.FlipHorizontally;
								}
								if (Main.npc[i].type == 83 || Main.npc[i].type == 84 || Main.npc[i].type == 179)
								{
									Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62), new Rectangle?(Main.npc[i].frame), Color.White, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
								}
								else
								{
									if (Main.npc[i].type >= 87 && Main.npc[i].type <= 92)
									{
										Color alpha = Main.npc[i].GetAlpha(color12);
										byte b4 = (byte)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
										if (alpha.R < b4)
										{
											alpha.R = b4;
										}
										if (alpha.G < b4)
										{
											alpha.G = b4;
										}
										if (alpha.B < b4)
										{
											alpha.B = b4;
										}
										Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62), new Rectangle?(Main.npc[i].frame), alpha, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
									}
									else
									{
										if (Main.npc[i].type == 94)
										{
											for (int num64 = 1; num64 < 6; num64 += 2)
											{
												Vector2 arg_3643_0 = Main.npc[i].oldPos[num64];
												Color alpha2 = Main.npc[i].GetAlpha(color12);
												alpha2.R = (byte)((int)alpha2.R * (10 - num64) / 15);
												alpha2.G = (byte)((int)alpha2.G * (10 - num64) / 15);
												alpha2.B = (byte)((int)alpha2.B * (10 - num64) / 15);
												alpha2.A = (byte)((int)alpha2.A * (10 - num64) / 15);
												Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].oldPos[num64].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].oldPos[num64].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), alpha2, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
											}
										}
										if (Main.npc[i].type == 125 || Main.npc[i].type == 126 || Main.npc[i].type == 127 || Main.npc[i].type == 128 || Main.npc[i].type == 129 || Main.npc[i].type == 130 || Main.npc[i].type == 131 || Main.npc[i].type == 139 || Main.npc[i].type == 140)
										{
											for (int num65 = 9; num65 >= 0; num65 -= 2)
											{
												Vector2 arg_38E0_0 = Main.npc[i].oldPos[num65];
												Color alpha3 = Main.npc[i].GetAlpha(color12);
												alpha3.R = (byte)((int)alpha3.R * (10 - num65) / 20);
												alpha3.G = (byte)((int)alpha3.G * (10 - num65) / 20);
												alpha3.B = (byte)((int)alpha3.B * (10 - num65) / 20);
												alpha3.A = (byte)((int)alpha3.A * (10 - num65) / 20);
												Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].oldPos[num65].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].oldPos[num65].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), alpha3, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
											}
										}
										Rectangle frame = Main.npc[i].frame;
										if (Main.npc[i].type == 182 || Main.npc[i].type == 289)
										{
											frame.Height -= 2;
										}
										if (Main.npc[i].type == 346 && (double)Main.npc[i].life < (double)Main.npc[i].lifeMax * 0.5)
										{
											Main.spriteBatch.Draw(Main.santaTankTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62 + Main.npc[i].gfxOffY), new Rectangle?(frame), Main.npc[i].GetAlpha(color12), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
										}
										else
										{
											if (Main.npc[i].type == 356)
											{
												frame.Height--;
												Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62 + Main.npc[i].gfxOffY), new Rectangle?(frame), Main.npc[i].GetAlpha(color12), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
											}
											else
											{
												if (Main.npc[i].type == 360)
												{
													float num66 = 0f;
													if (Main.npc[i].ai[2] == 0f)
													{
														if (Main.npc[i].rotation == 3.14f || Main.npc[i].rotation == -3.14f)
														{
															num63 = 2f;
														}
														if (Main.npc[i].direction < 0 && (Main.npc[i].rotation == 1.57f || Main.npc[i].rotation == 4.71f))
														{
															num66 = 1f;
														}
														if (Main.npc[i].direction > 0 && (Main.npc[i].rotation == 1.57f || Main.npc[i].rotation == 4.71f))
														{
															num66 = -1f;
														}
													}
													Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale + num66, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62 + Main.npc[i].gfxOffY), new Rectangle?(frame), Main.npc[i].GetAlpha(color12), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
												}
												else
												{
													Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62 + Main.npc[i].gfxOffY), new Rectangle?(frame), Main.npc[i].GetAlpha(color12), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
													if (Main.npc[i].color != default(Color))
													{
														Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62 + Main.npc[i].gfxOffY), new Rectangle?(frame), Main.npc[i].GetColor(color12), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
													}
												}
											}
										}
										if (Main.npc[i].confused)
										{
											Main.spriteBatch.Draw(Main.confuseTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62 - (float)Main.confuseTexture.Height - 20f), new Rectangle?(new Rectangle(0, 0, Main.confuseTexture.Width, Main.confuseTexture.Height)), new Color(250, 250, 250, 70), Main.npc[i].velocity.X * -0.05f, new Vector2((float)(Main.confuseTexture.Width / 2), (float)(Main.confuseTexture.Height / 2)), Main.essScale + 0.2f, SpriteEffects.None, 0f);
										}
										if (Main.npc[i].type >= 134 && Main.npc[i].type <= 136 && color12 != Color.Black)
										{
											Main.spriteBatch.Draw(Main.destTexture[Main.npc[i].type - 134], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62), new Rectangle?(Main.npc[i].frame), new Color(255, 255, 255, 0), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
										}
										if (Main.npc[i].type == 125)
										{
											Main.spriteBatch.Draw(Main.EyeLaserTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62), new Rectangle?(Main.npc[i].frame), new Color(255, 255, 255, 0), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
										}
										if (Main.npc[i].type == 139)
										{
											Main.spriteBatch.Draw(Main.probeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62), new Rectangle?(Main.npc[i].frame), new Color(255, 255, 255, 0), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
										}
										if (Main.npc[i].type == 127)
										{
											Main.spriteBatch.Draw(Main.BoneEyesTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62), new Rectangle?(Main.npc[i].frame), new Color(200, 200, 200, 0), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
										}
										if (Main.npc[i].type == 131)
										{
											Main.spriteBatch.Draw(Main.BoneLaserTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62), new Rectangle?(Main.npc[i].frame), new Color(200, 200, 200, 0), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
										}
										if (Main.npc[i].type == 120)
										{
											for (int num67 = 1; num67 < Main.npc[i].oldPos.Length; num67++)
											{
												Vector2 arg_4C01_0 = Main.npc[i].oldPos[num67];
												Color color13 = default(Color);
												color13.R = (byte)(150 * (10 - num67) / 15);
												color13.G = (byte)(100 * (10 - num67) / 15);
												color13.B = (byte)(150 * (10 - num67) / 15);
												color13.A = (byte)(50 * (10 - num67) / 15);
												Main.spriteBatch.Draw(Main.chaosTexture, new Vector2(Main.npc[i].oldPos[num67].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].oldPos[num67].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), color13, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
											}
										}
										else
										{
											if (Main.npc[i].type == 137 || Main.npc[i].type == 138)
											{
												for (int num68 = 1; num68 < Main.npc[i].oldPos.Length; num68++)
												{
													Vector2 arg_4E0A_0 = Main.npc[i].oldPos[num68];
													Color color14 = default(Color);
													color14.R = (byte)(150 * (10 - num68) / 15);
													color14.G = (byte)(100 * (10 - num68) / 15);
													color14.B = (byte)(150 * (10 - num68) / 15);
													color14.A = (byte)(50 * (10 - num68) / 15);
													Main.spriteBatch.Draw(Main.npcTexture[Main.npc[i].type], new Vector2(Main.npc[i].oldPos[num68].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].oldPos[num68].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), color14, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
												}
											}
											else
											{
												if (Main.npc[i].type == 327)
												{
													Main.spriteBatch.Draw(Main.pumpkingFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), Color.White, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
													for (int num69 = 1; num69 < 10; num69++)
													{
														Color color15 = new Color(110 - num69 * 10, 110 - num69 * 10, 110 - num69 * 10, 110 - num69 * 10);
														Vector2 value = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
														Main.spriteBatch.Draw(Main.pumpkingFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63) + value, new Rectangle?(Main.npc[i].frame), color15, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
													}
												}
												else
												{
													if (Main.npc[i].type == 325)
													{
														Main.spriteBatch.Draw(Main.treeFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), Color.White, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
														for (int num70 = 1; num70 < 10; num70++)
														{
															Color color16 = new Color(110 - num70 * 10, 110 - num70 * 10, 110 - num70 * 10, 110 - num70 * 10);
															Vector2 value2 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
															Main.spriteBatch.Draw(Main.treeFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63) + value2, new Rectangle?(Main.npc[i].frame), color16, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
														}
													}
													else
													{
														if (Main.npc[i].type == 345)
														{
															Main.spriteBatch.Draw(Main.iceQueenTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), Color.White, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
															for (int num71 = 1; num71 < 5; num71++)
															{
																Color color17 = new Color(100 - num71 * 10, 100 - num71 * 10, 100 - num71 * 10, 100 - num71 * 10);
																Main.spriteBatch.Draw(Main.iceQueenTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63) - Main.npc[i].velocity * (float)num71 * 0.2f, new Rectangle?(Main.npc[i].frame), color17, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
															}
														}
														else
														{
															if (Main.npc[i].type == 355)
															{
																Main.spriteBatch.Draw(Main.fireflyTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), new Color(255, 255, 255, 0), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
															}
															else
															{
																if (Main.npc[i].type == 358)
																{
																	Main.spriteBatch.Draw(Main.lightningbugTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), new Color(255, 255, 255, 0), Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
																}
																else
																{
																	if (Main.npc[i].type == 82)
																	{
																		Main.spriteBatch.Draw(Main.wraithEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), Color.White, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
																		for (int num72 = 1; num72 < 10; num72++)
																		{
																			Color color18 = new Color(110 - num72 * 10, 110 - num72 * 10, 110 - num72 * 10, 110 - num72 * 10);
																			Main.spriteBatch.Draw(Main.wraithEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63) - Main.npc[i].velocity * (float)num72 * 0.5f, new Rectangle?(Main.npc[i].frame), color18, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
																		}
																	}
																	else
																	{
																		if (Main.npc[i].type == 253)
																		{
																			Main.spriteBatch.Draw(Main.reaperEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 3f + origin.Y * Main.npc[i].scale + num63), new Rectangle?(Main.npc[i].frame), Color.White, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
																			for (int num73 = 1; num73 < 20; num73++)
																			{
																				Color color19 = new Color(210 - num73 * 20, 210 - num73 * 20, 210 - num73 * 20, 210 - num73 * 20);
																				Main.spriteBatch.Draw(Main.reaperEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 3f + origin.Y * Main.npc[i].scale + num63) - Main.npc[i].velocity * (float)num73 * 0.5f, new Rectangle?(Main.npc[i].frame), color19, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
																			}
																		}
																		else
																		{
																			if (Main.npc[i].type == 245 && Main.npc[i].alpha == 0)
																			{
																				Color color20 = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
																				Main.spriteBatch.Draw(Main.golemTexture[3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[Main.npc[i].type].Width * Main.npc[i].scale / 2f + origin.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[Main.npc[i].type].Height * Main.npc[i].scale / (float)Main.npcFrameCount[Main.npc[i].type] + 4f + origin.Y * Main.npc[i].scale + num63 + num62 + Main.npc[i].gfxOffY), new Rectangle?(frame), color20, Main.npc[i].rotation, origin, Main.npc[i].scale, effects, 0f);
																			}
																			else
																			{
																				if (Main.npc[i].type == 246)
																				{
																					Color color21 = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
																					if (Main.npc[i].frame.Y < 222)
																					{
																						Main.spriteBatch.Draw(Main.golemTexture[1], new Vector2(Main.npc[i].center().X - Main.screenPosition.X - 20f, Main.npc[i].center().Y - Main.screenPosition.Y - 27f), new Rectangle?(new Rectangle(0, 0, Main.golemTexture[1].Width, Main.golemTexture[1].Height / 2)), color21, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
																					}
																					else
																					{
																						if (Main.npc[i].frame.Y < 444)
																						{
																							Main.spriteBatch.Draw(Main.golemTexture[2], new Vector2(Main.npc[i].center().X - Main.screenPosition.X + 26f, Main.npc[i].center().Y - Main.screenPosition.Y - 28f), new Rectangle?(new Rectangle(0, 0, Main.golemTexture[2].Width, Main.golemTexture[2].Height / 4)), color21, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
																						}
																						else
																						{
																							Main.spriteBatch.Draw(Main.golemTexture[2], new Vector2(Main.npc[i].center().X - Main.screenPosition.X - 38f, Main.npc[i].center().Y - Main.screenPosition.Y - 28f), new Rectangle?(new Rectangle(0, Main.golemTexture[2].Height / 2, Main.golemTexture[2].Width, Main.golemTexture[2].Height / 4)), color21, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
																						}
																					}
																				}
																				else
																				{
																					if (Main.npc[i].type == 249)
																					{
																						Color color22 = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
																						Main.spriteBatch.Draw(Main.golemTexture[1], new Vector2(Main.npc[i].center().X - Main.screenPosition.X - 20f, Main.npc[i].center().Y - Main.screenPosition.Y - 47f), new Rectangle?(new Rectangle(0, 0, Main.golemTexture[1].Width, Main.golemTexture[1].Height / 2)), color22, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				catch
				{
					Main.npc[i].active = false;
				}
			}
		}
		protected void DrawProj(int i)
		{
			this.LoadProjectile(Main.projectile[i].type);
			if (Main.projectile[i].type == 32)
			{
				Vector2 vector = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
				float num = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector.X;
				float num2 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector.Y;
				float rotation = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
				bool flag = true;
				if (num == 0f && num2 == 0f)
				{
					flag = false;
				}
				else
				{
					float num3 = (float)Math.Sqrt((double)(num * num + num2 * num2));
					num3 = 8f / num3;
					num *= num3;
					num2 *= num3;
					vector.X -= num;
					vector.Y -= num2;
					num = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector.X;
					num2 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector.Y;
				}
				while (flag)
				{
					float num4 = (float)Math.Sqrt((double)(num * num + num2 * num2));
					if (num4 < 28f)
					{
						flag = false;
					}
					else
					{
						if (num4 == float.NaN)
						{
							flag = false;
						}
						else
						{
							num4 = 28f / num4;
							num *= num4;
							num2 *= num4;
							vector.X += num;
							vector.Y += num2;
							num = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector.X;
							num2 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector.Y;
							Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
							Main.spriteBatch.Draw(Main.chain5Texture, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain5Texture.Width, Main.chain5Texture.Height)), color, rotation, new Vector2((float)Main.chain5Texture.Width * 0.5f, (float)Main.chain5Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
						}
					}
				}
			}
			else
			{
				if (Main.projectile[i].type == 73)
				{
					Vector2 vector2 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
					float num5 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector2.X;
					float num6 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector2.Y;
					float rotation2 = (float)Math.Atan2((double)num6, (double)num5) - 1.57f;
					bool flag2 = true;
					while (flag2)
					{
						float num7 = (float)Math.Sqrt((double)(num5 * num5 + num6 * num6));
						if (num7 < 25f)
						{
							flag2 = false;
						}
						else
						{
							if (num7 == float.NaN)
							{
								flag2 = false;
							}
							else
							{
								num7 = 12f / num7;
								num5 *= num7;
								num6 *= num7;
								vector2.X += num5;
								vector2.Y += num6;
								num5 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector2.X;
								num6 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector2.Y;
								Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
								Main.spriteBatch.Draw(Main.chain8Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain8Texture.Width, Main.chain8Texture.Height)), color2, rotation2, new Vector2((float)Main.chain8Texture.Width * 0.5f, (float)Main.chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
				else
				{
					if (Main.projectile[i].type == 186)
					{
						float num8 = Main.projectile[i].ai[1];
						float num9 = Main.projectile[i].position.Y - num8;
						float num10 = (float)Main.chain17Texture.Height - num9;
						if (num9 > 0f && Main.projectile[i].ai[1] > 0f)
						{
							Color color3 = Lighting.GetColor((int)Main.projectile[i].position.X / 16, (int)Main.projectile[i].position.Y / 16);
							Main.spriteBatch.Draw(Main.chain17Texture, new Vector2(Main.projectile[i].position.X - Main.screenPosition.X, num8 - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, (int)num10, Main.chain17Texture.Width, (int)num9)), color3, 0f, new Vector2(0f, 0f), 1f, SpriteEffects.None, 0f);
						}
					}
					else
					{
						if (Main.projectile[i].type == 74)
						{
							Vector2 vector3 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
							float num11 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector3.X;
							float num12 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector3.Y;
							float rotation3 = (float)Math.Atan2((double)num12, (double)num11) - 1.57f;
							bool flag3 = true;
							while (flag3)
							{
								float num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
								if (num13 < 25f)
								{
									flag3 = false;
								}
								else
								{
									if (num13 == float.NaN)
									{
										flag3 = false;
									}
									else
									{
										num13 = 12f / num13;
										num11 *= num13;
										num12 *= num13;
										vector3.X += num11;
										vector3.Y += num12;
										num11 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector3.X;
										num12 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector3.Y;
										Color color4 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
										Main.spriteBatch.Draw(Main.chain9Texture, new Vector2(vector3.X - Main.screenPosition.X, vector3.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain8Texture.Width, Main.chain8Texture.Height)), color4, rotation3, new Vector2((float)Main.chain8Texture.Width * 0.5f, (float)Main.chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
						else
						{
							if (Main.projectile[i].type == 171)
							{
								Vector2 vector4 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
								float num14 = -Main.projectile[i].velocity.X;
								float num15 = -Main.projectile[i].velocity.Y;
								float num16 = 1f;
								if (Main.projectile[i].ai[0] <= 17f)
								{
									num16 = Main.projectile[i].ai[0] / 17f;
								}
								int num17 = (int)(30f * num16);
								float num18 = 1f;
								if (Main.projectile[i].ai[0] <= 30f)
								{
									num18 = Main.projectile[i].ai[0] / 30f;
								}
								float num19 = 0.4f * num18;
								float num20 = num19;
								num15 += num20;
								Vector2[] array = new Vector2[num17];
								float[] array2 = new float[num17];
								for (int j = 0; j < num17; j++)
								{
									float num21 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
									float num22 = 5.6f;
									if (Math.Abs(num14) + Math.Abs(num15) < 1f)
									{
										num22 *= Math.Abs(num14) + Math.Abs(num15) / 1f;
									}
									num21 = num22 / num21;
									num14 *= num21;
									num15 *= num21;
									float num23 = (float)Math.Atan2((double)num15, (double)num14) - 1.57f;
									array[j].X = vector4.X;
									array[j].Y = vector4.Y;
									array2[j] = num23;
									vector4.X += num14;
									vector4.Y += num15;
									num14 = -Main.projectile[i].velocity.X;
									num15 = -Main.projectile[i].velocity.Y;
									num20 += num19;
									num15 += num20;
								}
								for (int k = num17 - 1; k >= 0; k--)
								{
									vector4.X = array[k].X;
									vector4.Y = array[k].Y;
									float rotation4 = array2[k];
									Color color5 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
									Main.spriteBatch.Draw(Main.chain16Texture, new Vector2(vector4.X - Main.screenPosition.X, vector4.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain16Texture.Width, Main.chain16Texture.Height)), color5, rotation4, new Vector2((float)Main.chain16Texture.Width * 0.5f, (float)Main.chain16Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
								}
							}
							else
							{
								if (Main.projectile[i].type == 165)
								{
									Vector2 vector5 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
									float num24 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector5.X;
									float num25 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector5.Y;
									float rotation5 = (float)Math.Atan2((double)num25, (double)num24) - 1.57f;
									bool flag4 = true;
									while (flag4)
									{
										float num26 = (float)Math.Sqrt((double)(num24 * num24 + num25 * num25));
										if (num26 < 25f)
										{
											flag4 = false;
										}
										else
										{
											if (num26 == float.NaN)
											{
												flag4 = false;
											}
											else
											{
												num26 = 24f / num26;
												num24 *= num26;
												num25 *= num26;
												vector5.X += num24;
												vector5.Y += num25;
												num24 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector5.X;
												num25 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector5.Y;
												Color color6 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
												Main.spriteBatch.Draw(Main.chain15Texture, new Vector2(vector5.X - Main.screenPosition.X, vector5.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain15Texture.Width, Main.chain15Texture.Height)), color6, rotation5, new Vector2((float)Main.chain15Texture.Width * 0.5f, (float)Main.chain15Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
											}
										}
									}
								}
								else
								{
									if (Main.projectile[i].type >= 230 && Main.projectile[i].type <= 235)
									{
										int num27 = Main.projectile[i].type - 229;
										Vector2 vector6 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
										float num28 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector6.X;
										float num29 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector6.Y;
										float rotation6 = (float)Math.Atan2((double)num29, (double)num28) - 1.57f;
										bool flag5 = true;
										while (flag5)
										{
											float num30 = (float)Math.Sqrt((double)(num28 * num28 + num29 * num29));
											if (num30 < 25f)
											{
												flag5 = false;
											}
											else
											{
												if (num30 == float.NaN)
												{
													flag5 = false;
												}
												else
												{
													num30 = (float)Main.gemChainTexture[num27].Height / num30;
													num28 *= num30;
													num29 *= num30;
													vector6.X += num28;
													vector6.Y += num29;
													num28 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector6.X;
													num29 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector6.Y;
													Color color7 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
													Main.spriteBatch.Draw(Main.gemChainTexture[num27], new Vector2(vector6.X - Main.screenPosition.X, vector6.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.gemChainTexture[num27].Width, Main.gemChainTexture[num27].Height)), color7, rotation6, new Vector2((float)Main.gemChainTexture[num27].Width * 0.5f, (float)Main.gemChainTexture[num27].Height * 0.5f), 1f, SpriteEffects.None, 0f);
												}
											}
										}
									}
									else
									{
										if (Main.projectile[i].type == 256)
										{
											Vector2 vector7 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
											float num31 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector7.X;
											float num32 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector7.Y;
											float num33 = (float)Math.Atan2((double)num32, (double)num31) - 1.57f;
											bool flag6 = true;
											while (flag6)
											{
												float num34 = (float)Math.Sqrt((double)(num31 * num31 + num32 * num32));
												if (num34 < 26f)
												{
													flag6 = false;
												}
												else
												{
													if (num34 == float.NaN)
													{
														flag6 = false;
													}
													else
													{
														num34 = 26f / num34;
														num31 *= num34;
														num32 *= num34;
														vector7.X += num31;
														vector7.Y += num32;
														num31 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector7.X;
														num32 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector7.Y;
														Color color8 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
														Main.spriteBatch.Draw(Main.chain20Texture, new Vector2(vector7.X - Main.screenPosition.X, vector7.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain20Texture.Width, Main.chain20Texture.Height)), color8, num33 - 0.785f, new Vector2((float)Main.chain20Texture.Width * 0.5f, (float)Main.chain20Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
													}
												}
											}
										}
										else
										{
											if (Main.projectile[i].type == 322)
											{
												Vector2 vector8 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
												float num35 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector8.X;
												float num36 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector8.Y;
												float rotation7 = (float)Math.Atan2((double)num36, (double)num35) - 1.57f;
												bool flag7 = true;
												while (flag7)
												{
													float num37 = (float)Math.Sqrt((double)(num35 * num35 + num36 * num36));
													if (num37 < 22f)
													{
														flag7 = false;
													}
													else
													{
														if (num37 == float.NaN)
														{
															flag7 = false;
														}
														else
														{
															num37 = 22f / num37;
															num35 *= num37;
															num36 *= num37;
															vector8.X += num35;
															vector8.Y += num36;
															num35 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector8.X;
															num36 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector8.Y;
															Color color9 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
															Main.spriteBatch.Draw(Main.chain29Texture, new Vector2(vector8.X - Main.screenPosition.X, vector8.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain29Texture.Width, Main.chain29Texture.Height)), color9, rotation7, new Vector2((float)Main.chain29Texture.Width * 0.5f, (float)Main.chain29Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
														}
													}
												}
											}
											else
											{
												if (Main.projectile[i].type == 315)
												{
													Vector2 vector9 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
													float num38 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector9.X;
													float num39 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector9.Y;
													float rotation8 = (float)Math.Atan2((double)num39, (double)num38) - 1.57f;
													bool flag8 = true;
													while (flag8)
													{
														float num40 = (float)Math.Sqrt((double)(num38 * num38 + num39 * num39));
														if (num40 < 50f)
														{
															flag8 = false;
														}
														else
														{
															if (num40 == float.NaN)
															{
																flag8 = false;
															}
															else
															{
																num40 = 40f / num40;
																num38 *= num40;
																num39 *= num40;
																vector9.X += num38;
																vector9.Y += num39;
																num38 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector9.X;
																num39 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector9.Y;
																Color color10 = Lighting.GetColor((int)vector9.X / 16, (int)(vector9.Y / 16f));
																Main.spriteBatch.Draw(Main.chain28Texture, new Vector2(vector9.X - Main.screenPosition.X, vector9.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain28Texture.Width, Main.chain28Texture.Height)), color10, rotation8, new Vector2((float)Main.chain28Texture.Width * 0.5f, (float)Main.chain28Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
															}
														}
													}
												}
												else
												{
													if (Main.projectile[i].type == 331)
													{
														Vector2 vector10 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
														float num41 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector10.X;
														float num42 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector10.Y;
														float rotation9 = (float)Math.Atan2((double)num42, (double)num41) - 1.57f;
														bool flag9 = true;
														while (flag9)
														{
															float num43 = (float)Math.Sqrt((double)(num41 * num41 + num42 * num42));
															if (num43 < 30f)
															{
																flag9 = false;
															}
															else
															{
																if (num43 == float.NaN)
																{
																	flag9 = false;
																}
																else
																{
																	num43 = 24f / num43;
																	num41 *= num43;
																	num42 *= num43;
																	vector10.X += num41;
																	vector10.Y += num42;
																	num41 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector10.X;
																	num42 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector10.Y;
																	Color color11 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
																	Main.spriteBatch.Draw(Main.chain30Texture, new Vector2(vector10.X - Main.screenPosition.X, vector10.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain30Texture.Width, Main.chain30Texture.Height)), color11, rotation9, new Vector2((float)Main.chain30Texture.Width * 0.5f, (float)Main.chain30Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																}
															}
														}
													}
													else
													{
														if (Main.projectile[i].type == 332)
														{
															int num44 = 0;
															Vector2 vector11 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
															float num45 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector11.X;
															float num46 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector11.Y;
															float rotation10 = (float)Math.Atan2((double)num46, (double)num45) - 1.57f;
															bool flag10 = true;
															while (flag10)
															{
																float num47 = (float)Math.Sqrt((double)(num45 * num45 + num46 * num46));
																if (num47 < 30f)
																{
																	flag10 = false;
																}
																else
																{
																	if (num47 == float.NaN)
																	{
																		flag10 = false;
																	}
																	else
																	{
																		int i2 = (int)vector11.X / 16;
																		int j2 = (int)vector11.Y / 16;
																		if (num44 == 0)
																		{
																			Lighting.addLight(i2, j2, 0f, 0.2f, 0.2f);
																		}
																		if (num44 == 1)
																		{
																			Lighting.addLight(i2, j2, 0.1f, 0.2f, 0f);
																		}
																		if (num44 == 2)
																		{
																			Lighting.addLight(i2, j2, 0.2f, 0.1f, 0f);
																		}
																		if (num44 == 3)
																		{
																			Lighting.addLight(i2, j2, 0.2f, 0f, 0.2f);
																		}
																		num47 = 16f / num47;
																		num45 *= num47;
																		num46 *= num47;
																		vector11.X += num45;
																		vector11.Y += num46;
																		num45 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector11.X;
																		num46 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector11.Y;
																		Color color12 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
																		Main.spriteBatch.Draw(Main.chain31Texture, new Vector2(vector11.X - Main.screenPosition.X, vector11.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, Main.chain31Texture.Height / 4 * num44, Main.chain31Texture.Width, Main.chain31Texture.Height / 4)), color12, rotation10, new Vector2((float)Main.chain30Texture.Width * 0.5f, (float)(Main.chain30Texture.Height / 8)), 1f, SpriteEffects.None, 0f);
																		Main.spriteBatch.Draw(Main.chain32Texture, new Vector2(vector11.X - Main.screenPosition.X, vector11.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, Main.chain31Texture.Height / 4 * num44, Main.chain31Texture.Width, Main.chain31Texture.Height / 4)), new Color(200, 200, 200, 0), rotation10, new Vector2((float)Main.chain30Texture.Width * 0.5f, (float)(Main.chain30Texture.Height / 8)), 1f, SpriteEffects.None, 0f);
																		num44++;
																		if (num44 > 3)
																		{
																			num44 = 0;
																		}
																	}
																}
															}
														}
														else
														{
															if (Main.projectile[i].aiStyle == 7)
															{
																Vector2 vector12 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
																float num48 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector12.X;
																float num49 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector12.Y;
																float rotation11 = (float)Math.Atan2((double)num49, (double)num48) - 1.57f;
																bool flag11 = true;
																while (flag11)
																{
																	float num50 = (float)Math.Sqrt((double)(num48 * num48 + num49 * num49));
																	if (num50 < 25f)
																	{
																		flag11 = false;
																	}
																	else
																	{
																		if (num50 == float.NaN)
																		{
																			flag11 = false;
																		}
																		else
																		{
																			num50 = 12f / num50;
																			num48 *= num50;
																			num49 *= num50;
																			vector12.X += num48;
																			vector12.Y += num49;
																			num48 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector12.X;
																			num49 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector12.Y;
																			Color color13 = Lighting.GetColor((int)vector12.X / 16, (int)(vector12.Y / 16f));
																			Main.spriteBatch.Draw(Main.chainTexture, new Vector2(vector12.X - Main.screenPosition.X, vector12.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chainTexture.Width, Main.chainTexture.Height)), color13, rotation11, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																		}
																	}
																}
															}
															else
															{
																if (Main.projectile[i].type == 262)
																{
																	float num51 = Main.projectile[i].center().X;
																	float num52 = Main.projectile[i].center().Y;
																	float num53 = Main.projectile[i].velocity.X;
																	float num54 = Main.projectile[i].velocity.Y;
																	float num55 = (float)Math.Sqrt((double)(num53 * num53 + num54 * num54));
																	num55 = 4f / num55;
																	if (Main.projectile[i].ai[0] == 0f)
																	{
																		num51 -= Main.projectile[i].velocity.X * num55;
																		num52 -= Main.projectile[i].velocity.Y * num55;
																	}
																	else
																	{
																		num51 += Main.projectile[i].velocity.X * num55;
																		num52 += Main.projectile[i].velocity.Y * num55;
																	}
																	Vector2 vector13 = new Vector2(num51, num52);
																	num53 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector13.X;
																	num54 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector13.Y;
																	float rotation12 = (float)Math.Atan2((double)num54, (double)num53) - 1.57f;
																	if (Main.projectile[i].alpha == 0)
																	{
																		int num56 = -1;
																		if (Main.projectile[i].position.X + (float)(Main.projectile[i].width / 2) < Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2))
																		{
																			num56 = 1;
																		}
																		if (Main.player[Main.projectile[i].owner].direction == 1)
																		{
																			Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num54 * (float)num56), (double)(num53 * (float)num56));
																		}
																		else
																		{
																			Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num54 * (float)num56), (double)(num53 * (float)num56));
																		}
																	}
																	bool flag12 = true;
																	while (flag12)
																	{
																		float num57 = (float)Math.Sqrt((double)(num53 * num53 + num54 * num54));
																		if (num57 < 25f)
																		{
																			flag12 = false;
																		}
																		else
																		{
																			if (num57 == float.NaN)
																			{
																				flag12 = false;
																			}
																			else
																			{
																				num57 = 12f / num57;
																				num53 *= num57;
																				num54 *= num57;
																				vector13.X += num53;
																				vector13.Y += num54;
																				num53 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector13.X;
																				num54 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector13.Y;
																				Color color14 = Lighting.GetColor((int)vector13.X / 16, (int)(vector13.Y / 16f));
																				Main.spriteBatch.Draw(Main.chain22Texture, new Vector2(vector13.X - Main.screenPosition.X, vector13.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain22Texture.Width, Main.chain22Texture.Height)), color14, rotation12, new Vector2((float)Main.chain22Texture.Width * 0.5f, (float)Main.chain22Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																			}
																		}
																	}
																}
																else
																{
																	if (Main.projectile[i].type == 273)
																	{
																		float num58 = Main.projectile[i].center().X;
																		float num59 = Main.projectile[i].center().Y;
																		float num60 = Main.projectile[i].velocity.X;
																		float num61 = Main.projectile[i].velocity.Y;
																		float num62 = (float)Math.Sqrt((double)(num60 * num60 + num61 * num61));
																		num62 = 4f / num62;
																		if (Main.projectile[i].ai[0] == 0f)
																		{
																			num58 -= Main.projectile[i].velocity.X * num62;
																			num59 -= Main.projectile[i].velocity.Y * num62;
																		}
																		else
																		{
																			num58 += Main.projectile[i].velocity.X * num62;
																			num59 += Main.projectile[i].velocity.Y * num62;
																		}
																		Vector2 vector14 = new Vector2(num58, num59);
																		num60 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector14.X;
																		num61 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector14.Y;
																		float rotation13 = (float)Math.Atan2((double)num61, (double)num60) - 1.57f;
																		if (Main.projectile[i].alpha == 0)
																		{
																			int num63 = -1;
																			if (Main.projectile[i].position.X + (float)(Main.projectile[i].width / 2) < Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2))
																			{
																				num63 = 1;
																			}
																			if (Main.player[Main.projectile[i].owner].direction == 1)
																			{
																				Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num61 * (float)num63), (double)(num60 * (float)num63));
																			}
																			else
																			{
																				Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num61 * (float)num63), (double)(num60 * (float)num63));
																			}
																		}
																		bool flag13 = true;
																		while (flag13)
																		{
																			float num64 = (float)Math.Sqrt((double)(num60 * num60 + num61 * num61));
																			if (num64 < 25f)
																			{
																				flag13 = false;
																			}
																			else
																			{
																				if (num64 == float.NaN)
																				{
																					flag13 = false;
																				}
																				else
																				{
																					num64 = 12f / num64;
																					num60 *= num64;
																					num61 *= num64;
																					vector14.X += num60;
																					vector14.Y += num61;
																					num60 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector14.X;
																					num61 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector14.Y;
																					Color color15 = Lighting.GetColor((int)vector14.X / 16, (int)(vector14.Y / 16f));
																					Main.spriteBatch.Draw(Main.chain23Texture, new Vector2(vector14.X - Main.screenPosition.X, vector14.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain23Texture.Width, Main.chain23Texture.Height)), color15, rotation13, new Vector2((float)Main.chain23Texture.Width * 0.5f, (float)Main.chain23Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																				}
																			}
																		}
																	}
																	else
																	{
																		if (Main.projectile[i].type == 271)
																		{
																			float num65 = Main.projectile[i].center().X;
																			float num66 = Main.projectile[i].center().Y;
																			float num67 = Main.projectile[i].velocity.X;
																			float num68 = Main.projectile[i].velocity.Y;
																			float num69 = (float)Math.Sqrt((double)(num67 * num67 + num68 * num68));
																			num69 = 4f / num69;
																			if (Main.projectile[i].ai[0] == 0f)
																			{
																				num65 -= Main.projectile[i].velocity.X * num69;
																				num66 -= Main.projectile[i].velocity.Y * num69;
																			}
																			else
																			{
																				num65 += Main.projectile[i].velocity.X * num69;
																				num66 += Main.projectile[i].velocity.Y * num69;
																			}
																			Vector2 vector15 = new Vector2(num65, num66);
																			num67 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector15.X;
																			num68 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector15.Y;
																			float rotation14 = (float)Math.Atan2((double)num68, (double)num67) - 1.57f;
																			if (Main.projectile[i].alpha == 0)
																			{
																				int num70 = -1;
																				if (Main.projectile[i].position.X + (float)(Main.projectile[i].width / 2) < Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2))
																				{
																					num70 = 1;
																				}
																				if (Main.player[Main.projectile[i].owner].direction == 1)
																				{
																					Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num68 * (float)num70), (double)(num67 * (float)num70));
																				}
																				else
																				{
																					Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num68 * (float)num70), (double)(num67 * (float)num70));
																				}
																			}
																			bool flag14 = true;
																			while (flag14)
																			{
																				float num71 = (float)Math.Sqrt((double)(num67 * num67 + num68 * num68));
																				if (num71 < 25f)
																				{
																					flag14 = false;
																				}
																				else
																				{
																					if (num71 == float.NaN)
																					{
																						flag14 = false;
																					}
																					else
																					{
																						num71 = 12f / num71;
																						num67 *= num71;
																						num68 *= num71;
																						vector15.X += num67;
																						vector15.Y += num68;
																						num67 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector15.X;
																						num68 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector15.Y;
																						Color color16 = Lighting.GetColor((int)vector15.X / 16, (int)(vector15.Y / 16f));
																						Main.spriteBatch.Draw(Main.chain18Texture, new Vector2(vector15.X - Main.screenPosition.X, vector15.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain18Texture.Width, Main.chain18Texture.Height)), color16, rotation14, new Vector2((float)Main.chain18Texture.Width * 0.5f, (float)Main.chain18Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																					}
																				}
																			}
																		}
																		else
																		{
																			if (Main.projectile[i].aiStyle == 13)
																			{
																				float num72 = Main.projectile[i].position.X + 8f;
																				float num73 = Main.projectile[i].position.Y + 2f;
																				float num74 = Main.projectile[i].velocity.X;
																				float num75 = Main.projectile[i].velocity.Y;
																				if (num74 == 0f && num75 == 0f)
																				{
																					num75 = 0.0001f;
																				}
																				float num76 = (float)Math.Sqrt((double)(num74 * num74 + num75 * num75));
																				num76 = 20f / num76;
																				if (Main.projectile[i].ai[0] == 0f)
																				{
																					num72 -= Main.projectile[i].velocity.X * num76;
																					num73 -= Main.projectile[i].velocity.Y * num76;
																				}
																				else
																				{
																					num72 += Main.projectile[i].velocity.X * num76;
																					num73 += Main.projectile[i].velocity.Y * num76;
																				}
																				Vector2 vector16 = new Vector2(num72, num73);
																				num74 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector16.X;
																				num75 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector16.Y;
																				float rotation15 = (float)Math.Atan2((double)num75, (double)num74) - 1.57f;
																				if (Main.projectile[i].alpha == 0)
																				{
																					int num77 = -1;
																					if (Main.projectile[i].position.X + (float)(Main.projectile[i].width / 2) < Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2))
																					{
																						num77 = 1;
																					}
																					if (Main.player[Main.projectile[i].owner].direction == 1)
																					{
																						Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num75 * (float)num77), (double)(num74 * (float)num77));
																					}
																					else
																					{
																						Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num75 * (float)num77), (double)(num74 * (float)num77));
																					}
																				}
																				bool flag15 = true;
																				while (flag15)
																				{
																					float num78 = (float)Math.Sqrt((double)(num74 * num74 + num75 * num75));
																					if (num78 < 25f)
																					{
																						flag15 = false;
																					}
																					else
																					{
																						if (num78 == float.NaN)
																						{
																							flag15 = false;
																						}
																						else
																						{
																							num78 = 12f / num78;
																							num74 *= num78;
																							num75 *= num78;
																							vector16.X += num74;
																							vector16.Y += num75;
																							num74 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector16.X;
																							num75 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector16.Y;
																							Color color17 = Lighting.GetColor((int)vector16.X / 16, (int)(vector16.Y / 16f));
																							Main.spriteBatch.Draw(Main.chainTexture, new Vector2(vector16.X - Main.screenPosition.X, vector16.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chainTexture.Width, Main.chainTexture.Height)), color17, rotation15, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																						}
																					}
																				}
																			}
																			else
																			{
																				if (Main.projectile[i].type == 190)
																				{
																					float x = Main.projectile[i].position.X + (float)(Main.projectile[i].width / 2);
																					float y = Main.projectile[i].position.Y + (float)(Main.projectile[i].height / 2);
																					float num79 = Main.projectile[i].velocity.X;
																					float num80 = Main.projectile[i].velocity.Y;
																					Math.Sqrt((double)(num79 * num79 + num80 * num80));
																					Vector2 vector17 = new Vector2(x, y);
																					num79 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector17.X;
																					num80 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) + Main.player[Main.projectile[i].owner].gfxOffY - vector17.Y;
																					Math.Atan2((double)num80, (double)num79);
																					if (Main.projectile[i].alpha == 0)
																					{
																						int num81 = -1;
																						if (Main.projectile[i].position.X + (float)(Main.projectile[i].width / 2) < Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2))
																						{
																							num81 = 1;
																						}
																						if (Main.player[Main.projectile[i].owner].direction == 1)
																						{
																							Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num80 * (float)num81), (double)(num79 * (float)num81));
																						}
																						else
																						{
																							Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num80 * (float)num81), (double)(num79 * (float)num81));
																						}
																					}
																				}
																				else
																				{
																					if (Main.projectile[i].aiStyle == 15)
																					{
																						Vector2 vector18 = new Vector2(Main.projectile[i].position.X + (float)Main.projectile[i].width * 0.5f, Main.projectile[i].position.Y + (float)Main.projectile[i].height * 0.5f);
																						float num82 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector18.X;
																						float num83 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector18.Y;
																						float rotation16 = (float)Math.Atan2((double)num83, (double)num82) - 1.57f;
																						if (Main.projectile[i].alpha == 0)
																						{
																							int num84 = -1;
																							if (Main.projectile[i].position.X + (float)(Main.projectile[i].width / 2) < Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2))
																							{
																								num84 = 1;
																							}
																							if (Main.player[Main.projectile[i].owner].direction == 1)
																							{
																								Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num83 * (float)num84), (double)(num82 * (float)num84));
																							}
																							else
																							{
																								Main.player[Main.projectile[i].owner].itemRotation = (float)Math.Atan2((double)(num83 * (float)num84), (double)(num82 * (float)num84));
																							}
																						}
																						bool flag16 = true;
																						while (flag16)
																						{
																							float num85 = (float)Math.Sqrt((double)(num82 * num82 + num83 * num83));
																							if (num85 < 25f)
																							{
																								flag16 = false;
																							}
																							else
																							{
																								if (num85 == float.NaN)
																								{
																									flag16 = false;
																								}
																								else
																								{
																									if (Main.projectile[i].type == 154 || Main.projectile[i].type == 247)
																									{
																										num85 = 18f / num85;
																									}
																									else
																									{
																										num85 = 12f / num85;
																									}
																									num82 *= num85;
																									num83 *= num85;
																									vector18.X += num82;
																									vector18.Y += num83;
																									num82 = Main.player[Main.projectile[i].owner].position.X + (float)(Main.player[Main.projectile[i].owner].width / 2) - vector18.X;
																									num83 = Main.player[Main.projectile[i].owner].position.Y + (float)(Main.player[Main.projectile[i].owner].height / 2) - vector18.Y;
																									Color color18 = Lighting.GetColor((int)vector18.X / 16, (int)(vector18.Y / 16f));
																									if (Main.projectile[i].type == 25)
																									{
																										Main.spriteBatch.Draw(Main.chain2Texture, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain2Texture.Width, Main.chain2Texture.Height)), color18, rotation16, new Vector2((float)Main.chain2Texture.Width * 0.5f, (float)Main.chain2Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																									}
																									else
																									{
																										if (Main.projectile[i].type == 35)
																										{
																											Main.spriteBatch.Draw(Main.chain6Texture, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain6Texture.Width, Main.chain6Texture.Height)), color18, rotation16, new Vector2((float)Main.chain6Texture.Width * 0.5f, (float)Main.chain6Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																										}
																										else
																										{
																											if (Main.projectile[i].type == 247)
																											{
																												Main.spriteBatch.Draw(Main.chain19Texture, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain19Texture.Width, Main.chain19Texture.Height)), color18, rotation16, new Vector2((float)Main.chain19Texture.Width * 0.5f, (float)Main.chain19Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																											}
																											else
																											{
																												if (Main.projectile[i].type == 63)
																												{
																													Main.spriteBatch.Draw(Main.chain7Texture, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain7Texture.Width, Main.chain7Texture.Height)), color18, rotation16, new Vector2((float)Main.chain7Texture.Width * 0.5f, (float)Main.chain7Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																												}
																												else
																												{
																													if (Main.projectile[i].type == 154)
																													{
																														Main.spriteBatch.Draw(Main.chain13Texture, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain13Texture.Width, Main.chain13Texture.Height)), color18, rotation16, new Vector2((float)Main.chain13Texture.Width * 0.5f, (float)Main.chain13Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																													}
																													else
																													{
																														Main.spriteBatch.Draw(Main.chain3Texture, new Vector2(vector18.X - Main.screenPosition.X, vector18.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain3Texture.Width, Main.chain3Texture.Height)), color18, rotation16, new Vector2((float)Main.chain3Texture.Width * 0.5f, (float)Main.chain3Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			Color newColor = Lighting.GetColor((int)((double)Main.projectile[i].position.X + (double)Main.projectile[i].width * 0.5) / 16, (int)(((double)Main.projectile[i].position.Y + (double)Main.projectile[i].height * 0.5) / 16.0));
			if (Main.projectile[i].hide)
			{
				newColor = Lighting.GetColor((int)((double)Main.player[Main.projectile[i].owner].position.X + (double)Main.player[Main.projectile[i].owner].width * 0.5) / 16, (int)(((double)Main.player[Main.projectile[i].owner].position.Y + (double)Main.player[Main.projectile[i].owner].height * 0.5) / 16.0));
			}
			if (Main.projectile[i].type == 14)
			{
				newColor = Color.White;
			}
			int num86 = 0;
			int num87 = 0;
			if (Main.projectile[i].type == 175)
			{
				num86 = 10;
			}
			if (Main.projectile[i].type == 346)
			{
				num86 = 4;
			}
			if (Main.projectile[i].type == 331)
			{
				num87 = -4;
			}
			if (Main.projectile[i].type == 254)
			{
				num86 = 3;
			}
			if (Main.projectile[i].type == 273)
			{
				num87 = 2;
			}
			if (Main.projectile[i].type == 335)
			{
				num86 = 6;
			}
			if (Main.projectile[i].type == 162)
			{
				num86 = 1;
				num87 = 1;
			}
			if (Main.projectile[i].type == 353)
			{
				num86 = 36;
				num87 = -12;
			}
			if (Main.projectile[i].type == 324)
			{
				num86 = 22;
				num87 = -6;
			}
			if (Main.projectile[i].type == 266)
			{
				num86 = 10;
				num87 = -10;
			}
			if (Main.projectile[i].type == 319)
			{
				num86 = 10;
				num87 = -12;
			}
			if (Main.projectile[i].type == 315)
			{
				num86 = -13;
				num87 = -6;
			}
			if (Main.projectile[i].type == 313 && Main.projectile[i].height != 54)
			{
				num87 = -12;
				num86 = 20;
			}
			if (Main.projectile[i].type == 314)
			{
				num87 = -8;
				num86 = 0;
			}
			if (Main.projectile[i].type == 269)
			{
				num86 = 18;
				num87 = -14;
			}
			if (Main.projectile[i].type == 268)
			{
				num86 = 22;
				num87 = -2;
			}
			if (Main.projectile[i].type == 18)
			{
				num86 = 3;
				num87 = 3;
			}
			if (Main.projectile[i].type == 16)
			{
				num86 = 6;
			}
			if (Main.projectile[i].type == 17 || Main.projectile[i].type == 31)
			{
				num86 = 2;
			}
			if (Main.projectile[i].type == 25 || Main.projectile[i].type == 26 || Main.projectile[i].type == 35 || Main.projectile[i].type == 63 || Main.projectile[i].type == 154)
			{
				num86 = 6;
				num87 -= 6;
			}
			if (Main.projectile[i].type == 28 || Main.projectile[i].type == 37 || Main.projectile[i].type == 75)
			{
				num86 = 8;
			}
			if (Main.projectile[i].type == 29)
			{
				num86 = 11;
			}
			if (Main.projectile[i].type == 43)
			{
				num86 = 4;
			}
			if (Main.projectile[i].type == 208)
			{
				num86 = 2;
				num87 -= 12;
			}
			if (Main.projectile[i].type == 209)
			{
				num86 = 4;
				num87 -= 8;
			}
			if (Main.projectile[i].type == 210)
			{
				num86 = 2;
				num87 -= 22;
			}
			if (Main.projectile[i].type == 251)
			{
				num86 = 18;
				num87 -= 10;
			}
			if (Main.projectile[i].type == 163 || Main.projectile[i].type == 310)
			{
				num86 = 10;
			}
			if (Main.projectile[i].type == 69 || Main.projectile[i].type == 70)
			{
				num86 = 4;
				num87 = 4;
			}
			float num88 = (float)(Main.projectileTexture[Main.projectile[i].type].Width - Main.projectile[i].width) * 0.5f + (float)Main.projectile[i].width * 0.5f;
			if (Main.projectile[i].type == 50 || Main.projectile[i].type == 53)
			{
				num87 = -8;
			}
			if (Main.projectile[i].type == 72 || Main.projectile[i].type == 86 || Main.projectile[i].type == 87)
			{
				num87 = -16;
				num86 = 8;
			}
			if (Main.projectile[i].type == 74)
			{
				num87 = -6;
			}
			if (Main.projectile[i].type == 99)
			{
				num86 = 1;
			}
			if (Main.projectile[i].type == 111)
			{
				num86 = 18;
				num87 = -16;
			}
			if (Main.projectile[i].type == 334)
			{
				num87 = -18;
				num86 = 8;
			}
			if (Main.projectile[i].type == 200)
			{
				num86 = 12;
				num87 = -12;
			}
			if (Main.projectile[i].type == 211)
			{
				num86 = 14;
				num87 = 0;
			}
			if (Main.projectile[i].type == 236)
			{
				num86 = 30;
				num87 = -14;
			}
			if (Main.projectile[i].type >= 191 && Main.projectile[i].type <= 194)
			{
				num86 = 26;
				if (Main.projectile[i].direction == 1)
				{
					num87 = -10;
				}
				else
				{
					num87 = -22;
				}
			}
			if (Main.projectile[i].type == 112)
			{
				num86 = 12;
			}
			int arg_44A4_0 = Main.projectile[i].type;
			if (Main.projectile[i].type == 127)
			{
				num86 = 8;
			}
			if (Main.projectile[i].type == 155)
			{
				num86 = 3;
				num87 = 3;
			}
			SpriteEffects effects = SpriteEffects.None;
			if (Main.projectile[i].spriteDirection == -1)
			{
				effects = SpriteEffects.FlipHorizontally;
			}
			if (Main.projectile[i].type == 221)
			{
				for (int l = 1; l < 10; l++)
				{
					float num89 = Main.projectile[i].velocity.X * (float)l * 0.5f;
					float num90 = Main.projectile[i].velocity.Y * (float)l * 0.5f;
					Color alpha = Main.projectile[i].GetAlpha(newColor);
					float num91 = 0f;
					if (l == 1)
					{
						num91 = 0.9f;
					}
					if (l == 2)
					{
						num91 = 0.8f;
					}
					if (l == 3)
					{
						num91 = 0.7f;
					}
					if (l == 4)
					{
						num91 = 0.6f;
					}
					if (l == 5)
					{
						num91 = 0.5f;
					}
					if (l == 6)
					{
						num91 = 0.4f;
					}
					if (l == 7)
					{
						num91 = 0.3f;
					}
					if (l == 8)
					{
						num91 = 0.2f;
					}
					if (l == 9)
					{
						num91 = 0.1f;
					}
					alpha.R = (byte)((float)alpha.R * num91);
					alpha.G = (byte)((float)alpha.G * num91);
					alpha.B = (byte)((float)alpha.B * num91);
					alpha.A = (byte)((float)alpha.A * num91);
					int num92 = Main.projectileTexture[Main.projectile[i].type].Height / Main.projFrames[Main.projectile[i].type];
					int y2 = num92 * Main.projectile[i].frame;
					Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + num88 + (float)num87 - num89, Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY - num90), new Rectangle?(new Rectangle(0, y2, Main.projectileTexture[Main.projectile[i].type].Width, num92)), alpha, Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), Main.projectile[i].scale, effects, 0f);
				}
			}
			if (Main.projFrames[Main.projectile[i].type] > 1)
			{
				int num93 = Main.projectileTexture[Main.projectile[i].type].Height / Main.projFrames[Main.projectile[i].type];
				int y3 = num93 * Main.projectile[i].frame;
				if (Main.projectile[i].type == 111)
				{
					int r = (int)Main.player[Main.projectile[i].owner].shirtColor.R;
					int g = (int)Main.player[Main.projectile[i].owner].shirtColor.G;
					int num94 = (int)Main.player[Main.projectile[i].owner].shirtColor.B;
					Color oldColor = new Color((int)((byte)r), (int)((byte)g), (int)((byte)num94));
					newColor = Lighting.GetColor((int)((double)Main.projectile[i].position.X + (double)Main.projectile[i].width * 0.5) / 16, (int)(((double)Main.projectile[i].position.Y + (double)Main.projectile[i].height * 0.5) / 16.0), oldColor);
					Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + num88 + (float)num87, Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY), new Rectangle?(new Rectangle(0, y3, Main.projectileTexture[Main.projectile[i].type].Width, num93)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), Main.projectile[i].scale, effects, 0f);
					return;
				}
				Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + num88 + (float)num87, Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY), new Rectangle?(new Rectangle(0, y3, Main.projectileTexture[Main.projectile[i].type].Width, num93)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), Main.projectile[i].scale, effects, 0f);
				return;
			}
			else
			{
				if (Main.projectile[i].type == 157)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + (float)(Main.projectile[i].width / 2), Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2)), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, new Vector2((float)(Main.projectileTexture[Main.projectile[i].type].Width / 2), (float)(Main.projectileTexture[Main.projectile[i].type].Height / 2)), Main.projectile[i].scale, effects, 0f);
					return;
				}
				if (Main.projectile[i].type == 306)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + (float)(Main.projectile[i].width / 2), Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2)), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, new Vector2((float)(Main.projectileTexture[Main.projectile[i].type].Width / 2), (float)(Main.projectileTexture[Main.projectile[i].type].Height / 2)), Main.projectile[i].scale, effects, 0f);
					return;
				}
				if (Main.projectile[i].type == 256)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + (float)(Main.projectile[i].width / 2), Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2)), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, new Vector2((float)(Main.projectileTexture[Main.projectile[i].type].Width / 2), (float)(Main.projectileTexture[Main.projectile[i].type].Height / 2)), Main.projectile[i].scale, effects, 0f);
					return;
				}
				if (Main.projectile[i].aiStyle == 27)
				{
					Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + (float)(Main.projectile[i].width / 2), Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2)), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, new Vector2((float)Main.projectileTexture[Main.projectile[i].type].Width, 0f), Main.projectile[i].scale, effects, 0f);
					return;
				}
				if (Main.projectile[i].aiStyle == 19)
				{
					Vector2 origin = new Vector2(0f, 0f);
					if (Main.projectile[i].spriteDirection == -1)
					{
						origin.X = (float)Main.projectileTexture[Main.projectile[i].type].Width;
					}
					Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + (float)(Main.projectile[i].width / 2), Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, origin, Main.projectile[i].scale, effects, 0f);
					return;
				}
				if (Main.projectile[i].type == 94 && Main.projectile[i].ai[1] > 6f)
				{
					for (int m = 0; m < 10; m++)
					{
						Color alpha2 = Main.projectile[i].GetAlpha(newColor);
						float num95 = (float)(9 - m) / 9f;
						alpha2.R = (byte)((float)alpha2.R * num95);
						alpha2.G = (byte)((float)alpha2.G * num95);
						alpha2.B = (byte)((float)alpha2.B * num95);
						alpha2.A = (byte)((float)alpha2.A * num95);
						float num96 = (float)(9 - m) / 9f;
						Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].oldPos[m].X - Main.screenPosition.X + num88 + (float)num87, Main.projectile[i].oldPos[m].Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), alpha2, Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), num96 * Main.projectile[i].scale, effects, 0f);
					}
				}
				if (Main.projectile[i].type == 301)
				{
					for (int n = 0; n < 10; n++)
					{
						Color alpha3 = Main.projectile[i].GetAlpha(newColor);
						float num97 = (float)(9 - n) / 9f;
						alpha3.R = (byte)((float)alpha3.R * num97);
						alpha3.G = (byte)((float)alpha3.G * num97);
						alpha3.B = (byte)((float)alpha3.B * num97);
						alpha3.A = (byte)((float)alpha3.A * num97);
						float num98 = (float)(9 - n) / 9f;
						Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].oldPos[n].X - Main.screenPosition.X + num88 + (float)num87, Main.projectile[i].oldPos[n].Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), alpha3, Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), num98 * Main.projectile[i].scale, effects, 0f);
					}
				}
				if (Main.projectile[i].type == 323 && Main.projectile[i].alpha == 0)
				{
					for (int num99 = 1; num99 < 8; num99++)
					{
						float num100 = Main.projectile[i].velocity.X * (float)num99;
						float num101 = Main.projectile[i].velocity.Y * (float)num99;
						Color alpha4 = Main.projectile[i].GetAlpha(newColor);
						float num102 = 0f;
						if (num99 == 1)
						{
							num102 = 0.7f;
						}
						if (num99 == 2)
						{
							num102 = 0.6f;
						}
						if (num99 == 3)
						{
							num102 = 0.5f;
						}
						if (num99 == 4)
						{
							num102 = 0.4f;
						}
						if (num99 == 5)
						{
							num102 = 0.3f;
						}
						if (num99 == 6)
						{
							num102 = 0.2f;
						}
						if (num99 == 7)
						{
							num102 = 0.1f;
						}
						alpha4.R = (byte)((float)alpha4.R * num102);
						alpha4.G = (byte)((float)alpha4.G * num102);
						alpha4.B = (byte)((float)alpha4.B * num102);
						alpha4.A = (byte)((float)alpha4.A * num102);
						Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + num88 + (float)num87 - num100, Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY - num101), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), alpha4, Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), num102 + 0.2f, effects, 0f);
					}
				}
				if (Main.projectile[i].type == 117 && Main.projectile[i].ai[0] > 3f)
				{
					for (int num103 = 1; num103 < 5; num103++)
					{
						float num104 = Main.projectile[i].velocity.X * (float)num103;
						float num105 = Main.projectile[i].velocity.Y * (float)num103;
						Color alpha5 = Main.projectile[i].GetAlpha(newColor);
						float num106 = 0f;
						if (num103 == 1)
						{
							num106 = 0.4f;
						}
						if (num103 == 2)
						{
							num106 = 0.3f;
						}
						if (num103 == 3)
						{
							num106 = 0.2f;
						}
						if (num103 == 4)
						{
							num106 = 0.1f;
						}
						alpha5.R = (byte)((float)alpha5.R * num106);
						alpha5.G = (byte)((float)alpha5.G * num106);
						alpha5.B = (byte)((float)alpha5.B * num106);
						alpha5.A = (byte)((float)alpha5.A * num106);
						Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + num88 + (float)num87 - num104, Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY - num105), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), alpha5, Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), Main.projectile[i].scale, effects, 0f);
					}
				}
				Main.spriteBatch.Draw(Main.projectileTexture[Main.projectile[i].type], new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + num88 + (float)num87, Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2) + Main.projectile[i].gfxOffY), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), Main.projectile[i].GetAlpha(newColor), Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), Main.projectile[i].scale, effects, 0f);
				if (Main.projectile[i].type == 106)
				{
					Main.spriteBatch.Draw(Main.lightDiscTexture, new Vector2(Main.projectile[i].position.X - Main.screenPosition.X + num88 + (float)num87, Main.projectile[i].position.Y - Main.screenPosition.Y + (float)(Main.projectile[i].height / 2)), new Rectangle?(new Rectangle(0, 0, Main.projectileTexture[Main.projectile[i].type].Width, Main.projectileTexture[Main.projectile[i].type].Height)), new Color(200, 200, 200, 0), Main.projectile[i].rotation, new Vector2(num88, (float)(Main.projectile[i].height / 2 + num86)), Main.projectile[i].scale, effects, 0f);
				}
				return;
			}
		}
		private static Color buffColor(Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)newColor.R * R);
			newColor.G = (byte)((float)newColor.G * G);
			newColor.B = (byte)((float)newColor.B * B);
			newColor.A = (byte)((float)newColor.A * A);
			return newColor;
		}
		protected void DrawWoF()
		{
			if (Main.wof >= 0 && Main.player[Main.myPlayer].gross)
			{
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].tongued && !Main.player[i].dead)
					{
						float num = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
						float num2 = Main.npc[Main.wof].position.Y + (float)(Main.npc[Main.wof].height / 2);
						Vector2 vector = new Vector2(Main.player[i].position.X + (float)Main.player[i].width * 0.5f, Main.player[i].position.Y + (float)Main.player[i].height * 0.5f);
						float num3 = num - vector.X;
						float num4 = num2 - vector.Y;
						float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
						bool flag = true;
						while (flag)
						{
							float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
							if (num5 < 40f)
							{
								flag = false;
							}
							else
							{
								num5 = (float)Main.chain12Texture.Height / num5;
								num3 *= num5;
								num4 *= num5;
								vector.X += num3;
								vector.Y += num4;
								num3 = num - vector.X;
								num4 = num2 - vector.Y;
								Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
								Main.spriteBatch.Draw(Main.chain12Texture, new Vector2(vector.X - Main.screenPosition.X, vector.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain12Texture.Width, Main.chain12Texture.Height)), color, rotation, new Vector2((float)Main.chain12Texture.Width * 0.5f, (float)Main.chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].aiStyle == 29)
					{
						float num6 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
						float num7 = Main.npc[Main.wof].position.Y;
						float num8 = (float)(Main.wofB - Main.wofT);
						bool flag2 = false;
						if (Main.npc[j].frameCounter > 7.0)
						{
							flag2 = true;
						}
						num7 = (float)Main.wofT + num8 * Main.npc[j].ai[0];
						Vector2 vector2 = new Vector2(Main.npc[j].position.X + (float)(Main.npc[j].width / 2), Main.npc[j].position.Y + (float)(Main.npc[j].height / 2));
						float num9 = num6 - vector2.X;
						float num10 = num7 - vector2.Y;
						float rotation2 = (float)Math.Atan2((double)num10, (double)num9) - 1.57f;
						bool flag3 = true;
						while (flag3)
						{
							SpriteEffects effects = SpriteEffects.None;
							if (flag2)
							{
								effects = SpriteEffects.FlipHorizontally;
								flag2 = false;
							}
							else
							{
								flag2 = true;
							}
							int height = 28;
							float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
							if (num11 < 40f)
							{
								height = (int)num11 - 40 + 28;
								flag3 = false;
							}
							num11 = 28f / num11;
							num9 *= num11;
							num10 *= num11;
							vector2.X += num9;
							vector2.Y += num10;
							num9 = num6 - vector2.X;
							num10 = num7 - vector2.Y;
							Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
							Main.spriteBatch.Draw(Main.chain12Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, 0, Main.chain4Texture.Width, height)), color2, rotation2, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, effects, 0f);
						}
					}
				}
				int num12 = 140;
				float num13 = (float)Main.wofT;
				float num14 = (float)Main.wofB;
				num14 = Main.screenPosition.Y + (float)Main.screenHeight;
				float num15 = (float)((int)((num13 - Main.screenPosition.Y) / (float)num12) + 1);
				num15 *= (float)num12;
				if (num15 > 0f)
				{
					num13 -= num15;
				}
				float num16 = num13;
				float num17 = Main.npc[Main.wof].position.X;
				float num18 = num14 - num13;
				bool flag4 = true;
				SpriteEffects effects2 = SpriteEffects.None;
				if (Main.npc[Main.wof].spriteDirection == 1)
				{
					effects2 = SpriteEffects.FlipHorizontally;
				}
				if (Main.npc[Main.wof].direction > 0)
				{
					num17 -= 80f;
				}
				int num19 = 0;
				if (!Main.gamePaused)
				{
					Main.wofF++;
				}
				if (Main.wofF > 12)
				{
					num19 = 280;
					if (Main.wofF > 17)
					{
						Main.wofF = 0;
					}
				}
				else
				{
					if (Main.wofF > 6)
					{
						num19 = 140;
					}
				}
				while (flag4)
				{
					num18 = num14 - num16;
					if (num18 > (float)num12)
					{
						num18 = (float)num12;
					}
					bool flag5 = true;
					int num20 = 0;
					while (flag5)
					{
						int x = (int)(num17 + (float)(Main.wofTexture.Width / 2)) / 16;
						int y = (int)(num16 + (float)num20) / 16;
						Main.spriteBatch.Draw(Main.wofTexture, new Vector2(num17 - Main.screenPosition.X, num16 + (float)num20 - Main.screenPosition.Y), new Rectangle?(new Rectangle(0, num19 + num20, Main.wofTexture.Width, 16)), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, effects2, 0f);
						num20 += 16;
						if ((float)num20 >= num18)
						{
							flag5 = false;
						}
					}
					num16 += (float)num12;
					if (num16 >= num14)
					{
						flag4 = false;
					}
				}
			}
		}
		protected void DrawGhost(Player drawPlayer)
		{
			SpriteEffects effects;
			if (drawPlayer.direction == 1)
			{
				effects = SpriteEffects.None;
			}
			else
			{
				effects = SpriteEffects.FlipHorizontally;
			}
			Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16, new Color((int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100), (int)(Main.mouseTextColor / 2 + 100))));
			Rectangle value = new Rectangle(0, Main.ghostTexture.Height / 4 * drawPlayer.ghostFrame, Main.ghostTexture.Width, Main.ghostTexture.Height / 4);
			Vector2 origin = new Vector2((float)value.Width * 0.5f, (float)value.Height * 0.5f);
			Main.spriteBatch.Draw(Main.ghostTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(value.Width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(value.Height / 2)))), new Rectangle?(value), immuneAlpha, 0f, origin, 1f, effects, 0f);
		}
		protected Vector2 DrawPlayerItemPos(Player drawPlayer)
		{
			float num = 10f;
			Vector2 result = new Vector2((float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width / 2), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 95)
			{
				num = 6f;
				result.Y += 2f * drawPlayer.gravDir;
			}
			else
			{
				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1295)
				{
					num = 4f;
				}
				else
				{
					if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1255)
					{
						num = 6f;
						result.Y += 0f * drawPlayer.gravDir;
					}
					else
					{
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 2269)
						{
							num = 2f;
							result.Y += 2f * drawPlayer.gravDir;
						}
						else
						{
							if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1265)
							{
								num = -8f;
								result.Y += 4f * drawPlayer.gravDir;
							}
							else
							{
								if (drawPlayer.inventory[drawPlayer.selectedItem].type == 2272)
								{
									num = 0f;
									result.Y += 4f * drawPlayer.gravDir;
								}
								else
								{
									if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1835)
									{
										num = -2f;
										result.Y += 2f * drawPlayer.gravDir;
									}
									else
									{
										if (drawPlayer.inventory[drawPlayer.selectedItem].type == 2223)
										{
											num = 2f;
											result.Y -= 2f * drawPlayer.gravDir;
										}
										else
										{
											if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1782)
											{
												num = 0f;
												result.Y += 4f * drawPlayer.gravDir;
											}
											else
											{
												if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1929)
												{
													num = 0f;
													result.Y += 2f * drawPlayer.gravDir;
												}
												else
												{
													if (drawPlayer.inventory[drawPlayer.selectedItem].type == 2270)
													{
														num = -4f;
													}
													else
													{
														if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1784)
														{
															num = 0f;
															result.Y += 4f * drawPlayer.gravDir;
														}
														else
														{
															if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1000)
															{
																num = 6f;
																result.Y += 0f * drawPlayer.gravDir;
															}
															else
															{
																if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178)
																{
																	num = 4f;
																	result.Y += 0f * drawPlayer.gravDir;
																}
																else
																{
																	if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1319)
																	{
																		num = 0f;
																		result.Y += 0f * drawPlayer.gravDir;
																	}
																	else
																	{
																		if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1297)
																		{
																			num = -8f;
																			result.Y += 0f * drawPlayer.gravDir;
																		}
																		else
																		{
																			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1121)
																			{
																				num = 6f;
																				result.Y -= 2f * drawPlayer.gravDir;
																			}
																			else
																			{
																				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1314)
																				{
																					num = 2f;
																				}
																				else
																				{
																					if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1258)
																					{
																						num = 2f;
																						result.Y -= 2f * drawPlayer.gravDir;
																					}
																					else
																					{
																						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1155)
																						{
																							num = -10f;
																							result.Y -= 2f * drawPlayer.gravDir;
																						}
																						else
																						{
																							if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1156)
																							{
																								num = -2f;
																							}
																							else
																							{
																								if (drawPlayer.inventory[drawPlayer.selectedItem].type == 96)
																								{
																									num = -8f;
																									result.Y += 2f * drawPlayer.gravDir;
																								}
																								else
																								{
																									if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1870)
																									{
																										num = -8f;
																										result.Y += 2f * drawPlayer.gravDir;
																									}
																									else
																									{
																										if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1260)
																										{
																											num = -8f;
																											result.Y += 2f * drawPlayer.gravDir;
																										}
																										else
																										{
																											if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1254)
																											{
																												num = -6f;
																												result.Y += 2f * drawPlayer.gravDir;
																											}
																											else
																											{
																												if (drawPlayer.inventory[drawPlayer.selectedItem].type == 98)
																												{
																													num = -5f;
																													result.Y -= 2f * drawPlayer.gravDir;
																												}
																												else
																												{
																													if (drawPlayer.inventory[drawPlayer.selectedItem].type == 534)
																													{
																														num = -2f;
																														result.Y += 1f * drawPlayer.gravDir;
																													}
																													else
																													{
																														if (drawPlayer.inventory[drawPlayer.selectedItem].type == 679)
																														{
																															num = 0f;
																															result.Y += 2f * drawPlayer.gravDir;
																														}
																														else
																														{
																															if (drawPlayer.inventory[drawPlayer.selectedItem].type == 964)
																															{
																																num = 0f;
																																result.Y += 0f * drawPlayer.gravDir;
																															}
																															else
																															{
																																if (drawPlayer.inventory[drawPlayer.selectedItem].type == 533)
																																{
																																	num = -7f;
																																	result.Y -= 2f * drawPlayer.gravDir;
																																}
																																else
																																{
																																	if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1553)
																																	{
																																		num = -10f;
																																		result.Y -= 2f * drawPlayer.gravDir;
																																	}
																																	else
																																	{
																																		if (drawPlayer.inventory[drawPlayer.selectedItem].type == 506)
																																		{
																																			num = 0f;
																																			result.Y -= 2f * drawPlayer.gravDir;
																																		}
																																		else
																																		{
																																			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1910)
																																			{
																																				num = 0f;
																																				result.Y -= 2f * drawPlayer.gravDir;
																																			}
																																			else
																																			{
																																				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 494 || drawPlayer.inventory[drawPlayer.selectedItem].type == 508)
																																				{
																																					num = -2f;
																																				}
																																				else
																																				{
																																					if (drawPlayer.inventory[drawPlayer.selectedItem].type == 434)
																																					{
																																						num = 0f;
																																						result.Y -= 2f * drawPlayer.gravDir;
																																					}
																																					else
																																					{
																																						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 514)
																																						{
																																							num = 0f;
																																							result.Y += 3f * drawPlayer.gravDir;
																																						}
																																						else
																																						{
																																							if (drawPlayer.inventory[drawPlayer.selectedItem].type == 435 || drawPlayer.inventory[drawPlayer.selectedItem].type == 436 || drawPlayer.inventory[drawPlayer.selectedItem].type == 481 || drawPlayer.inventory[drawPlayer.selectedItem].type == 578 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1187 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1194 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1201 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1229)
																																							{
																																								num = -2f;
																																								result.Y -= 2f * drawPlayer.gravDir;
																																							}
																																							else
																																							{
																																								if (drawPlayer.inventory[drawPlayer.selectedItem].type == 197)
																																								{
																																									num = -5f;
																																									result.Y += 4f * drawPlayer.gravDir;
																																								}
																																								else
																																								{
																																									if (drawPlayer.inventory[drawPlayer.selectedItem].type == 126)
																																									{
																																										num = 4f;
																																										result.Y += 4f * drawPlayer.gravDir;
																																									}
																																									else
																																									{
																																										if (drawPlayer.inventory[drawPlayer.selectedItem].type == 800)
																																										{
																																											num = 4f;
																																											result.Y += 2f * drawPlayer.gravDir;
																																										}
																																										else
																																										{
																																											if (drawPlayer.inventory[drawPlayer.selectedItem].type == 127)
																																											{
																																												num = 4f;
																																												result.Y += 2f * drawPlayer.gravDir;
																																											}
																																											else
																																											{
																																												if (drawPlayer.inventory[drawPlayer.selectedItem].type == 157)
																																												{
																																													num = 6f;
																																													result.Y += 2f * drawPlayer.gravDir;
																																												}
																																												else
																																												{
																																													if (drawPlayer.inventory[drawPlayer.selectedItem].type == 160)
																																													{
																																														num = -8f;
																																													}
																																													else
																																													{
																																														if (drawPlayer.inventory[drawPlayer.selectedItem].type == 164 || drawPlayer.inventory[drawPlayer.selectedItem].type == 219)
																																														{
																																															num = 0f;
																																															result.Y += 2f * drawPlayer.gravDir;
																																														}
																																														else
																																														{
																																															if (drawPlayer.inventory[drawPlayer.selectedItem].type == 165 || drawPlayer.inventory[drawPlayer.selectedItem].type == 272)
																																															{
																																																num = 4f;
																																																result.Y += 4f * drawPlayer.gravDir;
																																															}
																																															else
																																															{
																																																if (drawPlayer.inventory[drawPlayer.selectedItem].type == 266)
																																																{
																																																	num = 0f;
																																																	result.Y += 2f * drawPlayer.gravDir;
																																																}
																																																else
																																																{
																																																	if (drawPlayer.inventory[drawPlayer.selectedItem].type == 281)
																																																	{
																																																		num = 6f;
																																																		result.Y -= 6f * drawPlayer.gravDir;
																																																	}
																																																	else
																																																	{
																																																		if (drawPlayer.inventory[drawPlayer.selectedItem].type == 986)
																																																		{
																																																			num = 6f;
																																																			result.Y -= 10f * drawPlayer.gravDir;
																																																		}
																																																		else
																																																		{
																																																			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 682)
																																																			{
																																																				num = 4f;
																																																			}
																																																			else
																																																			{
																																																				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 758)
																																																				{
																																																					num -= 20f;
																																																					result.Y += 0f * drawPlayer.gravDir;
																																																				}
																																																				else
																																																				{
																																																					if (drawPlayer.inventory[drawPlayer.selectedItem].type == 759)
																																																					{
																																																						num -= 18f;
																																																						result.Y += 2f * drawPlayer.gravDir;
																																																					}
																																																					else
																																																					{
																																																						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 760)
																																																						{
																																																							num -= 12f;
																																																							result.Y += 2f * drawPlayer.gravDir;
																																																						}
																																																						else
																																																						{
																																																							if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1946)
																																																							{
																																																								num -= 12f;
																																																								result.Y += 2f * drawPlayer.gravDir;
																																																							}
																																																							else
																																																							{
																																																								if (drawPlayer.inventory[drawPlayer.selectedItem].type == 779)
																																																								{
																																																									num = 0f;
																																																									result.Y += 2f * drawPlayer.gravDir;
																																																								}
																																																								else
																																																								{
																																																									if (drawPlayer.inventory[drawPlayer.selectedItem].type == 905)
																																																									{
																																																										num = -5f;
																																																										result.Y += 0f * drawPlayer.gravDir;
																																																									}
																																																									else
																																																									{
																																																										if (drawPlayer.inventory[drawPlayer.selectedItem].type == 930)
																																																										{
																																																											num = 4f;
																																																											result.Y += 2f * drawPlayer.gravDir;
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			result.X = num;
			return result;
		}
		protected Color quickAlpha(Color oldColor, float Alpha)
		{
			Color result = oldColor;
			result.R = (byte)((float)result.R * Alpha);
			result.G = (byte)((float)result.G * Alpha);
			result.B = (byte)((float)result.B * Alpha);
			result.A = (byte)((float)result.A * Alpha);
			return result;
		}
		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
		{
			int num = 0;
			int num2 = 0;
			for (int i = 0; i < 16; i++)
			{
				int num3 = i % 8;
				if (drawPlayer.dye[num3] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 8)
				{
					num2 = (int)drawPlayer.dye[num3].dye;
				}
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 8)
			{
				this.LoadAccFace((int)drawPlayer.face);
			}
			if (drawPlayer.dye[0] != null)
			{
				num = (int)drawPlayer.dye[0].dye;
			}
			int num4 = 0;
			switch (drawPlayer.team)
			{
			case 1:
				num4 = 1;
				break;
			case 2:
				num4 = 5;
				break;
			case 3:
				num4 = 9;
				break;
			case 4:
				num4 = 3;
				break;
			}
			if (num == 65)
			{
				num = num4;
			}
			if (num2 == 65)
			{
				num2 = num4;
			}
			this.LoadHair(drawPlayer.hair);
			Color color = this.quickAlpha(Color.White, Alpha);
			Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
			Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
			Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
			Color color5 = this.quickAlpha(Color.White, Alpha);
			SpriteEffects effects = SpriteEffects.None;
			if (drawPlayer.direction < 0)
			{
				effects = SpriteEffects.FlipHorizontally;
			}
			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
			Vector2 position = drawPlayer.position;
			Rectangle bodyFrame = drawPlayer.bodyFrame;
			drawPlayer.bodyFrame.Y = 0;
			drawPlayer.position = Main.screenPosition;
			drawPlayer.position.X = drawPlayer.position.X + X;
			drawPlayer.position.Y = drawPlayer.position.Y + Y;
			drawPlayer.position.X = drawPlayer.position.X - 6f;
			drawPlayer.position.Y = drawPlayer.position.Y - 4f;
			float num5 = 0f;
			if (drawPlayer.mount == 1)
			{
				num5 = 22f;
			}
			drawPlayer.position.Y = drawPlayer.position.Y - num5;
			if (drawPlayer.head > 0 && drawPlayer.head < 160)
			{
				this.LoadArmorHead(drawPlayer.head);
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 8)
			{
				this.LoadAccFace((int)drawPlayer.face);
			}
			if (drawPlayer.head != 38 && drawPlayer.head != 135)
			{
				Main.spriteBatch.Draw(Main.playerHeadTexture, new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, effects, 0f);
				Main.spriteBatch.Draw(Main.playerEyeWhitesTexture, new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, effects, 0f);
				Main.spriteBatch.Draw(Main.playerEyesTexture, new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, effects, 0f);
			}
			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139)
			{
				Main.pixelShader.CurrentTechnique.Passes[num].Apply();
				Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				if (!drawPlayer.invis)
				{
					Rectangle bodyFrame2 = drawPlayer.bodyFrame;
					bodyFrame2.Y -= 336;
					if (bodyFrame2.Y < 0)
					{
						bodyFrame2.Y = 0;
					}
					Main.spriteBatch.Draw(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(bodyFrame2), color3, drawPlayer.headRotation, vector, Scale, effects, 0f);
				}
			}
			if (drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159)
			{
				Rectangle bodyFrame3 = drawPlayer.bodyFrame;
				bodyFrame3.Y -= 336;
				if (bodyFrame3.Y < 0)
				{
					bodyFrame3.Y = 0;
				}
				if (!drawPlayer.invis)
				{
					Main.spriteBatch.Draw(Main.playerHairAltTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(bodyFrame3), color3, drawPlayer.headRotation, vector, Scale, effects, 0f);
				}
			}
			if (drawPlayer.head == 23)
			{
				Rectangle bodyFrame4 = drawPlayer.bodyFrame;
				bodyFrame4.Y -= 336;
				if (bodyFrame4.Y < 0)
				{
					bodyFrame4.Y = 0;
				}
				if (!drawPlayer.invis)
				{
					Main.spriteBatch.Draw(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(bodyFrame4), color3, drawPlayer.headRotation, vector, Scale, effects, 0f);
				}
				Main.pixelShader.CurrentTechnique.Passes[num].Apply();
				Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else
			{
				if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 158)
				{
					Rectangle bodyFrame5 = drawPlayer.bodyFrame;
					if (drawPlayer.head == 158)
					{
						bodyFrame5.Height -= 2;
					}
					int num6 = 0;
					if (bodyFrame5.Y == bodyFrame5.Height * 6)
					{
						bodyFrame5.Height -= 2;
					}
					else
					{
						if (bodyFrame5.Y == bodyFrame5.Height * 7)
						{
							num6 = -2;
						}
						else
						{
							if (bodyFrame5.Y == bodyFrame5.Height * 8)
							{
								num6 = -2;
							}
							else
							{
								if (bodyFrame5.Y == bodyFrame5.Height * 9)
								{
									num6 = -2;
								}
								else
								{
									if (bodyFrame5.Y == bodyFrame5.Height * 10)
									{
										num6 = -2;
									}
									else
									{
										if (bodyFrame5.Y == bodyFrame5.Height * 13)
										{
											bodyFrame5.Height -= 2;
										}
										else
										{
											if (bodyFrame5.Y == bodyFrame5.Height * 14)
											{
												num6 = -2;
											}
											else
											{
												if (bodyFrame5.Y == bodyFrame5.Height * 15)
												{
													num6 = -2;
												}
												else
												{
													if (bodyFrame5.Y == bodyFrame5.Height * 16)
													{
														num6 = -2;
													}
												}
											}
										}
									}
								}
							}
						}
					}
					bodyFrame5.Y += num6;
					Main.pixelShader.CurrentTechnique.Passes[num].Apply();
					Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num6) + drawPlayer.headPosition + vector, new Rectangle?(bodyFrame5), color5, drawPlayer.headRotation, vector, Scale, effects, 0f);
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
				else
				{
					if (drawPlayer.head > 0 && drawPlayer.head < 160 && drawPlayer.head != 28)
					{
						Main.pixelShader.CurrentTechnique.Passes[num].Apply();
						Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, effects, 0f);
						Main.pixelShader.CurrentTechnique.Passes[0].Apply();
					}
					else
					{
						Rectangle bodyFrame6 = drawPlayer.bodyFrame;
						bodyFrame6.Y -= 336;
						if (bodyFrame6.Y < 0)
						{
							bodyFrame6.Y = 0;
						}
						Main.spriteBatch.Draw(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Rectangle?(bodyFrame6), color3, drawPlayer.headRotation, vector, Scale, effects, 0f);
					}
				}
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 8)
			{
				Main.pixelShader.CurrentTechnique.Passes[num2].Apply();
				if (drawPlayer.face == 7)
				{
					Main.spriteBatch.Draw(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), new Color(200, 200, 200, 150), drawPlayer.headRotation, vector, Scale, effects, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, effects, 0f);
				}
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			drawPlayer.position = position;
			drawPlayer.bodyFrame.Y = bodyFrame.Y;
		}
		protected void DrawPlayer(Player drawPlayer)
		{
			int num = 0;
			bool flag = false;
			bool flag2 = false;
			if (drawPlayer.body == 77 || drawPlayer.body == 103 || drawPlayer.body == 41 || drawPlayer.body == 100 || drawPlayer.body == 10 || drawPlayer.body == 11 || drawPlayer.body == 12 || drawPlayer.body == 13 || drawPlayer.body == 14 || drawPlayer.body == 43 || drawPlayer.body == 15 || drawPlayer.body == 16 || drawPlayer.body == 20 || drawPlayer.body == 39 || drawPlayer.body == 50 || drawPlayer.body == 38 || drawPlayer.body == 40 || drawPlayer.body == 57 || drawPlayer.body == 44 || drawPlayer.body == 52 || drawPlayer.body == 53 || drawPlayer.body == 68 || drawPlayer.body == 81 || drawPlayer.body == 85 || drawPlayer.body == 88 || drawPlayer.body == 98 || drawPlayer.body == 86 || drawPlayer.body == 87 || drawPlayer.body == 99 || drawPlayer.body == 165 || drawPlayer.body == 166 || drawPlayer.body == 167)
			{
				flag = true;
			}
			if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167)
			{
				flag2 = true;
			}
			float num2 = 0f;
			if (drawPlayer.mount == 1)
			{
				num2 = 30f;
				if (drawPlayer.mountFrame == 1)
				{
					num2 += 2f;
				}
				if (drawPlayer.mountFrame == 11)
				{
					num2 += 2f;
				}
			}
			drawPlayer.position.Y = drawPlayer.position.Y - num2;
			int num3 = 0;
			if (drawPlayer.dye[0] != null)
			{
				num3 = (int)drawPlayer.dye[0].dye;
			}
			int num4 = 0;
			if (drawPlayer.dye[1] != null)
			{
				num4 = (int)drawPlayer.dye[1].dye;
			}
			int num5 = 0;
			if (drawPlayer.dye[2] != null)
			{
				num5 = (int)drawPlayer.dye[2].dye;
			}
			if (drawPlayer.wearsRobe)
			{
				num5 = num4;
			}
			int num6 = 0;
			int num7 = 0;
			int num8 = 0;
			int num9 = 0;
			int num10 = 0;
			int num11 = 0;
			int num12 = 0;
			int num13 = 0;
			int num14 = 0;
			int num15 = 0;
			int num16 = 0;
			for (int i = 0; i < 16; i++)
			{
				int num17 = i % 8;
				if (drawPlayer.dye[num17] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 8 >= 1 || !drawPlayer.hideVisual[num17] || (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.velocity.Y != 0f)))
				{
					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 18)
					{
						num6 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 11)
					{
						num7 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 8)
					{
						num8 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
					{
						num9 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 15)
					{
						num10 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 11)
					{
						num11 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 5)
					{
						num12 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 7)
					{
						num13 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 8)
					{
						num14 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 11)
					{
						num15 = (int)drawPlayer.dye[num17].dye;
					}
					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 25)
					{
						num16 = (int)drawPlayer.dye[num17].dye;
					}
				}
			}
			int num18 = 0;
			switch (drawPlayer.team)
			{
			case 1:
				num18 = 1;
				break;
			case 2:
				num18 = 5;
				break;
			case 3:
				num18 = 9;
				break;
			case 4:
				num18 = 3;
				break;
			}
			if (num3 == 65)
			{
				num3 = num18;
			}
			if (num4 == 65)
			{
				num4 = num18;
			}
			if (num5 == 65)
			{
				num5 = num18;
			}
			if (num6 == 65)
			{
				num6 = num18;
			}
			if (num7 == 65)
			{
				num7 = num18;
			}
			if (num9 == 65)
			{
				num9 = num18;
			}
			if (num8 == 65)
			{
				num8 = num18;
			}
			if (num10 == 65)
			{
				num10 = num18;
			}
			if (num11 == 65)
			{
				num11 = num18;
			}
			if (num12 == 65)
			{
				num12 = num18;
			}
			if (num13 == 65)
			{
				num13 = num18;
			}
			if (num14 == 65)
			{
				num14 = num18;
			}
			if (num15 == 65)
			{
				num15 = num18;
			}
			if (num16 == 65)
			{
				num16 = num18;
			}
			if (drawPlayer.shadow == 0f)
			{
				drawPlayer.position.Y = drawPlayer.position.Y + drawPlayer.gfxOffY;
			}
			drawPlayer.itemLocation.Y = drawPlayer.itemLocation.Y + drawPlayer.gfxOffY;
			SpriteEffects effects = SpriteEffects.None;
			SpriteEffects effects2 = SpriteEffects.FlipHorizontally;
			Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true));
			Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.25) / 16.0), Color.White));
			Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor));
			Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor));
			Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor));
			Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor));
			Color color6 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor));
			Color color7 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor));
			Color color8 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor));
			Color color9 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor));
			Color color10 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.25) / 16, Color.White));
			Color color11 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16, Color.White));
			Color color12 = drawPlayer.GetImmuneAlpha2(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.75) / 16, Color.White));
			if (drawPlayer.head > 0 && drawPlayer.head < 160)
			{
				this.LoadArmorHead(drawPlayer.head);
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 168)
			{
				this.LoadArmorBody(drawPlayer.body);
			}
			if (drawPlayer.legs > 0 && drawPlayer.legs < 103)
			{
				this.LoadArmorLegs(drawPlayer.legs);
			}
			if (drawPlayer.handon > 0 && drawPlayer.handon < 18)
			{
				this.LoadAccHandsOn((int)drawPlayer.handon);
			}
			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 11)
			{
				this.LoadAccHandsOff((int)drawPlayer.handoff);
			}
			if (drawPlayer.back > 0 && drawPlayer.back < 8)
			{
				this.LoadAccBack((int)drawPlayer.back);
			}
			if (drawPlayer.front > 0 && drawPlayer.front < 5)
			{
				this.LoadAccFront((int)drawPlayer.front);
			}
			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 15)
			{
				this.LoadAccShoes((int)drawPlayer.shoe);
			}
			if (drawPlayer.waist > 0 && drawPlayer.waist < 11)
			{
				this.LoadAccWaist((int)drawPlayer.waist);
			}
			if (drawPlayer.shield > 0 && drawPlayer.shield < 5)
			{
				this.LoadAccShield((int)drawPlayer.shield);
			}
			if (drawPlayer.neck > 0 && drawPlayer.neck < 7)
			{
				this.LoadAccNeck((int)drawPlayer.neck);
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 8)
			{
				this.LoadAccFace((int)drawPlayer.face);
			}
			if (drawPlayer.balloon > 0 && drawPlayer.balloon < 11)
			{
				this.LoadAccBalloon((int)drawPlayer.balloon);
			}
			this.LoadHair(drawPlayer.hair);
			if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
			{
				float num19 = (float)Main.mouseTextColor / 200f - 0.3f;
				if (drawPlayer.shadow != 0f)
				{
					num19 = 0f;
				}
				color10.G = (byte)((float)color10.G * num19);
				color11.G = (byte)((float)color11.G * num19);
				color12.G = (byte)((float)color12.G * num19);
				color10.B = (byte)((float)color10.B * num19);
				color10.R = (byte)((float)color10.R * num19);
				color11.B = (byte)((float)color11.B * num19);
				color11.R = (byte)((float)color11.R * num19);
				color12.B = (byte)((float)color12.B * num19);
				color12.R = (byte)((float)color12.R * num19);
			}
			if (drawPlayer.shadow > 0f)
			{
				immuneAlpha = new Color(0, 0, 0, 0);
				color5 = new Color(0, 0, 0, 0);
				color4 = new Color(0, 0, 0, 0);
				color = new Color(0, 0, 0, 0);
				color3 = new Color(0, 0, 0, 0);
				color2 = new Color(0, 0, 0, 0);
			}
			float num20 = 1f;
			float num21 = 1f;
			float num22 = 1f;
			float num23 = 1f;
			if (drawPlayer.honey && Main.rand.Next(30) == 0)
			{
				int num24 = Dust.NewDust(drawPlayer.position, drawPlayer.width, drawPlayer.height, 152, 0f, 0f, 150, default(Color), 1f);
				Main.dust[num24].velocity.Y = 0.3f;
				Dust expr_E3F_cp_0 = Main.dust[num24];
				expr_E3F_cp_0.velocity.X = expr_E3F_cp_0.velocity.X * 0.1f;
				Main.dust[num24].scale += (float)Main.rand.Next(3, 4) * 0.1f;
				Main.dust[num24].alpha = 100;
				Main.dust[num24].noGravity = true;
				Main.dust[num24].velocity += drawPlayer.velocity * 0.1f;
			}
			if (drawPlayer.poisoned)
			{
				if (Main.rand.Next(50) == 0)
				{
					int num25 = Dust.NewDust(drawPlayer.position, drawPlayer.width, drawPlayer.height, 46, 0f, 0f, 150, default(Color), 0.2f);
					Main.dust[num25].noGravity = true;
					Main.dust[num25].fadeIn = 1.9f;
				}
				num20 *= 0.65f;
				num22 *= 0.75f;
			}
			if (drawPlayer.venom)
			{
				if (Main.rand.Next(10) == 0)
				{
					int num26 = Dust.NewDust(drawPlayer.position, drawPlayer.width, drawPlayer.height, 171, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num26].noGravity = true;
					Main.dust[num26].fadeIn = 1.5f;
				}
				num21 *= 0.45f;
				num20 *= 0.75f;
			}
			if (drawPlayer.onFire)
			{
				if (Main.rand.Next(4) == 0)
				{
					int num27 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Color), 3f);
					Main.dust[num27].noGravity = true;
					Main.dust[num27].velocity *= 1.8f;
					Dust expr_1087_cp_0 = Main.dust[num27];
					expr_1087_cp_0.velocity.Y = expr_1087_cp_0.velocity.Y - 0.5f;
				}
				num22 *= 0.6f;
				num21 *= 0.7f;
			}
			if (drawPlayer.dripping && drawPlayer.shadow == 0f && Main.rand.Next(4) != 0)
			{
				Vector2 position = drawPlayer.position;
				position.X -= 2f;
				position.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					int num28 = Dust.NewDust(position, drawPlayer.width + 4, drawPlayer.height + 2, 211, 0f, 0f, 50, default(Color), 0.8f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num28].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num28].alpha += 25;
					}
					Main.dust[num28].noLight = true;
					Main.dust[num28].velocity *= 0.2f;
					Dust expr_11CC_cp_0 = Main.dust[num28];
					expr_11CC_cp_0.velocity.Y = expr_11CC_cp_0.velocity.Y + 0.2f;
					Main.dust[num28].velocity += drawPlayer.velocity;
				}
				else
				{
					int num29 = Dust.NewDust(position, drawPlayer.width + 8, drawPlayer.height + 8, 211, 0f, 0f, 50, default(Color), 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num29].alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num29].alpha += 25;
					}
					Main.dust[num29].noLight = true;
					Main.dust[num29].noGravity = true;
					Main.dust[num29].velocity *= 0.2f;
					Dust expr_12C5_cp_0 = Main.dust[num29];
					expr_12C5_cp_0.velocity.Y = expr_12C5_cp_0.velocity.Y + 1f;
					Main.dust[num29].velocity += drawPlayer.velocity;
				}
			}
			if (drawPlayer.ichor)
			{
				num22 = 0f;
			}
			if (drawPlayer.burned)
			{
				int num30 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Color), 2f);
				Main.dust[num30].noGravity = true;
				Main.dust[num30].velocity *= 1.8f;
				Dust expr_13B8_cp_0 = Main.dust[num30];
				expr_13B8_cp_0.velocity.Y = expr_13B8_cp_0.velocity.Y - 0.75f;
				num20 = 1f;
				num22 *= 0.6f;
				num21 *= 0.7f;
			}
			if (drawPlayer.onFrostBurn)
			{
				if (Main.rand.Next(4) == 0)
				{
					int num31 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 135, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Color), 3f);
					Main.dust[num31].noGravity = true;
					Main.dust[num31].velocity *= 1.8f;
					Dust expr_14AD_cp_0 = Main.dust[num31];
					expr_14AD_cp_0.velocity.Y = expr_14AD_cp_0.velocity.Y - 0.5f;
				}
				num20 *= 0.5f;
				num21 *= 0.7f;
			}
			if (drawPlayer.onFire2)
			{
				if (Main.rand.Next(4) == 0)
				{
					int num32 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 75, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Color), 3f);
					Main.dust[num32].noGravity = true;
					Main.dust[num32].velocity *= 1.8f;
					Dust expr_1598_cp_0 = Main.dust[num32];
					expr_1598_cp_0.velocity.Y = expr_1598_cp_0.velocity.Y - 0.5f;
				}
				num22 *= 0.6f;
				num21 *= 0.7f;
			}
			if (drawPlayer.noItems)
			{
				num21 *= 0.8f;
				num20 *= 0.65f;
			}
			if (drawPlayer.blind)
			{
				num21 *= 0.65f;
				num20 *= 0.7f;
			}
			if (drawPlayer.bleed)
			{
				num21 *= 0.9f;
				num22 *= 0.9f;
				if (!drawPlayer.dead && Main.rand.Next(30) == 0)
				{
					int num33 = Dust.NewDust(drawPlayer.position, drawPlayer.width, drawPlayer.height, 5, 0f, 0f, 0, default(Color), 1f);
					Dust expr_166B_cp_0 = Main.dust[num33];
					expr_166B_cp_0.velocity.Y = expr_166B_cp_0.velocity.Y + 0.5f;
					Main.dust[num33].velocity *= 0.25f;
				}
			}
			if (drawPlayer.shadow == 0f && drawPlayer.palladiumRegen && drawPlayer.statLife < drawPlayer.statLifeMax && base.IsActive && !Main.gamePaused && drawPlayer.miscCounter % 10 == 0)
			{
				Vector2 position2;
				position2.X = drawPlayer.position.X + (float)Main.rand.Next(drawPlayer.width);
				position2.Y = drawPlayer.position.Y + (float)Main.rand.Next(drawPlayer.height);
				position2.X = drawPlayer.position.X + (float)(drawPlayer.width / 2) - 6f;
				position2.Y = drawPlayer.position.Y + (float)(drawPlayer.height / 2) - 6f;
				position2.X -= (float)Main.rand.Next(-10, 11);
				position2.Y -= (float)Main.rand.Next(-20, 21);
				Gore.NewGore(position2, new Vector2((float)Main.rand.Next(-10, 11) * 0.1f, (float)Main.rand.Next(-20, -10) * 0.1f), 331, (float)Main.rand.Next(80, 120) * 0.01f);
			}
			if (num20 != 1f || num21 != 1f || num22 != 1f || num23 != 1f)
			{
				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
				{
					color2 = drawPlayer.GetImmuneAlpha(Color.White);
					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor);
					color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true));
					color4 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor);
					color5 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor);
					color6 = drawPlayer.GetImmuneAlpha(drawPlayer.shirtColor);
					color7 = drawPlayer.GetImmuneAlpha(drawPlayer.underShirtColor);
					color8 = drawPlayer.GetImmuneAlpha(drawPlayer.pantsColor);
					color9 = drawPlayer.GetImmuneAlpha(drawPlayer.shoeColor);
					color10 = drawPlayer.GetImmuneAlpha(Color.White);
					color11 = drawPlayer.GetImmuneAlpha(Color.White);
					color12 = drawPlayer.GetImmuneAlpha(Color.White);
				}
				else
				{
					color2 = Main.buffColor(color2, num20, num21, num22, num23);
					color3 = Main.buffColor(color3, num20, num21, num22, num23);
					color = Main.buffColor(color, num20, num21, num22, num23);
					color4 = Main.buffColor(color4, num20, num21, num22, num23);
					color5 = Main.buffColor(color5, num20, num21, num22, num23);
					color6 = Main.buffColor(color6, num20, num21, num22, num23);
					color7 = Main.buffColor(color7, num20, num21, num22, num23);
					color8 = Main.buffColor(color8, num20, num21, num22, num23);
					color9 = Main.buffColor(color9, num20, num21, num22, num23);
					color10 = Main.buffColor(color10, num20, num21, num22, num23);
					color11 = Main.buffColor(color11, num20, num21, num22, num23);
					color12 = Main.buffColor(color12, num20, num21, num22, num23);
				}
			}
			if (drawPlayer.socialGhost)
			{
				color2 = new Color(0, 0, 0, 0);
				color3 = new Color(0, 0, 0, 0);
				color = new Color(0, 0, 0, 0);
				color4 = new Color(0, 0, 0, 0);
				color5 = new Color(0, 0, 0, 0);
				color6 = new Color(0, 0, 0, 0);
				color7 = new Color(0, 0, 0, 0);
				color8 = new Color(0, 0, 0, 0);
				color9 = new Color(0, 0, 0, 0);
				immuneAlpha = new Color(0, 0, 0, 0);
				if (color10.A > Main.gFade)
				{
					color10.A = Main.gFade;
				}
				if (color11.A > Main.gFade)
				{
					color11.A = Main.gFade;
				}
				if (color12.A > Main.gFade)
				{
					color12.A = Main.gFade;
				}
			}
			float num34 = 1f;
			if (drawPlayer.armorSteath)
			{
				float num35 = drawPlayer.stealth;
				if ((double)num35 < 0.03)
				{
					num35 = 0.03f;
				}
				float num36 = (1f + num35 * 10f) / 11f;
				if (num35 < 0f)
				{
					num35 = 0f;
				}
				if (num35 >= 1f - drawPlayer.shadow && drawPlayer.shadow > 0f)
				{
					num35 = drawPlayer.shadow * 0.5f;
				}
				num34 = num36;
				color10 = new Color((int)((byte)((float)color10.R * num35)), (int)((byte)((float)color10.G * num35)), (int)((byte)((float)color10.B * num36)), (int)((byte)((float)color10.A * num35)));
				color11 = new Color((int)((byte)((float)color11.R * num35)), (int)((byte)((float)color11.G * num35)), (int)((byte)((float)color11.B * num36)), (int)((byte)((float)color11.A * num35)));
				color12 = new Color((int)((byte)((float)color12.R * num35)), (int)((byte)((float)color12.G * num35)), (int)((byte)((float)color12.B * num36)), (int)((byte)((float)color12.A * num35)));
				num35 *= num35;
				color2 = new Color((int)((byte)((float)color2.R * num35)), (int)((byte)((float)color2.G * num35)), (int)((byte)((float)color2.B * num35)), (int)((byte)((float)color2.A * num35)));
				color3 = new Color((int)((byte)((float)color3.R * num35)), (int)((byte)((float)color3.G * num35)), (int)((byte)((float)color3.B * num35)), (int)((byte)((float)color3.A * num35)));
				color = new Color((int)((byte)((float)color.R * num35)), (int)((byte)((float)color.G * num35)), (int)((byte)((float)color.B * num35)), (int)((byte)((float)color.A * num35)));
				color4 = new Color((int)((byte)((float)color4.R * num35)), (int)((byte)((float)color4.G * num35)), (int)((byte)((float)color4.B * num35)), (int)((byte)((float)color4.A * num35)));
				color5 = new Color((int)((byte)((float)color5.R * num35)), (int)((byte)((float)color5.G * num35)), (int)((byte)((float)color5.B * num35)), (int)((byte)((float)color5.A * num35)));
				color6 = new Color((int)((byte)((float)color6.R * num35)), (int)((byte)((float)color6.G * num35)), (int)((byte)((float)color6.B * num35)), (int)((byte)((float)color6.A * num35)));
				color7 = new Color((int)((byte)((float)color7.R * num35)), (int)((byte)((float)color7.G * num35)), (int)((byte)((float)color7.B * num35)), (int)((byte)((float)color7.A * num35)));
				color8 = new Color((int)((byte)((float)color8.R * num35)), (int)((byte)((float)color8.G * num35)), (int)((byte)((float)color8.B * num35)), (int)((byte)((float)color8.A * num35)));
				color9 = new Color((int)((byte)((float)color9.R * num35)), (int)((byte)((float)color9.G * num35)), (int)((byte)((float)color9.B * num35)), (int)((byte)((float)color9.A * num35)));
				immuneAlpha = new Color((int)((byte)((float)immuneAlpha.R * num35)), (int)((byte)((float)immuneAlpha.G * num35)), (int)((byte)((float)immuneAlpha.B * num35)), (int)((byte)((float)immuneAlpha.A * num35)));
			}
			if (drawPlayer.gravDir == 1f)
			{
				if (drawPlayer.direction == 1)
				{
					effects = SpriteEffects.None;
					effects2 = SpriteEffects.None;
				}
				else
				{
					effects = SpriteEffects.FlipHorizontally;
					effects2 = SpriteEffects.FlipHorizontally;
				}
				if (!drawPlayer.dead)
				{
					drawPlayer.legPosition.Y = 0f;
					drawPlayer.headPosition.Y = 0f;
					drawPlayer.bodyPosition.Y = 0f;
				}
			}
			else
			{
				if (drawPlayer.direction == 1)
				{
					effects = SpriteEffects.FlipVertically;
					effects2 = SpriteEffects.FlipVertically;
				}
				else
				{
					effects = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
					effects2 = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
				}
				if (!drawPlayer.dead)
				{
					drawPlayer.legPosition.Y = 6f;
					drawPlayer.headPosition.Y = 6f;
					drawPlayer.bodyPosition.Y = 6f;
				}
			}
			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
			if (drawPlayer.merman)
			{
				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
				if ((double)drawPlayer.headRotation < -0.3)
				{
					drawPlayer.headRotation = -0.3f;
				}
				if ((double)drawPlayer.headRotation > 0.3)
				{
					drawPlayer.headRotation = 0.3f;
				}
			}
			else
			{
				if (!drawPlayer.dead)
				{
					drawPlayer.headRotation = 0f;
				}
			}
			bool flag3 = false;
			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139)
			{
				flag3 = true;
			}
			bool flag4 = false;
			if (drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159)
			{
				flag4 = true;
			}
			bool flag5 = false;
			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
			{
				flag5 = true;
			}
			Rectangle bodyFrame = drawPlayer.bodyFrame;
			bodyFrame.Y -= 336;
			if (bodyFrame.Y < 0)
			{
				bodyFrame.Y = 0;
			}
			int height = 26;
			int hair = drawPlayer.hair;
			if (flag5)
			{
				bodyFrame.Height = 0;
			}
			else
			{
				if (hair > 50 && (hair < 56 || hair > 63) && (hair < 74 || hair > 77) && (hair < 88 || hair > 89) && hair != 94 && hair != 100 && hair != 104 && hair != 112 && hair < 116)
				{
					if (drawPlayer.head == -1 || flag3 || drawPlayer.head == 23 || drawPlayer.head == 0)
					{
						Main.spriteBatch.Draw(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector2, 1f, effects, 0f);
					}
					else
					{
						if (flag4)
						{
							Main.spriteBatch.Draw(Main.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector2, 1f, effects, 0f);
						}
					}
					if (drawPlayer.gravDir == 1f)
					{
						bodyFrame.Height = height;
					}
				}
			}
			if (drawPlayer.mount == 1)
			{
				int num37 = 23 + (int)num2 - 30;
				int num38;
				if (drawPlayer.direction > 0)
				{
					num38 = 13;
				}
				else
				{
					num38 = -13;
				}
				Main.spriteBatch.Draw(Main.rudolphTexture[0], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) + (float)num38)), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + (float)num37))), new Rectangle?(new Rectangle(0, Main.rudolphTexture[0].Height / 12 * drawPlayer.mountFrame, Main.rudolphTexture[0].Width, Main.rudolphTexture[0].Height / 12)), color11, drawPlayer.bodyRotation, new Vector2((float)(Main.rudolphTexture[0].Width / 2), (float)(Main.rudolphTexture[0].Height / 24)), 1f, effects, 0f);
			}
			if (drawPlayer.carpetFrame >= 0)
			{
				Color color13 = color12;
				float num39 = 0f;
				if (drawPlayer.gravDir == -1f)
				{
					num39 = 10f;
				}
				Main.spriteBatch.Draw(Main.flyingCarpetTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 28f * drawPlayer.gravDir + num39))), new Rectangle?(new Rectangle(0, Main.flyingCarpetTexture.Height / 6 * drawPlayer.carpetFrame, Main.flyingCarpetTexture.Width, Main.flyingCarpetTexture.Height / 6)), color13, drawPlayer.bodyRotation, new Vector2((float)(Main.flyingCarpetTexture.Width / 2), (float)(Main.flyingCarpetTexture.Height / 8)), 1f, effects, 0f);
			}
			bool flag6 = false;
			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106))
			{
				flag6 = true;
				int type = drawPlayer.inventory[drawPlayer.selectedItem].type;
				int num40 = 1;
				float num41 = -4f;
				float num42 = -8f;
				if (drawPlayer.turtleArmor)
				{
					num40 = 4;
				}
				else
				{
					if (drawPlayer.body == 106)
					{
						num40 = 6;
					}
					else
					{
						if (type == 1178)
						{
							num40 = 1;
						}
						else
						{
							if (type == 779)
							{
								num40 = 2;
							}
							else
							{
								if (type == 1295)
								{
									num40 = 3;
								}
								else
								{
									if (type == 1910)
									{
										num40 = 5;
									}
								}
							}
						}
					}
				}
				if (num40 == 4 || num40 == 6)
				{
					Main.spriteBatch.Draw(Main.BackPackTexture[num40], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.BackPackTexture[num40], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction))) + num41 * (float)drawPlayer.direction, (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + num42 * drawPlayer.gravDir))), new Rectangle?(new Rectangle(0, 0, Main.BackPackTexture[num40].Width, Main.BackPackTexture[num40].Height)), color11, drawPlayer.bodyRotation, new Vector2((float)(Main.BackPackTexture[num40].Width / 2), (float)(Main.BackPackTexture[num40].Height / 2)), 1f, effects, 0f);
				}
			}
			if (!flag6 && drawPlayer.back > 0 && drawPlayer.back < 8 && drawPlayer.mount == 0)
			{
				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
				{
					int num43 = drawPlayer.bodyFrame.Y / 56;
					if (num43 < 1 || num43 > 5)
					{
						num = 10;
					}
					else
					{
						if (drawPlayer.front == 1)
						{
							num = 0;
						}
						if (drawPlayer.front == 2)
						{
							num = 8;
						}
						if (drawPlayer.front == 3)
						{
							num = 0;
						}
						if (drawPlayer.front == 4)
						{
							num = 8;
						}
					}
				}
				Main.pixelShader.CurrentTechnique.Passes[num8].Apply();
				Main.spriteBatch.Draw(Main.accBackTexture[(int)drawPlayer.back], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			drawPlayer.position.Y = drawPlayer.position.Y + num2 / 2f;
			if (!flag6 && drawPlayer.wings > 0)
			{
				this.LoadWings(drawPlayer.wings);
				if (drawPlayer.wings == 22)
				{
					if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && drawPlayer.mount == 0)
					{
						this.LoadItemFlames(1866);
						Color color14 = color11;
						int num44 = 24;
						int num45 = 0;
						Main.pixelShader.CurrentTechnique.Passes[num16].Apply();
						if (drawPlayer.shadow == 0f && drawPlayer.grappling[0] == -1)
						{
							for (int j = 0; j < 7; j++)
							{
								Color color15 = new Color(250 - j * 10, 250 - j * 10, 250 - j * 10, 150 - j * 10);
								Vector2 vector3 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
								num34 *= num34;
								num34 *= 1f - drawPlayer.shadow;
								color15 = new Color((int)((float)color15.R * num34), (int)((float)color15.G * num34), (int)((float)color15.B * num34), (int)((float)color15.A * num34));
								vector3.X = drawPlayer.itemFlamePos[j].X;
								vector3.Y = -drawPlayer.itemFlamePos[j].Y;
								vector3 *= 0.5f;
								Main.spriteBatch.Draw(Main.itemFlameTexture[1866], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num45 * drawPlayer.direction), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num44 * drawPlayer.gravDir))) + vector3, new Rectangle?(new Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 7 - 2)), color15, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 14)), 1f, effects, 0f);
							}
						}
						Main.spriteBatch.Draw(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num45 * drawPlayer.direction), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num44 * drawPlayer.gravDir))), new Rectangle?(new Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 7)), color14, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 14)), 1f, effects, 0f);
						Main.pixelShader.CurrentTechnique.Passes[0].Apply();
					}
				}
				else
				{
					int num46 = 0;
					int num47 = 0;
					if (drawPlayer.wings == 5)
					{
						num47 = 4;
						num46 -= 4;
					}
					Color color16 = color11;
					if (drawPlayer.wings == 9)
					{
						num34 *= num34;
						num34 *= 1f - drawPlayer.shadow;
						color16 = new Color((int)(250f * num34), (int)(250f * num34), (int)(250f * num34), (int)(100f * num34));
					}
					if (drawPlayer.wings == 10)
					{
						num34 *= num34;
						num34 *= 1f - drawPlayer.shadow;
						color16 = new Color((int)(250f * num34), (int)(250f * num34), (int)(250f * num34), (int)(175f * num34));
					}
					if (drawPlayer.wings == 11 && color16.A > Main.gFade)
					{
						color16.A = Main.gFade;
					}
					Main.pixelShader.CurrentTechnique.Passes[num16].Apply();
					Main.spriteBatch.Draw(Main.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num47 * drawPlayer.direction), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num46 * drawPlayer.gravDir))), new Rectangle?(new Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), color16, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, effects, 0f);
					if (drawPlayer.wings == 23)
					{
						num34 *= num34;
						num34 *= 1f - drawPlayer.shadow;
						color16 = new Color((int)(200f * num34), (int)(200f * num34), (int)(200f * num34), (int)(200f * num34));
						Main.spriteBatch.Draw(Main.FlameTexture[8], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num47 * drawPlayer.direction), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num46 * drawPlayer.gravDir))), new Rectangle?(new Rectangle(0, Main.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Main.wingsTexture[drawPlayer.wings].Width, Main.wingsTexture[drawPlayer.wings].Height / 4)), color16, drawPlayer.bodyRotation, new Vector2((float)(Main.wingsTexture[drawPlayer.wings].Width / 2), (float)(Main.wingsTexture[drawPlayer.wings].Height / 8)), 1f, effects, 0f);
					}
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
			}
			if (drawPlayer.balloon > 0)
			{
				int num48 = DateTime.Now.Millisecond % 800 / 200;
				Vector2 vector4 = Main.offHandOffsets[drawPlayer.bodyFrame.Y / 56];
				if (drawPlayer.direction != 1)
				{
					vector4.X = (float)drawPlayer.width - vector4.X;
				}
				if (drawPlayer.gravDir != 1f)
				{
					vector4.Y -= (float)drawPlayer.height;
				}
				Main.pixelShader.CurrentTechnique.Passes[num15].Apply();
				Main.spriteBatch.Draw(Main.accBalloonTexture[(int)drawPlayer.balloon], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + vector4.X)), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + vector4.Y * drawPlayer.gravDir))), new Rectangle?(new Rectangle(0, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4 * num48, Main.accBalloonTexture[(int)drawPlayer.balloon].Width, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4)), color11, drawPlayer.bodyRotation, new Vector2((float)(26 + drawPlayer.direction * 4), 28f + drawPlayer.gravDir * 6f), 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			drawPlayer.position.Y = drawPlayer.position.Y - num2 / 2f;
			if (!drawPlayer.invis && drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
			{
				Main.spriteBatch.Draw(Main.skinBodyTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				if (drawPlayer.legs != 67)
				{
					Main.spriteBatch.Draw(Main.skinLegsTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.legFrame), immuneAlpha, drawPlayer.legRotation, origin, 1f, effects, 0f);
				}
			}
			if (drawPlayer.wearsRobe)
			{
				goto IL_394A;
			}
			IL_3551:
			if (drawPlayer.legs > 0 && drawPlayer.legs < 103)
			{
				if (!drawPlayer.invis || (drawPlayer.legs != 20 && drawPlayer.legs != 21))
				{
					Main.pixelShader.CurrentTechnique.Passes[num5].Apply();
					Main.spriteBatch.Draw(Main.armorLegTexture[drawPlayer.legs], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector, new Rectangle?(drawPlayer.legFrame), color12, drawPlayer.legRotation, vector, 1f, effects, 0f);
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
			}
			else
			{
				if (!drawPlayer.invis)
				{
					if (!drawPlayer.male)
					{
						Main.spriteBatch.Draw(Main.femalePantsTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector, new Rectangle?(drawPlayer.legFrame), color8, drawPlayer.legRotation, vector, 1f, effects, 0f);
						Main.spriteBatch.Draw(Main.femaleShoesTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector, new Rectangle?(drawPlayer.legFrame), color9, drawPlayer.legRotation, vector, 1f, effects, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.playerPantsTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector, new Rectangle?(drawPlayer.legFrame), color8, drawPlayer.legRotation, vector, 1f, effects, 0f);
						Main.spriteBatch.Draw(Main.playerShoesTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector, new Rectangle?(drawPlayer.legFrame), color9, drawPlayer.legRotation, vector, 1f, effects, 0f);
					}
				}
			}
			if (drawPlayer.wearsRobe)
			{
				goto IL_3A55;
			}
			IL_394A:
			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 15)
			{
				Main.pixelShader.CurrentTechnique.Passes[num10].Apply();
				Main.spriteBatch.Draw(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector, new Rectangle?(drawPlayer.legFrame), color12, drawPlayer.legRotation, vector, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.wearsRobe)
			{
				goto IL_3551;
			}
			IL_3A55:
			if (drawPlayer.body > 0 && drawPlayer.body < 168)
			{
				Main.pixelShader.CurrentTechnique.Passes[num4].Apply();
				Rectangle bodyFrame2 = drawPlayer.bodyFrame;
				int num49 = num;
				bodyFrame2.X += num49;
				bodyFrame2.Width -= num49;
				if (drawPlayer.direction == -1)
				{
					num49 = 0;
				}
				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
				{
					if (!drawPlayer.male)
					{
						Main.spriteBatch.Draw(Main.femaleBodyTexture[drawPlayer.body], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num49), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(bodyFrame2), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.armorBodyTexture[drawPlayer.body], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num49), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(bodyFrame2), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					}
				}
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				if (flag && !drawPlayer.invis)
				{
					Main.spriteBatch.Draw(Main.playerHandsTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				}
			}
			else
			{
				if (!drawPlayer.invis)
				{
					if (!drawPlayer.male)
					{
						Main.spriteBatch.Draw(Main.femaleUnderShirtTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
						Main.spriteBatch.Draw(Main.femaleShirtTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color6, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.playerUnderShirtTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
						Main.spriteBatch.Draw(Main.playerShirtTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color6, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					}
					Main.spriteBatch.Draw(Main.playerHandsTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				}
			}
			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 11)
			{
				Main.pixelShader.CurrentTechnique.Passes[num7].Apply();
				Main.spriteBatch.Draw(Main.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.waist > 0 && drawPlayer.waist < 11)
			{
				Rectangle legFrame = drawPlayer.legFrame;
				if (legFrame.Y >= 1064)
				{
					legFrame.Y = 0;
				}
				Main.pixelShader.CurrentTechnique.Passes[num11].Apply();
				Main.spriteBatch.Draw(Main.accWaistTexture[(int)drawPlayer.waist], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector, new Rectangle?(legFrame), color12, drawPlayer.legRotation, vector, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.neck > 0 && drawPlayer.neck < 7)
			{
				Main.pixelShader.CurrentTechnique.Passes[num13].Apply();
				Main.spriteBatch.Draw(Main.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
			{
				Main.spriteBatch.Draw(Main.playerHeadTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				Main.spriteBatch.Draw(Main.playerEyeWhitesTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				Main.spriteBatch.Draw(Main.playerEyesTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), color3, drawPlayer.headRotation, vector2, 1f, effects, 0f);
			}
			if (flag3)
			{
				Main.pixelShader.CurrentTechnique.Passes[num3].Apply();
				Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), color10, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				if (!drawPlayer.invis)
				{
					Main.spriteBatch.Draw(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				}
			}
			if (flag4 && !drawPlayer.invis)
			{
				Main.spriteBatch.Draw(Main.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector2, 1f, effects, 0f);
			}
			if (drawPlayer.head == 23)
			{
				if (!drawPlayer.invis)
				{
					Main.spriteBatch.Draw(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				}
				Main.pixelShader.CurrentTechnique.Passes[num3].Apply();
				Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), color10, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			else
			{
				if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 114 || drawPlayer.head == 158)
				{
					Rectangle bodyFrame3 = drawPlayer.bodyFrame;
					int num50 = 0;
					if (drawPlayer.gravDir == 1f)
					{
						if (bodyFrame3.Y != 0)
						{
							bodyFrame3.Y -= 2;
							num50 = -2;
							bodyFrame3.Height -= 8;
						}
					}
					else
					{
						if (bodyFrame3.Y != 0)
						{
							bodyFrame3.Y -= 2;
							num50 = 10;
							bodyFrame3.Height -= 8;
						}
					}
					Main.pixelShader.CurrentTechnique.Passes[num3].Apply();
					Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num50))) + drawPlayer.headPosition + vector2, new Rectangle?(bodyFrame3), color10, drawPlayer.headRotation, vector2, 1f, effects, 0f);
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
				else
				{
					if (drawPlayer.head > 0 && drawPlayer.head < 160 && drawPlayer.head != 28)
					{
						if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
						{
							Main.pixelShader.CurrentTechnique.Passes[num3].Apply();
							if (drawPlayer.head > 0 && drawPlayer.head < 160)
							{
								this.LoadArmorHead(drawPlayer.head);
							}
							Main.spriteBatch.Draw(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), color10, drawPlayer.headRotation, vector2, 1f, effects, 0f);
							Main.pixelShader.CurrentTechnique.Passes[0].Apply();
						}
					}
					else
					{
						if (!drawPlayer.invis && drawPlayer.face != 3 && drawPlayer.face != 2 && drawPlayer.face != 4)
						{
							Main.spriteBatch.Draw(Main.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector2, 1f, effects, 0f);
						}
					}
				}
			}
			if (drawPlayer.head == 137)
			{
				Main.spriteBatch.Draw(Main.jackHatTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), new Color(255, 255, 255, 255), drawPlayer.headRotation, vector2, 1f, effects, 0f);
				for (int k = 0; k < 7; k++)
				{
					Color color17 = new Color(110 - k * 10, 110 - k * 10, 110 - k * 10, 110 - k * 10);
					Vector2 vector5 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
					vector5.X = drawPlayer.itemFlamePos[k].X;
					vector5.Y = drawPlayer.itemFlamePos[k].Y;
					vector5 *= 0.5f;
					Main.spriteBatch.Draw(Main.jackHatTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2 + vector5, new Rectangle?(drawPlayer.bodyFrame), color17, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				}
			}
			if (drawPlayer.face > 0 && drawPlayer.face < 8)
			{
				Main.pixelShader.CurrentTechnique.Passes[num14].Apply();
				if (drawPlayer.face == 7)
				{
					Main.spriteBatch.Draw(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), new Color(200, 200, 200, 150), drawPlayer.headRotation, vector2, 1f, effects, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector2, new Rectangle?(drawPlayer.bodyFrame), color10, drawPlayer.headRotation, vector2, 1f, effects, 0f);
				}
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.mount == 1)
			{
				int num51 = 23 + (int)num2 - 30;
				int num52;
				if (drawPlayer.direction > 0)
				{
					num52 = 13;
				}
				else
				{
					num52 = -13;
				}
				Main.spriteBatch.Draw(Main.rudolphTexture[1], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) + (float)num52)), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + (float)num51))), new Rectangle?(new Rectangle(0, Main.rudolphTexture[0].Height / 12 * drawPlayer.mountFrame, Main.rudolphTexture[0].Width, Main.rudolphTexture[0].Height / 12)), color11, drawPlayer.bodyRotation, new Vector2((float)(Main.rudolphTexture[0].Width / 2), (float)(Main.rudolphTexture[0].Height / 24)), 1f, effects, 0f);
				if (drawPlayer.shadow == 0f)
				{
					Main.spriteBatch.Draw(Main.rudolphTexture[2], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) + (float)num52)), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + (float)num51))), new Rectangle?(new Rectangle(0, Main.rudolphTexture[0].Height / 12 * drawPlayer.mountFrame, Main.rudolphTexture[0].Width, Main.rudolphTexture[0].Height / 12)), new Color(255, 255, 255, 0), drawPlayer.bodyRotation, new Vector2((float)(Main.rudolphTexture[0].Width / 2), (float)(Main.rudolphTexture[0].Height / 24)), 1f, effects, 0f);
				}
			}
			if (drawPlayer.pulley && drawPlayer.itemAnimation == 0)
			{
				if (drawPlayer.pulleyDir == 2)
				{
					int num53 = -26;
					int num54 = 0;
					float rotation = 0f;
					Main.spriteBatch.Draw(Main.pulleyTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num54 * drawPlayer.direction), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num53 * drawPlayer.gravDir))), new Rectangle?(new Rectangle(0, Main.pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, Main.pulleyTexture.Width, Main.pulleyTexture.Height / 2)), color10, rotation, new Vector2((float)(Main.pulleyTexture.Width / 2), (float)(Main.pulleyTexture.Height / 4)), 1f, effects, 0f);
				}
				else
				{
					int num55 = -26;
					int num56 = 10;
					float rotation2 = 0.35f * (float)(-(float)drawPlayer.direction);
					Main.spriteBatch.Draw(Main.pulleyTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num56 * drawPlayer.direction), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num55 * drawPlayer.gravDir))), new Rectangle?(new Rectangle(0, Main.pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, Main.pulleyTexture.Width, Main.pulleyTexture.Height / 2)), color10, rotation2, new Vector2((float)(Main.pulleyTexture.Width / 2), (float)(Main.pulleyTexture.Height / 4)), 1f, effects, 0f);
				}
			}
			if (drawPlayer.shield > 0 && drawPlayer.shield < 5)
			{
				Main.pixelShader.CurrentTechnique.Passes[num12].Apply();
				Main.spriteBatch.Draw(Main.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.heldProj >= 0)
			{
				Main.projectile[drawPlayer.heldProj].gfxOffY = drawPlayer.gfxOffY;
				this.DrawProj(drawPlayer.heldProj);
			}
			Color newColor = Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16.0));
			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
			{
				newColor = Color.White;
			}
			if (drawPlayer.armorSteath && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
			{
				float num57 = drawPlayer.stealth;
				if ((double)num57 < 0.03)
				{
					num57 = 0.03f;
				}
				float num58 = (1f + num57 * 10f) / 11f;
				newColor = new Color((int)((byte)((float)newColor.R * num57)), (int)((byte)((float)newColor.G * num57)), (int)((byte)((float)newColor.B * num58)), (int)((byte)((float)newColor.A * num57)));
			}
			if (!drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley && drawPlayer.mount == 0)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
			{
				string arg_59FB_0 = drawPlayer.name;
				if (drawPlayer.inventory[drawPlayer.selectedItem].type == 662 || drawPlayer.inventory[drawPlayer.selectedItem].type == 663)
				{
					newColor.R = (byte)Main.DiscoR;
					newColor.G = (byte)Main.DiscoG;
					newColor.B = (byte)Main.DiscoB;
					newColor.A = 255;
				}
				if (drawPlayer.inventory[drawPlayer.selectedItem].useStyle == 5)
				{
					if (drawPlayer.inventory[drawPlayer.selectedItem].type == 2188 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1308 || drawPlayer.inventory[drawPlayer.selectedItem].type == 683 || drawPlayer.inventory[drawPlayer.selectedItem].type == 723 || drawPlayer.inventory[drawPlayer.selectedItem].type == 726 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1801 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1931 || (drawPlayer.inventory[drawPlayer.selectedItem].type >= 739 && drawPlayer.inventory[drawPlayer.selectedItem].type <= 744) || drawPlayer.inventory[drawPlayer.selectedItem].type == 788 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1326 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1444 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1445 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1446 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1930)
					{
						float num59 = drawPlayer.itemRotation + 0.785f * (float)drawPlayer.direction;
						int num60 = 0;
						int num61 = 0;
						Vector2 origin2 = new Vector2(0f, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
						if (drawPlayer.gravDir == -1f)
						{
							if (drawPlayer.direction == -1)
							{
								num59 += 1.57f;
								origin2 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, 0f);
								num60 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
							}
							else
							{
								num59 -= 1.57f;
								origin2 = new Vector2(0f, 0f);
							}
						}
						else
						{
							if (drawPlayer.direction == -1)
							{
								origin2 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
								num60 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
							}
						}
						Main.spriteBatch.Draw(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(drawPlayer.position.X + (float)(drawPlayer.width / 2) - Main.screenPosition.X + origin2.X + (float)num60)), (float)((int)(drawPlayer.position.Y + (float)(drawPlayer.height / 2) - Main.screenPosition.Y + (float)num61))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(newColor), num59, origin2, drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
					}
					else
					{
						Vector2 vector6 = new Vector2((float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width / 2), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
						Vector2 vector7 = this.DrawPlayerItemPos(drawPlayer);
						int num62 = (int)vector7.X;
						vector6.Y = vector7.Y;
						Vector2 origin3 = new Vector2((float)(-(float)num62), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
						if (drawPlayer.direction == -1)
						{
							origin3 = new Vector2((float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width + num62), (float)(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height / 2));
						}
						Main.spriteBatch.Draw(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X + vector6.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y + vector6.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(newColor), drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
						if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X + vector6.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y + vector6.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(newColor), drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
						}
					}
				}
				else
				{
					if (drawPlayer.gravDir == -1f)
					{
						Main.spriteBatch.Draw(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(newColor), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
						if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(newColor), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
						}
					}
					else
					{
						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 425 || drawPlayer.inventory[drawPlayer.selectedItem].type == 507)
						{
							if (drawPlayer.gravDir == 1f)
							{
								if (drawPlayer.direction == 1)
								{
									effects2 = SpriteEffects.FlipVertically;
								}
								else
								{
									effects2 = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
								}
							}
							else
							{
								if (drawPlayer.direction == 1)
								{
									effects2 = SpriteEffects.None;
								}
								else
								{
									effects2 = SpriteEffects.FlipHorizontally;
								}
							}
						}
						int type2 = drawPlayer.inventory[drawPlayer.selectedItem].type;
						Main.spriteBatch.Draw(Main.itemTexture[type2], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[type2].Width, Main.itemTexture[type2].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(newColor), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type2].Width * 0.5f - (float)Main.itemTexture[type2].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type2].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
						if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[type2], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[type2].Width, Main.itemTexture[type2].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(newColor), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type2].Width * 0.5f - (float)Main.itemTexture[type2].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type2].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
						}
						if (drawPlayer.inventory[drawPlayer.selectedItem].flame && drawPlayer.shadow == 0f)
						{
							try
							{
								this.LoadItemFlames(type2);
								if (Main.itemFlameTexture[type2] != null)
								{
									for (int l = 0; l < 7; l++)
									{
										float x = drawPlayer.itemFlamePos[l].X;
										float y = drawPlayer.itemFlamePos[l].Y;
										Main.spriteBatch.Draw(Main.itemFlameTexture[type2], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X)) + x, (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y)) + y), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[type2].Width, Main.itemTexture[type2].Height)), new Color(100, 100, 100, 0), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type2].Width * 0.5f - (float)Main.itemTexture[type2].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type2].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
									}
								}
							}
							catch
							{
							}
						}
					}
				}
			}
			if (drawPlayer.body > 0 && drawPlayer.body < 168)
			{
				Rectangle bodyFrame4 = drawPlayer.bodyFrame;
				int num63 = num;
				bodyFrame4.X += num63;
				bodyFrame4.Width -= num63;
				if (drawPlayer.direction == -1)
				{
					num63 = 0;
				}
				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
				{
					if (flag && !drawPlayer.invis)
					{
						int arg_6804_0 = drawPlayer.body;
						if (flag2)
						{
							Main.spriteBatch.Draw(Main.skinArmTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
						}
						Main.spriteBatch.Draw(Main.playerHands2Texture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					}
					Main.pixelShader.CurrentTechnique.Passes[num4].Apply();
					if (drawPlayer.body > 0 && drawPlayer.body < 168)
					{
						this.LoadArmorBody(drawPlayer.body);
					}
					Main.spriteBatch.Draw(Main.armorArmTexture[drawPlayer.body], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num63), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(bodyFrame4), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
				}
			}
			else
			{
				if (!drawPlayer.invis)
				{
					if (!drawPlayer.male)
					{
						Main.spriteBatch.Draw(Main.femaleUnderShirt2Texture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
						Main.spriteBatch.Draw(Main.femaleShirt2Texture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color6, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.playerUnderShirt2Texture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
					}
					Main.spriteBatch.Draw(Main.playerHands2Texture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				}
			}
			if (drawPlayer.handon > 0 && drawPlayer.handon < 18)
			{
				Main.pixelShader.CurrentTechnique.Passes[num6].Apply();
				Main.spriteBatch.Draw(Main.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 1827 && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
			{
				if (drawPlayer.gravDir == -1f)
				{
					Main.spriteBatch.Draw(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(newColor), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f - (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
				}
				else
				{
					int type3 = drawPlayer.inventory[drawPlayer.selectedItem].type;
					Main.spriteBatch.Draw(Main.itemTexture[type3], new Vector2((float)((int)(drawPlayer.itemLocation.X - Main.screenPosition.X)), (float)((int)(drawPlayer.itemLocation.Y - Main.screenPosition.Y))), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[type3].Width, Main.itemTexture[type3].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(newColor), drawPlayer.itemRotation, new Vector2((float)Main.itemTexture[type3].Width * 0.5f - (float)Main.itemTexture[type3].Width * 0.5f * (float)drawPlayer.direction, (float)Main.itemTexture[type3].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effects2, 0f);
				}
			}
			if (!flag6 && drawPlayer.front > 0 && drawPlayer.front < 5)
			{
				Main.pixelShader.CurrentTechnique.Passes[num9].Apply();
				Main.spriteBatch.Draw(Main.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.bodyRotation, origin, 1f, effects, 0f);
				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			}
			if (drawPlayer.frozen)
			{
				Color color18 = color11;
				color18.R = (byte)((double)color18.R * 0.55);
				color18.G = (byte)((double)color18.G * 0.55);
				color18.B = (byte)((double)color18.B * 0.55);
				color18.A = (byte)((double)color18.A * 0.55);
				Main.spriteBatch.Draw(Main.frozenTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(new Rectangle(0, 0, Main.frozenTexture.Width, Main.frozenTexture.Height)), color18, drawPlayer.bodyRotation, new Vector2((float)(Main.frozenTexture.Width / 2), (float)(Main.frozenTexture.Height / 2)), 1f, effects, 0f);
			}
			if (drawPlayer.iceBarrier && drawPlayer.shadow == 0f)
			{
				int num64 = this.iceBarrierTexture.Height / 12;
				Color white = Color.White;
				Main.spriteBatch.Draw(this.iceBarrierTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Rectangle?(new Rectangle(0, num64 * (int)drawPlayer.iceBarrierFrame, this.iceBarrierTexture.Width, num64)), white, 0f, new Vector2((float)(Main.frozenTexture.Width / 2), (float)(Main.frozenTexture.Height / 2)), 1f, effects, 0f);
			}
			if (drawPlayer.gem >= 0 && drawPlayer.shadow == 0f)
			{
				Main.spriteBatch.Draw(Main.gemTexture[drawPlayer.gem], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - 80f))), new Rectangle?(new Rectangle(0, 0, Main.gemTexture[drawPlayer.gem].Width, Main.gemTexture[drawPlayer.gem].Height)), new Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), 0f, new Vector2((float)(Main.gemTexture[drawPlayer.gem].Width / 2), (float)(Main.gemTexture[drawPlayer.gem].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
			}
			if (drawPlayer.beetleOffense || drawPlayer.beetleDefense)
			{
				for (int m = 0; m < drawPlayer.beetleOrbs; m++)
				{
					for (int n = 0; n < 5; n++)
					{
						Color color19 = color11;
						float num65 = (float)n * 0.1f;
						num65 = 0.5f - num65;
						color19.R = (byte)((float)color19.R * num65);
						color19.G = (byte)((float)color19.G * num65);
						color19.B = (byte)((float)color19.B * num65);
						color19.A = (byte)((float)color19.A * num65);
						Vector2 value = -drawPlayer.beetleVel[m] * (float)n;
						Main.spriteBatch.Draw(Main.beetleTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[m] + value, new Rectangle?(new Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color19, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, effects, 0f);
					}
					Main.spriteBatch.Draw(Main.beetleTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[m], new Rectangle?(new Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color11, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, effects, 0f);
				}
			}
			drawPlayer.position.Y = drawPlayer.position.Y + num2;
			if (drawPlayer.shadow == 0f)
			{
				drawPlayer.position.Y = drawPlayer.position.Y - drawPlayer.gfxOffY;
			}
			drawPlayer.itemLocation.Y = drawPlayer.itemLocation.Y - drawPlayer.gfxOffY;
		}
		private static void HelpText()
		{
			bool flag = false;
			if (Main.player[Main.myPlayer].statLifeMax > 100)
			{
				flag = true;
			}
			bool flag2 = false;
			if (Main.player[Main.myPlayer].statManaMax > 0)
			{
				flag2 = true;
			}
			bool flag3 = true;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			for (int i = 0; i < 58; i++)
			{
				if (Main.player[Main.myPlayer].inventory[i].pick > 0 && Main.player[Main.myPlayer].inventory[i].name != "Copper Pickaxe")
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].axe > 0 && Main.player[Main.myPlayer].inventory[i].name != "Copper Axe")
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].hammer > 0)
				{
					flag3 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 11 || Main.player[Main.myPlayer].inventory[i].type == 12 || Main.player[Main.myPlayer].inventory[i].type == 13 || Main.player[Main.myPlayer].inventory[i].type == 14)
				{
					flag4 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 19 || Main.player[Main.myPlayer].inventory[i].type == 20 || Main.player[Main.myPlayer].inventory[i].type == 21 || Main.player[Main.myPlayer].inventory[i].type == 22)
				{
					flag5 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 75)
				{
					flag6 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 38)
				{
					flag7 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 68 || Main.player[Main.myPlayer].inventory[i].type == 70)
				{
					flag8 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 84)
				{
					flag9 = true;
				}
			}
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			bool flag18 = false;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active)
				{
					if (Main.npc[j].type == 17)
					{
						flag10 = true;
					}
					if (Main.npc[j].type == 18)
					{
						flag11 = true;
					}
					if (Main.npc[j].type == 19)
					{
						flag13 = true;
					}
					if (Main.npc[j].type == 20)
					{
						flag12 = true;
					}
					if (Main.npc[j].type == 54)
					{
						flag18 = true;
					}
					if (Main.npc[j].type == 124)
					{
						flag15 = true;
					}
					if (Main.npc[j].type == 107)
					{
						flag14 = true;
					}
					if (Main.npc[j].type == 108)
					{
						flag16 = true;
					}
					if (Main.npc[j].type == 38)
					{
						flag17 = true;
					}
				}
			}
			while (true)
			{
				Main.helpText++;
				if (flag3)
				{
					if (Main.helpText == 1)
					{
						break;
					}
					if (Main.helpText == 2)
					{
						goto Block_31;
					}
					if (Main.helpText == 3)
					{
						goto Block_32;
					}
					if (Main.helpText == 4)
					{
						goto Block_33;
					}
					if (Main.helpText == 5)
					{
						goto Block_34;
					}
					if (Main.helpText == 6)
					{
						goto Block_35;
					}
				}
				if (flag3 && !flag4 && !flag5 && Main.helpText == 11)
				{
					goto Block_39;
				}
				if (flag3 && flag4 && !flag5)
				{
					if (Main.helpText == 21)
					{
						goto Block_43;
					}
					if (Main.helpText == 22)
					{
						goto Block_44;
					}
				}
				if (flag3 && flag5)
				{
					if (Main.helpText == 31)
					{
						goto Block_47;
					}
					if (Main.helpText == 32)
					{
						goto Block_48;
					}
				}
				if (!flag && Main.helpText == 41)
				{
					goto Block_50;
				}
				if (!flag2 && Main.helpText == 42)
				{
					goto Block_52;
				}
				if (!flag2 && !flag6 && Main.helpText == 43)
				{
					goto Block_55;
				}
				if (!flag10 && !flag11)
				{
					if (Main.helpText == 51)
					{
						goto Block_58;
					}
					if (Main.helpText == 52)
					{
						goto Block_59;
					}
					if (Main.helpText == 53)
					{
						goto Block_60;
					}
					if (Main.helpText == 54)
					{
						goto Block_61;
					}
				}
				if (!flag10 && Main.helpText == 61)
				{
					goto Block_63;
				}
				if (!flag11 && Main.helpText == 62)
				{
					goto Block_65;
				}
				if (!flag13 && Main.helpText == 63)
				{
					goto Block_67;
				}
				if (!flag12 && Main.helpText == 64)
				{
					goto Block_69;
				}
				if (!flag15 && Main.helpText == 65 && NPC.downedBoss3)
				{
					goto Block_72;
				}
				if (!flag18 && Main.helpText == 66 && NPC.downedBoss3)
				{
					goto Block_75;
				}
				if (!flag14 && Main.helpText == 67)
				{
					goto Block_77;
				}
				if (!flag17 && NPC.downedBoss2 && Main.helpText == 68)
				{
					goto Block_80;
				}
				if (!flag16 && Main.hardMode && Main.helpText == 69)
				{
					goto Block_83;
				}
				if (flag7 && Main.helpText == 71)
				{
					goto Block_85;
				}
				if (flag8 && Main.helpText == 72)
				{
					goto Block_87;
				}
				if ((flag7 || flag8) && Main.helpText == 80)
				{
					goto Block_89;
				}
				if (!flag9 && Main.helpText == 201 && !Main.hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
				{
					goto Block_94;
				}
				if (Main.helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					goto Block_97;
				}
				if (Main.helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					goto Block_100;
				}
				if (Main.helpText == 1002 && !NPC.downedBoss2)
				{
					goto Block_102;
				}
				if (Main.helpText == 1050 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax < 200)
				{
					goto Block_106;
				}
				if (Main.helpText == 1051 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statDefense <= 10)
				{
					goto Block_109;
				}
				if (Main.helpText == 1052 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax >= 200 && Main.player[Main.myPlayer].statDefense > 10)
				{
					goto Block_113;
				}
				if (Main.helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax < 300)
				{
					goto Block_117;
				}
				if (Main.helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
				{
					goto Block_121;
				}
				if (Main.helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
				{
					goto Block_125;
				}
				if (Main.helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
				{
					goto Block_129;
				}
				if (Main.helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax < 400)
				{
					goto Block_135;
				}
				if (Main.helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					goto Block_141;
				}
				if (Main.helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					goto Block_147;
				}
				if (Main.helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					goto Block_153;
				}
				if (Main.helpText == 1061 && Main.hardMode)
				{
					goto Block_155;
				}
				if (Main.helpText == 1062 && Main.hardMode)
				{
					goto Block_157;
				}
				if (Main.helpText > 1100)
				{
					Main.helpText = 0;
				}
			}
			Main.npcChatText = Lang.dialog(177, false);
			return;
			Block_31:
			Main.npcChatText = Lang.dialog(178, false);
			return;
			Block_32:
			Main.npcChatText = Lang.dialog(179, false);
			return;
			Block_33:
			Main.npcChatText = Lang.dialog(180, false);
			return;
			Block_34:
			Main.npcChatText = Lang.dialog(181, false);
			return;
			Block_35:
			Main.npcChatText = Lang.dialog(182, false);
			return;
			Block_39:
			Main.npcChatText = Lang.dialog(183, false);
			return;
			Block_43:
			Main.npcChatText = Lang.dialog(184, false);
			return;
			Block_44:
			Main.npcChatText = Lang.dialog(185, false);
			return;
			Block_47:
			Main.npcChatText = Lang.dialog(186, false);
			return;
			Block_48:
			Main.npcChatText = Lang.dialog(187, false);
			return;
			Block_50:
			Main.npcChatText = Lang.dialog(188, false);
			return;
			Block_52:
			Main.npcChatText = Lang.dialog(189, false);
			return;
			Block_55:
			Main.npcChatText = Lang.dialog(190, false);
			return;
			Block_58:
			Main.npcChatText = Lang.dialog(191, false);
			return;
			Block_59:
			Main.npcChatText = Lang.dialog(192, false);
			return;
			Block_60:
			Main.npcChatText = Lang.dialog(193, false);
			return;
			Block_61:
			Main.npcChatText = Lang.dialog(194, false);
			return;
			Block_63:
			Main.npcChatText = Lang.dialog(195, false);
			return;
			Block_65:
			Main.npcChatText = Lang.dialog(196, false);
			return;
			Block_67:
			Main.npcChatText = Lang.dialog(197, false);
			return;
			Block_69:
			Main.npcChatText = Lang.dialog(198, false);
			return;
			Block_72:
			Main.npcChatText = Lang.dialog(199, false);
			return;
			Block_75:
			Main.npcChatText = Lang.dialog(200, false);
			return;
			Block_77:
			Main.npcChatText = Lang.dialog(201, false);
			return;
			Block_80:
			Main.npcChatText = Lang.dialog(202, false);
			return;
			Block_83:
			Main.npcChatText = Lang.dialog(203, false);
			return;
			Block_85:
			Main.npcChatText = Lang.dialog(204, false);
			return;
			Block_87:
			Main.npcChatText = Lang.dialog(205, false);
			return;
			Block_89:
			Main.npcChatText = Lang.dialog(206, false);
			return;
			Block_94:
			Main.npcChatText = Lang.dialog(207, false);
			return;
			Block_97:
			Main.npcChatText = Lang.dialog(208, false);
			return;
			Block_100:
			Main.npcChatText = Lang.dialog(209, false);
			return;
			Block_102:
			if (WorldGen.crimson)
			{
				Main.npcChatText = Lang.dialog(331, false);
				return;
			}
			Main.npcChatText = Lang.dialog(210, false);
			return;
			Block_106:
			Main.npcChatText = Lang.dialog(211, false);
			return;
			Block_109:
			Main.npcChatText = Lang.dialog(212, false);
			return;
			Block_113:
			Main.npcChatText = Lang.dialog(213, false);
			return;
			Block_117:
			Main.npcChatText = Lang.dialog(214, false);
			return;
			Block_121:
			Main.npcChatText = Lang.dialog(215, false);
			return;
			Block_125:
			Main.npcChatText = Lang.dialog(216, false);
			return;
			Block_129:
			Main.npcChatText = Lang.dialog(217, false);
			return;
			Block_135:
			Main.npcChatText = Lang.dialog(218, false);
			return;
			Block_141:
			Main.npcChatText = Lang.dialog(219, false);
			return;
			Block_147:
			Main.npcChatText = Lang.dialog(220, false);
			return;
			Block_153:
			Main.npcChatText = Lang.dialog(221, false);
			return;
			Block_155:
			Main.npcChatText = Lang.dialog(222, false);
			return;
			Block_157:
			Main.npcChatText = Lang.dialog(223, false);
		}
		protected void DrawChat()
		{
			if (Main.player[Main.myPlayer].talkNPC < 0 && Main.player[Main.myPlayer].sign == -1)
			{
				Main.npcChatText = "";
				return;
			}
			if (Main.netMode == 0 && Main.autoPause && Main.player[Main.myPlayer].talkNPC >= 0)
			{
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 105)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(107);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 106)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(108);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 123)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(124);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 354)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(353);
				}
			}
			Color color = new Color(200, 200, 200, 200);
			int num = (int)((Main.mouseTextColor * 2 + 255) / 3);
			Color textColor = new Color(num, num, num, num);
			int num2;
			string[] array = Utils.WordwrapString(Main.npcChatText, Main.fontMouseText, 470, 10, out num2);
			if (Main.editSign)
			{
				this.textBlinkerCount++;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState == 0)
					{
						this.textBlinkerState = 1;
					}
					else
					{
						this.textBlinkerState = 0;
					}
					this.textBlinkerCount = 0;
				}
				if (this.textBlinkerState == 1)
				{
					string[] array2;
					IntPtr intPtr;
					(array2 = array)[(int)(intPtr = (IntPtr)num2)] = array2[(int)intPtr] + "|";
				}
			}
			num2++;
			Main.spriteBatch.Draw(Main.chatBackTexture, new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), 100f), new Rectangle?(new Rectangle(0, 0, Main.chatBackTexture.Width, (num2 + 1) * 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.spriteBatch.Draw(Main.chatBackTexture, new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), (float)(100 + (num2 + 1) * 30)), new Rectangle?(new Rectangle(0, Main.chatBackTexture.Height - 30, Main.chatBackTexture.Width, 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			for (int i = 0; i < num2; i++)
			{
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, array[i], (float)(170 + (Main.screenWidth - 800) / 2), (float)(120 + i * 30), textColor, Color.Black, Vector2.Zero, 1f);
			}
			num = (int)Main.mouseTextColor;
			textColor = new Color(num, (int)((double)num / 1.1), num / 2, num);
			string text = "";
			string text2 = "";
			int num3 = Main.player[Main.myPlayer].statLifeMax - Main.player[Main.myPlayer].statLife;
			for (int j = 0; j < 22; j++)
			{
				int num4 = Main.player[Main.myPlayer].buffType[j];
				if (Main.debuff[num4] && Main.player[Main.myPlayer].buffTime[j] > 0 && num4 != 28 && num4 != 34 && num4 != 87 && num4 != 89 && num4 != 21 && num4 != 86)
				{
					num3 += 1000;
				}
			}
			if (Main.player[Main.myPlayer].sign > -1)
			{
				if (Main.editSign)
				{
					text = Lang.inter[47];
				}
				else
				{
					text = Lang.inter[48];
				}
			}
			else
			{
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
				{
					text = Lang.inter[28];
					text2 = Lang.inter[49];
				}
				else
				{
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
					{
						text = Lang.inter[28];
						text2 = "Hair Style";
					}
					else
					{
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
						{
							text = Lang.inter[28];
						}
						else
						{
							if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
							{
								text = Lang.inter[28];
								if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
								{
									text2 = Lang.inter[19];
								}
							}
							else
							{
								if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
								{
									if (!Main.dayTime)
									{
										text = Lang.inter[50];
									}
								}
								else
								{
									if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
									{
										text = Lang.inter[51];
										text2 = Lang.inter[25];
									}
									else
									{
										if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 18)
										{
											string text3 = "";
											int num5 = 0;
											int num6 = 0;
											int num7 = 0;
											int num8 = 0;
											int num9 = num3;
											if (num9 > 0)
											{
												num9 = (int)((double)num9 * 0.75);
												if (num9 < 1)
												{
													num9 = 1;
												}
											}
											if (num9 < 0)
											{
												num9 = 0;
											}
											num3 = num9;
											if (num9 >= 1000000)
											{
												num5 = num9 / 1000000;
												num9 -= num5 * 1000000;
											}
											if (num9 >= 10000)
											{
												num6 = num9 / 10000;
												num9 -= num6 * 10000;
											}
											if (num9 >= 100)
											{
												num7 = num9 / 100;
												num9 -= num7 * 100;
											}
											if (num9 >= 1)
											{
												num8 = num9;
											}
											if (num5 > 0)
											{
												object obj = text3;
												text3 = string.Concat(new object[]
												{
													obj,
													num5,
													" ",
													Lang.inter[15],
													" "
												});
											}
											if (num6 > 0)
											{
												object obj2 = text3;
												text3 = string.Concat(new object[]
												{
													obj2,
													num6,
													" ",
													Lang.inter[16],
													" "
												});
											}
											if (num7 > 0)
											{
												object obj3 = text3;
												text3 = string.Concat(new object[]
												{
													obj3,
													num7,
													" ",
													Lang.inter[17],
													" "
												});
											}
											if (num8 > 0)
											{
												object obj4 = text3;
												text3 = string.Concat(new object[]
												{
													obj4,
													num8,
													" ",
													Lang.inter[18],
													" "
												});
											}
											float num10 = (float)Main.mouseTextColor / 255f;
											if (num5 > 0)
											{
												textColor = new Color((int)((byte)(220f * num10)), (int)((byte)(220f * num10)), (int)((byte)(198f * num10)), (int)Main.mouseTextColor);
											}
											else
											{
												if (num6 > 0)
												{
													textColor = new Color((int)((byte)(224f * num10)), (int)((byte)(201f * num10)), (int)((byte)(92f * num10)), (int)Main.mouseTextColor);
												}
												else
												{
													if (num7 > 0)
													{
														textColor = new Color((int)((byte)(181f * num10)), (int)((byte)(192f * num10)), (int)((byte)(193f * num10)), (int)Main.mouseTextColor);
													}
													else
													{
														if (num8 > 0)
														{
															textColor = new Color((int)((byte)(246f * num10)), (int)((byte)(138f * num10)), (int)((byte)(96f * num10)), (int)Main.mouseTextColor);
														}
													}
												}
											}
											text = Lang.inter[54] + " (" + text3 + ")";
											if (num9 == 0)
											{
												text = Lang.inter[54];
											}
										}
									}
								}
							}
						}
					}
				}
			}
			int num11 = 180 + (Main.screenWidth - 800) / 2;
			int num12 = 130 + num2 * 30;
			float scale = 0.9f;
			if (Main.mouseX > num11 && (float)Main.mouseX < (float)num11 + Main.fontMouseText.MeasureString(text).X && Main.mouseY > num12 && (float)Main.mouseY < (float)num12 + Main.fontMouseText.MeasureString(text).Y)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				scale = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = false;
			}
			Vector2 origin = Main.fontMouseText.MeasureString(text) * 0.5f;
			Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text, (float)num11 + origin.X, (float)num12 + origin.Y, textColor, Color.Black, origin, scale);
			string text4 = Lang.inter[52];
			textColor = new Color(num, (int)((double)num / 1.1), num / 2, num);
			num11 = num11 + (int)Main.fontMouseText.MeasureString(text).X + 20;
			int num13 = num11 + (int)Main.fontMouseText.MeasureString(text4).X;
			num12 = 130 + num2 * 30;
			scale = 0.9f;
			if (Main.mouseX > num11 && (float)Main.mouseX < (float)num11 + Main.fontMouseText.MeasureString(text4).X && Main.mouseY > num12 && (float)Main.mouseY < (float)num12 + Main.fontMouseText.MeasureString(text4).Y)
			{
				scale = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
				Main.player[Main.myPlayer].controlUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = false;
			}
			origin = Main.fontMouseText.MeasureString(text4) * 0.5f;
			Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text4, (float)num11 + origin.X, (float)num12 + origin.Y, textColor, Color.Black, origin, scale);
			if (text2 != "")
			{
				num11 = num13 + (int)Main.fontMouseText.MeasureString(text2).X / 3;
				num12 = 130 + num2 * 30;
				scale = 0.9f;
				if (Main.mouseX > num11 && (float)Main.mouseX < (float)num11 + Main.fontMouseText.MeasureString(text2).X && Main.mouseY > num12 && (float)Main.mouseY < (float)num12 + Main.fontMouseText.MeasureString(text2).Y)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					scale = 1.1f;
					if (!Main.npcChatFocus3)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					Main.npcChatFocus3 = true;
					Main.player[Main.myPlayer].releaseUseItem = false;
				}
				else
				{
					if (Main.npcChatFocus3)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					Main.npcChatFocus3 = false;
				}
				origin = Main.fontMouseText.MeasureString(text2) * 0.5f;
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, text2, (float)num11 + origin.X, (float)num12 + origin.Y, textColor, Color.Black, origin, scale);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				Main.mouseLeftRelease = false;
				Main.player[Main.myPlayer].releaseUseItem = false;
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.npcChatFocus1)
				{
					Main.player[Main.myPlayer].talkNPC = -1;
					Main.player[Main.myPlayer].sign = -1;
					Main.editSign = false;
					Main.npcChatText = "";
					Main.PlaySound(11, -1, -1, 1);
					return;
				}
				if (Main.npcChatFocus2)
				{
					if (Main.player[Main.myPlayer].sign != -1)
					{
						if (!Main.editSign)
						{
							Main.PlaySound(12, -1, -1, 1);
							Main.editSign = true;
							Main.clrInput();
							return;
						}
						Main.PlaySound(12, -1, -1, 1);
						int num14 = Main.player[Main.myPlayer].sign;
						Sign.TextSign(num14, Main.npcChatText);
						Main.editSign = false;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(47, -1, -1, "", num14, 0f, 0f, 0f, 0);
							return;
						}
					}
					else
					{
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 1;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 2;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 8;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 9;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 18;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 19;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
						{
							if (Main.netMode == 0)
							{
								NPC.SpawnSkeletron();
							}
							else
							{
								NetMessage.SendData(51, -1, -1, "", Main.myPlayer, 1f, 0f, 0f, 0);
							}
							Main.npcChatText = "";
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 3;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 4;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 5;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 6;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 7;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 10;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 11;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 12;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 13;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 14;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 15;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 16;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.npcShop = 17;
							this.shop[Main.npcShop].SetupShop(Main.npcShop);
							Main.PlaySound(12, -1, -1, 1);
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
						{
							Main.PlaySound(12, -1, -1, 1);
							Main.HelpText();
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 18)
						{
							Main.PlaySound(12, -1, -1, 1);
							if (num3 > 0)
							{
								if (Main.player[Main.myPlayer].BuyItem(num3))
								{
									Main.PlaySound(2, -1, -1, 4);
									Main.player[Main.myPlayer].HealEffect(Main.player[Main.myPlayer].statLifeMax - Main.player[Main.myPlayer].statLife, true);
									if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax * 0.25)
									{
										Main.npcChatText = Lang.dialog(227, false);
									}
									else
									{
										if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax * 0.5)
										{
											Main.npcChatText = Lang.dialog(228, false);
										}
										else
										{
											if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax * 0.75)
											{
												Main.npcChatText = Lang.dialog(229, false);
											}
											else
											{
												Main.npcChatText = Lang.dialog(230, false);
											}
										}
									}
									Main.player[Main.myPlayer].statLife = Main.player[Main.myPlayer].statLifeMax;
									for (int k = 0; k < 22; k++)
									{
										int num15 = Main.player[Main.myPlayer].buffType[k];
										if (Main.debuff[num15] && Main.player[Main.myPlayer].buffTime[k] > 0 && num15 != 28 && num15 != 34 && num15 != 87 && num15 != 89 && num15 != 21 && num15 != 86)
										{
											Main.player[Main.myPlayer].DelBuff(k);
										}
									}
									return;
								}
								int num16 = Main.rand.Next(3);
								if (num16 == 0)
								{
									Main.npcChatText = Lang.dialog(52, false);
								}
								if (num16 == 1)
								{
									Main.npcChatText = Lang.dialog(53, false);
								}
								if (num16 == 2)
								{
									Main.npcChatText = Lang.dialog(54, false);
									return;
								}
							}
							else
							{
								int num17 = Main.rand.Next(3);
								if (num17 == 0)
								{
									Main.npcChatText = Lang.dialog(55, false);
								}
								if (num17 == 1)
								{
									Main.npcChatText = Lang.dialog(56, false);
								}
								if (num17 == 2)
								{
									Main.npcChatText = Lang.dialog(57, false);
									return;
								}
							}
						}
					}
				}
				else
				{
					if (Main.npcChatFocus3 && Main.player[Main.myPlayer].talkNPC >= 0)
					{
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
						{
							Main.PlaySound(12, -1, -1, 1);
							Main.npcChatText = Lang.evilGood();
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.PlaySound(12, -1, -1, 1);
							Main.craftGuide = true;
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.PlaySound(12, -1, -1, 1);
							Main.reforge = true;
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
						{
							Main.OpenHairWindow();
						}
					}
				}
			}
		}
		private static bool AccCheck(Item newItem, int slot)
		{
			if (Main.player[Main.myPlayer].armor[slot].IsTheSameAs(newItem))
			{
				return false;
			}
			if (Main.player[Main.myPlayer].armor[slot].wingSlot > 0 && newItem.wingSlot > 0)
			{
				return false;
			}
			for (int i = 0; i < Main.player[Main.myPlayer].armor.Length; i++)
			{
				if (slot < 8 && i < 8)
				{
					if (newItem.wingSlot > 0 && Main.player[Main.myPlayer].armor[i].wingSlot > 0)
					{
						return true;
					}
				}
				else
				{
					if (slot >= 8 && i >= 8 && newItem.wingSlot > 0 && Main.player[Main.myPlayer].armor[i].wingSlot > 0)
					{
						return true;
					}
				}
				if (newItem.IsTheSameAs(Main.player[Main.myPlayer].armor[i]))
				{
					return true;
				}
			}
			return false;
		}
		public static Item dyeSwap(Item newItem)
		{
			if (newItem.dye <= 0)
			{
				return newItem;
			}
			for (int i = 0; i < 8; i++)
			{
				if (Main.player[Main.myPlayer].dye[i].type == 0)
				{
					Main.dyeSlotCount = i;
					break;
				}
			}
			if (Main.dyeSlotCount >= 8)
			{
				Main.dyeSlotCount = 0;
			}
			if (Main.dyeSlotCount < 0)
			{
				Main.dyeSlotCount = 7;
			}
			Item result = Main.player[Main.myPlayer].dye[Main.dyeSlotCount].Clone();
			Main.player[Main.myPlayer].dye[Main.dyeSlotCount] = newItem.Clone();
			Main.dyeSlotCount++;
			if (Main.dyeSlotCount >= 8)
			{
				Main.accSlotCount = 0;
			}
			Main.PlaySound(7, -1, -1, 1);
			Recipe.FindRecipes();
			return result;
		}
		public static Item armorSwap(Item newItem)
		{
			for (int i = 0; i < Main.player[Main.myPlayer].armor.Length; i++)
			{
				if (newItem.IsTheSameAs(Main.player[Main.myPlayer].armor[i]))
				{
					Main.accSlotCount = i;
				}
			}
			if (newItem.headSlot == -1 && newItem.bodySlot == -1 && newItem.legSlot == -1 && !newItem.accessory)
			{
				return newItem;
			}
			Item result = newItem;
			if (newItem.headSlot != -1)
			{
				result = Main.player[Main.myPlayer].armor[0].Clone();
				Main.player[Main.myPlayer].armor[0] = newItem.Clone();
			}
			else
			{
				if (newItem.bodySlot != -1)
				{
					result = Main.player[Main.myPlayer].armor[1].Clone();
					Main.player[Main.myPlayer].armor[1] = newItem.Clone();
				}
				else
				{
					if (newItem.legSlot != -1)
					{
						result = Main.player[Main.myPlayer].armor[2].Clone();
						Main.player[Main.myPlayer].armor[2] = newItem.Clone();
					}
					else
					{
						if (newItem.accessory)
						{
							for (int j = 3; j < 8; j++)
							{
								if (Main.player[Main.myPlayer].armor[j].type == 0)
								{
									Main.accSlotCount = j - 3;
									break;
								}
							}
							for (int k = 0; k < Main.player[Main.myPlayer].armor.Length; k++)
							{
								if (newItem.IsTheSameAs(Main.player[Main.myPlayer].armor[k]))
								{
									Main.accSlotCount = k - 3;
								}
								if (k < 8 && newItem.wingSlot > 0 && Main.player[Main.myPlayer].armor[k].wingSlot > 0)
								{
									Main.accSlotCount = k - 3;
								}
							}
							if (Main.accSlotCount >= 5)
							{
								Main.accSlotCount = 0;
							}
							if (Main.accSlotCount < 0)
							{
								Main.accSlotCount = 4;
							}
							result = Main.player[Main.myPlayer].armor[3 + Main.accSlotCount].Clone();
							Main.player[Main.myPlayer].armor[3 + Main.accSlotCount] = newItem.Clone();
							Main.accSlotCount++;
							if (Main.accSlotCount >= 5)
							{
								Main.accSlotCount = 0;
							}
						}
					}
				}
			}
			Main.PlaySound(7, -1, -1, 1);
			Recipe.FindRecipes();
			return result;
		}
		public static void MoveCoins(Item[] pInv, Item[] cInv)
		{
			int[] array = new int[4];
			List<int> list = new List<int>();
			List<int> list2 = new List<int>();
			bool flag = false;
			int[] array2 = new int[Chest.maxItems];
			for (int i = 0; i < cInv.Length; i++)
			{
				array2[i] = -1;
				if (cInv[i].stack < 1 || cInv[i].type < 1)
				{
					list2.Add(i);
					cInv[i] = new Item();
				}
				if (cInv[i] != null && cInv[i].stack > 0)
				{
					int num = 0;
					if (cInv[i].type == 71)
					{
						num = 1;
					}
					if (cInv[i].type == 72)
					{
						num = 2;
					}
					if (cInv[i].type == 73)
					{
						num = 3;
					}
					if (cInv[i].type == 74)
					{
						num = 4;
					}
					array2[i] = num - 1;
					if (num > 0)
					{
						array[num - 1] += cInv[i].stack;
						list2.Add(i);
						cInv[i] = new Item();
						flag = true;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			Main.PlaySound(7, -1, -1, 1);
			for (int j = 0; j < pInv.Length; j++)
			{
				if (j != 58 && pInv[j] != null && pInv[j].stack > 0)
				{
					int num2 = 0;
					if (pInv[j].type == 71)
					{
						num2 = 1;
					}
					if (pInv[j].type == 72)
					{
						num2 = 2;
					}
					if (pInv[j].type == 73)
					{
						num2 = 3;
					}
					if (pInv[j].type == 74)
					{
						num2 = 4;
					}
					if (num2 > 0)
					{
						array[num2 - 1] += pInv[j].stack;
						list.Add(j);
						pInv[j] = new Item();
					}
				}
			}
			for (int k = 0; k < 3; k++)
			{
				while (array[k] >= 100)
				{
					array[k] -= 100;
					array[k + 1]++;
				}
			}
			for (int l = 0; l < Chest.maxItems; l++)
			{
				if (array2[l] >= 0 && cInv[l].type == 0)
				{
					int num3 = l;
					int num4 = array2[l];
					if (array[num4] > 0)
					{
						cInv[num3].SetDefaults(71 + num4, false);
						cInv[num3].stack = array[num4];
						if (cInv[num3].stack > cInv[num3].maxStack)
						{
							cInv[num3].stack = cInv[num3].maxStack;
						}
						array[num4] -= cInv[num3].stack;
						array2[l] = -1;
					}
					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
					{
						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num3, 0f, 0f, 0);
					}
					list2.Remove(num3);
				}
			}
			for (int m = 0; m < Chest.maxItems; m++)
			{
				if (array2[m] >= 0 && cInv[m].type == 0)
				{
					int num5 = m;
					for (int n = 3; n >= 0; n--)
					{
						if (array[n] > 0)
						{
							cInv[num5].SetDefaults(71 + n, false);
							cInv[num5].stack = array[n];
							if (cInv[num5].stack > cInv[num5].maxStack)
							{
								cInv[num5].stack = cInv[num5].maxStack;
							}
							array[n] -= cInv[num5].stack;
							array2[m] = -1;
							break;
						}
					}
					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
					{
						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num5, 0f, 0f, 0);
					}
					list2.Remove(num5);
				}
			}
			while (list2.Count > 0)
			{
				int num6 = list2[0];
				for (int num7 = 3; num7 >= 0; num7--)
				{
					if (array[num7] > 0)
					{
						cInv[num6].SetDefaults(71 + num7, false);
						cInv[num6].stack = array[num7];
						if (cInv[num6].stack > cInv[num6].maxStack)
						{
							cInv[num6].stack = cInv[num6].maxStack;
						}
						array[num7] -= cInv[num6].stack;
						break;
					}
				}
				if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
				{
					NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)list2[0], 0f, 0f, 0);
				}
				list2.RemoveAt(0);
			}
			while (list.Count > 0)
			{
				int num8 = list[0];
				for (int num9 = 3; num9 >= 0; num9--)
				{
					if (array[num9] > 0)
					{
						pInv[num8].SetDefaults(71 + num9, false);
						pInv[num8].stack = array[num9];
						if (pInv[num8].stack > pInv[num8].maxStack)
						{
							pInv[num8].stack = pInv[num8].maxStack;
						}
						array[num9] -= pInv[num8].stack;
					}
				}
				list.RemoveAt(0);
			}
		}
		protected void DrawNPCHouse()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].townNPC && !Main.npc[i].homeless && Main.npc[i].homeTileX > 0 && Main.npc[i].homeTileY > 0 && Main.npc[i].type != 37)
				{
					int num = 1;
					int num2 = Main.npc[i].homeTileX;
					int num3 = Main.npc[i].homeTileY - 1;
					if (Main.tile[num2, num3] != null)
					{
						bool flag = false;
						while (!Main.tile[num2, num3].active() || !Main.tileSolid[(int)Main.tile[num2, num3].type])
						{
							num3--;
							if (num3 < 10)
							{
								break;
							}
							if (Main.tile[num2, num3] == null)
							{
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							int num4 = 8;
							int num5 = 18;
							if (Main.tile[num2, num3].type == 19)
							{
								num5 -= 8;
							}
							num3++;
							int num6 = 0;
							float num7 = (float)(num3 * 16);
							SpriteEffects effects = SpriteEffects.None;
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								num7 -= Main.screenPosition.Y;
								num7 = Main.screenPosition.Y + (float)Main.screenHeight - num7;
								num7 -= (float)Main.bannerTexture[num].Height;
								effects = SpriteEffects.FlipVertically;
								num6 = 4;
							}
							Main.spriteBatch.Draw(Main.bannerTexture[num], new Vector2((float)(num2 * 16 - (int)Main.screenPosition.X + num4), num7 - (float)((int)Main.screenPosition.Y) + (float)num5 + (float)num6), new Rectangle?(new Rectangle(0, 0, Main.bannerTexture[num].Width, Main.bannerTexture[num].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Main.bannerTexture[num].Width / 2), (float)(Main.bannerTexture[num].Height / 2)), 1f, effects, 0f);
							int num8 = NPC.TypeToNum(Main.npc[i].type);
							float scale = 1f;
							float num9;
							if (Main.npcHeadTexture[num8].Width > Main.npcHeadTexture[num8].Height)
							{
								num9 = (float)Main.npcHeadTexture[num8].Width;
							}
							else
							{
								num9 = (float)Main.npcHeadTexture[num8].Height;
							}
							if (num9 > 24f)
							{
								scale = 24f / num9;
							}
							Main.spriteBatch.Draw(Main.npcHeadTexture[num8], new Vector2((float)(num2 * 16 - (int)Main.screenPosition.X + num4), num7 - (float)((int)Main.screenPosition.Y) + (float)num5 + 2f), new Rectangle?(new Rectangle(0, 0, Main.npcHeadTexture[num8].Width, Main.npcHeadTexture[num8].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Main.npcHeadTexture[num8].Width / 2), (float)(Main.npcHeadTexture[num8].Height / 2)), scale, effects, 0f);
							num2 = num2 * 16 - (int)Main.screenPosition.X + num4 - Main.bannerTexture[num].Width / 2;
							num3 = num3 * 16 - (int)Main.screenPosition.Y + num5 - Main.bannerTexture[num].Height / 2;
							if (Main.mouseX >= num2 && Main.mouseX <= num2 + Main.bannerTexture[num].Width && Main.mouseY >= num3 && Main.mouseY <= num3 + Main.bannerTexture[num].Height)
							{
								this.MouseText(Main.npc[i].displayName + " the " + Main.npc[i].name, 0, 0);
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									Main.mouseRightRelease = false;
									WorldGen.kickOut(i);
									Main.PlaySound(12, -1, -1, 1);
								}
							}
						}
					}
				}
			}
		}
		protected void DrawPlayerChat()
		{
			if (Main.chatMode)
			{
				this.textBlinkerCount++;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState == 0)
					{
						this.textBlinkerState = 1;
					}
					else
					{
						this.textBlinkerState = 0;
					}
					this.textBlinkerCount = 0;
				}
				string text = Main.chatText;
				if (this.textBlinkerState == 1)
				{
					text += "|";
				}
				if (Main.screenWidth > 800)
				{
					int i = Main.screenWidth - 300;
					int num = 78;
					Main.spriteBatch.Draw(Main.textBackTexture, new Vector2((float)num, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(0, 0, Main.textBackTexture.Width - 100, Main.textBackTexture.Height)), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					i -= 400;
					num += 400;
					while (i > 0)
					{
						if (i > 300)
						{
							Main.spriteBatch.Draw(Main.textBackTexture, new Vector2((float)num, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(100, 0, Main.textBackTexture.Width - 200, Main.textBackTexture.Height)), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							i -= 300;
							num += 300;
						}
						else
						{
							Main.spriteBatch.Draw(Main.textBackTexture, new Vector2((float)num, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(Main.textBackTexture.Width - i, 0, Main.textBackTexture.Width - (Main.textBackTexture.Width - i), Main.textBackTexture.Height)), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							i = 0;
						}
					}
				}
				else
				{
					Main.spriteBatch.Draw(Main.textBackTexture, new Vector2(78f, (float)(Main.screenHeight - 36)), new Rectangle?(new Rectangle(0, 0, Main.textBackTexture.Width, Main.textBackTexture.Height)), new Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int j = 0; j < 5; j++)
				{
					int num2 = 0;
					int num3 = 0;
					Color black = Color.Black;
					if (j == 0)
					{
						num2 = -2;
					}
					if (j == 1)
					{
						num2 = 2;
					}
					if (j == 2)
					{
						num3 = -2;
					}
					if (j == 3)
					{
						num3 = 2;
					}
					if (j == 4)
					{
						black = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)(88 + num2), (float)(Main.screenHeight - 30 + num3)), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			int num4 = Main.startChatLine;
			int num5 = Main.startChatLine + Main.showCount;
			if (num5 >= Main.numChatLines)
			{
				num5 = --Main.numChatLines;
				num4 = num5 - Main.showCount;
			}
			int num6 = 0;
			for (int k = num4; k < num5; k++)
			{
				if (Main.chatMode || Main.chatLine[k].showTime > 0)
				{
					float num7 = (float)Main.mouseTextColor / 255f;
					for (int l = 0; l < 5; l++)
					{
						int num8 = 0;
						int num9 = 0;
						Color black2 = Color.Black;
						if (l == 0)
						{
							num8 = -2;
						}
						if (l == 1)
						{
							num8 = 2;
						}
						if (l == 2)
						{
							num9 = -2;
						}
						if (l == 3)
						{
							num9 = 2;
						}
						if (l == 4)
						{
							black2 = new Color((int)((byte)((float)Main.chatLine[k].color.R * num7)), (int)((byte)((float)Main.chatLine[k].color.G * num7)), (int)((byte)((float)Main.chatLine[k].color.B * num7)), (int)Main.mouseTextColor);
						}
						Main.spriteBatch.DrawString(Main.fontMouseText, Main.chatLine[k].text, new Vector2((float)(88 + num8), (float)(Main.screenHeight - 30 + num9 - 28 - num6 * 21)), black2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
				num6++;
			}
		}
		protected void DrawInventory()
		{
			if (Main.netMode == 1)
			{
				int num = 675 + Main.screenWidth - 800;
				int num2 = 114 + Main.mH;
				if (Main.player[Main.myPlayer].hostile)
				{
					Main.spriteBatch.Draw(Main.itemTexture[4], new Vector2((float)(num - 2), (float)num2), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[4].Width, Main.itemTexture[4].Height)), Main.teamColor[Main.player[Main.myPlayer].team], 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(Main.itemTexture[4], new Vector2((float)(num + 2), (float)num2), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[4].Width, Main.itemTexture[4].Height)), Main.teamColor[Main.player[Main.myPlayer].team], 0f, default(Vector2), 1f, SpriteEffects.FlipHorizontally, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.itemTexture[4], new Vector2((float)(num - 16), (float)(num2 + 14)), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[4].Width, Main.itemTexture[4].Height)), Main.teamColor[Main.player[Main.myPlayer].team], -0.785f, default(Vector2), 1f, SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(Main.itemTexture[4], new Vector2((float)(num + 2), (float)(num2 + 14)), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[4].Width, Main.itemTexture[4].Height)), Main.teamColor[Main.player[Main.myPlayer].team], -0.785f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (Main.mouseX > num && Main.mouseX < num + 34 && Main.mouseY > num2 - 2 && Main.mouseY < num2 + 34)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease && Main.teamCooldown == 0)
					{
						Main.teamCooldown = Main.teamCooldownLen;
						Main.PlaySound(12, -1, -1, 1);
						if (Main.player[Main.myPlayer].hostile)
						{
							Main.player[Main.myPlayer].hostile = false;
						}
						else
						{
							Main.player[Main.myPlayer].hostile = true;
						}
						NetMessage.SendData(30, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
					}
				}
				num -= 3;
				Rectangle value = new Rectangle(Main.mouseX, Main.mouseY, 1, 1);
				int width = Main.teamTexture.Width;
				int height = Main.teamTexture.Height;
				for (int i = 0; i < 5; i++)
				{
					Rectangle rectangle = default(Rectangle);
					if (i == 0)
					{
						rectangle = new Rectangle(num + 50, num2 - 20, width, height);
					}
					if (i == 1)
					{
						rectangle = new Rectangle(num + 40, num2, width, height);
					}
					if (i == 2)
					{
						rectangle = new Rectangle(num + 60, num2, width, height);
					}
					if (i == 3)
					{
						rectangle = new Rectangle(num + 40, num2 + 20, width, height);
					}
					if (i == 4)
					{
						rectangle = new Rectangle(num + 60, num2 + 20, width, height);
					}
					if (rectangle.Intersects(value))
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease && Main.player[Main.myPlayer].team != i && Main.teamCooldown == 0)
						{
							Main.teamCooldown = Main.teamCooldownLen;
							Main.PlaySound(12, -1, -1, 1);
							Main.player[Main.myPlayer].team = i;
							NetMessage.SendData(45, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
						}
					}
				}
				Main.spriteBatch.Draw(Main.teamTexture, new Vector2((float)(num + 50), (float)(num2 - 20)), new Rectangle?(new Rectangle(0, 0, Main.teamTexture.Width, Main.teamTexture.Height)), Main.teamColor[0], 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.teamTexture, new Vector2((float)(num + 40), (float)num2), new Rectangle?(new Rectangle(0, 0, Main.teamTexture.Width, Main.teamTexture.Height)), Main.teamColor[1], 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.teamTexture, new Vector2((float)(num + 60), (float)num2), new Rectangle?(new Rectangle(0, 0, Main.teamTexture.Width, Main.teamTexture.Height)), Main.teamColor[2], 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.teamTexture, new Vector2((float)(num + 40), (float)(num2 + 20)), new Rectangle?(new Rectangle(0, 0, Main.teamTexture.Width, Main.teamTexture.Height)), Main.teamColor[3], 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.teamTexture, new Vector2((float)(num + 60), (float)(num2 + 20)), new Rectangle?(new Rectangle(0, 0, Main.teamTexture.Width, Main.teamTexture.Height)), Main.teamColor[4], 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			bool flag = false;
			Main.inventoryScale = 0.85f;
			int num3 = 448;
			int num4 = 258;
			if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop > 0)
			{
				num4 += 168;
				Main.inventoryScale = 0.755f;
				num3 += 5;
			}
			Color white = new Color(150, 150, 150, 150);
			if (Main.mouseX >= num3 && (float)Main.mouseX <= (float)num3 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num4 && (float)Main.mouseY <= (float)num4 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeftRelease && Main.mouseLeft)
				{
					if (Main.mouseItem.type != 0)
					{
						Main.trashItem.SetDefaults(0, false);
					}
					Item item = Main.mouseItem;
					Main.mouseItem = Main.trashItem;
					Main.trashItem = item;
					if (Main.trashItem.type == 0 || Main.trashItem.stack < 1)
					{
						Main.trashItem = new Item();
					}
					if (Main.mouseItem.IsTheSameAs(Main.trashItem) && Main.trashItem.stack != Main.trashItem.maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
					{
						if (Main.mouseItem.stack + Main.trashItem.stack <= Main.mouseItem.maxStack)
						{
							Main.trashItem.stack += Main.mouseItem.stack;
							Main.mouseItem.stack = 0;
						}
						else
						{
							int num5 = Main.mouseItem.maxStack - Main.trashItem.stack;
							Main.trashItem.stack += num5;
							Main.mouseItem.stack -= num5;
						}
					}
					if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
					{
						Main.mouseItem = new Item();
					}
					if (Main.mouseItem.type > 0 || Main.trashItem.type > 0)
					{
						Main.PlaySound(7, -1, -1, 1);
					}
				}
				if (!flag)
				{
					Main.hoverItemName = Main.trashItem.name;
					if (Main.trashItem.stack > 1)
					{
						object obj = Main.hoverItemName;
						Main.hoverItemName = string.Concat(new object[]
						{
							obj,
							" (",
							Main.trashItem.stack,
							")"
						});
					}
					Main.toolTip = Main.trashItem.Clone();
					if (Main.hoverItemName == null)
					{
						Main.hoverItemName = Lang.inter[3];
					}
				}
				else
				{
					Main.hoverItemName = Lang.inter[3];
				}
			}
			Main.spriteBatch.Draw(Main.inventoryBack7Texture, new Vector2((float)num3, (float)num4), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
			white = Color.White;
			if (Main.trashItem.type == 0 || Main.trashItem.stack == 0 || flag)
			{
				white = new Color(100, 100, 100, 100);
				float num6 = Main.inventoryScale;
				Main.spriteBatch.Draw(Main.trashTexture, new Vector2((float)num3 + 26f * Main.inventoryScale - (float)Main.trashTexture.Width * 0.5f * num6, (float)num4 + 26f * Main.inventoryScale - (float)Main.trashTexture.Height * 0.5f * num6), new Rectangle?(new Rectangle(0, 0, Main.trashTexture.Width, Main.trashTexture.Height)), white, 0f, default(Vector2), num6, SpriteEffects.None, 0f);
			}
			else
			{
				float num7 = 1f;
				if (Main.itemTexture[Main.trashItem.type].Width > 32 || Main.itemTexture[Main.trashItem.type].Height > 32)
				{
					if (Main.itemTexture[Main.trashItem.type].Width > Main.itemTexture[Main.trashItem.type].Height)
					{
						num7 = 32f / (float)Main.itemTexture[Main.trashItem.type].Width;
					}
					else
					{
						num7 = 32f / (float)Main.itemTexture[Main.trashItem.type].Height;
					}
				}
				num7 *= Main.inventoryScale;
				if (Main.trashItem.type == 662 || Main.trashItem.type == 663)
				{
					white.R = (byte)Main.DiscoR;
					white.G = (byte)Main.DiscoG;
					white.B = (byte)Main.DiscoB;
					white.A = 255;
				}
				Main.spriteBatch.Draw(Main.itemTexture[Main.trashItem.type], new Vector2((float)num3 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.trashItem.type].Width * 0.5f * num7, (float)num4 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.trashItem.type].Height * 0.5f * num7), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.trashItem.type].Width, Main.itemTexture[Main.trashItem.type].Height)), Main.trashItem.GetAlpha(white), 0f, default(Vector2), num7, SpriteEffects.None, 0f);
				if (Main.trashItem.color != default(Color))
				{
					Main.spriteBatch.Draw(Main.itemTexture[Main.trashItem.type], new Vector2((float)num3 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.trashItem.type].Width * 0.5f * num7, (float)num4 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.trashItem.type].Height * 0.5f * num7), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.trashItem.type].Width, Main.itemTexture[Main.trashItem.type].Height)), Main.trashItem.GetColor(white), 0f, default(Vector2), num7, SpriteEffects.None, 0f);
				}
				white = Color.White;
				if (Main.trashItem.stack > 1)
				{
					Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.trashItem.stack), new Vector2((float)num3 + 10f * Main.inventoryScale, (float)num4 + 26f * Main.inventoryScale), white, 0f, default(Vector2), num7, SpriteEffects.None, 0f);
				}
			}
			Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[4], new Vector2(40f, 0f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.85f;
			if (Main.mouseX > 20 && Main.mouseX < (int)(20f + 560f * Main.inventoryScale) && Main.mouseY > 20 && Main.mouseY < (int)(20f + 224f * Main.inventoryScale))
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			for (int j = 0; j < 10; j++)
			{
				for (int k = 0; k < 5; k++)
				{
					int num8 = (int)(20f + (float)(j * 56) * Main.inventoryScale);
					int num9 = (int)(20f + (float)(k * 56) * Main.inventoryScale);
					int num10 = j + k * 10;
					Color white2 = new Color(100, 100, 100, 100);
					if (Main.mouseX >= num8 && (float)Main.mouseX <= (float)num8 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num9 && (float)Main.mouseY <= (float)num9 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftShift))
							{
								if (Main.player[Main.myPlayer].inventory[num10].type > 0)
								{
									if (Main.npcShop > 0)
									{
										if (Main.player[Main.myPlayer].inventory[num10].type < 71 || Main.player[Main.myPlayer].inventory[num10].type > 74)
										{
											if (Main.player[Main.myPlayer].SellItem(Main.player[Main.myPlayer].inventory[num10].value, Main.player[Main.myPlayer].inventory[num10].stack))
											{
												this.shop[Main.npcShop].AddShop(Main.player[Main.myPlayer].inventory[num10]);
												Main.player[Main.myPlayer].inventory[num10].SetDefaults(0, false);
												Main.PlaySound(18, -1, -1, 1);
											}
											else
											{
												if (Main.player[Main.myPlayer].inventory[num10].value == 0)
												{
													this.shop[Main.npcShop].AddShop(Main.player[Main.myPlayer].inventory[num10]);
													Main.player[Main.myPlayer].inventory[num10].SetDefaults(0, false);
													Main.PlaySound(7, -1, -1, 1);
												}
											}
										}
									}
									else
									{
										Main.PlaySound(7, -1, -1, 1);
										Main.trashItem = Main.player[Main.myPlayer].inventory[num10].Clone();
										Main.player[Main.myPlayer].inventory[num10].SetDefaults(0, false);
										Recipe.FindRecipes();
									}
								}
							}
							else
							{
								if ((Main.player[Main.myPlayer].selectedItem != num10 || Main.player[Main.myPlayer].itemAnimation <= 0) && Main.player[Main.myPlayer].itemTime == 0)
								{
									Item item2 = Main.mouseItem;
									Main.mouseItem = Main.player[Main.myPlayer].inventory[num10];
									Main.player[Main.myPlayer].inventory[num10] = item2;
									if (Main.player[Main.myPlayer].inventory[num10].type == 0 || Main.player[Main.myPlayer].inventory[num10].stack < 1)
									{
										Main.player[Main.myPlayer].inventory[num10] = new Item();
									}
									if (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].inventory[num10]) && Main.player[Main.myPlayer].inventory[num10].stack != Main.player[Main.myPlayer].inventory[num10].maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
									{
										if (Main.mouseItem.stack + Main.player[Main.myPlayer].inventory[num10].stack <= Main.mouseItem.maxStack)
										{
											Main.player[Main.myPlayer].inventory[num10].stack += Main.mouseItem.stack;
											Main.mouseItem.stack = 0;
										}
										else
										{
											int num11 = Main.mouseItem.maxStack - Main.player[Main.myPlayer].inventory[num10].stack;
											Main.player[Main.myPlayer].inventory[num10].stack += num11;
											Main.mouseItem.stack -= num11;
										}
									}
									if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
									{
										Main.mouseItem = new Item();
									}
									if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].inventory[num10].type > 0)
									{
										Recipe.FindRecipes();
										Main.PlaySound(7, -1, -1, 1);
									}
								}
							}
							Recipe.FindRecipes();
						}
						else
						{
							if (Main.mouseRight && Main.player[Main.myPlayer].inventory[num10].type == 1774)
							{
								if (Main.mouseRightRelease)
								{
									Main.player[Main.myPlayer].inventory[num10].stack--;
									if (Main.player[Main.myPlayer].inventory[num10].stack == 0)
									{
										Main.player[Main.myPlayer].inventory[num10].SetDefaults(0, false);
									}
									Main.PlaySound(7, -1, -1, 1);
									Main.stackSplit = 30;
									Main.mouseRightRelease = false;
									Main.player[Main.myPlayer].openGoodieBag();
									Recipe.FindRecipes();
								}
							}
							else
							{
								if (Main.mouseRight && Main.player[Main.myPlayer].inventory[num10].type == 1869)
								{
									if (Main.mouseRightRelease)
									{
										Main.player[Main.myPlayer].inventory[num10].stack--;
										if (Main.player[Main.myPlayer].inventory[num10].stack == 0)
										{
											Main.player[Main.myPlayer].inventory[num10].SetDefaults(0, false);
										}
										Main.PlaySound(7, -1, -1, 1);
										Main.stackSplit = 30;
										Main.mouseRightRelease = false;
										Main.player[Main.myPlayer].openPresent();
										Recipe.FindRecipes();
									}
								}
								else
								{
									if (Main.mouseRight && Main.mouseRightRelease && (Main.player[Main.myPlayer].inventory[num10].type == 599 || Main.player[Main.myPlayer].inventory[num10].type == 600 || Main.player[Main.myPlayer].inventory[num10].type == 601))
									{
										Main.PlaySound(7, -1, -1, 1);
										Main.stackSplit = 30;
										Main.mouseRightRelease = false;
										int num12 = Main.rand.Next(14);
										if (num12 == 0 && Main.hardMode)
										{
											Main.player[Main.myPlayer].inventory[num10].SetDefaults(602, false);
										}
										else
										{
											if (num12 <= 7)
											{
												Main.player[Main.myPlayer].inventory[num10].SetDefaults(586, false);
												Main.player[Main.myPlayer].inventory[num10].stack = Main.rand.Next(20, 50);
											}
											else
											{
												Main.player[Main.myPlayer].inventory[num10].SetDefaults(591, false);
												Main.player[Main.myPlayer].inventory[num10].stack = Main.rand.Next(20, 50);
											}
										}
										Recipe.FindRecipes();
									}
									else
									{
										if (Main.mouseRight && Main.mouseRightRelease && Main.player[Main.myPlayer].inventory[num10].maxStack == 1)
										{
											if (Main.player[Main.myPlayer].inventory[num10].dye > 0)
											{
												Main.player[Main.myPlayer].inventory[num10] = Main.dyeSwap(Main.player[Main.myPlayer].inventory[num10]);
											}
											else
											{
												Main.player[Main.myPlayer].inventory[num10] = Main.armorSwap(Main.player[Main.myPlayer].inventory[num10]);
											}
										}
										else
										{
											if (Main.stackSplit <= 1 && Main.mouseRight && Main.player[Main.myPlayer].inventory[num10].maxStack > 1 && Main.player[Main.myPlayer].inventory[num10].type > 0 && (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].inventory[num10]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
											{
												if (Main.mouseItem.type == 0)
												{
													Main.mouseItem = Main.player[Main.myPlayer].inventory[num10].Clone();
													Main.mouseItem.stack = 0;
												}
												Main.mouseItem.stack++;
												Main.player[Main.myPlayer].inventory[num10].stack--;
												if (Main.player[Main.myPlayer].inventory[num10].stack <= 0)
												{
													Main.player[Main.myPlayer].inventory[num10] = new Item();
												}
												Recipe.FindRecipes();
												Main.soundInstanceMenuTick.Stop();
												Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
												Main.PlaySound(12, -1, -1, 1);
												if (Main.stackSplit == 0)
												{
													Main.stackSplit = 15;
												}
												else
												{
													Main.stackSplit = Main.stackDelay;
												}
											}
										}
									}
								}
							}
						}
						Main.hoverItemName = Main.player[Main.myPlayer].inventory[num10].name;
						Main.toolTip = Main.player[Main.myPlayer].inventory[num10].Clone();
						if (Main.player[Main.myPlayer].inventory[num10].stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.player[Main.myPlayer].inventory[num10].stack,
								")"
							});
						}
					}
					if (k != 0)
					{
						Main.spriteBatch.Draw(Main.inventoryBackTexture, new Vector2((float)num8, (float)num9), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.inventoryBack9Texture, new Vector2((float)num8, (float)num9), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
					}
					white2 = Color.White;
					if (Main.player[Main.myPlayer].inventory[num10].type > 0 && Main.player[Main.myPlayer].inventory[num10].stack > 0)
					{
						float num13 = 1f;
						if (Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Height > 32)
						{
							if (Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Width > Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Height)
							{
								num13 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Width;
							}
							else
							{
								num13 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Height;
							}
						}
						num13 *= Main.inventoryScale;
						if (Main.player[Main.myPlayer].inventory[num10].type == 662 || Main.player[Main.myPlayer].inventory[num10].type == 663)
						{
							white2.R = (byte)Main.DiscoR;
							white2.G = (byte)Main.DiscoG;
							white2.B = (byte)Main.DiscoB;
							white2.A = 255;
						}
						Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type], new Vector2((float)num8 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Width * 0.5f * num13, (float)num9 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Height * 0.5f * num13), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Height)), Main.player[Main.myPlayer].inventory[num10].GetAlpha(white2), 0f, default(Vector2), num13, SpriteEffects.None, 0f);
						white2 = Color.White;
						if (Main.player[Main.myPlayer].inventory[num10].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type], new Vector2((float)num8 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Width * 0.5f * num13, (float)num9 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Height * 0.5f * num13), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[num10].type].Height)), Main.player[Main.myPlayer].inventory[num10].GetColor(white2), 0f, default(Vector2), num13, SpriteEffects.None, 0f);
						}
						if (Main.player[Main.myPlayer].inventory[num10].stack > 1)
						{
							Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].inventory[num10].stack), new Vector2((float)num8 + 10f * Main.inventoryScale, (float)num9 + 26f * Main.inventoryScale), white2, 0f, default(Vector2), num13, SpriteEffects.None, 0f);
						}
					}
					if (k == 0)
					{
						string text = string.Concat(num10 + 1);
						if (text == "10")
						{
							text = "0";
						}
						Color color = Main.inventoryBack;
						if (Main.player[Main.myPlayer].selectedItem == num10)
						{
							color.R = 0;
							color.B = 0;
							color.G = 255;
							color.A = 50;
						}
						Main.spriteBatch.DrawString(Main.fontItemStack, text, new Vector2((float)(num8 + 6), (float)(num9 + 4)), color, 0f, default(Vector2), Main.inventoryScale * 0.8f, SpriteEffects.None, 0f);
					}
				}
			}
			int num14 = 0;
			int num15 = 2;
			int num16 = 32;
			if (!Main.player[Main.myPlayer].hbLocked)
			{
				num14 = 1;
			}
			Main.spriteBatch.Draw(Main.HBLockTexture[num14], new Vector2((float)num15, (float)num16), new Rectangle?(new Rectangle(0, 0, Main.HBLockTexture[num14].Width, Main.HBLockTexture[num14].Height)), Main.inventoryBack, 0f, default(Vector2), 0.9f, SpriteEffects.None, 0f);
			if (Main.mouseX > num15 && (float)Main.mouseX < (float)num15 + (float)Main.HBLockTexture[num14].Width * 0.9f && Main.mouseY > num16 && (float)Main.mouseY < (float)num16 + (float)Main.HBLockTexture[num14].Height * 0.9f)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (!Main.player[Main.myPlayer].hbLocked)
				{
					this.MouseText(Lang.inter[5], 0, 0);
					Main.mouseText = true;
				}
				else
				{
					this.MouseText(Lang.inter[6], 0, 0);
					Main.mouseText = true;
				}
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.PlaySound(22, -1, -1, 1);
					if (!Main.player[Main.myPlayer].hbLocked)
					{
						Main.player[Main.myPlayer].hbLocked = true;
					}
					else
					{
						Main.player[Main.myPlayer].hbLocked = false;
					}
				}
			}
			if (Main.mapEnabled)
			{
				bool flag2 = false;
				int num17 = Main.screenWidth - 440;
				int num18 = 40;
				if (Main.screenWidth < 940)
				{
					flag2 = true;
				}
				if (flag2)
				{
					num17 = Main.screenWidth - 40;
					num18 = Main.screenHeight - 200;
				}
				for (int l = 0; l < 4; l++)
				{
					int num19 = num17 + l * 32;
					int num20 = num18;
					if (flag2)
					{
						num19 = num17;
						num20 = num18 + l * 32;
					}
					int num21 = l;
					int num22 = 120;
					if (l > 0 && Main.mapStyle == l - 1)
					{
						num22 = 200;
					}
					if (Main.mouseX >= num19 && Main.mouseX <= num19 + 32 && Main.mouseY >= num20 && Main.mouseY <= num20 + 30)
					{
						num22 = 255;
						num21 += 4;
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (l == 0)
							{
								Main.playerInventory = false;
								Main.player[Main.myPlayer].talkNPC = -1;
								Main.PlaySound(10, -1, -1, 1);
								float num23 = 2.5f;
								Main.mapFullscreenScale = num23;
								Main.mapFullscreen = true;
								Main.resetMapFull = true;
							}
							if (l == 1)
							{
								Main.mapStyle = 0;
								Main.PlaySound(12, -1, -1, 1);
							}
							if (l == 2)
							{
								Main.mapStyle = 1;
								Main.PlaySound(12, -1, -1, 1);
							}
							if (l == 3)
							{
								Main.mapStyle = 2;
								Main.PlaySound(12, -1, -1, 1);
							}
						}
					}
					Main.spriteBatch.Draw(this.mapIconTexture[num21], new Vector2((float)num19, (float)num20), new Rectangle?(new Rectangle(0, 0, this.mapIconTexture[num21].Width, this.mapIconTexture[num21].Height)), new Color(num22, num22, num22, num22), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			if (Main.armorHide)
			{
				Main.armorAlpha -= 0.1f;
				if (Main.armorAlpha < 0f)
				{
					Main.armorAlpha = 0f;
				}
			}
			else
			{
				Main.armorAlpha += 0.025f;
				if (Main.armorAlpha > 1f)
				{
					Main.armorAlpha = 1f;
				}
			}
			Color color2 = new Color((int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.armorAlpha)));
			Main.armorHide = false;
			int num24 = 1;
			int num25 = Main.screenWidth - 152;
			int num26 = 128 + Main.mH;
			if (Main.netMode == 0)
			{
				num25 += 72;
			}
			if (this.showNPCs)
			{
				num24 = 0;
			}
			Main.spriteBatch.Draw(Main.npcToggleTexture[num24], new Vector2((float)num25, (float)num26), new Rectangle?(new Rectangle(0, 0, Main.npcToggleTexture[num24].Width, Main.npcToggleTexture[num24].Height)), Color.White, 0f, default(Vector2), 0.9f, SpriteEffects.None, 0f);
			if (Main.mouseX > num25 && (float)Main.mouseX < (float)num25 + (float)Main.npcToggleTexture[num24].Width * 0.9f && Main.mouseY > num26 && (float)Main.mouseY < (float)num26 + (float)Main.npcToggleTexture[num24].Height * 0.9f)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.PlaySound(12, -1, -1, 1);
					if (!this.showNPCs)
					{
						this.showNPCs = true;
					}
					else
					{
						this.showNPCs = false;
					}
				}
			}
			if (this.showNPCs)
			{
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[7], new Vector2((float)(Main.screenWidth - 64 - 28 - 3), (float)(152 + Main.mH)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
				if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 448f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				int num27 = 0;
				string cursorText = "";
				int num28 = 0;
				int num29 = 0;
				for (int m = 0; m < Main.npcHeadTexture.Length; m++)
				{
					bool flag3 = false;
					int num30 = 0;
					if (m == 0)
					{
						flag3 = true;
					}
					else
					{
						if (m == 21)
						{
							flag3 = false;
						}
						else
						{
							for (int n = 0; n < 200; n++)
							{
								if (Main.npc[n].active && NPC.TypeToNum(Main.npc[n].type) == m)
								{
									flag3 = true;
									num30 = n;
									break;
								}
							}
						}
					}
					if (flag3)
					{
						int num31 = Main.screenWidth - 64 - 28 + num29;
						int num32 = (int)((float)(174 + Main.mH) + (float)(num27 * 56) * Main.inventoryScale) + num28;
						Color white3 = new Color(100, 100, 100, 100);
						if (num32 > Main.screenHeight - 80)
						{
							num29 -= 48;
							num28 -= num32 - (174 + Main.mH);
							num31 = Main.screenWidth - 64 - 28 + num29;
							num32 = (int)((float)(174 + Main.mH) + (float)(num27 * 56) * Main.inventoryScale) + num28;
						}
						if (Main.mouseX >= num31 && (float)Main.mouseX <= (float)num31 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num32 && (float)Main.mouseY <= (float)num32 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.mouseText = true;
							if (m == 0)
							{
								cursorText = Lang.inter[8];
							}
							else
							{
								if (m == 11)
								{
									cursorText = Main.npc[num30].displayName;
								}
								else
								{
									cursorText = Main.npc[num30].displayName + " the " + Main.npc[num30].name;
								}
							}
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && Main.mouseItem.type == 0)
							{
								Main.PlaySound(12, -1, -1, 1);
								this.mouseNPC = m;
								Main.mouseLeftRelease = false;
							}
						}
						Main.spriteBatch.Draw(Main.inventoryBack11Texture, new Vector2((float)num31, (float)num32), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						white3 = Color.White;
						int num33 = m;
						float scale = 1f;
						float num34;
						if (Main.npcHeadTexture[num33].Width > Main.npcHeadTexture[num33].Height)
						{
							num34 = (float)Main.npcHeadTexture[num33].Width;
						}
						else
						{
							num34 = (float)Main.npcHeadTexture[num33].Height;
						}
						if (num34 > 36f)
						{
							scale = 36f / num34;
						}
						Main.spriteBatch.Draw(Main.npcHeadTexture[num33], new Vector2((float)num31 + 26f * Main.inventoryScale, (float)num32 + 26f * Main.inventoryScale), new Rectangle?(new Rectangle(0, 0, Main.npcHeadTexture[num33].Width, Main.npcHeadTexture[num33].Height)), white3, 0f, new Vector2((float)(Main.npcHeadTexture[num33].Width / 2), (float)(Main.npcHeadTexture[num33].Height / 2)), scale, SpriteEffects.None, 0f);
						num27++;
					}
				}
				if (cursorText != "" && Main.mouseItem.type == 0)
				{
					this.MouseText(cursorText, 0, 0);
				}
			}
			else
			{
				int num35 = 4;
				Vector2 vector = Main.fontMouseText.MeasureString("Equip");
				Vector2 vector2 = Main.fontMouseText.MeasureString(Lang.inter[45]);
				float num36 = vector.X / vector2.X;
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[45], new Vector2((float)(Main.screenWidth - 64 - 28 + 4), (float)(152 + Main.mH) + (vector.Y - vector.Y * num36) / 2f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.8f * num36, SpriteEffects.None, 0f);
				if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 448f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				float num37 = Main.inventoryScale;
				for (int num38 = 0; num38 < 8; num38++)
				{
					int num39 = Main.screenWidth - 64 - 28;
					int num40 = (int)((float)(174 + Main.mH) + (float)(num38 * 56) * Main.inventoryScale);
					Color white4 = new Color(100, 100, 100, 100);
					if (num38 > 2)
					{
						num40 += num35;
					}
					string text2 = "";
					if (num38 == 3)
					{
						text2 = Lang.inter[9];
					}
					if (num38 == 7)
					{
						text2 = Main.player[Main.myPlayer].statDefense + " " + Lang.inter[10];
					}
					Vector2 vector3 = Main.fontMouseText.MeasureString(text2);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num39 - vector3.X - 10f - 47f - 47f, (float)num40 + (float)Main.inventoryBackTexture.Height * 0.5f - vector3.Y * 0.5f), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					Texture2D texture2D = Main.inventoryTickOnTexture;
					if (Main.player[Main.myPlayer].hideVisual[num38])
					{
						texture2D = Main.inventoryTickOffTexture;
					}
					int num41 = Main.screenWidth - 58;
					int num42 = (int)((float)(172 + Main.mH) + (float)(num38 * 56) * Main.inventoryScale);
					if (num38 > 2)
					{
						num42 += num35;
					}
					Rectangle rectangle2 = new Rectangle(num41, num42, texture2D.Width, texture2D.Height);
					int num43 = 0;
					if (num38 > 2 && num38 < 8 && rectangle2.Contains(new Point(Main.mouseX, Main.mouseY)))
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							Main.player[Main.myPlayer].hideVisual[num38] = !Main.player[Main.myPlayer].hideVisual[num38];
							Main.PlaySound(12, -1, -1, 1);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0);
							}
						}
						if (Main.player[Main.myPlayer].hideVisual[num38])
						{
							num43 = 2;
						}
						else
						{
							num43 = 1;
						}
					}
					else
					{
						if (Main.mouseX >= num39 && (float)Main.mouseX <= (float)num39 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num40 && (float)Main.mouseY <= (float)num40 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.armorHide = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && (Main.mouseItem.type == 0 || (Main.mouseItem.headSlot > -1 && num38 == 0) || (Main.mouseItem.bodySlot > -1 && num38 == 1) || (Main.mouseItem.legSlot > -1 && num38 == 2) || (Main.mouseItem.accessory && num38 > 2 && !Main.AccCheck(Main.mouseItem, num38))))
							{
								Item item3 = Main.mouseItem;
								Main.mouseItem = Main.player[Main.myPlayer].armor[num38];
								Main.player[Main.myPlayer].armor[num38] = item3;
								if (Main.player[Main.myPlayer].armor[num38].type == 0 || Main.player[Main.myPlayer].armor[num38].stack < 1)
								{
									Main.player[Main.myPlayer].armor[num38] = new Item();
								}
								if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
								{
									Main.mouseItem = new Item();
								}
								if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].armor[num38].type > 0)
								{
									Recipe.FindRecipes();
									Main.PlaySound(7, -1, -1, 1);
								}
							}
							Main.hoverItemName = Main.player[Main.myPlayer].armor[num38].name;
							Main.toolTip = Main.player[Main.myPlayer].armor[num38].Clone();
							if (num38 <= 2)
							{
								Main.toolTip.wornArmor = true;
							}
							if (Main.player[Main.myPlayer].armor[num38].stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.player[Main.myPlayer].armor[num38].stack,
									")"
								});
							}
						}
					}
					Main.spriteBatch.Draw(Main.inventoryBack3Texture, new Vector2((float)num39, (float)num40), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
					white4 = Color.White;
					if (Main.player[Main.myPlayer].armor[num38].type > 0 && Main.player[Main.myPlayer].armor[num38].stack > 0)
					{
						float num44 = 1f;
						if (Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Height > 32)
						{
							if (Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Width > Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Height)
							{
								num44 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Width;
							}
							else
							{
								num44 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Height;
							}
						}
						num44 *= Main.inventoryScale;
						Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type], new Vector2((float)num39 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Width * 0.5f * num44, (float)num40 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Height * 0.5f * num44), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Width, Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Height)), Main.player[Main.myPlayer].armor[num38].GetAlpha(white4), 0f, default(Vector2), num44, SpriteEffects.None, 0f);
						if (Main.player[Main.myPlayer].armor[num38].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type], new Vector2((float)num39 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Width * 0.5f * num44, (float)num40 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Height * 0.5f * num44), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Width, Main.itemTexture[Main.player[Main.myPlayer].armor[num38].type].Height)), Main.player[Main.myPlayer].armor[num38].GetColor(white4), 0f, default(Vector2), num44, SpriteEffects.None, 0f);
						}
						if (Main.player[Main.myPlayer].armor[num38].stack > 1)
						{
							Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].armor[num38].stack), new Vector2((float)num39 + 10f * Main.inventoryScale, (float)num40 + 26f * Main.inventoryScale), white4, 0f, default(Vector2), num44, SpriteEffects.None, 0f);
						}
					}
					if (num38 > 2 && num38 < 8)
					{
						Main.spriteBatch.Draw(texture2D, new Vector2((float)num41, (float)num42), Color.White * 0.7f);
						if (num43 > 0)
						{
							Main.toolTip = new Item();
							Main.hoverItemName = Lang.inter[58 + num43];
						}
					}
				}
				Vector2 vector4 = Main.fontMouseText.MeasureString("Social");
				Vector2 vector5 = Main.fontMouseText.MeasureString(Lang.inter[11]);
				float num45 = vector4.X / vector5.X;
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[11], new Vector2((float)(Main.screenWidth - 64 - 28 - 44), (float)(152 + Main.mH) + (vector4.Y - vector4.Y * num45) / 2f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.8f * num45, SpriteEffects.None, 0f);
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num46 = 8; num46 < 16; num46++)
				{
					int num47 = Main.screenWidth - 64 - 28 - 47;
					int num48 = (int)((float)(174 + Main.mH) + (float)((num46 - 8) * 56) * Main.inventoryScale);
					Color white5 = new Color(100, 100, 100, 100);
					if (num46 > 10)
					{
						num48 += num35;
					}
					string text3 = "";
					if (num46 == 8)
					{
						text3 = Lang.inter[12];
					}
					else
					{
						if (num46 == 9)
						{
							text3 = Lang.inter[13];
						}
						else
						{
							if (num46 == 10)
							{
								text3 = Lang.inter[14];
							}
						}
					}
					Vector2 vector6 = Main.fontMouseText.MeasureString(text3);
					Main.spriteBatch.DrawString(Main.fontMouseText, text3, new Vector2((float)num47 - vector6.X - 10f - 47f, (float)num48 + (float)Main.inventoryBackTexture.Height * 0.5f - vector6.Y * 0.5f), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					if (Main.mouseX >= num47 && (float)Main.mouseX <= (float)num47 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num48 && (float)Main.mouseY <= (float)num48 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.armorHide = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							if (Main.mouseItem.type == 0 || (Main.mouseItem.headSlot > -1 && num46 == 8) || (Main.mouseItem.bodySlot > -1 && num46 == 9) || (Main.mouseItem.legSlot > -1 && num46 == 10) || (Main.mouseItem.accessory && num46 > 10 && !Main.AccCheck(Main.mouseItem, num46)))
							{
								Item item4 = Main.mouseItem;
								Main.mouseItem = Main.player[Main.myPlayer].armor[num46];
								Main.player[Main.myPlayer].armor[num46] = item4;
								if (Main.player[Main.myPlayer].armor[num46].type == 0 || Main.player[Main.myPlayer].armor[num46].stack < 1)
								{
									Main.player[Main.myPlayer].armor[num46] = new Item();
								}
								if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
								{
									Main.mouseItem = new Item();
								}
								if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].armor[num46].type > 0)
								{
									Recipe.FindRecipes();
									Main.PlaySound(7, -1, -1, 1);
								}
							}
						}
						else
						{
							if (Main.mouseRight && Main.mouseRightRelease && ((Main.player[Main.myPlayer].armor[num46].type > 0 && Main.player[Main.myPlayer].armor[num46].stack > 0) || (Main.player[Main.myPlayer].armor[num46 - 8].type > 0 && Main.player[Main.myPlayer].armor[num46 - 8].stack > 0)))
							{
								bool flag4 = true;
								if (Main.player[Main.myPlayer].armor[num46].wingSlot > 0)
								{
									for (int num49 = 3; num49 < 8; num49++)
									{
										if (Main.player[Main.myPlayer].armor[num49].wingSlot > 0 && num49 != num46 - 8)
										{
											flag4 = false;
										}
									}
								}
								if (flag4)
								{
									Item item5 = Main.player[Main.myPlayer].armor[num46].Clone();
									Main.player[Main.myPlayer].armor[num46] = Main.player[Main.myPlayer].armor[num46 - 8];
									Main.player[Main.myPlayer].armor[num46 - 8] = item5;
									Main.PlaySound(7, -1, -1, 1);
									Recipe.FindRecipes();
								}
							}
						}
						Main.hoverItemName = Main.player[Main.myPlayer].armor[num46].name;
						Main.toolTip = Main.player[Main.myPlayer].armor[num46].Clone();
						Main.toolTip.social = true;
						if (Main.player[Main.myPlayer].armor[num46].stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.player[Main.myPlayer].armor[num46].stack,
								")"
							});
						}
					}
					Main.spriteBatch.Draw(Main.inventoryBack8Texture, new Vector2((float)num47, (float)num48), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
					white5 = Color.White;
					if (Main.player[Main.myPlayer].armor[num46].type > 0 && Main.player[Main.myPlayer].armor[num46].stack > 0)
					{
						float num50 = 1f;
						if (Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Height > 32)
						{
							if (Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Width > Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Height)
							{
								num50 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Width;
							}
							else
							{
								num50 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Height;
							}
						}
						num50 *= Main.inventoryScale;
						Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type], new Vector2((float)num47 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Width * 0.5f * num50, (float)num48 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Height * 0.5f * num50), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Width, Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Height)), Main.player[Main.myPlayer].armor[num46].GetAlpha(white5), 0f, default(Vector2), num50, SpriteEffects.None, 0f);
						if (Main.player[Main.myPlayer].armor[num46].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type], new Vector2((float)num47 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Width * 0.5f * num50, (float)num48 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Height * 0.5f * num50), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Width, Main.itemTexture[Main.player[Main.myPlayer].armor[num46].type].Height)), Main.player[Main.myPlayer].armor[num46].GetColor(white5), 0f, default(Vector2), num50, SpriteEffects.None, 0f);
						}
						if (Main.player[Main.myPlayer].armor[num46].stack > 1)
						{
							Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].armor[num46].stack), new Vector2((float)num47 + 10f * Main.inventoryScale, (float)num48 + 26f * Main.inventoryScale), white5, 0f, default(Vector2), num50, SpriteEffects.None, 0f);
						}
					}
				}
				Vector2 vector7 = Main.fontMouseText.MeasureString("Dye");
				Vector2 vector8 = Main.fontMouseText.MeasureString(Lang.inter[57]);
				float num51 = vector7.X / vector8.X;
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[57], new Vector2((float)(Main.screenWidth - 64 - 28 - 44 - 40), (float)(152 + Main.mH) + (vector7.Y - vector7.Y * num51) / 2f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.8f * num51, SpriteEffects.None, 0f);
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num52 = 0; num52 < 8; num52++)
				{
					int num53 = Main.screenWidth - 64 - 28 - 47 - 47;
					int num54 = (int)((float)(174 + Main.mH) + (float)(num52 * 56) * Main.inventoryScale);
					Color white6 = new Color(100, 100, 100, 100);
					if (num52 > 2)
					{
						num54 += num35;
					}
					if (Main.mouseX >= num53 && (float)Main.mouseX <= (float)num53 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num54 && (float)Main.mouseY <= (float)num54 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.armorHide = true;
						if (Main.mouseRightRelease && Main.mouseRight)
						{
							if (Main.mouseItem.stack < Main.mouseItem.maxStack && Main.mouseItem.type > 0 && Main.player[Main.myPlayer].dye[num52].type > 0 && Main.mouseItem.type == Main.player[Main.myPlayer].dye[num52].type)
							{
								Main.mouseItem.stack++;
								Main.player[Main.myPlayer].dye[num52].SetDefaults(0, false);
								Main.PlaySound(7, -1, -1, 1);
							}
						}
						else
						{
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								if (Main.mouseItem.stack == 1 && Main.mouseItem.dye > 0 && Main.player[Main.myPlayer].dye[num52].type > 0 && Main.player[Main.myPlayer].dye[num52].type != Main.mouseItem.type)
								{
									Main.PlaySound(7, -1, -1, 1);
									Item item6 = Main.mouseItem;
									Main.mouseItem = Main.player[Main.myPlayer].dye[num52];
									Main.player[Main.myPlayer].dye[num52] = item6;
								}
								else
								{
									if (Main.mouseItem.type == 0 && Main.player[Main.myPlayer].dye[num52].type > 0)
									{
										Item item7 = Main.mouseItem;
										Main.mouseItem = Main.player[Main.myPlayer].dye[num52];
										Main.player[Main.myPlayer].dye[num52] = item7;
										if (Main.player[Main.myPlayer].dye[num52].type == 0 || Main.player[Main.myPlayer].dye[num52].stack < 1)
										{
											Main.player[Main.myPlayer].dye[num52] = new Item();
										}
										if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
										{
											Main.mouseItem = new Item();
										}
										if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].dye[num52].type > 0)
										{
											Recipe.FindRecipes();
											Main.PlaySound(7, -1, -1, 1);
										}
									}
									else
									{
										if (Main.mouseItem.dye > 0 && Main.player[Main.myPlayer].dye[num52].type == 0)
										{
											if (Main.mouseItem.stack == 1)
											{
												Item item8 = Main.mouseItem;
												Main.mouseItem = Main.player[Main.myPlayer].dye[num52];
												Main.player[Main.myPlayer].dye[num52] = item8;
												if (Main.player[Main.myPlayer].dye[num52].type == 0 || Main.player[Main.myPlayer].dye[num52].stack < 1)
												{
													Main.player[Main.myPlayer].dye[num52] = new Item();
												}
												if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
												{
													Main.mouseItem = new Item();
												}
												if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].dye[num52].type > 0)
												{
													Recipe.FindRecipes();
													Main.PlaySound(7, -1, -1, 1);
												}
											}
											else
											{
												Main.mouseItem.stack--;
												Main.player[Main.myPlayer].dye[num52].SetDefaults(Main.mouseItem.type, false);
												Recipe.FindRecipes();
												Main.PlaySound(7, -1, -1, 1);
											}
										}
									}
								}
							}
						}
						Main.hoverItemName = Main.player[Main.myPlayer].dye[num52].name;
						Main.toolTip = Main.player[Main.myPlayer].dye[num52].Clone();
						if (Main.player[Main.myPlayer].dye[num52].stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.player[Main.myPlayer].dye[num52].stack,
								")"
							});
						}
					}
					Main.spriteBatch.Draw(Main.inventoryBack12Texture, new Vector2((float)num53, (float)num54), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
					white6 = Color.White;
					if (Main.player[Main.myPlayer].dye[num52].type > 0 && Main.player[Main.myPlayer].dye[num52].stack > 0)
					{
						float num55 = 1f;
						if (Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Height > 32)
						{
							if (Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Width > Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Height)
							{
								num55 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Width;
							}
							else
							{
								num55 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Height;
							}
						}
						num55 *= Main.inventoryScale;
						Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type], new Vector2((float)num53 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Width * 0.5f * num55, (float)num54 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Height * 0.5f * num55), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Width, Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Height)), Main.player[Main.myPlayer].dye[num52].GetAlpha(white6), 0f, default(Vector2), num55, SpriteEffects.None, 0f);
						if (Main.player[Main.myPlayer].dye[num52].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type], new Vector2((float)num53 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Width * 0.5f * num55, (float)num54 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Height * 0.5f * num55), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Width, Main.itemTexture[Main.player[Main.myPlayer].dye[num52].type].Height)), Main.player[Main.myPlayer].dye[num52].GetColor(white6), 0f, default(Vector2), num55, SpriteEffects.None, 0f);
						}
						if (Main.player[Main.myPlayer].dye[num52].stack > 1)
						{
							Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].dye[num52].stack), new Vector2((float)num53 + 10f * Main.inventoryScale, (float)num54 + 26f * Main.inventoryScale), white6, 0f, default(Vector2), num55, SpriteEffects.None, 0f);
						}
					}
				}
				Main.inventoryScale = num37;
			}
			int num56 = (Main.screenHeight - 600) / 2;
			int num57 = (int)((float)Main.screenHeight / 600f * 250f);
			if (Main.screenHeight < 700)
			{
				num56 = (Main.screenHeight - 508) / 2;
				num57 = (int)((float)Main.screenHeight / 600f * 200f);
			}
			else
			{
				if (Main.screenHeight < 850)
				{
					num57 = (int)((float)Main.screenHeight / 600f * 225f);
				}
			}
			if (Main.craftingHide)
			{
				Main.craftingAlpha -= 0.1f;
				if (Main.craftingAlpha < 0f)
				{
					Main.craftingAlpha = 0f;
				}
			}
			else
			{
				Main.craftingAlpha += 0.025f;
				if (Main.craftingAlpha > 1f)
				{
					Main.craftingAlpha = 1f;
				}
			}
			Color color3 = new Color((int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)), (int)((byte)((float)Main.mouseTextColor * Main.craftingAlpha)));
			Main.craftingHide = false;
			if (Main.reforge)
			{
				if (Main.mouseReforge)
				{
					if ((double)Main.reforgeScale < 1.3)
					{
						Main.reforgeScale += 0.02f;
					}
				}
				else
				{
					if (Main.reforgeScale > 1f)
					{
						Main.reforgeScale -= 0.02f;
					}
				}
				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.craftGuide)
				{
					Main.reforge = false;
					Main.player[Main.myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num58 = 50;
					int num59 = 270;
					string text4 = Lang.inter[46] + ": ";
					if (Main.reforgeItem.type > 0)
					{
						int num60 = Main.reforgeItem.value;
						if (Main.player[Main.myPlayer].discount)
						{
							num60 = (int)((double)num60 * 0.8);
						}
						num60 /= 3;
						string text5 = "";
						int num61 = 0;
						int num62 = 0;
						int num63 = 0;
						int num64 = 0;
						int num65 = num60;
						if (num65 < 1)
						{
							num65 = 1;
						}
						if (num65 >= 1000000)
						{
							num61 = num65 / 1000000;
							num65 -= num61 * 1000000;
						}
						if (num65 >= 10000)
						{
							num62 = num65 / 10000;
							num65 -= num62 * 10000;
						}
						if (num65 >= 100)
						{
							num63 = num65 / 100;
							num65 -= num63 * 100;
						}
						if (num65 >= 1)
						{
							num64 = num65;
						}
						if (num61 > 0)
						{
							object obj = text5;
							text5 = string.Concat(new object[]
							{
								obj,
								num61,
								" ",
								Lang.inter[15],
								" "
							});
						}
						if (num62 > 0)
						{
							object obj = text5;
							text5 = string.Concat(new object[]
							{
								obj,
								num62,
								" ",
								Lang.inter[16],
								" "
							});
						}
						if (num63 > 0)
						{
							object obj = text5;
							text5 = string.Concat(new object[]
							{
								obj,
								num63,
								" ",
								Lang.inter[17],
								" "
							});
						}
						if (num64 > 0)
						{
							object obj = text5;
							text5 = string.Concat(new object[]
							{
								obj,
								num64,
								" ",
								Lang.inter[18],
								" "
							});
						}
						float num66 = (float)Main.mouseTextColor / 255f;
						Color white7 = Color.White;
						if (num61 > 0)
						{
							white7 = new Color((int)((byte)(220f * num66)), (int)((byte)(220f * num66)), (int)((byte)(198f * num66)), (int)Main.mouseTextColor);
						}
						else
						{
							if (num62 > 0)
							{
								white7 = new Color((int)((byte)(224f * num66)), (int)((byte)(201f * num66)), (int)((byte)(92f * num66)), (int)Main.mouseTextColor);
							}
							else
							{
								if (num63 > 0)
								{
									white7 = new Color((int)((byte)(181f * num66)), (int)((byte)(192f * num66)), (int)((byte)(193f * num66)), (int)Main.mouseTextColor);
								}
								else
								{
									if (num64 > 0)
									{
										white7 = new Color((int)((byte)(246f * num66)), (int)((byte)(138f * num66)), (int)((byte)(96f * num66)), (int)Main.mouseTextColor);
									}
								}
							}
						}
						Main.spriteBatch.DrawString(Main.fontMouseText, text5, new Vector2((float)(num58 + 50) + Main.fontMouseText.MeasureString(text4).X, (float)num59), white7, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						int num67 = num58 + 70;
						int num68 = num59 + 40;
						Main.spriteBatch.Draw(Main.reforgeTexture, new Vector2((float)num67, (float)num68), new Rectangle?(new Rectangle(0, 0, Main.reforgeTexture.Width, Main.reforgeTexture.Height)), Color.White, 0f, new Vector2((float)(Main.reforgeTexture.Width / 2), (float)(Main.reforgeTexture.Height / 2)), Main.reforgeScale, SpriteEffects.None, 0f);
						if (Main.mouseX > num67 - Main.reforgeTexture.Width / 2 && Main.mouseX < num67 + Main.reforgeTexture.Width / 2 && Main.mouseY > num68 - Main.reforgeTexture.Height / 2 && Main.mouseY < num68 + Main.reforgeTexture.Height / 2)
						{
							Main.hoverItemName = Lang.inter[19];
							if (!Main.mouseReforge)
							{
								Main.PlaySound(12, -1, -1, 1);
							}
							Main.mouseReforge = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].BuyItem(num60))
							{
								Main.reforgeItem.netDefaults(Main.reforgeItem.netID);
								Main.reforgeItem.Prefix(-2);
								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack);
								Main.PlaySound(2, -1, -1, 37);
							}
						}
						else
						{
							Main.mouseReforge = false;
						}
					}
					else
					{
						text4 = Lang.inter[20];
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text4, new Vector2((float)(num58 + 50), (float)num59), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					Color white8 = new Color(100, 100, 100, 100);
					if (Main.mouseX >= num58 && (float)Main.mouseX <= (float)num58 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num59 && (float)Main.mouseY <= (float)num59 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.craftingHide = true;
						if (Main.mouseItem.Prefix(-3) || Main.mouseItem.type == 0)
						{
							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].itemTime == 0)
							{
								Item item9 = Main.mouseItem;
								Main.mouseItem = Main.reforgeItem;
								Main.reforgeItem = item9;
								if (Main.reforgeItem.type == 0 || Main.reforgeItem.stack < 1)
								{
									Main.reforgeItem = new Item();
								}
								if (Main.mouseItem.IsTheSameAs(Main.reforgeItem) && Main.reforgeItem.stack != Main.reforgeItem.maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
								{
									if (Main.mouseItem.stack + Main.reforgeItem.stack <= Main.mouseItem.maxStack)
									{
										Main.reforgeItem.stack += Main.mouseItem.stack;
										Main.mouseItem.stack = 0;
									}
									else
									{
										int num69 = Main.mouseItem.maxStack - Main.reforgeItem.stack;
										Main.reforgeItem.stack += num69;
										Main.mouseItem.stack -= num69;
									}
								}
								if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
								{
									Main.mouseItem = new Item();
								}
								if (Main.mouseItem.type > 0 || Main.reforgeItem.type > 0)
								{
									Recipe.FindRecipes();
									Main.PlaySound(7, -1, -1, 1);
								}
							}
							else
							{
								if (Main.stackSplit <= 1 && Main.mouseRight && (Main.mouseItem.IsTheSameAs(Main.reforgeItem) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
								{
									if (Main.mouseItem.type == 0)
									{
										Main.mouseItem = Main.reforgeItem.Clone();
										Main.mouseItem.stack = 0;
									}
									Main.mouseItem.stack++;
									Main.reforgeItem.stack--;
									if (Main.reforgeItem.stack <= 0)
									{
										Main.reforgeItem = new Item();
									}
									Recipe.FindRecipes();
									Main.soundInstanceMenuTick.Stop();
									Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
									Main.PlaySound(12, -1, -1, 1);
									if (Main.stackSplit == 0)
									{
										Main.stackSplit = 15;
									}
									else
									{
										Main.stackSplit = Main.stackDelay;
									}
								}
							}
						}
						Main.hoverItemName = Main.reforgeItem.name;
						Main.toolTip = Main.reforgeItem.Clone();
						if (Main.reforgeItem.stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.reforgeItem.stack,
								")"
							});
						}
					}
					Main.spriteBatch.Draw(Main.inventoryBack4Texture, new Vector2((float)num58, (float)num59), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
					white8 = Color.White;
					if (Main.reforgeItem.type > 0 && Main.reforgeItem.stack > 0)
					{
						float num70 = 1f;
						if (Main.itemTexture[Main.reforgeItem.type].Width > 32 || Main.itemTexture[Main.reforgeItem.type].Height > 32)
						{
							if (Main.itemTexture[Main.reforgeItem.type].Width > Main.itemTexture[Main.reforgeItem.type].Height)
							{
								num70 = 32f / (float)Main.itemTexture[Main.reforgeItem.type].Width;
							}
							else
							{
								num70 = 32f / (float)Main.itemTexture[Main.reforgeItem.type].Height;
							}
						}
						num70 *= Main.inventoryScale;
						Main.spriteBatch.Draw(Main.itemTexture[Main.reforgeItem.type], new Vector2((float)num58 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.reforgeItem.type].Width * 0.5f * num70, (float)num59 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.reforgeItem.type].Height * 0.5f * num70), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.reforgeItem.type].Width, Main.itemTexture[Main.reforgeItem.type].Height)), Main.reforgeItem.GetAlpha(white8), 0f, default(Vector2), num70, SpriteEffects.None, 0f);
						if (Main.reforgeItem.color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.reforgeItem.type], new Vector2((float)num58 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.reforgeItem.type].Width * 0.5f * num70, (float)num59 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.reforgeItem.type].Height * 0.5f * num70), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.reforgeItem.type].Width, Main.itemTexture[Main.reforgeItem.type].Height)), Main.reforgeItem.GetColor(white8), 0f, default(Vector2), num70, SpriteEffects.None, 0f);
						}
						if (Main.reforgeItem.stack > 1)
						{
							Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.reforgeItem.stack), new Vector2((float)num58 + 10f * Main.inventoryScale, (float)num59 + 26f * Main.inventoryScale), white8, 0f, default(Vector2), num70, SpriteEffects.None, 0f);
						}
					}
				}
			}
			else
			{
				if (Main.craftGuide)
				{
					if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.reforge)
					{
						Main.craftGuide = false;
						Main.player[Main.myPlayer].dropItemCheck();
						Recipe.FindRecipes();
					}
					else
					{
						int num71 = 73;
						int num72 = 331;
						num72 += num56;
						string text6;
						if (Main.guideItem.type > 0)
						{
							text6 = Lang.inter[21] + " " + Main.guideItem.name;
							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[22], new Vector2((float)num71, (float)(num72 + 118)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							int num73 = Main.focusRecipe;
							int num74 = 0;
							int num75 = 0;
							while (num75 < Recipe.maxRequirements)
							{
								int num76 = (num75 + 1) * 26;
								if (Main.recipe[Main.availableRecipe[num73]].requiredTile[num75] == -1)
								{
									if (num75 == 0 && !Main.recipe[Main.availableRecipe[num73]].needWater && !Main.recipe[Main.availableRecipe[num73]].needHoney && !Main.recipe[Main.availableRecipe[num73]].needLava)
									{
										Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[23], new Vector2((float)num71, (float)(num72 + 118 + num76)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										break;
									}
									break;
								}
								else
								{
									num74++;
									Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend[Map.TileToLookup(Main.recipe[Main.availableRecipe[num73]].requiredTile[num75], 0)], new Vector2((float)num71, (float)(num72 + 118 + num76)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									num75++;
								}
							}
							if (Main.recipe[Main.availableRecipe[num73]].needWater)
							{
								int num77 = (num74 + 1) * 26;
								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[53], new Vector2((float)num71, (float)(num72 + 118 + num77)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							if (Main.recipe[Main.availableRecipe[num73]].needHoney)
							{
								int num78 = (num74 + 1) * 26;
								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[58], new Vector2((float)num71, (float)(num72 + 118 + num78)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							if (Main.recipe[Main.availableRecipe[num73]].needLava)
							{
								int num79 = (num74 + 1) * 26;
								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[56], new Vector2((float)num71, (float)(num72 + 118 + num79)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
						else
						{
							text6 = Lang.inter[24];
						}
						Main.spriteBatch.DrawString(Main.fontMouseText, text6, new Vector2((float)(num71 + 50), (float)(num72 + 12)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Color white9 = new Color(100, 100, 100, 100);
						if (Main.mouseX >= num71 && (float)Main.mouseX <= (float)num71 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num72 && (float)Main.mouseY <= (float)num72 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.craftingHide = true;
							if (Main.mouseItem.material || Main.mouseItem.type == 0)
							{
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									Item item10 = Main.mouseItem;
									Main.mouseItem = Main.guideItem;
									Main.guideItem = item10;
									if (Main.guideItem.type == 0 || Main.guideItem.stack < 1)
									{
										Main.guideItem = new Item();
									}
									if (Main.mouseItem.IsTheSameAs(Main.guideItem) && Main.guideItem.stack != Main.guideItem.maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
									{
										if (Main.mouseItem.stack + Main.guideItem.stack <= Main.mouseItem.maxStack)
										{
											Main.guideItem.stack += Main.mouseItem.stack;
											Main.mouseItem.stack = 0;
										}
										else
										{
											int num80 = Main.mouseItem.maxStack - Main.guideItem.stack;
											Main.guideItem.stack += num80;
											Main.mouseItem.stack -= num80;
										}
									}
									if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
									{
										Main.mouseItem = new Item();
									}
									if (Main.mouseItem.type > 0 || Main.guideItem.type > 0)
									{
										Recipe.FindRecipes();
										Main.PlaySound(7, -1, -1, 1);
									}
								}
								else
								{
									if (Main.stackSplit <= 1 && Main.mouseRight && (Main.mouseItem.IsTheSameAs(Main.guideItem) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
									{
										if (Main.mouseItem.type == 0)
										{
											Main.mouseItem = Main.guideItem.Clone();
											Main.mouseItem.stack = 0;
										}
										Main.mouseItem.stack++;
										Main.guideItem.stack--;
										if (Main.guideItem.stack <= 0)
										{
											Main.guideItem = new Item();
										}
										Recipe.FindRecipes();
										Main.soundInstanceMenuTick.Stop();
										Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
										Main.PlaySound(12, -1, -1, 1);
										if (Main.stackSplit == 0)
										{
											Main.stackSplit = 15;
										}
										else
										{
											Main.stackSplit = Main.stackDelay;
										}
									}
								}
							}
							Main.hoverItemName = Main.guideItem.name;
							Main.toolTip = Main.guideItem.Clone();
							if (Main.guideItem.stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.guideItem.stack,
									")"
								});
							}
						}
						Main.spriteBatch.Draw(Main.inventoryBack4Texture, new Vector2((float)num71, (float)num72), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						white9 = Color.White;
						if (Main.guideItem.type > 0 && Main.guideItem.stack > 0)
						{
							float num81 = 1f;
							if (Main.itemTexture[Main.guideItem.type].Width > 32 || Main.itemTexture[Main.guideItem.type].Height > 32)
							{
								if (Main.itemTexture[Main.guideItem.type].Width > Main.itemTexture[Main.guideItem.type].Height)
								{
									num81 = 32f / (float)Main.itemTexture[Main.guideItem.type].Width;
								}
								else
								{
									num81 = 32f / (float)Main.itemTexture[Main.guideItem.type].Height;
								}
							}
							num81 *= Main.inventoryScale;
							if (Main.guideItem.type == 662 || Main.guideItem.type == 663)
							{
								white9.R = (byte)Main.DiscoR;
								white9.G = (byte)Main.DiscoG;
								white9.B = (byte)Main.DiscoB;
								white9.A = 255;
							}
							Main.spriteBatch.Draw(Main.itemTexture[Main.guideItem.type], new Vector2((float)num71 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.guideItem.type].Width * 0.5f * num81, (float)num72 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.guideItem.type].Height * 0.5f * num81), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.guideItem.type].Width, Main.itemTexture[Main.guideItem.type].Height)), Main.guideItem.GetAlpha(white9), 0f, default(Vector2), num81, SpriteEffects.None, 0f);
							white9 = Color.White;
							if (Main.guideItem.color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[Main.guideItem.type], new Vector2((float)num71 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.guideItem.type].Width * 0.5f * num81, (float)num72 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.guideItem.type].Height * 0.5f * num81), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.guideItem.type].Width, Main.itemTexture[Main.guideItem.type].Height)), Main.guideItem.GetColor(white9), 0f, default(Vector2), num81, SpriteEffects.None, 0f);
							}
							if (Main.guideItem.stack > 1)
							{
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.guideItem.stack), new Vector2((float)num71 + 10f * Main.inventoryScale, (float)num72 + 26f * Main.inventoryScale), white9, 0f, default(Vector2), num81, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			if (!Main.reforge)
			{
				if (Main.numAvailableRecipes > 0)
				{
					Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[25], new Vector2(76f, (float)(414 + num56)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num82 = 0; num82 < Recipe.maxRecipes; num82++)
				{
					Main.inventoryScale = 100f / (Math.Abs(Main.availableRecipeY[num82]) + 100f);
					if ((double)Main.inventoryScale < 0.75)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.recFastScroll)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.availableRecipeY[num82] < (float)((num82 - Main.focusRecipe) * 65))
					{
						if (Main.availableRecipeY[num82] == 0f && !Main.recFastScroll)
						{
							Main.PlaySound(12, -1, -1, 1);
						}
						Main.availableRecipeY[num82] += 6.5f;
						if (Main.recFastScroll)
						{
							Main.availableRecipeY[num82] += 130000f;
						}
						if (Main.availableRecipeY[num82] > (float)((num82 - Main.focusRecipe) * 65))
						{
							Main.availableRecipeY[num82] = (float)((num82 - Main.focusRecipe) * 65);
						}
					}
					else
					{
						if (Main.availableRecipeY[num82] > (float)((num82 - Main.focusRecipe) * 65))
						{
							if (Main.availableRecipeY[num82] == 0f && !Main.recFastScroll)
							{
								Main.PlaySound(12, -1, -1, 1);
							}
							Main.availableRecipeY[num82] -= 6.5f;
							if (Main.recFastScroll)
							{
								Main.availableRecipeY[num82] -= 130000f;
							}
							if (Main.availableRecipeY[num82] < (float)((num82 - Main.focusRecipe) * 65))
							{
								Main.availableRecipeY[num82] = (float)((num82 - Main.focusRecipe) * 65);
							}
						}
						else
						{
							Main.recFastScroll = false;
						}
					}
					if (num82 < Main.numAvailableRecipes && Math.Abs(Main.availableRecipeY[num82]) <= (float)num57)
					{
						int num83 = (int)(46f - 26f * Main.inventoryScale);
						int num84 = (int)(410f + Main.availableRecipeY[num82] * Main.inventoryScale - 30f * Main.inventoryScale + (float)num56);
						double num85 = (double)(Main.inventoryBack.A + 50);
						double num86 = 255.0;
						if (Math.Abs(Main.availableRecipeY[num82]) > (float)(num57 - 100))
						{
							num85 = (double)(150f * (100f - (Math.Abs(Main.availableRecipeY[num82]) - (float)(num57 - 100)))) * 0.01;
							num86 = (double)(255f * (100f - (Math.Abs(Main.availableRecipeY[num82]) - (float)(num57 - 100)))) * 0.01;
						}
						new Color((int)((byte)num85), (int)((byte)num85), (int)((byte)num85), (int)((byte)num85));
						Color color4 = new Color((int)((byte)num86), (int)((byte)num86), (int)((byte)num86), (int)((byte)num86));
						if (Main.mouseX >= num83 && (float)Main.mouseX <= (float)num83 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num84 && (float)Main.mouseY <= (float)num84 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.focusRecipe == num82 && Main.guideItem.type == 0)
							{
								if (Main.mouseItem.type == 0 || (Main.mouseItem.IsTheSameAs(Main.recipe[Main.availableRecipe[num82]].createItem) && Main.mouseItem.stack + Main.recipe[Main.availableRecipe[num82]].createItem.stack <= Main.mouseItem.maxStack))
								{
									if (Main.mouseLeftRelease && Main.mouseLeft)
									{
										int stack = Main.mouseItem.stack;
										Main.mouseItem = Main.recipe[Main.availableRecipe[num82]].createItem.Clone();
										Main.mouseItem.Prefix(-1);
										Main.mouseItem.stack += stack;
										Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
										Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
										ItemText.NewText(Main.mouseItem, Main.recipe[Main.availableRecipe[num82]].createItem.stack);
										Main.recipe[Main.availableRecipe[num82]].Create();
										if (Main.mouseItem.type > 0 || Main.recipe[Main.availableRecipe[num82]].createItem.type > 0)
										{
											Main.PlaySound(7, -1, -1, 1);
										}
									}
									else
									{
										if (Main.stackSplit <= 1 && Main.mouseRight && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
										{
											if (Main.stackSplit == 0)
											{
												Main.stackSplit = 15;
											}
											else
											{
												Main.stackSplit = Main.stackDelay;
											}
											int stack2 = Main.mouseItem.stack;
											Main.mouseItem = Main.recipe[Main.availableRecipe[num82]].createItem.Clone();
											Main.mouseItem.stack += stack2;
											Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
											Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
											ItemText.NewText(Main.mouseItem, Main.recipe[Main.availableRecipe[num82]].createItem.stack);
											Main.recipe[Main.availableRecipe[num82]].Create();
											if (Main.mouseItem.type > 0 || Main.recipe[Main.availableRecipe[num82]].createItem.type > 0)
											{
												Main.PlaySound(7, -1, -1, 1);
											}
										}
									}
								}
							}
							else
							{
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									Main.focusRecipe = num82;
								}
							}
							Main.craftingHide = true;
							Main.hoverItemName = Main.recipe[Main.availableRecipe[num82]].createItem.name;
							Main.toolTip = Main.recipe[Main.availableRecipe[num82]].createItem.Clone();
							if (Main.recipe[Main.availableRecipe[num82]].createItem.stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.recipe[Main.availableRecipe[num82]].createItem.stack,
									")"
								});
							}
						}
						if (Main.numAvailableRecipes > 0)
						{
							num85 -= 50.0;
							if (num85 < 0.0)
							{
								num85 = 0.0;
							}
							Main.spriteBatch.Draw(Main.inventoryBack4Texture, new Vector2((float)num83, (float)num84), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color((int)((byte)num85), (int)((byte)num85), (int)((byte)num85), (int)((byte)num85)), 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
							if (Main.recipe[Main.availableRecipe[num82]].createItem.type > 0 && Main.recipe[Main.availableRecipe[num82]].createItem.stack > 0)
							{
								float num87 = 1f;
								if (Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Width > 32 || Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Height > 32)
								{
									if (Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Width > Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Height)
									{
										num87 = 32f / (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Width;
									}
									else
									{
										num87 = 32f / (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Height;
									}
								}
								num87 *= Main.inventoryScale;
								Color color5 = color4;
								if (Main.recipe[Main.availableRecipe[num82]].createItem.type == 662 || Main.recipe[Main.availableRecipe[num82]].createItem.type == 663)
								{
									color4.R = (byte)Main.DiscoR;
									color4.G = (byte)Main.DiscoG;
									color4.B = (byte)Main.DiscoB;
									color4.A = 255;
								}
								Main.spriteBatch.Draw(Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type], new Vector2((float)num83 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Width * 0.5f * num87, (float)num84 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Height * 0.5f * num87), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Width, Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Height)), Main.recipe[Main.availableRecipe[num82]].createItem.GetAlpha(color4), 0f, default(Vector2), num87, SpriteEffects.None, 0f);
								color4 = color5;
								if (Main.recipe[Main.availableRecipe[num82]].createItem.color != default(Color))
								{
									Main.spriteBatch.Draw(Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type], new Vector2((float)num83 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Width * 0.5f * num87, (float)num84 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Height * 0.5f * num87), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Width, Main.itemTexture[Main.recipe[Main.availableRecipe[num82]].createItem.type].Height)), Main.recipe[Main.availableRecipe[num82]].createItem.GetColor(color4), 0f, default(Vector2), num87, SpriteEffects.None, 0f);
								}
								if (Main.recipe[Main.availableRecipe[num82]].createItem.stack > 1)
								{
									Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.recipe[Main.availableRecipe[num82]].createItem.stack), new Vector2((float)num83 + 10f * Main.inventoryScale, (float)num84 + 26f * Main.inventoryScale), color4, 0f, default(Vector2), num87, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
				if (Main.numAvailableRecipes > 0)
				{
					int num88 = 0;
					while (num88 < Recipe.maxRequirements && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type != 0)
					{
						int num89 = 80 + num88 * 40;
						int num90 = 380 + num56;
						double num91 = (double)(Main.inventoryBack.A + 50);
						Color white10 = Color.White;
						Color color6 = Color.White;
						num91 = (double)((float)(Main.inventoryBack.A + 50) - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						double num92 = (double)(255f - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						if (num91 < 0.0)
						{
							num91 = 0.0;
						}
						if (num92 < 0.0)
						{
							num92 = 0.0;
						}
						white10.R = (byte)num91;
						white10.G = (byte)num91;
						white10.B = (byte)num91;
						white10.A = (byte)num91;
						color6.R = (byte)num92;
						color6.G = (byte)num92;
						color6.B = (byte)num92;
						color6.A = (byte)num92;
						Main.inventoryScale = 0.6f;
						if (num91 == 0.0)
						{
							break;
						}
						if (Main.mouseX >= num89 && (float)Main.mouseX <= (float)num89 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num90 && (float)Main.mouseY <= (float)num90 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.craftingHide = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.hoverItemName = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].name;
							Main.toolTip = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].Clone();
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyIronBar && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type == 22)
							{
								Main.toolTip.name = Main.itemName[22] + " or " + Main.itemName[704];
							}
							else
							{
								if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyWood && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type == 9)
								{
									if (Main.halloween)
									{
										Main.toolTip.name = string.Concat(new string[]
										{
											Main.itemName[9],
											", ",
											Main.itemName[620],
											", ",
											Main.itemName[619],
											", ",
											Main.itemName[911],
											", ",
											Main.itemName[621],
											", or ",
											Main.itemName[1729]
										});
									}
									else
									{
										Main.toolTip.name = string.Concat(new string[]
										{
											Main.itemName[9],
											", ",
											Main.itemName[620],
											", ",
											Main.itemName[619],
											", ",
											Main.itemName[911],
											", or ",
											Main.itemName[621]
										});
									}
								}
								else
								{
									if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anySand && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type == 169)
									{
										Main.toolTip.name = string.Concat(new string[]
										{
											Main.itemName[169],
											", ",
											Main.itemName[1246],
											", ",
											Main.itemName[370],
											", or ",
											Main.itemName[408]
										});
									}
								}
							}
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].stack,
									")"
								});
							}
						}
						num91 -= 50.0;
						if (num91 < 0.0)
						{
							num91 = 0.0;
						}
						Main.spriteBatch.Draw(Main.inventoryBack4Texture, new Vector2((float)num89, (float)num90), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color((int)((byte)num91), (int)((byte)num91), (int)((byte)num91), (int)((byte)num91)), 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type > 0 && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].stack > 0)
						{
							float num93 = 1f;
							if (Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Width > 32 || Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Height > 32)
							{
								if (Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Width > Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Height)
								{
									num93 = 32f / (float)Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Width;
								}
								else
								{
									num93 = 32f / (float)Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Height;
								}
							}
							num93 *= Main.inventoryScale;
							Color color7 = color6;
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type == 662 || Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type == 663)
							{
								color6.R = (byte)Main.DiscoR;
								color6.G = (byte)Main.DiscoG;
								color6.B = (byte)Main.DiscoB;
								color6.A = 255;
							}
							Main.spriteBatch.Draw(Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type], new Vector2((float)num89 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Width * 0.5f * num93, (float)num90 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Height * 0.5f * num93), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Width, Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Height)), Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].GetAlpha(color6), 0f, default(Vector2), num93, SpriteEffects.None, 0f);
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type], new Vector2((float)num89 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Width * 0.5f * num93, (float)num90 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Height * 0.5f * num93), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Width, Main.itemTexture[Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].type].Height)), Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].GetColor(color6), 0f, default(Vector2), num93, SpriteEffects.None, 0f);
							}
							color6 = color7;
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].stack > 1)
							{
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num88].stack), new Vector2((float)num89 + 10f * Main.inventoryScale, (float)num90 + 26f * Main.inventoryScale), color6, 0f, default(Vector2), num93, SpriteEffects.None, 0f);
							}
						}
						num88++;
					}
				}
				if (Main.player[Main.myPlayer].chest != -1 || Main.numAvailableRecipes == 0)
				{
					Main.recBigList = false;
				}
				else
				{
					int num94 = 94;
					int num95 = 364 + num56;
					if (Main.craftGuide)
					{
						num95 -= 50;
					}
					Main.spriteBatch.Draw(Main.craftButtonTexture, new Vector2((float)num94, (float)num95), new Rectangle?(new Rectangle(0, 0, Main.craftButtonTexture.Width, Main.craftButtonTexture.Height)), Color.White, 0f, new Vector2((float)(Main.craftButtonTexture.Width / 2), (float)(Main.craftButtonTexture.Height / 2)), Main.reforgeScale, SpriteEffects.None, 0f);
					if (Main.mouseX > num94 - Main.craftButtonTexture.Width / 2 && Main.mouseX < num94 + Main.craftButtonTexture.Width / 2 && Main.mouseY > num95 - Main.craftButtonTexture.Height / 2 && Main.mouseY < num95 + Main.craftButtonTexture.Height / 2)
					{
						this.MouseText("Crafting window", 0, 0);
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (!Main.recBigList)
							{
								Main.recBigList = true;
								Main.PlaySound(12, -1, -1, 1);
							}
							else
							{
								Main.recBigList = false;
								Main.PlaySound(12, -1, -1, 1);
							}
						}
					}
				}
			}
			if (Main.recBigList)
			{
				int num96 = 42;
				if ((double)Main.inventoryScale < 0.75)
				{
					Main.inventoryScale = 0.75f;
				}
				int num97 = 340;
				int num98 = 310;
				int num99 = (Main.screenWidth - num98 - 280) / num96;
				int num100 = (Main.screenHeight - num97 - 20) / num96;
				int num101 = 0;
				int num102 = 0;
				int num103 = num98;
				int num104 = num97;
				int num105 = num98 - 20;
				int num106 = num97 + 2;
				if (Main.recStart > Main.numAvailableRecipes - num99 * num100)
				{
					Main.recStart = Main.numAvailableRecipes - num99 * num100;
					if (Main.recStart < 0)
					{
						Main.recStart = 0;
					}
				}
				if (Main.recStart > 0)
				{
					if (Main.mouseX >= num105 && Main.mouseX <= num105 + Main.craftUpButtonTexture.Width && Main.mouseY >= num106 && Main.mouseY <= num106 + Main.craftUpButtonTexture.Height)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart -= num99;
							if (Main.recStart < 0)
							{
								Main.recStart = 0;
							}
							Main.PlaySound(12, -1, -1, 1);
						}
					}
					Main.spriteBatch.Draw(Main.craftUpButtonTexture, new Vector2((float)num105, (float)num106), new Rectangle?(new Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (Main.recStart < Main.numAvailableRecipes - num99 * num100)
				{
					num106 += 20;
					if (Main.mouseX >= num105 && Main.mouseX <= num105 + Main.craftUpButtonTexture.Width && Main.mouseY >= num106 && Main.mouseY <= num106 + Main.craftUpButtonTexture.Height)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart += num99;
							Main.PlaySound(12, -1, -1, 1);
							if (Main.recStart > Main.numAvailableRecipes - num99)
							{
								Main.recStart = Main.numAvailableRecipes - num99;
							}
						}
					}
					Main.spriteBatch.Draw(Main.craftDownButtonTexture, new Vector2((float)num105, (float)num106), new Rectangle?(new Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num107 = Main.recStart;
				while (num107 < Recipe.maxRecipes && num107 < Main.numAvailableRecipes)
				{
					int num108 = num103;
					int num109 = num104;
					double num110 = (double)(Main.inventoryBack.A + 50);
					double num111 = 255.0;
					new Color((int)((byte)num110), (int)((byte)num110), (int)((byte)num110), (int)((byte)num110));
					Color color8 = new Color((int)((byte)num111), (int)((byte)num111), (int)((byte)num111), (int)((byte)num111));
					if (Main.mouseX >= num108 && (float)Main.mouseX <= (float)num108 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num109 && (float)Main.mouseY <= (float)num109 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.focusRecipe = num107;
							Main.recFastScroll = true;
							Main.recBigList = false;
							Main.PlaySound(12, -1, -1, 1);
						}
						Main.craftingHide = true;
						Main.hoverItemName = Main.recipe[Main.availableRecipe[num107]].createItem.name;
						Main.toolTip = Main.recipe[Main.availableRecipe[num107]].createItem.Clone();
						if (Main.recipe[Main.availableRecipe[num107]].createItem.stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.recipe[Main.availableRecipe[num107]].createItem.stack,
								")"
							});
						}
					}
					if (Main.numAvailableRecipes > 0)
					{
						num110 -= 50.0;
						if (num110 < 0.0)
						{
							num110 = 0.0;
						}
						Main.spriteBatch.Draw(Main.inventoryBack4Texture, new Vector2((float)num108, (float)num109), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color((int)((byte)num110), (int)((byte)num110), (int)((byte)num110), (int)((byte)num110)), 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						if (Main.recipe[Main.availableRecipe[num107]].createItem.type > 0 && Main.recipe[Main.availableRecipe[num107]].createItem.stack > 0)
						{
							float num112 = 1f;
							if (Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Width > 32 || Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Height > 32)
							{
								if (Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Width > Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Height)
								{
									num112 = 32f / (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Width;
								}
								else
								{
									num112 = 32f / (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Height;
								}
							}
							num112 *= Main.inventoryScale;
							Color color9 = color8;
							if (Main.recipe[Main.availableRecipe[num107]].createItem.type == 662 || Main.recipe[Main.availableRecipe[num107]].createItem.type == 663)
							{
								color8.R = (byte)Main.DiscoR;
								color8.G = (byte)Main.DiscoG;
								color8.B = (byte)Main.DiscoB;
								color8.A = 255;
							}
							Main.spriteBatch.Draw(Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type], new Vector2((float)num108 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Width * 0.5f * num112, (float)num109 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Height * 0.5f * num112), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Width, Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Height)), Main.recipe[Main.availableRecipe[num107]].createItem.GetAlpha(color8), 0f, default(Vector2), num112, SpriteEffects.None, 0f);
							color8 = color9;
							if (Main.recipe[Main.availableRecipe[num107]].createItem.color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type], new Vector2((float)num108 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Width * 0.5f * num112, (float)num109 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Height * 0.5f * num112), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Width, Main.itemTexture[Main.recipe[Main.availableRecipe[num107]].createItem.type].Height)), Main.recipe[Main.availableRecipe[num107]].createItem.GetColor(color8), 0f, default(Vector2), num112, SpriteEffects.None, 0f);
							}
							if (Main.recipe[Main.availableRecipe[num107]].createItem.stack > 1)
							{
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.recipe[Main.availableRecipe[num107]].createItem.stack), new Vector2((float)num108 + 10f * Main.inventoryScale, (float)num109 + 26f * Main.inventoryScale), color8, 0f, default(Vector2), num112, SpriteEffects.None, 0f);
							}
						}
					}
					num103 += num96;
					num101++;
					if (num101 >= num99)
					{
						num103 = num98;
						num104 += num96;
						num101 = 0;
						num102++;
						if (num102 >= num100)
						{
							break;
						}
					}
					num107++;
				}
			}
			Vector2 vector9 = Main.fontMouseText.MeasureString("Coins");
			Vector2 vector10 = Main.fontMouseText.MeasureString(Lang.inter[26]);
			float num113 = vector9.X / vector10.X;
			Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[26], new Vector2(496f, 84f + (vector9.Y - vector9.Y * num113) / 2f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.75f * num113, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.6f;
			for (int num114 = 0; num114 < 4; num114++)
			{
				int num115 = 497;
				int num116 = (int)(85f + (float)(num114 * 56) * Main.inventoryScale + 20f);
				int num117 = num114 + 50;
				Color white11 = new Color(100, 100, 100, 100);
				if (Main.mouseX >= num115 && (float)Main.mouseX <= (float)num115 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num116 && (float)Main.mouseY <= (float)num116 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftShift))
						{
							if (Main.player[Main.myPlayer].inventory[num117].type > 0)
							{
								if (Main.npcShop > 0)
								{
									if (Main.player[Main.myPlayer].inventory[num117].type < 71 || Main.player[Main.myPlayer].inventory[num117].type > 74)
									{
										if (Main.player[Main.myPlayer].SellItem(Main.player[Main.myPlayer].inventory[num117].value, Main.player[Main.myPlayer].inventory[num117].stack))
										{
											this.shop[Main.npcShop].AddShop(Main.player[Main.myPlayer].inventory[num117]);
											Main.player[Main.myPlayer].inventory[num117].SetDefaults(0, false);
											Main.PlaySound(18, -1, -1, 1);
										}
										else
										{
											if (Main.player[Main.myPlayer].inventory[num117].value == 0)
											{
												this.shop[Main.npcShop].AddShop(Main.player[Main.myPlayer].inventory[num117]);
												Main.player[Main.myPlayer].inventory[num117].SetDefaults(0, false);
												Main.PlaySound(7, -1, -1, 1);
											}
										}
									}
								}
								else
								{
									Main.PlaySound(7, -1, -1, 1);
									Main.trashItem = Main.player[Main.myPlayer].inventory[num117].Clone();
									Main.player[Main.myPlayer].inventory[num117].SetDefaults(0, false);
									Recipe.FindRecipes();
								}
							}
						}
						else
						{
							if ((Main.player[Main.myPlayer].selectedItem != num117 || Main.player[Main.myPlayer].itemAnimation <= 0) && Main.player[Main.myPlayer].itemTime == 0 && (Main.mouseItem.type == 0 || Main.mouseItem.type == 71 || Main.mouseItem.type == 72 || Main.mouseItem.type == 73 || Main.mouseItem.type == 74))
							{
								Item item11 = Main.mouseItem;
								Main.mouseItem = Main.player[Main.myPlayer].inventory[num117];
								Main.player[Main.myPlayer].inventory[num117] = item11;
								if (Main.player[Main.myPlayer].inventory[num117].type == 0 || Main.player[Main.myPlayer].inventory[num117].stack < 1)
								{
									Main.player[Main.myPlayer].inventory[num117] = new Item();
								}
								if (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].inventory[num117]) && Main.player[Main.myPlayer].inventory[num117].stack != Main.player[Main.myPlayer].inventory[num117].maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
								{
									if (Main.mouseItem.stack + Main.player[Main.myPlayer].inventory[num117].stack <= Main.mouseItem.maxStack)
									{
										Main.player[Main.myPlayer].inventory[num117].stack += Main.mouseItem.stack;
										Main.mouseItem.stack = 0;
									}
									else
									{
										int num118 = Main.mouseItem.maxStack - Main.player[Main.myPlayer].inventory[num117].stack;
										Main.player[Main.myPlayer].inventory[num117].stack += num118;
										Main.mouseItem.stack -= num118;
									}
								}
								if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
								{
									Main.mouseItem = new Item();
								}
								if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].inventory[num117].type > 0)
								{
									Main.PlaySound(7, -1, -1, 1);
								}
								Recipe.FindRecipes();
							}
						}
					}
					else
					{
						if (Main.stackSplit <= 1 && Main.mouseRight && (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].inventory[num117]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
						{
							if (Main.mouseItem.type == 0)
							{
								Main.mouseItem = Main.player[Main.myPlayer].inventory[num117].Clone();
								Main.mouseItem.stack = 0;
							}
							Main.mouseItem.stack++;
							Main.player[Main.myPlayer].inventory[num117].stack--;
							if (Main.player[Main.myPlayer].inventory[num117].stack <= 0)
							{
								Main.player[Main.myPlayer].inventory[num117] = new Item();
							}
							Recipe.FindRecipes();
							Main.soundInstanceMenuTick.Stop();
							Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
							Main.PlaySound(12, -1, -1, 1);
							if (Main.stackSplit == 0)
							{
								Main.stackSplit = 15;
							}
							else
							{
								Main.stackSplit = Main.stackDelay;
							}
						}
					}
					Main.hoverItemName = Main.player[Main.myPlayer].inventory[num117].name;
					Main.toolTip = Main.player[Main.myPlayer].inventory[num117].Clone();
					if (Main.player[Main.myPlayer].inventory[num117].stack > 1)
					{
						object obj = Main.hoverItemName;
						Main.hoverItemName = string.Concat(new object[]
						{
							obj,
							" (",
							Main.player[Main.myPlayer].inventory[num117].stack,
							")"
						});
					}
				}
				Main.spriteBatch.Draw(Main.inventoryBackTexture, new Vector2((float)num115, (float)num116), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
				white11 = Color.White;
				if (Main.player[Main.myPlayer].inventory[num117].type > 0 && Main.player[Main.myPlayer].inventory[num117].stack > 0)
				{
					float num119 = 1f;
					if (Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Height > 32)
					{
						if (Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Width > Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Height)
						{
							num119 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Width;
						}
						else
						{
							num119 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Height;
						}
					}
					num119 *= Main.inventoryScale;
					Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type], new Vector2((float)num115 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Width * 0.5f * num119, (float)num116 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Height * 0.5f * num119), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Height)), Main.player[Main.myPlayer].inventory[num117].GetAlpha(white11), 0f, default(Vector2), num119, SpriteEffects.None, 0f);
					if (Main.player[Main.myPlayer].inventory[num117].color != default(Color))
					{
						Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type], new Vector2((float)num115 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Width * 0.5f * num119, (float)num116 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Height * 0.5f * num119), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[num117].type].Height)), Main.player[Main.myPlayer].inventory[num117].GetColor(white11), 0f, default(Vector2), num119, SpriteEffects.None, 0f);
					}
					if (Main.player[Main.myPlayer].inventory[num117].stack > 1)
					{
						Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].inventory[num117].stack), new Vector2((float)num115 + 10f * Main.inventoryScale, (float)num116 + 26f * Main.inventoryScale), white11, 0f, default(Vector2), num119, SpriteEffects.None, 0f);
					}
				}
			}
			Vector2 vector11 = Main.fontMouseText.MeasureString("Ammo");
			Vector2 vector12 = Main.fontMouseText.MeasureString(Lang.inter[27]);
			float num120 = vector11.X / vector12.X;
			Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[27], new Vector2(532f, 84f + (vector11.Y - vector11.Y * num120) / 2f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 0.75f * num120, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.6f;
			for (int num121 = 0; num121 < 4; num121++)
			{
				int num122 = 534;
				int num123 = (int)(85f + (float)(num121 * 56) * Main.inventoryScale + 20f);
				int num124 = 54 + num121;
				Color white12 = new Color(100, 100, 100, 100);
				if (Main.mouseX >= num122 && (float)Main.mouseX <= (float)num122 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num123 && (float)Main.mouseY <= (float)num123 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftShift))
						{
							if (Main.player[Main.myPlayer].inventory[num124].type > 0)
							{
								if (Main.npcShop > 0)
								{
									if (Main.player[Main.myPlayer].inventory[num124].type < 71 || Main.player[Main.myPlayer].inventory[num124].type > 74)
									{
										if (Main.player[Main.myPlayer].SellItem(Main.player[Main.myPlayer].inventory[num124].value, Main.player[Main.myPlayer].inventory[num124].stack))
										{
											this.shop[Main.npcShop].AddShop(Main.player[Main.myPlayer].inventory[num124]);
											Main.player[Main.myPlayer].inventory[num124].SetDefaults(0, false);
											Main.PlaySound(18, -1, -1, 1);
										}
										else
										{
											if (Main.player[Main.myPlayer].inventory[num124].value == 0)
											{
												this.shop[Main.npcShop].AddShop(Main.player[Main.myPlayer].inventory[num124]);
												Main.player[Main.myPlayer].inventory[num124].SetDefaults(0, false);
												Main.PlaySound(7, -1, -1, 1);
											}
										}
									}
								}
								else
								{
									Main.PlaySound(7, -1, -1, 1);
									Main.trashItem = Main.player[Main.myPlayer].inventory[num124].Clone();
									Main.player[Main.myPlayer].inventory[num124].SetDefaults(0, false);
									Recipe.FindRecipes();
								}
							}
						}
						else
						{
							if ((Main.player[Main.myPlayer].selectedItem != num124 || Main.player[Main.myPlayer].itemAnimation <= 0) && Main.player[Main.myPlayer].itemTime == 0 && (Main.mouseItem.type == 0 || Main.mouseItem.ammo > 0 || Main.mouseItem.type == 530) && !Main.mouseItem.notAmmo)
							{
								Item item12 = Main.mouseItem;
								Main.mouseItem = Main.player[Main.myPlayer].inventory[num124];
								Main.player[Main.myPlayer].inventory[num124] = item12;
								if (Main.player[Main.myPlayer].inventory[num124].type == 0 || Main.player[Main.myPlayer].inventory[num124].stack < 1)
								{
									Main.player[Main.myPlayer].inventory[num124] = new Item();
								}
								if (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].inventory[num124]) && Main.player[Main.myPlayer].inventory[num124].stack != Main.player[Main.myPlayer].inventory[num124].maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
								{
									if (Main.mouseItem.stack + Main.player[Main.myPlayer].inventory[num124].stack <= Main.mouseItem.maxStack)
									{
										Main.player[Main.myPlayer].inventory[num124].stack += Main.mouseItem.stack;
										Main.mouseItem.stack = 0;
									}
									else
									{
										int num125 = Main.mouseItem.maxStack - Main.player[Main.myPlayer].inventory[num124].stack;
										Main.player[Main.myPlayer].inventory[num124].stack += num125;
										Main.mouseItem.stack -= num125;
									}
								}
								if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
								{
									Main.mouseItem = new Item();
								}
								if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].inventory[num124].type > 0)
								{
									Main.PlaySound(7, -1, -1, 1);
								}
								Recipe.FindRecipes();
							}
						}
						Recipe.FindRecipes();
					}
					else
					{
						if (Main.stackSplit <= 1 && Main.mouseRight && (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].inventory[num124]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
						{
							if (Main.mouseItem.type == 0)
							{
								Main.mouseItem = Main.player[Main.myPlayer].inventory[num124].Clone();
								Main.mouseItem.stack = 0;
							}
							Main.mouseItem.stack++;
							Main.player[Main.myPlayer].inventory[num124].stack--;
							if (Main.player[Main.myPlayer].inventory[num124].stack <= 0)
							{
								Main.player[Main.myPlayer].inventory[num124] = new Item();
							}
							Recipe.FindRecipes();
							Main.soundInstanceMenuTick.Stop();
							Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
							Main.PlaySound(12, -1, -1, 1);
							if (Main.stackSplit == 0)
							{
								Main.stackSplit = 15;
							}
							else
							{
								Main.stackSplit = Main.stackDelay;
							}
						}
					}
					Main.hoverItemName = Main.player[Main.myPlayer].inventory[num124].name;
					Main.toolTip = Main.player[Main.myPlayer].inventory[num124].Clone();
					if (Main.player[Main.myPlayer].inventory[num124].stack > 1)
					{
						object obj = Main.hoverItemName;
						Main.hoverItemName = string.Concat(new object[]
						{
							obj,
							" (",
							Main.player[Main.myPlayer].inventory[num124].stack,
							")"
						});
					}
				}
				Main.spriteBatch.Draw(Main.inventoryBackTexture, new Vector2((float)num122, (float)num123), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
				white12 = Color.White;
				if (Main.player[Main.myPlayer].inventory[num124].type > 0 && Main.player[Main.myPlayer].inventory[num124].stack > 0)
				{
					float num126 = 1f;
					if (Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Height > 32)
					{
						if (Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Width > Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Height)
						{
							num126 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Width;
						}
						else
						{
							num126 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Height;
						}
					}
					num126 *= Main.inventoryScale;
					Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type], new Vector2((float)num122 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Width * 0.5f * num126, (float)num123 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Height * 0.5f * num126), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Height)), Main.player[Main.myPlayer].inventory[num124].GetAlpha(white12), 0f, default(Vector2), num126, SpriteEffects.None, 0f);
					if (Main.player[Main.myPlayer].inventory[num124].color != default(Color))
					{
						Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type], new Vector2((float)num122 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Width * 0.5f * num126, (float)num123 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Height * 0.5f * num126), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[num124].type].Height)), Main.player[Main.myPlayer].inventory[num124].GetColor(white12), 0f, default(Vector2), num126, SpriteEffects.None, 0f);
					}
					if (Main.player[Main.myPlayer].inventory[num124].stack > 1)
					{
						Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].inventory[num124].stack), new Vector2((float)num122 + 10f * Main.inventoryScale, (float)num123 + 26f * Main.inventoryScale), white12, 0f, default(Vector2), num126, SpriteEffects.None, 0f);
					}
				}
			}
			if (Main.npcShop > 0 && (!Main.playerInventory || Main.player[Main.myPlayer].talkNPC == -1))
			{
				Main.npcShop = 0;
			}
			if (Main.npcShop > 0)
			{
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[28], new Vector2(504f, (float)this.invBottom), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 560f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num127 = 0; num127 < 10; num127++)
				{
					for (int num128 = 0; num128 < 4; num128++)
					{
						int num129 = (int)(73f + (float)(num127 * 56) * Main.inventoryScale);
						int num130 = (int)((float)this.invBottom + (float)(num128 * 56) * Main.inventoryScale);
						int num131 = num127 + num128 * 10;
						Color white13 = new Color(100, 100, 100, 100);
						if (Main.mouseX >= num129 && (float)Main.mouseX <= (float)num129 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num130 && (float)Main.mouseY <= (float)num130 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								if (Main.mouseItem.type == 0 && this.shop[Main.npcShop].item[num131].type > 0)
								{
									if ((Main.player[Main.myPlayer].selectedItem != num131 || Main.player[Main.myPlayer].itemAnimation <= 0) && Main.player[Main.myPlayer].itemTime == 0 && Main.player[Main.myPlayer].BuyItem(this.shop[Main.npcShop].item[num131].value))
									{
										if (this.shop[Main.npcShop].item[num131].buyOnce)
										{
											int prefix = (int)this.shop[Main.npcShop].item[num131].prefix;
											Main.mouseItem.netDefaults(this.shop[Main.npcShop].item[num131].netID);
											Main.mouseItem.Prefix(prefix);
										}
										else
										{
											Main.mouseItem.netDefaults(this.shop[Main.npcShop].item[num131].netID);
											Main.mouseItem.Prefix(-1);
										}
										Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
										Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
										ItemText.NewText(Main.mouseItem, Main.mouseItem.stack);
										if (this.shop[Main.npcShop].item[num131].buyOnce)
										{
											this.shop[Main.npcShop].item[num131].stack--;
											if (this.shop[Main.npcShop].item[num131].stack <= 0)
											{
												this.shop[Main.npcShop].item[num131].SetDefaults(0, false);
											}
										}
										if (this.shop[Main.npcShop].item[num131].value > 0)
										{
											Main.PlaySound(18, -1, -1, 1);
										}
										else
										{
											Main.PlaySound(7, -1, -1, 1);
										}
									}
								}
								else
								{
									if (this.shop[Main.npcShop].item[num131].type == 0 && Main.mouseItem.type > 0 && (Main.mouseItem.type < 71 || Main.mouseItem.type > 74))
									{
										if (Main.player[Main.myPlayer].SellItem(Main.mouseItem.value, Main.mouseItem.stack))
										{
											this.shop[Main.npcShop].AddShop(Main.mouseItem);
											Main.mouseItem.stack = 0;
											Main.mouseItem.type = 0;
											Main.PlaySound(18, -1, -1, 1);
										}
										else
										{
											if (Main.mouseItem.value == 0)
											{
												this.shop[Main.npcShop].AddShop(Main.mouseItem);
												Main.mouseItem.stack = 0;
												Main.mouseItem.type = 0;
												Main.PlaySound(7, -1, -1, 1);
											}
										}
										Recipe.FindRecipes();
									}
								}
							}
							else
							{
								if (Main.stackSplit <= 1 && Main.mouseRight && this.shop[Main.npcShop].item[num131].type > 0 && (Main.mouseItem.IsTheSameAs(this.shop[Main.npcShop].item[num131]) || Main.mouseItem.type == 0))
								{
									int num132 = Main.superFastStack + 1;
									for (int num133 = 0; num133 < num132; num133++)
									{
										if ((Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0) && Main.player[Main.myPlayer].BuyItem(this.shop[Main.npcShop].item[num131].value))
										{
											if (num133 == 0)
											{
												Main.PlaySound(18, -1, -1, 1);
											}
											if (Main.mouseItem.type == 0)
											{
												Main.mouseItem.netDefaults(this.shop[Main.npcShop].item[num131].netID);
												if (this.shop[Main.npcShop].item[num131].prefix != 0)
												{
													Main.mouseItem.Prefix((int)this.shop[Main.npcShop].item[num131].prefix);
												}
												Main.mouseItem.stack = 0;
											}
											Main.mouseItem.stack++;
											if (Main.stackSplit == 0)
											{
												Main.stackSplit = 15;
											}
											else
											{
												Main.stackSplit = Main.stackDelay;
											}
											if (this.shop[Main.npcShop].item[num131].buyOnce)
											{
												this.shop[Main.npcShop].item[num131].stack--;
												if (this.shop[Main.npcShop].item[num131].stack <= 0)
												{
													this.shop[Main.npcShop].item[num131].SetDefaults(0, false);
												}
											}
										}
									}
								}
							}
							Main.hoverItemName = this.shop[Main.npcShop].item[num131].name;
							Main.toolTip = this.shop[Main.npcShop].item[num131].Clone();
							Main.toolTip.buy = true;
							if (this.shop[Main.npcShop].item[num131].stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									this.shop[Main.npcShop].item[num131].stack,
									")"
								});
							}
						}
						Main.spriteBatch.Draw(Main.inventoryBack6Texture, new Vector2((float)num129, (float)num130), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						white13 = Color.White;
						if (this.shop[Main.npcShop].item[num131].type > 0 && this.shop[Main.npcShop].item[num131].stack > 0)
						{
							float num134 = 1f;
							if (Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Width > 32 || Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Height > 32)
							{
								if (Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Width > Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Height)
								{
									num134 = 32f / (float)Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Width;
								}
								else
								{
									num134 = 32f / (float)Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Height;
								}
							}
							num134 *= Main.inventoryScale;
							if (this.shop[Main.npcShop].item[num131].type == 662 || this.shop[Main.npcShop].item[num131].type == 663)
							{
								white13.R = (byte)Main.DiscoR;
								white13.G = (byte)Main.DiscoG;
								white13.B = (byte)Main.DiscoB;
								white13.A = 255;
							}
							Main.spriteBatch.Draw(Main.itemTexture[this.shop[Main.npcShop].item[num131].type], new Vector2((float)num129 + 26f * Main.inventoryScale - (float)Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Width * 0.5f * num134, (float)num130 + 26f * Main.inventoryScale - (float)Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Height * 0.5f * num134), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Width, Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Height)), this.shop[Main.npcShop].item[num131].GetAlpha(white13), 0f, default(Vector2), num134, SpriteEffects.None, 0f);
							white13 = Color.White;
							if (this.shop[Main.npcShop].item[num131].color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[this.shop[Main.npcShop].item[num131].type], new Vector2((float)num129 + 26f * Main.inventoryScale - (float)Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Width * 0.5f * num134, (float)num130 + 26f * Main.inventoryScale - (float)Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Height * 0.5f * num134), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Width, Main.itemTexture[this.shop[Main.npcShop].item[num131].type].Height)), this.shop[Main.npcShop].item[num131].GetColor(white13), 0f, default(Vector2), num134, SpriteEffects.None, 0f);
							}
							if (this.shop[Main.npcShop].item[num131].stack > 1)
							{
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(this.shop[Main.npcShop].item[num131].stack), new Vector2((float)num129 + 10f * Main.inventoryScale, (float)num130 + 26f * Main.inventoryScale), white13, 0f, default(Vector2), num134, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			if (Main.player[Main.myPlayer].chest > -1 && Main.tile[Main.player[Main.myPlayer].chestX, Main.player[Main.myPlayer].chestY].type != 21)
			{
				Main.player[Main.myPlayer].chest = -1;
			}
			if (Main.player[Main.myPlayer].chest != -1)
			{
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 560f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				string text7 = string.Empty;
				if (Main.editChest)
				{
					text7 = Main.npcChatText;
					this.textBlinkerCount++;
					if (this.textBlinkerCount >= 20)
					{
						if (this.textBlinkerState == 0)
						{
							this.textBlinkerState = 1;
						}
						else
						{
							this.textBlinkerState = 0;
						}
						this.textBlinkerCount = 0;
					}
					if (this.textBlinkerState == 1)
					{
						text7 += "|";
					}
				}
				else
				{
					if (Main.player[Main.myPlayer].chest > -1)
					{
						if (Main.chest[Main.player[Main.myPlayer].chest].name != "")
						{
							text7 = Main.chest[Main.player[Main.myPlayer].chest].name;
						}
						else
						{
							text7 = Lang.chestType[(int)(Main.tile[Main.player[Main.myPlayer].chestX, Main.player[Main.myPlayer].chestY].frameX / 36)];
						}
					}
					else
					{
						if (Main.player[Main.myPlayer].chest == -2)
						{
							text7 = Lang.inter[32];
						}
						else
						{
							if (Main.player[Main.myPlayer].chest == -3)
							{
								text7 = Lang.inter[33];
							}
						}
					}
				}
				int num135;
				Utils.WordwrapString(text7, Main.fontMouseText, 200, 1, out num135);
				num135++;
				for (int num136 = 0; num136 < num135; num136++)
				{
					Main.spriteBatch.DrawString(Main.fontMouseText, text7, new Vector2(504f, (float)(this.invBottom + num136 * 26)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				Main.fontMouseText.MeasureString(text7);
				int num137 = 0;
				while (num137 < 5)
				{
					int num138 = 506;
					int num139 = this.invBottom + 40;
					float num140 = this.chestLootScale;
					string text8 = Lang.inter[29];
					if (num137 == 1)
					{
						num139 += 26;
						num140 = this.chestDepositScale;
						text8 = Lang.inter[30];
						goto IL_B2D0;
					}
					if (num137 == 2)
					{
						num139 += 52;
						num140 = this.chestStackScale;
						text8 = Lang.inter[31];
						goto IL_B2D0;
					}
					if (num137 == 3)
					{
						if (Main.player[Main.myPlayer].chest >= -1)
						{
							num139 += 78;
							num140 = this.chestRenameScale;
							if (Main.editChest)
							{
								text8 = Lang.inter[47];
								goto IL_B2D0;
							}
							text8 = Lang.inter[61];
							goto IL_B2D0;
						}
					}
					else
					{
						if (num137 != 4)
						{
							goto IL_B2D0;
						}
						if (Main.editChest)
						{
							num139 += 104;
							num140 = this.chestCancelScale;
							text8 = Lang.inter[63];
							goto IL_B2D0;
						}
					}
					IL_CB8E:
					num137++;
					continue;
					IL_B2D0:
					Vector2 vector13 = Main.fontMouseText.MeasureString(text8) / 2f;
					Color color10 = new Color((int)((byte)((float)Main.mouseTextColor * num140)), (int)((byte)((float)Main.mouseTextColor * num140)), (int)((byte)((float)Main.mouseTextColor * num140)), (int)((byte)((float)Main.mouseTextColor * num140)));
					num138 += (int)(vector13.X * num140);
					Main.spriteBatch.DrawString(Main.fontMouseText, text8, new Vector2((float)num138, (float)num139), color10, 0f, vector13, num140, SpriteEffects.None, 0f);
					vector13 *= num140;
					if ((float)Main.mouseX > (float)num138 - vector13.X && (float)Main.mouseX < (float)num138 + vector13.X && (float)Main.mouseY > (float)num139 - vector13.Y && (float)Main.mouseY < (float)num139 + vector13.Y)
					{
						if (num137 == 0)
						{
							if (!this.chestLootHover)
							{
								Main.PlaySound(12, -1, -1, 1);
							}
							this.chestLootHover = true;
						}
						else
						{
							if (num137 == 1)
							{
								if (!this.chestDepositHover)
								{
									Main.PlaySound(12, -1, -1, 1);
								}
								this.chestDepositHover = true;
							}
							else
							{
								if (num137 == 2)
								{
									if (!this.chestStackHover)
									{
										Main.PlaySound(12, -1, -1, 1);
									}
									this.chestStackHover = true;
								}
								else
								{
									if (num137 == 3)
									{
										if (Main.player[Main.myPlayer].chest > -1)
										{
											if (!this.chestRenameHover)
											{
												Main.PlaySound(12, -1, -1, 1);
											}
											this.chestRenameHover = true;
										}
									}
									else
									{
										if (num137 == 4 && Main.editChest)
										{
											if (!this.chestCancelHover)
											{
												Main.PlaySound(12, -1, -1, 1);
											}
											this.chestCancelHover = true;
										}
									}
								}
							}
						}
						Main.player[Main.myPlayer].mouseInterface = true;
						num140 += 0.05f;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (num137 == 0)
							{
								if (Main.player[Main.myPlayer].chest > -1)
								{
									for (int num141 = 0; num141 < Chest.maxItems; num141++)
									{
										if (Main.chest[Main.player[Main.myPlayer].chest].item[num141].type > 0)
										{
											Main.chest[Main.player[Main.myPlayer].chest].item[num141] = Main.player[Main.myPlayer].GetItem(Main.myPlayer, Main.chest[Main.player[Main.myPlayer].chest].item[num141]);
											if (Main.netMode == 1)
											{
												NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num141, 0f, 0f, 0);
											}
										}
									}
								}
								else
								{
									if (Main.player[Main.myPlayer].chest == -3)
									{
										for (int num142 = 0; num142 < Chest.maxItems; num142++)
										{
											if (Main.player[Main.myPlayer].bank2.item[num142].type > 0)
											{
												Main.player[Main.myPlayer].bank2.item[num142] = Main.player[Main.myPlayer].GetItem(Main.myPlayer, Main.player[Main.myPlayer].bank2.item[num142]);
											}
										}
									}
									else
									{
										for (int num143 = 0; num143 < Chest.maxItems; num143++)
										{
											if (Main.player[Main.myPlayer].bank.item[num143].type > 0)
											{
												Main.player[Main.myPlayer].bank.item[num143] = Main.player[Main.myPlayer].GetItem(Main.myPlayer, Main.player[Main.myPlayer].bank.item[num143]);
											}
										}
									}
								}
							}
							else
							{
								if (num137 == 1)
								{
									if (Main.player[Main.myPlayer].chest > -1)
									{
										Main.MoveCoins(Main.player[Main.myPlayer].inventory, Main.chest[Main.player[Main.myPlayer].chest].item);
									}
									else
									{
										if (Main.player[Main.myPlayer].chest == -3)
										{
											Main.MoveCoins(Main.player[Main.myPlayer].inventory, Main.player[Main.myPlayer].bank2.item);
										}
										else
										{
											Main.MoveCoins(Main.player[Main.myPlayer].inventory, Main.player[Main.myPlayer].bank.item);
										}
									}
									for (int num144 = 49; num144 >= 10; num144--)
									{
										if (Main.player[Main.myPlayer].inventory[num144].stack > 0 && Main.player[Main.myPlayer].inventory[num144].type > 0)
										{
											if (Main.player[Main.myPlayer].inventory[num144].maxStack > 1)
											{
												for (int num145 = 0; num145 < Chest.maxItems; num145++)
												{
													if (Main.player[Main.myPlayer].chest > -1)
													{
														if (Main.chest[Main.player[Main.myPlayer].chest].item[num145].stack < Main.chest[Main.player[Main.myPlayer].chest].item[num145].maxStack && Main.player[Main.myPlayer].inventory[num144].IsTheSameAs(Main.chest[Main.player[Main.myPlayer].chest].item[num145]))
														{
															int num146 = Main.player[Main.myPlayer].inventory[num144].stack;
															if (Main.player[Main.myPlayer].inventory[num144].stack + Main.chest[Main.player[Main.myPlayer].chest].item[num145].stack > Main.chest[Main.player[Main.myPlayer].chest].item[num145].maxStack)
															{
																num146 = Main.chest[Main.player[Main.myPlayer].chest].item[num145].maxStack - Main.chest[Main.player[Main.myPlayer].chest].item[num145].stack;
															}
															Main.player[Main.myPlayer].inventory[num144].stack -= num146;
															Main.chest[Main.player[Main.myPlayer].chest].item[num145].stack += num146;
															Main.PlaySound(7, -1, -1, 1);
															if (Main.player[Main.myPlayer].inventory[num144].stack <= 0)
															{
																Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																if (Main.netMode == 1)
																{
																	NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num145, 0f, 0f, 0);
																	break;
																}
																break;
															}
															else
															{
																if (Main.chest[Main.player[Main.myPlayer].chest].item[num145].type == 0)
																{
																	Main.chest[Main.player[Main.myPlayer].chest].item[num145] = Main.player[Main.myPlayer].inventory[num144].Clone();
																	Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																}
																if (Main.netMode == 1)
																{
																	NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num145, 0f, 0f, 0);
																}
															}
														}
													}
													else
													{
														if (Main.player[Main.myPlayer].chest == -3)
														{
															if (Main.player[Main.myPlayer].bank2.item[num145].stack < Main.player[Main.myPlayer].bank2.item[num145].maxStack && Main.player[Main.myPlayer].inventory[num144].IsTheSameAs(Main.player[Main.myPlayer].bank2.item[num145]))
															{
																int num147 = Main.player[Main.myPlayer].inventory[num144].stack;
																if (Main.player[Main.myPlayer].inventory[num144].stack + Main.player[Main.myPlayer].bank2.item[num145].stack > Main.player[Main.myPlayer].bank2.item[num145].maxStack)
																{
																	num147 = Main.player[Main.myPlayer].bank2.item[num145].maxStack - Main.player[Main.myPlayer].bank2.item[num145].stack;
																}
																Main.player[Main.myPlayer].inventory[num144].stack -= num147;
																Main.player[Main.myPlayer].bank2.item[num145].stack += num147;
																Main.PlaySound(7, -1, -1, 1);
																if (Main.player[Main.myPlayer].inventory[num144].stack <= 0)
																{
																	Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																	break;
																}
																if (Main.player[Main.myPlayer].bank2.item[num145].type == 0)
																{
																	Main.player[Main.myPlayer].bank2.item[num145] = Main.player[Main.myPlayer].inventory[num144].Clone();
																	Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																}
															}
														}
														else
														{
															if (Main.player[Main.myPlayer].bank.item[num145].stack < Main.player[Main.myPlayer].bank.item[num145].maxStack && Main.player[Main.myPlayer].inventory[num144].IsTheSameAs(Main.player[Main.myPlayer].bank.item[num145]))
															{
																int num148 = Main.player[Main.myPlayer].inventory[num144].stack;
																if (Main.player[Main.myPlayer].inventory[num144].stack + Main.player[Main.myPlayer].bank.item[num145].stack > Main.player[Main.myPlayer].bank.item[num145].maxStack)
																{
																	num148 = Main.player[Main.myPlayer].bank.item[num145].maxStack - Main.player[Main.myPlayer].bank.item[num145].stack;
																}
																Main.player[Main.myPlayer].inventory[num144].stack -= num148;
																Main.player[Main.myPlayer].bank.item[num145].stack += num148;
																Main.PlaySound(7, -1, -1, 1);
																if (Main.player[Main.myPlayer].inventory[num144].stack <= 0)
																{
																	Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																	break;
																}
																if (Main.player[Main.myPlayer].bank.item[num145].type == 0)
																{
																	Main.player[Main.myPlayer].bank.item[num145] = Main.player[Main.myPlayer].inventory[num144].Clone();
																	Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																}
															}
														}
													}
												}
											}
											if (Main.player[Main.myPlayer].inventory[num144].stack > 0)
											{
												if (Main.player[Main.myPlayer].chest > -1)
												{
													int num149 = 0;
													while (num149 < Chest.maxItems)
													{
														if (Main.chest[Main.player[Main.myPlayer].chest].item[num149].stack == 0)
														{
															Main.PlaySound(7, -1, -1, 1);
															Main.chest[Main.player[Main.myPlayer].chest].item[num149] = Main.player[Main.myPlayer].inventory[num144].Clone();
															Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
															if (Main.netMode == 1)
															{
																NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num149, 0f, 0f, 0);
																break;
															}
															break;
														}
														else
														{
															num149++;
														}
													}
												}
												else
												{
													if (Main.player[Main.myPlayer].chest == -3)
													{
														for (int num150 = 0; num150 < Chest.maxItems; num150++)
														{
															if (Main.player[Main.myPlayer].bank2.item[num150].stack == 0)
															{
																Main.PlaySound(7, -1, -1, 1);
																Main.player[Main.myPlayer].bank2.item[num150] = Main.player[Main.myPlayer].inventory[num144].Clone();
																Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																break;
															}
														}
													}
													else
													{
														for (int num151 = 0; num151 < Chest.maxItems; num151++)
														{
															if (Main.player[Main.myPlayer].bank.item[num151].stack == 0)
															{
																Main.PlaySound(7, -1, -1, 1);
																Main.player[Main.myPlayer].bank.item[num151] = Main.player[Main.myPlayer].inventory[num144].Clone();
																Main.player[Main.myPlayer].inventory[num144].SetDefaults(0, false);
																break;
															}
														}
													}
												}
											}
										}
									}
								}
								else
								{
									if (num137 == 2)
									{
										if (Main.player[Main.myPlayer].chest > -1)
										{
											Main.MoveCoins(Main.player[Main.myPlayer].inventory, Main.chest[Main.player[Main.myPlayer].chest].item);
										}
										else
										{
											if (Main.player[Main.myPlayer].chest == -3)
											{
												Main.MoveCoins(Main.player[Main.myPlayer].inventory, Main.player[Main.myPlayer].bank2.item);
											}
											else
											{
												Main.MoveCoins(Main.player[Main.myPlayer].inventory, Main.player[Main.myPlayer].bank.item);
											}
										}
										if (Main.player[Main.myPlayer].chest > -1)
										{
											for (int num152 = 0; num152 < Chest.maxItems; num152++)
											{
												if (Main.chest[Main.player[Main.myPlayer].chest].item[num152].type > 0 && Main.chest[Main.player[Main.myPlayer].chest].item[num152].stack < Main.chest[Main.player[Main.myPlayer].chest].item[num152].maxStack)
												{
													for (int num153 = 0; num153 < 58; num153++)
													{
														if (Main.chest[Main.player[Main.myPlayer].chest].item[num152].IsTheSameAs(Main.player[Main.myPlayer].inventory[num153]))
														{
															int num154 = Main.player[Main.myPlayer].inventory[num153].stack;
															if (Main.chest[Main.player[Main.myPlayer].chest].item[num152].stack + num154 > Main.chest[Main.player[Main.myPlayer].chest].item[num152].maxStack)
															{
																num154 = Main.chest[Main.player[Main.myPlayer].chest].item[num152].maxStack - Main.chest[Main.player[Main.myPlayer].chest].item[num152].stack;
															}
															Main.PlaySound(7, -1, -1, 1);
															Main.chest[Main.player[Main.myPlayer].chest].item[num152].stack += num154;
															Main.player[Main.myPlayer].inventory[num153].stack -= num154;
															if (Main.player[Main.myPlayer].inventory[num153].stack == 0)
															{
																Main.player[Main.myPlayer].inventory[num153].SetDefaults(0, false);
															}
															else
															{
																if (Main.chest[Main.player[Main.myPlayer].chest].item[num152].type == 0)
																{
																	Main.chest[Main.player[Main.myPlayer].chest].item[num152] = Main.player[Main.myPlayer].inventory[num153].Clone();
																	Main.player[Main.myPlayer].inventory[num153].SetDefaults(0, false);
																}
															}
															if (Main.netMode == 1)
															{
																NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num152, 0f, 0f, 0);
															}
														}
													}
												}
											}
										}
										else
										{
											if (Main.player[Main.myPlayer].chest == -3)
											{
												for (int num155 = 0; num155 < Chest.maxItems; num155++)
												{
													if (Main.player[Main.myPlayer].bank2.item[num155].type > 0 && Main.player[Main.myPlayer].bank2.item[num155].stack < Main.player[Main.myPlayer].bank2.item[num155].maxStack)
													{
														for (int num156 = 0; num156 < 58; num156++)
														{
															if (Main.player[Main.myPlayer].bank2.item[num155].IsTheSameAs(Main.player[Main.myPlayer].inventory[num156]))
															{
																int num157 = Main.player[Main.myPlayer].inventory[num156].stack;
																if (Main.player[Main.myPlayer].bank2.item[num155].stack + num157 > Main.player[Main.myPlayer].bank2.item[num155].maxStack)
																{
																	num157 = Main.player[Main.myPlayer].bank2.item[num155].maxStack - Main.player[Main.myPlayer].bank2.item[num155].stack;
																}
																Main.PlaySound(7, -1, -1, 1);
																Main.player[Main.myPlayer].bank2.item[num155].stack += num157;
																Main.player[Main.myPlayer].inventory[num156].stack -= num157;
																if (Main.player[Main.myPlayer].inventory[num156].stack == 0)
																{
																	Main.player[Main.myPlayer].inventory[num156].SetDefaults(0, false);
																}
																else
																{
																	if (Main.player[Main.myPlayer].bank2.item[num155].type == 0)
																	{
																		Main.player[Main.myPlayer].bank2.item[num155] = Main.player[Main.myPlayer].inventory[num156].Clone();
																		Main.player[Main.myPlayer].inventory[num156].SetDefaults(0, false);
																	}
																}
															}
														}
													}
												}
											}
											else
											{
												for (int num158 = 0; num158 < Chest.maxItems; num158++)
												{
													if (Main.player[Main.myPlayer].bank.item[num158].type > 0 && Main.player[Main.myPlayer].bank.item[num158].stack < Main.player[Main.myPlayer].bank.item[num158].maxStack)
													{
														for (int num159 = 0; num159 < 58; num159++)
														{
															if (Main.player[Main.myPlayer].bank.item[num158].IsTheSameAs(Main.player[Main.myPlayer].inventory[num159]))
															{
																int num160 = Main.player[Main.myPlayer].inventory[num159].stack;
																if (Main.player[Main.myPlayer].bank.item[num158].stack + num160 > Main.player[Main.myPlayer].bank.item[num158].maxStack)
																{
																	num160 = Main.player[Main.myPlayer].bank.item[num158].maxStack - Main.player[Main.myPlayer].bank.item[num158].stack;
																}
																Main.PlaySound(7, -1, -1, 1);
																Main.player[Main.myPlayer].bank.item[num158].stack += num160;
																Main.player[Main.myPlayer].inventory[num159].stack -= num160;
																if (Main.player[Main.myPlayer].inventory[num159].stack == 0)
																{
																	Main.player[Main.myPlayer].inventory[num159].SetDefaults(0, false);
																}
																else
																{
																	if (Main.player[Main.myPlayer].bank.item[num158].type == 0)
																	{
																		Main.player[Main.myPlayer].bank.item[num158] = Main.player[Main.myPlayer].inventory[num159].Clone();
																		Main.player[Main.myPlayer].inventory[num159].SetDefaults(0, false);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									else
									{
										if (num137 == 3)
										{
											if (!Main.editChest)
											{
												Main.npcChatText = Main.chest[Main.player[Main.myPlayer].chest].name;
												Main.defaultChestName = Lang.chestType[(int)(Main.tile[Main.player[Main.myPlayer].chestX, Main.player[Main.myPlayer].chestY].frameX / 36)];
												if (Main.npcChatText == "")
												{
													Main.npcChatText = Main.defaultChestName;
												}
												Main.editChest = true;
												Main.clrInput();
											}
											else
											{
												Main.PlaySound(12, -1, -1, 1);
												Main.editChest = false;
												int num161 = Main.player[Main.myPlayer].chest;
												if (Main.npcChatText == Main.defaultChestName)
												{
													Main.npcChatText = "";
												}
												if (Main.chest[num161].name != Main.npcChatText)
												{
													Main.chest[num161].name = Main.npcChatText;
													if (Main.netMode == 1)
													{
														Main.player[Main.myPlayer].editedChestName = true;
													}
												}
											}
										}
										else
										{
											if (num137 == 4)
											{
												Main.PlaySound(12, -1, -1, 1);
												Main.editChest = false;
												Main.npcChatText = string.Empty;
											}
										}
									}
								}
							}
							Recipe.FindRecipes();
						}
					}
					else
					{
						num140 -= 0.05f;
						if (num137 == 0)
						{
							this.chestLootHover = false;
						}
						else
						{
							if (num137 == 1)
							{
								this.chestDepositHover = false;
							}
							else
							{
								if (num137 == 2)
								{
									this.chestStackHover = false;
								}
								else
								{
									if (num137 == 3)
									{
										this.chestRenameHover = false;
									}
									else
									{
										if (num137 == 4)
										{
											this.chestCancelHover = false;
										}
									}
								}
							}
						}
					}
					if ((double)num140 < 0.75)
					{
						num140 = 0.75f;
					}
					if (num140 > 1f)
					{
						num140 = 1f;
					}
					if (num137 == 0)
					{
						this.chestLootScale = num140;
						goto IL_CB8E;
					}
					if (num137 == 1)
					{
						this.chestDepositScale = num140;
						goto IL_CB8E;
					}
					if (num137 == 2)
					{
						this.chestStackScale = num140;
						goto IL_CB8E;
					}
					if (num137 == 3)
					{
						this.chestRenameScale = num140;
						goto IL_CB8E;
					}
					if (num137 == 4)
					{
						this.chestCancelScale = num140;
						goto IL_CB8E;
					}
					goto IL_CB8E;
				}
			}
			else
			{
				this.chestLootScale = 0.75f;
				this.chestDepositScale = 0.75f;
				this.chestStackScale = 0.75f;
				this.chestRenameScale = 0.75f;
				this.chestCancelScale = 0.75f;
				this.chestLootHover = false;
				this.chestDepositHover = false;
				this.chestStackHover = false;
				this.chestRenameHover = false;
				this.chestCancelHover = false;
			}
			if (Main.player[Main.myPlayer].chest > -1)
			{
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 280f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num162 = 0; num162 < 10; num162++)
				{
					for (int num163 = 0; num163 < 4; num163++)
					{
						int num164 = (int)(73f + (float)(num162 * 56) * Main.inventoryScale);
						int num165 = (int)((float)this.invBottom + (float)(num163 * 56) * Main.inventoryScale);
						int num166 = num162 + num163 * 10;
						Color white14 = new Color(100, 100, 100, 100);
						if (Main.mouseX >= num164 && (float)Main.mouseX <= (float)num164 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num165 && (float)Main.mouseY <= (float)num165 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								if ((Main.player[Main.myPlayer].selectedItem != num166 || Main.player[Main.myPlayer].itemAnimation <= 0) && Main.player[Main.myPlayer].itemTime == 0)
								{
									Item item13 = Main.mouseItem;
									Main.mouseItem = Main.chest[Main.player[Main.myPlayer].chest].item[num166];
									Main.chest[Main.player[Main.myPlayer].chest].item[num166] = item13;
									if (Main.chest[Main.player[Main.myPlayer].chest].item[num166].type == 0 || Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack < 1)
									{
										Main.chest[Main.player[Main.myPlayer].chest].item[num166] = new Item();
									}
									if (Main.mouseItem.IsTheSameAs(Main.chest[Main.player[Main.myPlayer].chest].item[num166]) && Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack != Main.chest[Main.player[Main.myPlayer].chest].item[num166].maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
									{
										if (Main.mouseItem.stack + Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack <= Main.mouseItem.maxStack)
										{
											Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack += Main.mouseItem.stack;
											Main.mouseItem.stack = 0;
										}
										else
										{
											int num167 = Main.mouseItem.maxStack - Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack;
											Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack += num167;
											Main.mouseItem.stack -= num167;
										}
									}
									if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
									{
										Main.mouseItem = new Item();
									}
									if (Main.mouseItem.type > 0 || Main.chest[Main.player[Main.myPlayer].chest].item[num166].type > 0)
									{
										Recipe.FindRecipes();
										Main.PlaySound(7, -1, -1, 1);
									}
									if (Main.netMode == 1)
									{
										NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num166, 0f, 0f, 0);
									}
								}
							}
							else
							{
								if (Main.mouseRight && Main.mouseRightRelease && Main.chest[Main.player[Main.myPlayer].chest].item[num166].maxStack == 1)
								{
									Main.chest[Main.player[Main.myPlayer].chest].item[num166] = Main.armorSwap(Main.chest[Main.player[Main.myPlayer].chest].item[num166]);
									if (Main.netMode == 1)
									{
										NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num166, 0f, 0f, 0);
									}
								}
								else
								{
									if (Main.stackSplit <= 1 && Main.mouseRight && Main.chest[Main.player[Main.myPlayer].chest].item[num166].maxStack > 1 && (Main.mouseItem.IsTheSameAs(Main.chest[Main.player[Main.myPlayer].chest].item[num166]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
									{
										if (Main.mouseItem.type == 0)
										{
											Main.mouseItem = Main.chest[Main.player[Main.myPlayer].chest].item[num166].Clone();
											Main.mouseItem.stack = 0;
										}
										Main.mouseItem.stack++;
										Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack--;
										if (Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack <= 0)
										{
											Main.chest[Main.player[Main.myPlayer].chest].item[num166] = new Item();
										}
										Recipe.FindRecipes();
										Main.soundInstanceMenuTick.Stop();
										Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
										Main.PlaySound(12, -1, -1, 1);
										if (Main.stackSplit == 0)
										{
											Main.stackSplit = 15;
										}
										else
										{
											Main.stackSplit = Main.stackDelay;
										}
										if (Main.netMode == 1)
										{
											NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num166, 0f, 0f, 0);
										}
									}
								}
							}
							Main.hoverItemName = Main.chest[Main.player[Main.myPlayer].chest].item[num166].name;
							Main.toolTip = Main.chest[Main.player[Main.myPlayer].chest].item[num166].Clone();
							if (Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack,
									")"
								});
							}
						}
						Main.spriteBatch.Draw(Main.inventoryBack5Texture, new Vector2((float)num164, (float)num165), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						white14 = Color.White;
						if (Main.chest[Main.player[Main.myPlayer].chest].item[num166].type > 0 && Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack > 0)
						{
							float num168 = 1f;
							if (Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Width > 32 || Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Height > 32)
							{
								if (Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Width > Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Height)
								{
									num168 = 32f / (float)Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Width;
								}
								else
								{
									num168 = 32f / (float)Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Height;
								}
							}
							num168 *= Main.inventoryScale;
							if (Main.chest[Main.player[Main.myPlayer].chest].item[num166].type == 662 || Main.chest[Main.player[Main.myPlayer].chest].item[num166].type == 663)
							{
								white14.R = (byte)Main.DiscoR;
								white14.G = (byte)Main.DiscoG;
								white14.B = (byte)Main.DiscoB;
								white14.A = 255;
							}
							Main.spriteBatch.Draw(Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type], new Vector2((float)num164 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Width * 0.5f * num168, (float)num165 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Height * 0.5f * num168), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Width, Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Height)), Main.chest[Main.player[Main.myPlayer].chest].item[num166].GetAlpha(white14), 0f, default(Vector2), num168, SpriteEffects.None, 0f);
							white14 = Color.White;
							if (Main.chest[Main.player[Main.myPlayer].chest].item[num166].color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type], new Vector2((float)num164 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Width * 0.5f * num168, (float)num165 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Height * 0.5f * num168), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Width, Main.itemTexture[Main.chest[Main.player[Main.myPlayer].chest].item[num166].type].Height)), Main.chest[Main.player[Main.myPlayer].chest].item[num166].GetColor(white14), 0f, default(Vector2), num168, SpriteEffects.None, 0f);
							}
							if (Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack > 1)
							{
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.chest[Main.player[Main.myPlayer].chest].item[num166].stack), new Vector2((float)num164 + 10f * Main.inventoryScale, (float)num165 + 26f * Main.inventoryScale), white14, 0f, default(Vector2), num168, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			if (Main.player[Main.myPlayer].chest == -2)
			{
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 560f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num169 = 0; num169 < 10; num169++)
				{
					for (int num170 = 0; num170 < 4; num170++)
					{
						int num171 = (int)(73f + (float)(num169 * 56) * Main.inventoryScale);
						int num172 = (int)((float)this.invBottom + (float)(num170 * 56) * Main.inventoryScale);
						int num173 = num169 + num170 * 10;
						Color white15 = new Color(100, 100, 100, 100);
						if (Main.mouseX >= num171 && (float)Main.mouseX <= (float)num171 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num172 && (float)Main.mouseY <= (float)num172 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								if ((Main.player[Main.myPlayer].selectedItem != num173 || Main.player[Main.myPlayer].itemAnimation <= 0) && Main.player[Main.myPlayer].itemTime == 0)
								{
									Item item14 = Main.mouseItem;
									Main.mouseItem = Main.player[Main.myPlayer].bank.item[num173];
									Main.player[Main.myPlayer].bank.item[num173] = item14;
									if (Main.player[Main.myPlayer].bank.item[num173].type == 0 || Main.player[Main.myPlayer].bank.item[num173].stack < 1)
									{
										Main.player[Main.myPlayer].bank.item[num173] = new Item();
									}
									if (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].bank.item[num173]) && Main.player[Main.myPlayer].bank.item[num173].stack != Main.player[Main.myPlayer].bank.item[num173].maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
									{
										if (Main.mouseItem.stack + Main.player[Main.myPlayer].bank.item[num173].stack <= Main.mouseItem.maxStack)
										{
											Main.player[Main.myPlayer].bank.item[num173].stack += Main.mouseItem.stack;
											Main.mouseItem.stack = 0;
										}
										else
										{
											int num174 = Main.mouseItem.maxStack - Main.player[Main.myPlayer].bank.item[num173].stack;
											Main.player[Main.myPlayer].bank.item[num173].stack += num174;
											Main.mouseItem.stack -= num174;
										}
									}
									if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
									{
										Main.mouseItem = new Item();
									}
									if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].bank.item[num173].type > 0)
									{
										Recipe.FindRecipes();
										Main.PlaySound(7, -1, -1, 1);
									}
								}
							}
							else
							{
								if (Main.mouseRight && Main.mouseRightRelease && Main.player[Main.myPlayer].bank.item[num173].maxStack == 1)
								{
									Main.player[Main.myPlayer].bank.item[num173] = Main.armorSwap(Main.player[Main.myPlayer].bank.item[num173]);
								}
								else
								{
									if (Main.stackSplit <= 1 && Main.mouseRight && Main.player[Main.myPlayer].bank.item[num173].maxStack > 1 && (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].bank.item[num173]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
									{
										if (Main.mouseItem.type == 0)
										{
											Main.mouseItem = Main.player[Main.myPlayer].bank.item[num173].Clone();
											Main.mouseItem.stack = 0;
										}
										Main.mouseItem.stack++;
										Main.player[Main.myPlayer].bank.item[num173].stack--;
										if (Main.player[Main.myPlayer].bank.item[num173].stack <= 0)
										{
											Main.player[Main.myPlayer].bank.item[num173] = new Item();
										}
										Recipe.FindRecipes();
										Main.soundInstanceMenuTick.Stop();
										Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
										Main.PlaySound(12, -1, -1, 1);
										if (Main.stackSplit == 0)
										{
											Main.stackSplit = 15;
										}
										else
										{
											Main.stackSplit = Main.stackDelay;
										}
									}
								}
							}
							Main.hoverItemName = Main.player[Main.myPlayer].bank.item[num173].name;
							Main.toolTip = Main.player[Main.myPlayer].bank.item[num173].Clone();
							if (Main.player[Main.myPlayer].bank.item[num173].stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.player[Main.myPlayer].bank.item[num173].stack,
									")"
								});
							}
						}
						Main.spriteBatch.Draw(Main.inventoryBack2Texture, new Vector2((float)num171, (float)num172), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						white15 = Color.White;
						if (Main.player[Main.myPlayer].bank.item[num173].type > 0 && Main.player[Main.myPlayer].bank.item[num173].stack > 0)
						{
							float num175 = 1f;
							if (Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Height > 32)
							{
								if (Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Width > Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Height)
								{
									num175 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Width;
								}
								else
								{
									num175 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Height;
								}
							}
							num175 *= Main.inventoryScale;
							if (Main.player[Main.myPlayer].bank.item[num173].type == 662 || Main.player[Main.myPlayer].bank.item[num173].type == 663)
							{
								white15.R = (byte)Main.DiscoR;
								white15.G = (byte)Main.DiscoG;
								white15.B = (byte)Main.DiscoB;
								white15.A = 255;
							}
							Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type], new Vector2((float)num171 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Width * 0.5f * num175, (float)num172 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Height * 0.5f * num175), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Width, Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Height)), Main.player[Main.myPlayer].bank.item[num173].GetAlpha(white15), 0f, default(Vector2), num175, SpriteEffects.None, 0f);
							white15 = Color.White;
							if (Main.player[Main.myPlayer].bank.item[num173].color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type], new Vector2((float)num171 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Width * 0.5f * num175, (float)num172 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Height * 0.5f * num175), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Width, Main.itemTexture[Main.player[Main.myPlayer].bank.item[num173].type].Height)), Main.player[Main.myPlayer].bank.item[num173].GetColor(white15), 0f, default(Vector2), num175, SpriteEffects.None, 0f);
							}
							if (Main.player[Main.myPlayer].bank.item[num173].stack > 1)
							{
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].bank.item[num173].stack), new Vector2((float)num171 + 10f * Main.inventoryScale, (float)num172 + 26f * Main.inventoryScale), white15, 0f, default(Vector2), num175, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			if (Main.player[Main.myPlayer].chest == -3)
			{
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 560f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int num176 = 0; num176 < 10; num176++)
				{
					for (int num177 = 0; num177 < 4; num177++)
					{
						int num178 = (int)(73f + (float)(num176 * 56) * Main.inventoryScale);
						int num179 = (int)((float)this.invBottom + (float)(num177 * 56) * Main.inventoryScale);
						int num180 = num176 + num177 * 10;
						Color white16 = new Color(100, 100, 100, 100);
						if (Main.mouseX >= num178 && (float)Main.mouseX <= (float)num178 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num179 && (float)Main.mouseY <= (float)num179 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								if ((Main.player[Main.myPlayer].selectedItem != num180 || Main.player[Main.myPlayer].itemAnimation <= 0) && Main.player[Main.myPlayer].itemTime == 0)
								{
									Item item15 = Main.mouseItem;
									Main.mouseItem = Main.player[Main.myPlayer].bank2.item[num180];
									Main.player[Main.myPlayer].bank2.item[num180] = item15;
									if (Main.player[Main.myPlayer].bank2.item[num180].type == 0 || Main.player[Main.myPlayer].bank2.item[num180].stack < 1)
									{
										Main.player[Main.myPlayer].bank2.item[num180] = new Item();
									}
									if (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].bank2.item[num180]) && Main.player[Main.myPlayer].bank2.item[num180].stack != Main.player[Main.myPlayer].bank2.item[num180].maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack)
									{
										if (Main.mouseItem.stack + Main.player[Main.myPlayer].bank2.item[num180].stack <= Main.mouseItem.maxStack)
										{
											Main.player[Main.myPlayer].bank2.item[num180].stack += Main.mouseItem.stack;
											Main.mouseItem.stack = 0;
										}
										else
										{
											int num181 = Main.mouseItem.maxStack - Main.player[Main.myPlayer].bank2.item[num180].stack;
											Main.player[Main.myPlayer].bank2.item[num180].stack += num181;
											Main.mouseItem.stack -= num181;
										}
									}
									if (Main.mouseItem.type == 0 || Main.mouseItem.stack < 1)
									{
										Main.mouseItem = new Item();
									}
									if (Main.mouseItem.type > 0 || Main.player[Main.myPlayer].bank2.item[num180].type > 0)
									{
										Recipe.FindRecipes();
										Main.PlaySound(7, -1, -1, 1);
									}
								}
							}
							else
							{
								if (Main.mouseRight && Main.mouseRightRelease && Main.player[Main.myPlayer].bank2.item[num180].maxStack == 1)
								{
									Main.player[Main.myPlayer].bank2.item[num180] = Main.armorSwap(Main.player[Main.myPlayer].bank2.item[num180]);
								}
								else
								{
									if (Main.stackSplit <= 1 && Main.mouseRight && Main.player[Main.myPlayer].bank2.item[num180].maxStack > 1 && (Main.mouseItem.IsTheSameAs(Main.player[Main.myPlayer].bank2.item[num180]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
									{
										if (Main.mouseItem.type == 0)
										{
											Main.mouseItem = Main.player[Main.myPlayer].bank2.item[num180].Clone();
											Main.mouseItem.stack = 0;
										}
										Main.mouseItem.stack++;
										Main.player[Main.myPlayer].bank2.item[num180].stack--;
										if (Main.player[Main.myPlayer].bank2.item[num180].stack <= 0)
										{
											Main.player[Main.myPlayer].bank2.item[num180] = new Item();
										}
										Recipe.FindRecipes();
										Main.soundInstanceMenuTick.Stop();
										Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
										Main.PlaySound(12, -1, -1, 1);
										if (Main.stackSplit == 0)
										{
											Main.stackSplit = 15;
										}
										else
										{
											Main.stackSplit = Main.stackDelay;
										}
									}
								}
							}
							Main.hoverItemName = Main.player[Main.myPlayer].bank2.item[num180].name;
							Main.toolTip = Main.player[Main.myPlayer].bank2.item[num180].Clone();
							if (Main.player[Main.myPlayer].bank2.item[num180].stack > 1)
							{
								object obj = Main.hoverItemName;
								Main.hoverItemName = string.Concat(new object[]
								{
									obj,
									" (",
									Main.player[Main.myPlayer].bank2.item[num180].stack,
									")"
								});
							}
						}
						Main.spriteBatch.Draw(Main.inventoryBack2Texture, new Vector2((float)num178, (float)num179), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), Main.inventoryBack, 0f, default(Vector2), Main.inventoryScale, SpriteEffects.None, 0f);
						white16 = Color.White;
						if (Main.player[Main.myPlayer].bank2.item[num180].type > 0 && Main.player[Main.myPlayer].bank2.item[num180].stack > 0)
						{
							float num182 = 1f;
							if (Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Height > 32)
							{
								if (Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Width > Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Height)
								{
									num182 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Width;
								}
								else
								{
									num182 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Height;
								}
							}
							num182 *= Main.inventoryScale;
							if (Main.player[Main.myPlayer].bank2.item[num180].type == 662 || Main.player[Main.myPlayer].bank2.item[num180].type == 663)
							{
								white16.R = (byte)Main.DiscoR;
								white16.G = (byte)Main.DiscoG;
								white16.B = (byte)Main.DiscoB;
								white16.A = 255;
							}
							Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type], new Vector2((float)num178 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Width * 0.5f * num182, (float)num179 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Height * 0.5f * num182), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Width, Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Height)), Main.player[Main.myPlayer].bank2.item[num180].GetAlpha(white16), 0f, default(Vector2), num182, SpriteEffects.None, 0f);
							white16 = Color.White;
							if (Main.player[Main.myPlayer].bank2.item[num180].color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type], new Vector2((float)num178 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Width * 0.5f * num182, (float)num179 + 26f * Main.inventoryScale - (float)Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Height * 0.5f * num182), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Width, Main.itemTexture[Main.player[Main.myPlayer].bank2.item[num180].type].Height)), Main.player[Main.myPlayer].bank2.item[num180].GetColor(white16), 0f, default(Vector2), num182, SpriteEffects.None, 0f);
							}
							if (Main.player[Main.myPlayer].bank2.item[num180].stack > 1)
							{
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].bank2.item[num180].stack), new Vector2((float)num178 + 10f * Main.inventoryScale, (float)num179 + 26f * Main.inventoryScale), white16, 0f, default(Vector2), num182, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
		}
		protected void DrawMouseOver()
		{
			Rectangle rectangle = new Rectangle((int)((float)Main.mouseX + Main.screenPosition.X), (int)((float)Main.mouseY + Main.screenPosition.Y), 1, 1);
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				rectangle.Y = (int)Main.screenPosition.Y + Main.screenHeight - Main.mouseY;
			}
			if (!Main.mouseText)
			{
				int num = 26 * Main.player[Main.myPlayer].statLifeMax / (int)Main.heartLife;
				int num2 = 0;
				if (Main.player[Main.myPlayer].statLifeMax > 200)
				{
					num = 260;
					num2 += 26;
				}
				if (Main.mouseX > 500 + Main.sX && Main.mouseX < 500 + num + Main.sX && Main.mouseY > 32 && Main.mouseY < 32 + Main.heartTexture.Height + num2)
				{
					Main.player[Main.myPlayer].showItemIcon = false;
					string cursorText = Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax;
					this.MouseText(cursorText, 0, 0);
					Main.mouseText = true;
				}
			}
			if (!Main.mouseText)
			{
				int num3 = 24;
				int num4 = 28 * Main.player[Main.myPlayer].statManaMax2 / Main.starMana;
				if (Main.mouseX > 762 + Main.sX && Main.mouseX < 762 + num3 + Main.sX && Main.mouseY > 30 && Main.mouseY < 30 + num4)
				{
					Main.player[Main.myPlayer].showItemIcon = false;
					string cursorText2 = Main.player[Main.myPlayer].statMana + "/" + Main.player[Main.myPlayer].statManaMax2;
					this.MouseText(cursorText2, 0, 0);
					Main.mouseText = true;
				}
			}
			if (!Main.mouseText)
			{
				for (int i = 0; i < 400; i++)
				{
					if (Main.item[i].active)
					{
						Rectangle value = new Rectangle((int)((double)Main.item[i].position.X + (double)Main.item[i].width * 0.5 - (double)Main.itemTexture[Main.item[i].type].Width * 0.5), (int)(Main.item[i].position.Y + (float)Main.item[i].height - (float)Main.itemTexture[Main.item[i].type].Height), Main.itemTexture[Main.item[i].type].Width, Main.itemTexture[Main.item[i].type].Height);
						if (rectangle.Intersects(value))
						{
							Main.player[Main.myPlayer].showItemIcon = false;
							string text = Main.item[i].AffixName();
							if (Main.item[i].stack > 1)
							{
								object obj = text;
								text = string.Concat(new object[]
								{
									obj,
									" (",
									Main.item[i].stack,
									")"
								});
							}
							if (Main.item[i].owner < 255 && Main.showItemOwner)
							{
								text = text + " <" + Main.player[Main.item[i].owner].name + ">";
							}
							Main.rare = Main.item[i].rare;
							this.MouseText(text, Main.rare, 0);
							Main.mouseText = true;
							break;
						}
					}
				}
			}
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && Main.myPlayer != j && !Main.player[j].dead)
				{
					Rectangle value2 = new Rectangle((int)((double)Main.player[j].position.X + (double)Main.player[j].width * 0.5 - 16.0), (int)(Main.player[j].position.Y + (float)Main.player[j].height - 48f), 32, 48);
					if (!Main.mouseText && rectangle.Intersects(value2))
					{
						Main.player[Main.myPlayer].showItemIcon = false;
						int num5 = Main.player[j].statLife;
						if (num5 < 0)
						{
							num5 = 0;
						}
						string text2 = string.Concat(new object[]
						{
							Main.player[j].name,
							": ",
							num5,
							"/",
							Main.player[j].statLifeMax
						});
						if (Main.player[j].hostile)
						{
							text2 += " (PvP)";
						}
						this.MouseText(text2, 0, Main.player[j].difficulty);
					}
				}
			}
			if (!Main.mouseText)
			{
				for (int k = 0; k < 200; k++)
				{
					if (Main.npc[k].active)
					{
						this.LoadNPC(Main.npc[k].type);
						Rectangle value3 = new Rectangle((int)((double)Main.npc[k].position.X + (double)Main.npc[k].width * 0.5 - (double)Main.npcTexture[Main.npc[k].type].Width * 0.5), (int)(Main.npc[k].position.Y + (float)Main.npc[k].height - (float)(Main.npcTexture[Main.npc[k].type].Height / Main.npcFrameCount[Main.npc[k].type])), Main.npcTexture[Main.npc[k].type].Width, Main.npcTexture[Main.npc[k].type].Height / Main.npcFrameCount[Main.npc[k].type]);
						if (Main.npc[k].type >= 87 && Main.npc[k].type <= 92)
						{
							value3 = new Rectangle((int)((double)Main.npc[k].position.X + (double)Main.npc[k].width * 0.5 - 32.0), (int)((double)Main.npc[k].position.Y + (double)Main.npc[k].height * 0.5 - 32.0), 64, 64);
						}
						if (rectangle.Intersects(value3) && ((Main.npc[k].type != 85 && Main.npc[k].type != 341) || Main.npc[k].ai[0] != 0f))
						{
							bool flag = false;
							if (Main.npc[k].townNPC || Main.npc[k].type == 105 || Main.npc[k].type == 106 || Main.npc[k].type == 123 || Main.npc[k].type == 354)
							{
								Rectangle rectangle2 = new Rectangle((int)(Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
								Rectangle value4 = new Rectangle((int)Main.npc[k].position.X, (int)Main.npc[k].position.Y, Main.npc[k].width, Main.npc[k].height);
								if (rectangle2.Intersects(value4))
								{
									flag = true;
								}
							}
							if (flag && !Main.player[Main.myPlayer].dead)
							{
								int num6 = -(Main.npc[k].width / 2 + 8);
								float num7 = Main.npc[k].position.Y - (float)Main.chatTexture.Height - (float)((int)Main.screenPosition.Y);
								SpriteEffects spriteEffects = SpriteEffects.None;
								if (Main.npc[k].spriteDirection == -1)
								{
									spriteEffects = SpriteEffects.FlipHorizontally;
									num6 = Main.npc[k].width / 2 + 8;
								}
								if (Main.player[Main.myPlayer].gravDir != 1f)
								{
									spriteEffects |= SpriteEffects.FlipVertically;
									num7 = (float)Main.screenHeight - num7 - (float)Main.chatTexture.Height;
								}
								Main.spriteBatch.Draw(Main.chatTexture, new Vector2(Main.npc[k].position.X + (float)(Main.npc[k].width / 2) - Main.screenPosition.X - (float)(Main.chatTexture.Width / 2) - (float)num6, num7), new Rectangle?(new Rectangle(0, 0, Main.chatTexture.Width, Main.chatTexture.Height)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
								if (Main.mouseRight && Main.npcChatRelease)
								{
									Main.npcChatRelease = false;
									if (Main.player[Main.myPlayer].talkNPC != k)
									{
										Main.CancelHairWindow();
										Main.npcShop = 0;
										Main.craftGuide = false;
										Main.player[Main.myPlayer].dropItemCheck();
										Recipe.FindRecipes();
										Main.player[Main.myPlayer].sign = -1;
										Main.editSign = false;
										Main.player[Main.myPlayer].talkNPC = k;
										Main.playerInventory = false;
										Main.player[Main.myPlayer].chest = -1;
										Main.npcChatText = Main.npc[k].GetChat();
										Main.PlaySound(24, -1, -1, 1);
									}
								}
							}
							Main.player[Main.myPlayer].showItemIcon = false;
							string text3 = Main.npc[k].displayName;
							int num8 = k;
							if (Main.npc[k].realLife >= 0)
							{
								num8 = Main.npc[k].realLife;
							}
							if (Main.npc[num8].lifeMax > 1 && !Main.npc[num8].dontTakeDamage)
							{
								object obj2 = text3;
								text3 = string.Concat(new object[]
								{
									obj2,
									": ",
									Main.npc[num8].life,
									"/",
									Main.npc[num8].lifeMax
								});
							}
							this.MouseText(text3, 0, 0);
							return;
						}
					}
				}
			}
		}
		protected void DrawInterfaceBars()
		{
			Main.sX = Main.screenWidth - 800;
			int num = Main.player[Main.myPlayer].statLifeMax / 20;
			if (num >= 10)
			{
				num = 10;
			}
			string text = string.Concat(new object[]
			{
				Lang.inter[0],
				" ",
				Main.player[Main.myPlayer].statLifeMax,
				"/",
				Main.player[Main.myPlayer].statLifeMax
			});
			Vector2 vector = Main.fontMouseText.MeasureString(text);
			if (!Main.player[Main.myPlayer].ghost)
			{
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[0], new Vector2((float)(500 + 13 * num) - vector.X * 0.5f + (float)Main.sX, 6f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.DrawString(Main.fontMouseText, Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax, new Vector2((float)(500 + 13 * num) + vector.X * 0.5f + (float)Main.sX, 6f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, new Vector2(Main.fontMouseText.MeasureString(Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax).X, 0f), 1f, SpriteEffects.None, 0f);
			}
			Main.heartLife = 20f;
			if (Main.player[Main.myPlayer].statLifeMax > 400)
			{
				Main.heartLife = (float)Main.player[Main.myPlayer].statLifeMax / 20f;
			}
			int num2 = (Main.player[Main.myPlayer].statLifeMax - 400) / 5;
			if (num2 < 0)
			{
				num2 = 0;
			}
			int num3 = 1;
			while ((float)num3 < (float)Main.player[Main.myPlayer].statLifeMax / Main.heartLife + 1f)
			{
				float num4 = 1f;
				bool flag = false;
				int num5;
				if ((float)Main.player[Main.myPlayer].statLife >= (float)num3 * Main.heartLife)
				{
					num5 = 255;
					if ((float)Main.player[Main.myPlayer].statLife == (float)num3 * Main.heartLife)
					{
						flag = true;
					}
				}
				else
				{
					float num6 = ((float)Main.player[Main.myPlayer].statLife - (float)(num3 - 1) * Main.heartLife) / Main.heartLife;
					num5 = (int)(30f + 225f * num6);
					if (num5 < 30)
					{
						num5 = 30;
					}
					num4 = num6 / 4f + 0.75f;
					if ((double)num4 < 0.75)
					{
						num4 = 0.75f;
					}
					if (num6 > 0f)
					{
						flag = true;
					}
				}
				if (flag)
				{
					num4 += Main.cursorScale - 1f;
				}
				int num7 = 0;
				int num8 = 0;
				if (num3 > 10)
				{
					num7 -= 260;
					num8 += 26;
				}
				int num9 = (int)((double)((float)num5) * 0.9);
				if (!Main.player[Main.myPlayer].ghost)
				{
					if (num2 > 0)
					{
						num2--;
						Main.spriteBatch.Draw(Main.heart2Texture, new Vector2((float)(500 + 26 * (num3 - 1) + num7 + Main.sX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * num4) / 2f + (float)num8 + (float)(Main.heartTexture.Height / 2)), new Rectangle?(new Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Color(num5, num5, num5, num9), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), num4, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.heartTexture, new Vector2((float)(500 + 26 * (num3 - 1) + num7 + Main.sX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * num4) / 2f + (float)num8 + (float)(Main.heartTexture.Height / 2)), new Rectangle?(new Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Color(num5, num5, num5, num9), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), num4, SpriteEffects.None, 0f);
					}
				}
				num3++;
			}
			Main.starMana = 20;
			if (Main.player[Main.myPlayer].statManaMax2 > 0)
			{
				int arg_581_0 = Main.player[Main.myPlayer].statManaMax2 / 20;
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[2], new Vector2((float)(750 + Main.sX), 6f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				for (int i = 1; i < Main.player[Main.myPlayer].statManaMax2 / Main.starMana + 1; i++)
				{
					bool flag2 = false;
					float num10 = 1f;
					int num11;
					if (Main.player[Main.myPlayer].statMana >= i * Main.starMana)
					{
						num11 = 255;
						if (Main.player[Main.myPlayer].statMana == i * Main.starMana)
						{
							flag2 = true;
						}
					}
					else
					{
						float num12 = (float)(Main.player[Main.myPlayer].statMana - (i - 1) * Main.starMana) / (float)Main.starMana;
						num11 = (int)(30f + 225f * num12);
						if (num11 < 30)
						{
							num11 = 30;
						}
						num10 = num12 / 4f + 0.75f;
						if ((double)num10 < 0.75)
						{
							num10 = 0.75f;
						}
						if (num12 > 0f)
						{
							flag2 = true;
						}
					}
					if (flag2)
					{
						num10 += Main.cursorScale - 1f;
					}
					int num13 = (int)((double)((float)num11) * 0.9);
					Main.spriteBatch.Draw(Main.manaTexture, new Vector2((float)(775 + Main.sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num10) / 2f + (float)(28 * (i - 1))), new Rectangle?(new Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Color(num11, num11, num11, num13), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num10, SpriteEffects.None, 0f);
				}
			}
			bool flag3 = false;
			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].lavaWet)
			{
				flag3 = true;
			}
			else
			{
				if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].breath == Main.player[Main.myPlayer].breathMax)
				{
					flag3 = true;
				}
			}
			if (Main.player[Main.myPlayer].breath < Main.player[Main.myPlayer].breathMax && !Main.player[Main.myPlayer].ghost && !flag3)
			{
				int num14 = 76 + Main.mH;
				int arg_889_0 = Main.player[Main.myPlayer].breathMax / 20;
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[1], new Vector2((float)(500 + 13 * num) - Main.fontMouseText.MeasureString(Lang.inter[1]).X * 0.5f + (float)Main.sX, (float)(6 + num14)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				int num15 = 20;
				for (int j = 1; j < Main.player[Main.myPlayer].breathMax / num15 + 1; j++)
				{
					float num16 = 1f;
					int num17;
					if (Main.player[Main.myPlayer].breath >= j * num15)
					{
						num17 = 255;
					}
					else
					{
						float num18 = (float)(Main.player[Main.myPlayer].breath - (j - 1) * num15) / (float)num15;
						num17 = (int)(30f + 225f * num18);
						if (num17 < 30)
						{
							num17 = 30;
						}
						num16 = num18 / 4f + 0.75f;
						if ((double)num16 < 0.75)
						{
							num16 = 0.75f;
						}
					}
					int num19 = 0;
					int num20 = 0;
					if (j > 10)
					{
						num19 -= 260;
						num20 += 26;
					}
					Main.spriteBatch.Draw(Main.bubbleTexture, new Vector2((float)(500 + 26 * (j - 1) + num19 + Main.sX), 32f + ((float)Main.bubbleTexture.Height - (float)Main.bubbleTexture.Height * num16) / 2f + (float)num20 + (float)num14), new Rectangle?(new Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height)), new Color(num17, num17, num17, num17), 0f, default(Vector2), num16, SpriteEffects.None, 0f);
				}
			}
			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && !Main.player[Main.myPlayer].ghost && flag3)
			{
				int num21 = 76 + Main.mH;
				int num22 = Main.player[Main.myPlayer].lavaMax / 10;
				int arg_AF4_0 = Main.player[Main.myPlayer].breathMax / num22;
				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[56], new Vector2(630f - Main.fontMouseText.MeasureString(Lang.inter[56]).X * 0.5f + (float)Main.sX, (float)(6 + num21)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				for (int k = 1; k < Main.player[Main.myPlayer].lavaMax / num22 + 1; k++)
				{
					float num23 = 1f;
					int num24;
					if (Main.player[Main.myPlayer].lavaTime >= k * num22)
					{
						num24 = 255;
					}
					else
					{
						float num25 = (float)(Main.player[Main.myPlayer].lavaTime - (k - 1) * num22) / (float)num22;
						num24 = (int)(30f + 225f * num25);
						if (num24 < 30)
						{
							num24 = 30;
						}
						num23 = num25 / 4f + 0.75f;
						if ((double)num23 < 0.75)
						{
							num23 = 0.75f;
						}
					}
					int num26 = 0;
					int num27 = 0;
					if (k > 10)
					{
						num26 -= 260;
						num27 += 26;
					}
					Main.spriteBatch.Draw(Main.flameTexture, new Vector2((float)(500 + 26 * (k - 1) + num26 + Main.sX), 32f + ((float)Main.flameTexture.Height - (float)Main.flameTexture.Height * num23) / 2f + (float)num27 + (float)num21), new Rectangle?(new Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height)), new Color(num24, num24, num24, num24), 0f, default(Vector2), num23, SpriteEffects.None, 0f);
				}
			}
			Main.buffString = "";
			if (!Main.recBigList)
			{
				Main.recStart = 0;
			}
			if (!Main.playerInventory)
			{
				Main.recBigList = false;
				int num28 = -1;
				int num29 = 11;
				for (int l = 0; l < 22; l++)
				{
					if (Main.player[Main.myPlayer].buffType[l] > 0)
					{
						int num30 = Main.player[Main.myPlayer].buffType[l];
						int num31 = 32 + l * 38;
						int num32 = 76;
						if (l >= num29)
						{
							num31 = 32 + (l - num29) * 38;
							num32 += 50;
						}
						Color color = new Color(Main.buffAlpha[l], Main.buffAlpha[l], Main.buffAlpha[l], Main.buffAlpha[l]);
						Main.spriteBatch.Draw(Main.buffTexture[num30], new Vector2((float)num31, (float)num32), new Rectangle?(new Rectangle(0, 0, Main.buffTexture[num30].Width, Main.buffTexture[num30].Height)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						if (!Main.vanityPet[num30] && !Main.lightPet[num30] && num30 != 64 && num30 != 60 && num30 != 49 && num30 != 28 && num30 != 34 && num30 != 37 && num30 != 38 && num30 != 40 && num30 != 41 && num30 != 27 && num30 != 101 && num30 != 102 && num30 != 19 && num30 != 42 && num30 != 43 && num30 != 45 && (!Main.player[Main.myPlayer].honeyWet || num30 != 48) && num30 != 62 && num30 != 67 && num30 != 68 && num30 != 81 && num30 != 82 && num30 != 83 && num30 != 90 && (num30 < 95 || num30 > 100) && Main.player[Main.myPlayer].buffTime[l] > 2)
						{
							string text2;
							if (Main.player[Main.myPlayer].buffTime[l] / 60 >= 3600)
							{
								text2 = Math.Round((double)(Main.player[Main.myPlayer].buffTime[l] / 60) / 3600.0) + " h";
							}
							else
							{
								if (Main.player[Main.myPlayer].buffTime[l] / 60 >= 60)
								{
									text2 = Math.Round((double)(Main.player[Main.myPlayer].buffTime[l] / 60) / 60.0) + " m";
								}
								else
								{
									text2 = Math.Round((double)Main.player[Main.myPlayer].buffTime[l] / 60.0) + " s";
								}
							}
							Main.spriteBatch.DrawString(Main.fontItemStack, text2, new Vector2((float)num31, (float)(num32 + Main.buffTexture[num30].Height)), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
						}
						if (Main.mouseX < num31 + Main.buffTexture[num30].Width && Main.mouseY < num32 + Main.buffTexture[num30].Height && Main.mouseX > num31 && Main.mouseY > num32)
						{
							num28 = l;
							Main.buffAlpha[l] += 0.1f;
							if (Main.mouseRight && Main.mouseRightRelease && !Main.debuff[num30] && num30 != 60)
							{
								if (num30 == 90)
								{
									Main.player[Main.myPlayer].Dismount();
								}
								Main.PlaySound(12, -1, -1, 1);
								Main.player[Main.myPlayer].DelBuff(l);
							}
						}
						else
						{
							Main.buffAlpha[l] -= 0.05f;
						}
						if (Main.buffAlpha[l] > 1f)
						{
							Main.buffAlpha[l] = 1f;
						}
						else
						{
							if ((double)Main.buffAlpha[l] < 0.4)
							{
								Main.buffAlpha[l] = 0.4f;
							}
						}
					}
					else
					{
						Main.buffAlpha[l] = 0.4f;
					}
				}
				if (num28 >= 0)
				{
					int num33 = Main.player[Main.myPlayer].buffType[num28];
					if (num33 > 0)
					{
						Main.buffString = Main.buffTip[num33];
						if (num33 == 94)
						{
							int num34 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
							Main.buffString = Main.buffString + num34 + "%";
						}
						if (Main.meleeBuff[num33])
						{
							this.MouseText(Main.buffName[num33], -10, 0);
							return;
						}
						this.MouseText(Main.buffName[num33], 0, 0);
					}
				}
			}
		}
		protected void DrawHotbar()
		{
			if (!Main.playerInventory && !Main.player[Main.myPlayer].ghost)
			{
				string text = Lang.inter[37];
				if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].name != null && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].name != "")
				{
					text = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].AffixName();
				}
				Vector2 vector = Main.fontMouseText.MeasureString(text) / 2f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(236f - vector.X, 0f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				int num = 20;
				for (int i = 0; i < 10; i++)
				{
					if (i == Main.player[Main.myPlayer].selectedItem)
					{
						if (Main.hotbarScale[i] < 1f)
						{
							Main.hotbarScale[i] += 0.05f;
						}
					}
					else
					{
						if ((double)Main.hotbarScale[i] > 0.75)
						{
							Main.hotbarScale[i] -= 0.05f;
						}
					}
					float num2 = Main.hotbarScale[i];
					int num3 = (int)(20f + 22f * (1f - num2));
					int num4 = (int)(75f + 150f * num2);
					Color color = new Color(255, 255, 255, num4);
					byte b = 200;
					if (Main.player[Main.myPlayer].selectedItem == i)
					{
						b = 255;
						Main.spriteBatch.Draw(Main.inventoryBack14Texture, new Vector2((float)num, (float)num3), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num2, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.inventoryBackTexture, new Vector2((float)num, (float)num3), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num2, SpriteEffects.None, 0f);
					}
					if (!Main.player[Main.myPlayer].hbLocked && Main.mouseX >= num && (float)Main.mouseX <= (float)num + (float)Main.inventoryBackTexture.Width * Main.hotbarScale[i] && Main.mouseY >= num3 && (float)Main.mouseY <= (float)num3 + (float)Main.inventoryBackTexture.Height * Main.hotbarScale[i] && !Main.player[Main.myPlayer].channel)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && !Main.player[Main.myPlayer].hbLocked)
						{
							Main.player[Main.myPlayer].changeItem = i;
						}
						Main.player[Main.myPlayer].showItemIcon = false;
						Main.hoverItemName = Main.player[Main.myPlayer].inventory[i].AffixName();
						if (Main.player[Main.myPlayer].inventory[i].stack > 1)
						{
							object obj = Main.hoverItemName;
							Main.hoverItemName = string.Concat(new object[]
							{
								obj,
								" (",
								Main.player[Main.myPlayer].inventory[i].stack,
								")"
							});
						}
						Main.rare = Main.player[Main.myPlayer].inventory[i].rare;
					}
					if (Main.player[Main.myPlayer].inventory[i].type > 0 && Main.player[Main.myPlayer].inventory[i].stack > 0)
					{
						float num5 = 1f;
						if (Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Width > 32 || Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Height > 32)
						{
							if (Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Width > Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Height)
							{
								num5 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Width;
							}
							else
							{
								num5 = 32f / (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Height;
							}
						}
						num5 *= num2;
						Color color2 = color;
						if (Main.player[Main.myPlayer].inventory[i].type == 662 || Main.player[Main.myPlayer].inventory[i].type == 663)
						{
							color.R = (byte)Main.DiscoR;
							color.G = (byte)Main.DiscoG;
							color.B = (byte)Main.DiscoB;
							color.A = 255;
						}
						Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type], new Vector2((float)num + 26f * num2 - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Width * 0.5f * num5, (float)num3 + 26f * num2 - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Height * 0.5f * num5), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Height)), Main.player[Main.myPlayer].inventory[i].GetAlpha(color), 0f, default(Vector2), num5, SpriteEffects.None, 0f);
						color = color2;
						if (Main.player[Main.myPlayer].inventory[i].color != default(Color))
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type], new Vector2((float)num + 26f * num2 - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Width * 0.5f * num5, (float)num3 + 26f * num2 - (float)Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Height * 0.5f * num5), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[i].type].Height)), Main.player[Main.myPlayer].inventory[i].GetColor(color), 0f, default(Vector2), num5, SpriteEffects.None, 0f);
						}
						if (Main.player[Main.myPlayer].inventory[i].stack > 1)
						{
							for (int j = 0; j < 5; j++)
							{
								Color color3 = color;
								if (j < 4)
								{
									color3 = Color.Black;
								}
								float num6 = 0f;
								float num7 = 0f;
								if (j == 0)
								{
									num6 = -1f;
								}
								if (j == 1)
								{
									num6 = 1f;
								}
								if (j == 2)
								{
									num7 = -1f;
								}
								if (j == 3)
								{
									num7 = 1f;
								}
								num6 *= num2;
								num7 *= num2;
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.player[Main.myPlayer].inventory[i].stack), new Vector2((float)num + 10f * num2 + num6, (float)num3 + 26f * num2 + num7), color3, 0f, default(Vector2), num5, SpriteEffects.None, 0f);
							}
						}
						if (Main.player[Main.myPlayer].inventory[i].useAmmo > 0)
						{
							int useAmmo = Main.player[Main.myPlayer].inventory[i].useAmmo;
							int num8 = 0;
							for (int k = 0; k < 58; k++)
							{
								if (Main.player[Main.myPlayer].inventory[k].ammo == useAmmo)
								{
									num8 += Main.player[Main.myPlayer].inventory[k].stack;
								}
							}
							for (int l = 0; l < 5; l++)
							{
								Color color4 = color;
								if (l < 4)
								{
									color4 = Color.Black;
								}
								float num9 = 0f;
								float num10 = 0f;
								if (l == 0)
								{
									num9 = -1f;
								}
								if (l == 1)
								{
									num9 = 1f;
								}
								if (l == 2)
								{
									num10 = -1f;
								}
								if (l == 3)
								{
									num10 = 1f;
								}
								num9 *= num2;
								num10 *= num2;
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(num8), new Vector2((float)num + 8f * num2 + num9, (float)num3 + 30f * num2 + num10), color4, 0f, default(Vector2), num2 * 0.8f, SpriteEffects.None, 0f);
							}
						}
						else
						{
							if (Main.player[Main.myPlayer].inventory[i].tileWand > 0)
							{
								int tileWand = Main.player[Main.myPlayer].inventory[i].tileWand;
								int num11 = 0;
								for (int m = 0; m < 58; m++)
								{
									if (Main.player[Main.myPlayer].inventory[m].type == tileWand)
									{
										num11 += Main.player[Main.myPlayer].inventory[m].stack;
									}
								}
								Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(num11), new Vector2((float)num + 8f * num2, (float)num3 + 30f * num2), color, 0f, default(Vector2), num2 * 0.8f, SpriteEffects.None, 0f);
							}
							else
							{
								if (Main.player[Main.myPlayer].inventory[i].type == 509 || Main.player[Main.myPlayer].inventory[i].type == 850 || Main.player[Main.myPlayer].inventory[i].type == 851)
								{
									int num12 = 0;
									for (int n = 0; n < 58; n++)
									{
										if (Main.player[Main.myPlayer].inventory[n].type == 530)
										{
											num12 += Main.player[Main.myPlayer].inventory[n].stack;
										}
									}
									Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(num12), new Vector2((float)num + 8f * num2, (float)num3 + 30f * num2), color, 0f, default(Vector2), num2 * 0.8f, SpriteEffects.None, 0f);
								}
							}
						}
						string text2 = string.Concat(i + 1);
						if (text2 == "10")
						{
							text2 = "0";
						}
						Main.spriteBatch.DrawString(Main.fontItemStack, text2, new Vector2((float)num + 8f * Main.hotbarScale[i], (float)num3 + 4f * Main.hotbarScale[i]), new Color((int)(color.R / 2), (int)(color.G / 2), (int)(color.B / 2), (int)(color.A / 2)), 0f, default(Vector2), num5, SpriteEffects.None, 0f);
						if (Main.player[Main.myPlayer].inventory[i].potion)
						{
							Color alpha = Main.player[Main.myPlayer].inventory[i].GetAlpha(color);
							float num13 = (float)Main.player[Main.myPlayer].potionDelay / (float)Main.player[Main.myPlayer].potionDelayTime;
							float num14 = (float)alpha.R * num13;
							float num15 = (float)alpha.G * num13;
							float num16 = (float)alpha.B * num13;
							float num17 = (float)alpha.A * num13;
							alpha = new Color((int)((byte)num14), (int)((byte)num15), (int)((byte)num16), (int)((byte)num17));
							Main.spriteBatch.Draw(Main.cdTexture, new Vector2((float)num + 26f * Main.hotbarScale[i] - (float)Main.cdTexture.Width * 0.5f * num5, (float)num3 + 26f * Main.hotbarScale[i] - (float)Main.cdTexture.Height * 0.5f * num5), new Rectangle?(new Rectangle(0, 0, Main.cdTexture.Width, Main.cdTexture.Height)), alpha, 0f, default(Vector2), num5, SpriteEffects.None, 0f);
						}
					}
					num += (int)((float)Main.inventoryBackTexture.Width * Main.hotbarScale[i]) + 4;
				}
			}
		}
		public static void OpenHairWindow()
		{
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.oldHairStyle = Main.player[Main.myPlayer].hair;
			Main.oldHairColor = Main.player[Main.myPlayer].hairColor;
			Main.hairWindow = true;
			Main.PlaySound(10, -1, -1, 1);
		}
		public static void CancelHairWindow()
		{
			if (!Main.hairWindow)
			{
				return;
			}
			Main.player[Main.myPlayer].hair = Main.oldHairStyle;
			Main.player[Main.myPlayer].hairColor = Main.oldHairColor;
			Main.hairWindow = false;
			if (Main.player[Main.myPlayer].talkNPC > -1 && Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
			{
				Main.player[Main.myPlayer].talkNPC = -1;
			}
			Main.PlaySound(11, -1, -1, 1);
		}
		public static void BuyHairWindow()
		{
			Main.PlaySound(18, -1, -1, 1);
			Main.hairWindow = false;
			Main.player[Main.myPlayer].talkNPC = -1;
			NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0);
		}
		protected void DrawHairWindow()
		{
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.craftGuide)
			{
				Main.CancelHairWindow();
				return;
			}
			int num = Main.screenHeight / 2 + 60;
			int num2 = Main.screenWidth / 2 - Main.hairStyleBackTexture.Width / 2;
			int num3 = num + 42;
			int num4 = num2 + 22;
			int num5 = num2 + 234;
			int num6 = num + 18;
			Main.selColor = Main.player[Main.myPlayer].hairColor;
			Main.spriteBatch.Draw(Main.hairStyleBackTexture, new Vector2((float)num2, (float)num), new Rectangle?(new Rectangle(0, 0, Main.hairStyleBackTexture.Width, Main.hairStyleBackTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (Main.mouseX > num2 && Main.mouseX < num2 + Main.hairStyleBackTexture.Width && Main.mouseY > num && Main.mouseY < num + Main.hairStyleBackTexture.Height)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			int num7 = num5 - 18;
			int num8 = num6 + 74;
			if (Main.hairStart > 1)
			{
				if (Main.mouseX >= num7 && Main.mouseX <= num7 + Main.craftUpButtonTexture.Width && Main.mouseY >= num8 && Main.mouseY <= num8 + Main.craftUpButtonTexture.Height)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart -= 15;
						if (Main.recStart < 0)
						{
							Main.recStart = 0;
						}
						Main.PlaySound(12, -1, -1, 1);
					}
				}
				Main.spriteBatch.Draw(Main.scrollLeftButtonTexture, new Vector2((float)num7, (float)num8), new Rectangle?(new Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (Main.hairStart + 15 < 123)
			{
				num7 += 296;
				if (Main.mouseX >= num7 && Main.mouseX <= num7 + Main.craftUpButtonTexture.Width && Main.mouseY >= num8 && Main.mouseY <= num8 + Main.craftUpButtonTexture.Height)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart += 15;
						Main.PlaySound(12, -1, -1, 1);
					}
				}
				Main.spriteBatch.Draw(Main.scrollRightButtonTexture, new Vector2((float)num7, (float)num8), new Rectangle?(new Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (Main.hairStart + 15 >= 123)
			{
				Main.hairStart = 108;
			}
			if (Main.hairStart < 0)
			{
				Main.hairStart = 0;
			}
			int num9 = 0;
			if (Main.oldHairStyle != Main.player[Main.myPlayer].hair)
			{
				if (Main.player[Main.myPlayer].hair > 51)
				{
					num9 += 50000;
				}
				else
				{
					num9 += 10000;
				}
			}
			if (Main.oldHairColor != Main.player[Main.myPlayer].hairColor)
			{
				num9 += 10000;
			}
			string text = "";
			int num10 = 0;
			int num11 = 0;
			int num12 = 0;
			int num13 = 0;
			int num14 = num9;
			if (num14 < 0)
			{
				num14 = 0;
			}
			num9 = num14;
			if (num14 >= 1000000)
			{
				num10 = num14 / 1000000;
				num14 -= num10 * 1000000;
			}
			if (num14 >= 10000)
			{
				num11 = num14 / 10000;
				num14 -= num11 * 10000;
			}
			if (num14 >= 100)
			{
				num12 = num14 / 100;
				num14 -= num12 * 100;
			}
			if (num14 >= 1)
			{
				num13 = num14;
			}
			if (num10 > 0)
			{
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					num10,
					" ",
					Lang.inter[15],
					" "
				});
			}
			if (num11 > 0)
			{
				object obj2 = text;
				text = string.Concat(new object[]
				{
					obj2,
					num11,
					" ",
					Lang.inter[16],
					" "
				});
			}
			if (num12 > 0)
			{
				object obj3 = text;
				text = string.Concat(new object[]
				{
					obj3,
					num12,
					" ",
					Lang.inter[17],
					" "
				});
			}
			if (num13 > 0)
			{
				object obj = text;
				text = string.Concat(new object[]
				{
					obj,
					num13,
					" ",
					Lang.inter[18],
					" "
				});
			}
			string text2 = "Buy (" + text + ")";
			if (num9 == 0)
			{
				text2 = "Buy";
			}
			int num15 = (int)((Main.mouseTextColor * 2 + 255) / 3);
			Color color = new Color(num15, (int)((double)num15 / 1.1), num15 / 2, num15);
			float scale = 0.9f;
			string text3 = text2;
			int num16 = num2 + 18;
			int num17 = num + 156;
			if (num9 > 0 && Main.mouseX > num16 && (float)Main.mouseX < (float)num16 + Main.fontMouseText.MeasureString(text3).X && Main.mouseY > num17 && (float)Main.mouseY < (float)num17 + Main.fontMouseText.MeasureString(text3).Y)
			{
				scale = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num18 = num16;
				int num19 = num17;
				Color color2 = Color.Black;
				if (i == 0)
				{
					num18 -= 2;
				}
				if (i == 1)
				{
					num18 += 2;
				}
				if (i == 2)
				{
					num19 -= 2;
				}
				if (i == 3)
				{
					num19 += 2;
				}
				if (i == 4)
				{
					if (num9 == 0)
					{
						color2 = new Color(100, 100, 100);
					}
					else
					{
						color2 = color;
					}
				}
				Vector2 vector = Main.fontMouseText.MeasureString(text3);
				vector *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text3, new Vector2((float)num18 + vector.X, (float)num19 + vector.Y), color2, 0f, vector, scale, SpriteEffects.None, 0f);
			}
			scale = 0.9f;
			string text4 = "Cancel";
			num16 += 130;
			if (Main.mouseX > num16 && (float)Main.mouseX < (float)num16 + Main.fontMouseText.MeasureString(text4).X && Main.mouseY > num17 && (float)Main.mouseY < (float)num17 + Main.fontMouseText.MeasureString(text4).Y)
			{
				scale = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num20 = num16;
				int num21 = num17;
				Color color3 = Color.Black;
				if (j == 0)
				{
					num20 -= 2;
				}
				if (j == 1)
				{
					num20 += 2;
				}
				if (j == 2)
				{
					num21 -= 2;
				}
				if (j == 3)
				{
					num21 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Vector2 vector2 = Main.fontMouseText.MeasureString(text4);
				vector2 *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text4, new Vector2((float)num20 + vector2.X, (float)num21 + vector2.Y), color3, 0f, vector2, scale, SpriteEffects.None, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					if (Main.player[Main.myPlayer].BuyItem(num9))
					{
						Main.BuyHairWindow();
						return;
					}
				}
				else
				{
					if (Main.npcChatFocus2)
					{
						Main.CancelHairWindow();
						return;
					}
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num22 = 167;
			Vector3 vector3 = Main.rgbToHsl(Main.selColor);
			float num23 = vector3.X;
			float num24 = vector3.Y;
			float num25 = vector3.Z;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
			{
				Main.hBar = num23;
				Main.sBar = num24;
				Main.lBar = num25;
			}
			else
			{
				num23 = Main.hBar;
				num24 = Main.sBar;
				num25 = Main.lBar;
			}
			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num4, (float)num3), Color.White);
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num4 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num3 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
			if (((Main.mouseX > num4 - 4 && Main.mouseX < num4 + this.hueTexture.Width + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				num23 = (float)(Main.mouseX - num4);
				num23 /= (float)this.hueTexture.Width;
				if (num23 < 0f)
				{
					num23 = 0f;
				}
				if (num23 > 1f)
				{
					num23 = 1f;
				}
				Main.hBar = num23;
			}
			num3 += 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num4, (float)num3), Color.White);
			for (int k = 0; k <= num22; k++)
			{
				float saturation = (float)k / (float)num22;
				Color color4 = Main.hslToRgb(num23, saturation, num25);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num4 + k + 5), (float)(num3 + 4)), color4);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num4 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num3 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
			if (((Main.mouseX > num4 - 4 && Main.mouseX < num4 + this.hueTexture.Width + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				num24 = (float)(Main.mouseX - num4);
				num24 /= (float)this.hueTexture.Width;
				if (num24 < 0f)
				{
					num24 = 0f;
				}
				if (num24 > 1f)
				{
					num24 = 1f;
				}
				Main.sBar = num24;
			}
			num3 += 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num4, (float)num3), Color.White);
			float num26 = 0.15f;
			for (int l = 0; l <= num22; l++)
			{
				float luminosity = (float)l / (float)num22;
				Color color5 = Main.hslToRgb(num23, num24, luminosity);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num4 + l + 5), (float)(num3 + 4)), color5);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num4 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num26) / (1f - num26)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num3 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
			if (((Main.mouseX > num4 - 4 && Main.mouseX < num4 + this.hueTexture.Width + 4 && Main.mouseY > num3 - 4 && Main.mouseY < num3 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				num25 = (float)(Main.mouseX - num4);
				num25 /= (float)this.hueTexture.Width;
				if (num25 < 0f)
				{
					num25 = 0f;
				}
				if (num25 > 1f)
				{
					num25 = 1f;
				}
				num25 = num25 * (1f - num26) + num26;
				Main.lBar = num25;
			}
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
			Main.player[Main.myPlayer].hairColor = Main.selColor;
			int num27 = num5;
			int num28 = num6;
			int arg_DBB_0 = Main.hairStart;
			int num29 = 0;
			for (int m = 0; m < 15; m++)
			{
				int num30 = Main.hairStart + m;
				if (Main.player[Main.myPlayer].hair == num30)
				{
					Main.spriteBatch.Draw(Main.inventoryBack14Texture, new Vector2((float)num27, (float)num28), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.inventoryBack8Texture, new Vector2((float)num27, (float)num28), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (Main.mouseX > num27 && Main.mouseX < num27 + Main.inventoryBackTexture.Width && Main.mouseY > num28 && Main.mouseY < num28 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.player[Main.myPlayer].hair = num30;
					Main.PlaySound(12, -1, -1, 1);
				}
				this.LoadHair(num30);
				float x = (float)(num27 + Main.inventoryBackTexture.Width / 2 - Main.playerHairTexture[num30].Width / 2);
				float y = (float)(num28 + 4);
				Main.spriteBatch.Draw(Main.playerHeadTexture, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, Main.playerHairTexture[num30].Width, 56)), Main.player[Main.myPlayer].skinColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.playerEyeWhitesTexture, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, Main.playerHairTexture[num30].Width, 56)), new Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.playerEyesTexture, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, Main.playerHairTexture[num30].Width, 56)), Main.player[Main.myPlayer].eyeColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.playerHairTexture[num30], new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, Main.playerHairTexture[num30].Width, 56)), Main.selColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num29++;
				num27 += 56;
				if (num29 >= 5)
				{
					num29 = 0;
					num27 = num5;
					num28 += 56;
				}
			}
		}
		public static void OpenClothesWindow()
		{
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.clothesWindow = true;
			Main.PlaySound(10, -1, -1, 1);
			Main.selClothes = 0;
			Main.oldClothesColor[0] = Main.player[Main.myPlayer].shirtColor;
			Main.oldClothesColor[1] = Main.player[Main.myPlayer].underShirtColor;
			Main.oldClothesColor[2] = Main.player[Main.myPlayer].pantsColor;
			Main.oldClothesColor[3] = Main.player[Main.myPlayer].shoeColor;
		}
		public static void CancelClothesWindow()
		{
			if (!Main.clothesWindow)
			{
				return;
			}
			Main.clothesWindow = false;
			Main.PlaySound(11, -1, -1, 1);
			Main.player[Main.myPlayer].shirtColor = Main.oldClothesColor[0];
			Main.player[Main.myPlayer].underShirtColor = Main.oldClothesColor[1];
			Main.player[Main.myPlayer].pantsColor = Main.oldClothesColor[2];
			Main.player[Main.myPlayer].shoeColor = Main.oldClothesColor[3];
		}
		public static void SaveClothesWindow()
		{
			Main.PlaySound(7, -1, -1, 1);
			Main.clothesWindow = false;
			NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0);
		}
		protected void DrawClothesWindow()
		{
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC != -1 || Main.craftGuide)
			{
				Main.CancelClothesWindow();
				return;
			}
			int num = (int)(((double)Main.player[Main.myPlayer].position.X + (double)Main.player[Main.myPlayer].width * 0.5) / 16.0);
			int num2 = (int)(((double)Main.player[Main.myPlayer].position.Y + (double)Main.player[Main.myPlayer].height * 0.5) / 16.0);
			if (num < Main.dresserX - 5 || num > Main.dresserX + 6 || num2 < Main.dresserY - 4 || num2 > Main.dresserY + 5 || !Main.tile[Main.dresserX, Main.dresserY].active())
			{
				Main.CancelClothesWindow();
				return;
			}
			int num3 = Main.screenHeight / 2 + 60;
			int num4 = Main.screenWidth / 2 - Main.clothesStyleBackTexture.Width / 2;
			int num5 = num3 + 32;
			int num6 = num4 + 22;
			int num7 = num4 + 234;
			int num8 = num3 + 18;
			if (Main.selClothes == 0)
			{
				Main.selColor = Main.player[Main.myPlayer].shirtColor;
			}
			if (Main.selClothes == 1)
			{
				Main.selColor = Main.player[Main.myPlayer].underShirtColor;
			}
			if (Main.selClothes == 2)
			{
				Main.selColor = Main.player[Main.myPlayer].pantsColor;
			}
			if (Main.selClothes == 3)
			{
				Main.selColor = Main.player[Main.myPlayer].shoeColor;
			}
			Main.spriteBatch.Draw(Main.clothesStyleBackTexture, new Vector2((float)num4, (float)num3), new Rectangle?(new Rectangle(0, 0, Main.clothesStyleBackTexture.Width, Main.clothesStyleBackTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (Main.mouseX > num4 && Main.mouseX < num4 + Main.clothesStyleBackTexture.Width && Main.mouseY > num3 && Main.mouseY < num3 + Main.clothesStyleBackTexture.Height)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			int num9 = (int)((Main.mouseTextColor * 2 + 255) / 3);
			Color color = new Color(num9, (int)((double)num9 / 1.1), num9 / 2, num9);
			float scale = 0.9f;
			string text = "Change";
			int num10 = num4 + 256;
			int num11 = num3 + 94;
			bool flag = false;
			if (Main.oldClothesColor[0] != Main.player[Main.myPlayer].shirtColor || Main.oldClothesColor[1] != Main.player[Main.myPlayer].underShirtColor || Main.oldClothesColor[2] != Main.player[Main.myPlayer].pantsColor || Main.oldClothesColor[3] != Main.player[Main.myPlayer].shoeColor)
			{
				flag = true;
			}
			if (flag && Main.mouseX > num10 && (float)Main.mouseX < (float)num10 + Main.fontMouseText.MeasureString(text).X && Main.mouseY > num11 && (float)Main.mouseY < (float)num11 + Main.fontMouseText.MeasureString(text).Y)
			{
				scale = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num12 = num10;
				int num13 = num11;
				Color color2 = Color.Black;
				if (i == 0)
				{
					num12 -= 2;
				}
				if (i == 1)
				{
					num12 += 2;
				}
				if (i == 2)
				{
					num13 -= 2;
				}
				if (i == 3)
				{
					num13 += 2;
				}
				if (i == 4)
				{
					if (!flag)
					{
						color2 = new Color(100, 100, 100);
					}
					else
					{
						color2 = color;
					}
				}
				Vector2 vector = Main.fontMouseText.MeasureString(text);
				vector *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)num12 + vector.X, (float)num13 + vector.Y), color2, 0f, vector, scale, SpriteEffects.None, 0f);
			}
			scale = 0.9f;
			string text2 = "Cancel";
			num10 += 130;
			if (Main.mouseX > num10 && (float)Main.mouseX < (float)num10 + Main.fontMouseText.MeasureString(text2).X && Main.mouseY > num11 && (float)Main.mouseY < (float)num11 + Main.fontMouseText.MeasureString(text2).Y)
			{
				scale = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			else
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num14 = num10;
				int num15 = num11;
				Color color3 = Color.Black;
				if (j == 0)
				{
					num14 -= 2;
				}
				if (j == 1)
				{
					num14 += 2;
				}
				if (j == 2)
				{
					num15 -= 2;
				}
				if (j == 3)
				{
					num15 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Vector2 vector2 = Main.fontMouseText.MeasureString(text2);
				vector2 *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num14 + vector2.X, (float)num15 + vector2.Y), color3, 0f, vector2, scale, SpriteEffects.None, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					Main.SaveClothesWindow();
					return;
				}
				if (Main.npcChatFocus2)
				{
					Main.CancelClothesWindow();
					return;
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num16 = 167;
			Vector3 vector3 = Main.rgbToHsl(Main.selColor);
			float num17 = vector3.X;
			float num18 = vector3.Y;
			float num19 = vector3.Z;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
			{
				Main.hBar = num17;
				Main.sBar = num18;
				Main.lBar = num19;
			}
			else
			{
				num17 = Main.hBar;
				num18 = Main.sBar;
				num19 = Main.lBar;
			}
			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num6, (float)num5), Color.White);
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num6 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num5 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
			if (((Main.mouseX > num6 - 4 && Main.mouseX < num6 + this.hueTexture.Width + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				num17 = (float)(Main.mouseX - num6);
				num17 /= (float)this.hueTexture.Width;
				if (num17 < 0f)
				{
					num17 = 0f;
				}
				if (num17 > 1f)
				{
					num17 = 1f;
				}
				Main.hBar = num17;
			}
			num5 += 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num6, (float)num5), Color.White);
			for (int k = 0; k <= num16; k++)
			{
				float saturation = (float)k / (float)num16;
				Color color4 = Main.hslToRgb(num17, saturation, num19);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num6 + k + 5), (float)(num5 + 4)), color4);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num6 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num5 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
			if (((Main.mouseX > num6 - 4 && Main.mouseX < num6 + this.hueTexture.Width + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				num18 = (float)(Main.mouseX - num6);
				num18 /= (float)this.hueTexture.Width;
				if (num18 < 0f)
				{
					num18 = 0f;
				}
				if (num18 > 1f)
				{
					num18 = 1f;
				}
				Main.sBar = num18;
			}
			num5 += 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num6, (float)num5), Color.White);
			float num20 = 0.15f;
			for (int l = 0; l <= num16; l++)
			{
				float luminosity = (float)l / (float)num16;
				Color color5 = Main.hslToRgb(num17, num18, luminosity);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num6 + l + 5), (float)(num5 + 4)), color5);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num6 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num20) / (1f - num20)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num5 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
			if (((Main.mouseX > num6 - 4 && Main.mouseX < num6 + this.hueTexture.Width + 4 && Main.mouseY > num5 - 4 && Main.mouseY < num5 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				num19 = (float)(Main.mouseX - num6);
				num19 /= (float)this.hueTexture.Width;
				if (num19 < 0f)
				{
					num19 = 0f;
				}
				if (num19 > 1f)
				{
					num19 = 1f;
				}
				num19 = num19 * (1f - num20) + num20;
				Main.lBar = num19;
			}
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
			if (Main.selClothes == 0)
			{
				Main.player[Main.myPlayer].shirtColor = Main.selColor;
			}
			if (Main.selClothes == 1)
			{
				Main.player[Main.myPlayer].underShirtColor = Main.selColor;
			}
			if (Main.selClothes == 2)
			{
				Main.player[Main.myPlayer].pantsColor = Main.selColor;
			}
			if (Main.selClothes == 3)
			{
				Main.player[Main.myPlayer].shoeColor = Main.selColor;
			}
			int num21 = num7;
			int num22 = num8;
			for (int m = 0; m < 4; m++)
			{
				if (Main.selClothes == m)
				{
					Main.spriteBatch.Draw(Main.inventoryBack14Texture, new Vector2((float)num21, (float)num22), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					Main.spriteBatch.Draw(Main.inventoryBack8Texture, new Vector2((float)num21, (float)num22), new Rectangle?(new Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height)), new Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (Main.mouseX > num21 && Main.mouseX < num21 + Main.inventoryBackTexture.Width && Main.mouseY > num22 && Main.mouseY < num22 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.selClothes = m;
					Main.PlaySound(12, -1, -1, 1);
					Main.hBar = -1f;
					Main.lBar = -1f;
					Main.sBar = -1f;
				}
				float x = (float)(num21 + Main.inventoryBackTexture.Width / 2 - this.clothesTexture[m].Width / 2);
				float y = (float)(num22 + Main.inventoryBackTexture.Height / 2 - this.clothesTexture[m].Height / 2);
				Color color6 = Color.White;
				if (m == 0)
				{
					color6 = Main.player[Main.myPlayer].shirtColor;
				}
				if (m == 1)
				{
					color6 = Main.player[Main.myPlayer].underShirtColor;
				}
				if (m == 2)
				{
					color6 = Main.player[Main.myPlayer].pantsColor;
				}
				if (m == 3)
				{
					color6 = Main.player[Main.myPlayer].shoeColor;
				}
				Main.spriteBatch.Draw(this.clothesTexture[m], new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, this.clothesTexture[m].Width, this.clothesTexture[m].Height)), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num21 += 56;
			}
		}
		protected void DrawInterface()
		{
			if (Main.player[Main.myPlayer].rulerAcc)
			{
				int num = (int)((float)((int)(Main.screenPosition.X / 16f) * 16) - Main.screenPosition.X);
				int num2 = (int)((float)((int)(Main.screenPosition.Y / 16f) * 16) - Main.screenPosition.Y);
				int num3 = Main.screenWidth / Main.gridTexture.Width;
				int num4 = Main.screenHeight / Main.gridTexture.Height;
				for (int i = 0; i <= num3 + 1; i++)
				{
					for (int j = 0; j <= num4 + 1; j++)
					{
						Main.spriteBatch.Draw(Main.gridTexture, new Vector2((float)(i * Main.gridTexture.Width + num), (float)(j * Main.gridTexture.Height + num2)), new Rectangle?(new Rectangle(0, 0, Main.gridTexture.Width, Main.gridTexture.Height)), new Color(100, 100, 100, 15), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (this.showNPCs)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawNPCHouse();
						goto IL_146;
					}
					catch
					{
						goto IL_146;
					}
				}
				this.DrawNPCHouse();
			}
			IL_146:
			if (Main.player[Main.myPlayer].selectedItem == 58 && Main.player[Main.myPlayer].itemAnimation > 0)
			{
				Main.mouseLeftRelease = false;
			}
			Main.mouseHC = false;
			if (Main.hideUI)
			{
				Main.maxQ = true;
				return;
			}
			if (Main.ingameOptionsWindow)
			{
				IngameOptions.Draw(this, Main.spriteBatch);
				return;
			}
			if (Main.hbPosition != 0)
			{
				for (int k = 199; k >= 0; k--)
				{
					if (Main.npc[k].active && Main.npc[k].type > 0 && Main.npc[k].life != Main.npc[k].lifeMax && !Main.npc[k].dontTakeDamage)
					{
						float scale = 1f;
						int type = Main.npc[k].type;
						if (type == 4)
						{
							scale = 1.5f;
						}
						if (type == 35)
						{
							scale = 1.5f;
						}
						if (type == 36)
						{
							scale = 1.5f;
						}
						if (type == 50)
						{
							scale = 1.5f;
						}
						if (type == 113)
						{
							scale = 1.5f;
						}
						if (type == 114)
						{
							scale = 1.5f;
						}
						if (type == 125)
						{
							scale = 1.5f;
						}
						if (type == 126)
						{
							scale = 1.5f;
						}
						if (type == 127)
						{
							scale = 1.5f;
						}
						if (type == 128)
						{
							scale = 1.5f;
						}
						if (type == 129)
						{
							scale = 1.5f;
						}
						if (type == 130)
						{
							scale = 1.5f;
						}
						if (type == 131)
						{
							scale = 1.5f;
						}
						if (type == 222)
						{
							scale = 1.5f;
						}
						if (type >= 245 && type <= 249)
						{
							scale = 1.5f;
						}
						if (type == 262)
						{
							scale = 1.5f;
						}
						if (type == 266)
						{
							scale = 1.5f;
						}
						if (Main.hbPosition == 1)
						{
							float num5 = 10f;
							num5 += Main.NPCAddHeight(k);
							this.DrawHB(Main.npc[k].position.X + (float)(Main.npc[k].width / 2), Main.npc[k].position.Y + (float)Main.npc[k].height + num5 + Main.npc[k].gfxOffY, Main.npc[k].life, Main.npc[k].lifeMax, Lighting.Brightness((int)((Main.npc[k].position.X + (float)(Main.npc[k].width / 2)) / 16f), (int)((Main.npc[k].position.Y + (float)(Main.npc[k].height / 2) + Main.npc[k].gfxOffY) / 16f)), scale);
						}
						else
						{
							if (Main.hbPosition == 2)
							{
								float num6 = -24f;
								num6 -= Main.NPCAddHeight(k) / 2f;
								this.DrawHB(Main.npc[k].position.X + (float)(Main.npc[k].width / 2), Main.npc[k].position.Y + num6 + Main.npc[k].gfxOffY, Main.npc[k].life, Main.npc[k].lifeMax, Lighting.Brightness((int)((Main.npc[k].position.X + (float)(Main.npc[k].width / 2)) / 16f), (int)((Main.npc[k].position.Y + (float)(Main.npc[k].height / 2) + Main.npc[k].gfxOffY) / 16f)), scale);
							}
						}
					}
				}
				for (int l = 0; l < 255; l++)
				{
					if (l != Main.myPlayer && Main.player[l].active && !Main.player[l].ghost && !Main.player[l].dead && Main.player[l].statLife != Main.player[l].statLifeMax)
					{
						if (Main.hbPosition == 1)
						{
							int num7 = 10;
							this.DrawHB(Main.player[l].position.X + (float)(Main.player[l].width / 2), Main.player[l].position.Y + (float)Main.player[l].height + (float)num7 + Main.player[l].gfxOffY, Main.player[l].statLife, Main.player[l].statLifeMax, Lighting.Brightness((int)((Main.player[l].position.X + (float)(Main.player[l].width / 2)) / 16f), (int)((Main.player[l].position.Y + (float)(Main.player[l].height / 2) + Main.player[l].gfxOffY) / 16f)), 1f);
						}
						else
						{
							if (Main.hbPosition == 2)
							{
								int num8 = -20;
								this.DrawHB(Main.player[l].position.X + (float)(Main.player[l].width / 2), Main.player[l].position.Y + (float)num8 + Main.player[l].gfxOffY, Main.player[l].statLife, Main.player[l].statLifeMax, Lighting.Brightness((int)((Main.player[l].position.X + (float)(Main.player[l].width / 2)) / 16f), (int)((Main.player[l].position.Y + (float)(Main.player[l].height / 2) + Main.player[l].gfxOffY) / 16f)), 1f);
							}
						}
					}
				}
			}
			Main.mH = 0;
			if (Main.mapEnabled)
			{
				if (!Main.mapFullscreen && Main.mapStyle == 1)
				{
					Main.mH = 256;
					if (Main.ignoreErrors)
					{
						try
						{
							this.DrawMap();
							goto IL_7AC;
						}
						catch
						{
							goto IL_7AC;
						}
					}
					this.DrawMap();
				}
				IL_7AC:
				if (Main.mH + 600 > Main.screenHeight)
				{
					Main.mH = Main.screenHeight - 600;
				}
			}
			if (Main.netDiag)
			{
				for (int m = 0; m < 4; m++)
				{
					string text = "";
					int num9 = 20;
					int num10 = 220;
					if (m == 0)
					{
						text = "RX Msgs: " + string.Format("{0:0,0}", Main.rxMsg);
						num10 += m * 20;
					}
					else
					{
						if (m == 1)
						{
							text = "RX Bytes: " + string.Format("{0:0,0}", Main.rxData);
							num10 += m * 20;
						}
						else
						{
							if (m == 2)
							{
								text = "TX Msgs: " + string.Format("{0:0,0}", Main.txMsg);
								num10 += m * 20;
							}
							else
							{
								if (m == 3)
								{
									text = "TX Bytes: " + string.Format("{0:0,0}", Main.txData);
									num10 += m * 20;
								}
							}
						}
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)num9, (float)num10), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int n = 0; n < Main.maxMsg; n++)
				{
					float scale2 = 0.7f;
					int num11 = 200;
					int num12 = 120;
					num12 += n * 13;
					string text2 = n + ": ";
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num11, (float)num12), Color.White, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
					num11 += 30;
					text2 = "rx:" + string.Format("{0:0,0}", Main.rxMsgType[n]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num11, (float)num12), Color.White, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
					num11 += 70;
					text2 = string.Format("{0:0,0}", Main.rxDataType[n]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num11, (float)num12), Color.White, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
					num11 += 70;
					text2 = n + ": ";
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num11, (float)num12), Color.White, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
					num11 += 30;
					text2 = "tx:" + string.Format("{0:0,0}", Main.txMsgType[n]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num11, (float)num12), Color.White, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
					num11 += 70;
					text2 = string.Format("{0:0,0}", Main.txDataType[n]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2((float)num11, (float)num12), Color.White, 0f, default(Vector2), scale2, SpriteEffects.None, 0f);
				}
			}
			if (Main.drawDiag)
			{
				for (int num13 = 0; num13 < 7; num13++)
				{
					string text3 = "";
					int num14 = 20;
					int num15 = 220;
					num15 += num13 * 16;
					if (num13 == 0)
					{
						text3 = "Solid Tiles:";
					}
					if (num13 == 1)
					{
						text3 = "Misc. Tiles:";
					}
					if (num13 == 2)
					{
						text3 = "Walls Tiles:";
					}
					if (num13 == 3)
					{
						text3 = "Background Tiles:";
					}
					if (num13 == 4)
					{
						text3 = "Water Tiles:";
					}
					if (num13 == 5)
					{
						text3 = "Black Tiles:";
					}
					if (num13 == 6)
					{
						text3 = "Total Render:";
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text3, new Vector2((float)num14, (float)num15), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num16 = 0; num16 < 7; num16++)
				{
					int num17 = 180;
					int num18 = 220;
					num18 += num16 * 16;
					float num19;
					if (num16 == 6)
					{
						num19 = Main.renderTimer[0] + Main.renderTimer[1] + Main.renderTimer[2] + Main.renderTimer[3] + Main.renderTimer[4] + Main.renderTimer[5];
					}
					else
					{
						num19 = Main.renderTimer[num16];
					}
					string text4 = string.Format("{0:F}ms", num19);
					Main.spriteBatch.DrawString(Main.fontMouseText, text4, new Vector2((float)num17, (float)num18), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num20 = 0; num20 < 6; num20++)
				{
					string text5 = "";
					int num21 = 20;
					int num22 = 346;
					num22 += num20 * 16;
					if (num20 == 0)
					{
						text5 = "Lighting Init:";
					}
					if (num20 == 1)
					{
						text5 = "Lighting Phase #1:";
					}
					if (num20 == 2)
					{
						text5 = "Lighting Phase #2:";
					}
					if (num20 == 3)
					{
						text5 = "Lighting Phase #3";
					}
					if (num20 == 4)
					{
						text5 = "Lighting Phase #4";
					}
					if (num20 == 5)
					{
						text5 = "Total Lighting:";
					}
					Main.spriteBatch.DrawString(Main.fontMouseText, text5, new Vector2((float)num21, (float)num22), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num23 = 0; num23 < 6; num23++)
				{
					int num24 = 180;
					int num25 = 346;
					num25 += num23 * 16;
					float num26;
					if (num23 == 5)
					{
						num26 = Main.lightTimer[0] + Main.lightTimer[1] + Main.lightTimer[2] + Main.lightTimer[3] + Main.lightTimer[4];
					}
					else
					{
						num26 = Main.lightTimer[num23];
					}
					string text6 = string.Format("{0:F}ms", num26);
					Main.spriteBatch.DrawString(Main.fontMouseText, text6, new Vector2((float)num24, (float)num25), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num27 = 5;
				for (int num28 = 0; num28 < num27; num28++)
				{
					int num29 = 20;
					int num30 = 456;
					num30 += num28 * 16;
					string text7 = "Render #" + num28 + ":";
					Main.spriteBatch.DrawString(Main.fontMouseText, text7, new Vector2((float)num29, (float)num30), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num31 = 0; num31 < num27; num31++)
				{
					int num32 = 180;
					int num33 = 456;
					num33 += num31 * 16;
					string text8 = string.Format("{0:F}ms", Main.drawTimer[num31]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text8, new Vector2((float)num32, (float)num33), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num34 = 0; num34 < num27; num34++)
				{
					int num35 = 230;
					int num36 = 456;
					num36 += num34 * 16;
					num35 += 10;
					string text9 = string.Format("{0:F}ms", Main.drawTimerMax[num34]);
					Main.spriteBatch.DrawString(Main.fontMouseText, text9, new Vector2((float)num35, (float)num36), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int num37 = 20;
				int num38 = 456 + 16 * num27 + 16;
				string text10 = "Update:";
				Main.spriteBatch.DrawString(Main.fontMouseText, text10, new Vector2((float)num37, (float)num38), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num37 = 180;
				text10 = string.Format("{0:F}ms", Main.upTimer);
				Main.spriteBatch.DrawString(Main.fontMouseText, text10, new Vector2((float)num37, (float)num38), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num37 = 240;
				text10 = string.Format("{0:F}ms", Main.upTimerMax);
				Main.spriteBatch.DrawString(Main.fontMouseText, text10, new Vector2((float)num37, (float)num38), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (Main.signBubble)
			{
				int num39 = (int)((float)Main.signX - Main.screenPosition.X);
				int num40 = (int)((float)Main.signY - Main.screenPosition.Y);
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					num40 = Main.screenHeight - (int)((float)Main.signY - Main.screenPosition.Y) - 32;
				}
				SpriteEffects effects = SpriteEffects.None;
				if ((float)Main.signX > Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width)
				{
					effects = SpriteEffects.FlipHorizontally;
					num39 += -8 - Main.chat2Texture.Width;
				}
				else
				{
					num39 += 8;
				}
				num40 -= 22;
				Main.spriteBatch.Draw(Main.chat2Texture, new Vector2((float)num39, (float)num40), new Rectangle?(new Rectangle(0, 0, Main.chat2Texture.Width, Main.chat2Texture.Height)), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
				Main.signBubble = false;
			}
			for (int num41 = 0; num41 < 255; num41++)
			{
				if (Main.player[num41].active && Main.myPlayer != num41 && !Main.player[num41].dead)
				{
					new Rectangle((int)((double)Main.player[num41].position.X + (double)Main.player[num41].width * 0.5 - 16.0), (int)(Main.player[num41].position.Y + (float)Main.player[num41].height - 48f), 32, 48);
					if (Main.player[Main.myPlayer].team > 0 && Main.player[Main.myPlayer].team == Main.player[num41].team)
					{
						new Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
						string text11 = Main.player[num41].name;
						if (Main.player[num41].statLife < Main.player[num41].statLifeMax)
						{
							object obj = text11;
							text11 = string.Concat(new object[]
							{
								obj,
								": ",
								Main.player[num41].statLife,
								"/",
								Main.player[num41].statLifeMax
							});
						}
						Vector2 position = Main.fontMouseText.MeasureString(text11);
						float num42 = 0f;
						if (Main.player[num41].chatShowTime > 0)
						{
							num42 = -position.Y;
						}
						float num43 = 0f;
						float num44 = (float)Main.mouseTextColor / 255f;
						Color color = new Color((int)((byte)((float)Main.teamColor[Main.player[num41].team].R * num44)), (int)((byte)((float)Main.teamColor[Main.player[num41].team].G * num44)), (int)((byte)((float)Main.teamColor[Main.player[num41].team].B * num44)), (int)Main.mouseTextColor);
						Vector2 vector = new Vector2((float)(Main.screenWidth / 2) + Main.screenPosition.X, (float)(Main.screenHeight / 2) + Main.screenPosition.Y);
						float num45 = Main.player[num41].position.X + (float)(Main.player[num41].width / 2) - vector.X;
						float num46 = Main.player[num41].position.Y - position.Y - 2f + num42 - vector.Y;
						float num47 = (float)Math.Sqrt((double)(num45 * num45 + num46 * num46));
						int num48 = Main.screenHeight;
						if (Main.screenHeight > Main.screenWidth)
						{
							num48 = Main.screenWidth;
						}
						num48 = num48 / 2 - 30;
						if (num48 < 100)
						{
							num48 = 100;
						}
						if (num47 < (float)num48)
						{
							position.X = Main.player[num41].position.X + (float)(Main.player[num41].width / 2) - position.X / 2f - Main.screenPosition.X;
							position.Y = Main.player[num41].position.Y - position.Y - 2f + num42 - Main.screenPosition.Y;
						}
						else
						{
							num43 = num47;
							num47 = (float)num48 / num47;
							position.X = (float)(Main.screenWidth / 2) + num45 * num47 - position.X / 2f;
							position.Y = (float)(Main.screenHeight / 2) + num46 * num47;
						}
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							position.Y = (float)Main.screenHeight - position.Y;
						}
						if (num43 > 0f)
						{
							string text12 = "(" + (int)(num43 / 16f * 2f) + " ft)";
							Vector2 position2 = Main.fontMouseText.MeasureString(text12);
							position2.X = position.X + Main.fontMouseText.MeasureString(text11).X / 2f - position2.X / 2f;
							position2.Y = position.Y + Main.fontMouseText.MeasureString(text11).Y / 2f - position2.Y / 2f - 20f;
							Main.spriteBatch.DrawString(Main.fontMouseText, text12, new Vector2(position2.X - 2f, position2.Y), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, text12, new Vector2(position2.X + 2f, position2.Y), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, text12, new Vector2(position2.X, position2.Y - 2f), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, text12, new Vector2(position2.X, position2.Y + 2f), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							Main.spriteBatch.DrawString(Main.fontMouseText, text12, position2, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						Main.spriteBatch.DrawString(Main.fontMouseText, text11, new Vector2(position.X - 2f, position.Y), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text11, new Vector2(position.X + 2f, position.Y), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text11, new Vector2(position.X, position.Y - 2f), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text11, new Vector2(position.X, position.Y + 2f), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						Main.spriteBatch.DrawString(Main.fontMouseText, text11, position, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (Main.hairWindow)
			{
				this.DrawHairWindow();
			}
			if (Main.clothesWindow)
			{
				this.DrawClothesWindow();
			}
			if (Main.ignoreErrors)
			{
				try
				{
					if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
					{
						this.DrawChat();
					}
					goto IL_1A0C;
				}
				catch
				{
					goto IL_1A0C;
				}
			}
			if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
			{
				this.DrawChat();
			}
			IL_1A0C:
			Main.inventoryBack = new Color(220, 220, 220, 220);
			Main.invAlpha += Main.invDir * 0.2f;
			if (Main.invAlpha > 240f)
			{
				Main.invAlpha = 240f;
				Main.invDir = -1f;
			}
			if (Main.invAlpha < 180f)
			{
				Main.invAlpha = 180f;
				Main.invDir = 1f;
			}
			Main.inventoryBack = new Color((int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha), (int)((byte)Main.invAlpha));
			Main.mouseText = false;
			Main.rare = 0;
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawInterfaceBars();
					goto IL_1AC6;
				}
				catch
				{
					goto IL_1AC6;
				}
			}
			this.DrawInterfaceBars();
			IL_1AC6:
			if (Main.player[Main.myPlayer].dead)
			{
				Main.playerInventory = false;
			}
			if (!Main.playerInventory)
			{
				Main.player[Main.myPlayer].chest = -1;
				if (Main.craftGuide)
				{
					Main.craftGuide = false;
					Recipe.FindRecipes();
				}
				Main.reforge = false;
			}
			Main.hoverItemName = "";
			if (Main.playerInventory)
			{
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawInventory();
						goto IL_1FCB;
					}
					catch
					{
						goto IL_1FCB;
					}
				}
				this.DrawInventory();
			}
			else
			{
				if ((Main.npcChatText == null || Main.npcChatText == "") && Main.player[Main.myPlayer].sign < 0)
				{
					bool flag = false;
					bool flag2 = false;
					bool flag3 = false;
					for (int num49 = 0; num49 < 3; num49++)
					{
						string text13 = "";
						if (Main.player[Main.myPlayer].accCompass > 0 && !flag3)
						{
							int num50 = (int)((Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2)) * 2f / 16f - (float)Main.maxTilesX);
							if (num50 > 0)
							{
								text13 = "Position: " + num50 + " feet east";
								if (num50 == 1)
								{
									text13 = "Position: " + num50 + " foot east";
								}
							}
							else
							{
								if (num50 < 0)
								{
									num50 *= -1;
									text13 = "Position: " + num50 + " feet west";
									if (num50 == 1)
									{
										text13 = "Position: " + num50 + " foot west";
									}
								}
								else
								{
									text13 = "Position: center";
								}
							}
							flag3 = true;
						}
						else
						{
							if (Main.player[Main.myPlayer].accDepthMeter > 0 && !flag2)
							{
								int num51 = (int)((double)((Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height) * 2f / 16f) - Main.worldSurface * 2.0);
								if (num51 > 0)
								{
									text13 = "Depth: " + num51 + " feet below";
									if (num51 == 1)
									{
										text13 = "Depth: " + num51 + " foot below";
									}
								}
								else
								{
									if (num51 < 0)
									{
										num51 *= -1;
										text13 = "Depth: " + num51 + " feet above";
										if (num51 == 1)
										{
											text13 = "Depth: " + num51 + " foot above";
										}
									}
									else
									{
										text13 = "Depth: Level";
									}
								}
								flag2 = true;
							}
							else
							{
								if (Main.player[Main.myPlayer].accWatch > 0 && !flag)
								{
									string text14 = "AM";
									double num52 = Main.time;
									if (!Main.dayTime)
									{
										num52 += 54000.0;
									}
									num52 = num52 / 86400.0 * 24.0;
									double num53 = 7.5;
									num52 = num52 - num53 - 12.0;
									if (num52 < 0.0)
									{
										num52 += 24.0;
									}
									if (num52 >= 12.0)
									{
										text14 = "PM";
									}
									int num54 = (int)num52;
									double num55 = num52 - (double)num54;
									num55 = (double)((int)(num55 * 60.0));
									string text15 = string.Concat(num55);
									if (num55 < 10.0)
									{
										text15 = "0" + text15;
									}
									if (num54 > 12)
									{
										num54 -= 12;
									}
									if (num54 == 0)
									{
										num54 = 12;
									}
									if (Main.player[Main.myPlayer].accWatch == 1)
									{
										text15 = "00";
									}
									else
									{
										if (Main.player[Main.myPlayer].accWatch == 2)
										{
											if (num55 < 30.0)
											{
												text15 = "00";
											}
											else
											{
												text15 = "30";
											}
										}
									}
									text13 = string.Concat(new object[]
									{
										Lang.inter[34],
										": ",
										num54,
										":",
										text15,
										" ",
										text14
									});
									flag = true;
								}
							}
						}
						if (text13 != "")
						{
							for (int num56 = 0; num56 < 5; num56++)
							{
								int num57 = 0;
								int num58 = 0;
								Color black = Color.Black;
								if (num56 == 0)
								{
									num57 = -2;
								}
								if (num56 == 1)
								{
									num57 = 2;
								}
								if (num56 == 2)
								{
									num58 = -2;
								}
								if (num56 == 3)
								{
									num58 = 2;
								}
								if (num56 == 4)
								{
									black = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
								}
								Main.spriteBatch.DrawString(Main.fontMouseText, text13, new Vector2((float)(22 + num57), (float)(110 + 22 * num49 + num58 + 48)), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			IL_1FCB:
			if (Main.playerInventory || Main.player[Main.myPlayer].ghost)
			{
				string text16 = Lang.inter[62];
				Vector2 vector2 = Main.fontMouseText.MeasureString("Settings");
				Vector2 vector3 = Main.fontMouseText.MeasureString(Lang.inter[62]);
				Vector2 vector4 = Main.fontDeathText.MeasureString(text16);
				int num59 = Main.screenWidth - 110;
				int num60 = Main.screenHeight - 20;
				float num61 = vector2.X / vector3.X;
				if (Main.mouseExit)
				{
					if ((double)Main.exitScale < 0.96)
					{
						Main.exitScale += 0.02f;
					}
				}
				else
				{
					if ((double)Main.exitScale > 0.8)
					{
						Main.exitScale -= 0.02f;
					}
				}
				for (int num62 = 0; num62 < 5; num62++)
				{
					int num63 = 0;
					int num64 = 0;
					Color color2 = Color.Black;
					if (num62 == 0)
					{
						num63 = -2;
					}
					if (num62 == 1)
					{
						num63 = 2;
					}
					if (num62 == 2)
					{
						num64 = -2;
					}
					if (num62 == 3)
					{
						num64 = 2;
					}
					if (num62 == 4)
					{
						color2 = Color.White;
					}
					Main.spriteBatch.DrawString(Main.fontDeathText, text16, new Vector2((float)(num59 + num63), (float)(num60 + num64)), color2, 0f, new Vector2(vector4.X / 2f, vector4.Y / 2f), (Main.exitScale - 0.2f) * num61, SpriteEffects.None, 0f);
				}
				if ((float)Main.mouseX > (float)num59 - vector4.X / 2f && (float)Main.mouseX < (float)num59 + vector4.X / 2f && (float)Main.mouseY > (float)num60 - vector4.Y / 2f && (float)Main.mouseY < (float)num60 + vector4.Y / 2f - 10f)
				{
					if (!Main.mouseExit)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					Main.mouseExit = true;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.mouseExit = false;
						Main.exitScale = 0.8f;
						IngameOptions.Open();
					}
				}
				else
				{
					Main.mouseExit = false;
				}
			}
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawHotbar();
					goto IL_221B;
				}
				catch
				{
					goto IL_221B;
				}
			}
			this.DrawHotbar();
			IL_221B:
			if (Main.mouseItem.stack <= 0)
			{
				Main.mouseItem.type = 0;
			}
			if (Main.hoverItemName != null && Main.hoverItemName != "" && Main.mouseItem.type == 0)
			{
				Main.player[Main.myPlayer].showItemIcon = false;
				this.MouseText(Main.hoverItemName, Main.rare, 0);
				Main.mouseText = true;
			}
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawPlayerChat();
					goto IL_2297;
				}
				catch
				{
					goto IL_2297;
				}
			}
			this.DrawPlayerChat();
			IL_2297:
			if (Main.player[Main.myPlayer].dead)
			{
				string text17 = Lang.inter[38];
				Main.spriteBatch.DrawString(Main.fontDeathText, text17, new Vector2((float)(Main.screenWidth / 2 - text17.Length * 10), (float)(Main.screenHeight / 2 - 20)), Main.player[Main.myPlayer].GetDeathAlpha(new Color(0, 0, 0, 0)), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(Main.cursorTexture, new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), new Rectangle?(new Rectangle(0, 0, Main.cursorTexture.Width, Main.cursorTexture.Height)), new Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f)), 0f, default(Vector2), Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
			Main.spriteBatch.Draw(Main.cursorTexture, new Vector2((float)Main.mouseX, (float)Main.mouseY), new Rectangle?(new Rectangle(0, 0, Main.cursorTexture.Width, Main.cursorTexture.Height)), Main.cursorColor, 0f, default(Vector2), Main.cursorScale, SpriteEffects.None, 0f);
			if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				this.mouseNPC = -1;
				Main.player[Main.myPlayer].showItemIcon = false;
				Main.player[Main.myPlayer].showItemIcon2 = 0;
				Main.mouseText = true;
				float num65 = 1f;
				if (Main.itemTexture[Main.mouseItem.type].Width > 32 || Main.itemTexture[Main.mouseItem.type].Height > 32)
				{
					if (Main.itemTexture[Main.mouseItem.type].Width > Main.itemTexture[Main.mouseItem.type].Height)
					{
						num65 = 32f / (float)Main.itemTexture[Main.mouseItem.type].Width;
					}
					else
					{
						num65 = 32f / (float)Main.itemTexture[Main.mouseItem.type].Height;
					}
				}
				float num66 = 1f;
				num66 *= Main.cursorScale;
				Color white = Color.White;
				if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 662 || Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 663)
				{
					white.R = (byte)Main.DiscoR;
					white.G = (byte)Main.DiscoG;
					white.B = (byte)Main.DiscoB;
					white.A = 255;
				}
				num65 *= num66;
				Main.spriteBatch.Draw(Main.itemTexture[Main.mouseItem.type], new Vector2((float)Main.mouseX + 26f * num66 - (float)Main.itemTexture[Main.mouseItem.type].Width * 0.5f * num65, (float)Main.mouseY + 26f * num66 - (float)Main.itemTexture[Main.mouseItem.type].Height * 0.5f * num65), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.mouseItem.type].Width, Main.itemTexture[Main.mouseItem.type].Height)), Main.mouseItem.GetAlpha(white), 0f, default(Vector2), num65, SpriteEffects.None, 0f);
				if (Main.mouseItem.color != default(Color))
				{
					Main.spriteBatch.Draw(Main.itemTexture[Main.mouseItem.type], new Vector2((float)Main.mouseX + 26f * num66 - (float)Main.itemTexture[Main.mouseItem.type].Width * 0.5f * num65, (float)Main.mouseY + 26f * num66 - (float)Main.itemTexture[Main.mouseItem.type].Height * 0.5f * num65), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.mouseItem.type].Width, Main.itemTexture[Main.mouseItem.type].Height)), Main.mouseItem.GetColor(white), 0f, default(Vector2), num65, SpriteEffects.None, 0f);
				}
				if (Main.mouseItem.stack > 1)
				{
					white = Color.White;
					Main.spriteBatch.DrawString(Main.fontItemStack, string.Concat(Main.mouseItem.stack), new Vector2((float)Main.mouseX + 10f * num66, (float)Main.mouseY + 26f * num66), white, 0f, default(Vector2), num65, SpriteEffects.None, 0f);
				}
			}
			else
			{
				if (this.mouseNPC > -1)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					Main.mouseText = false;
					float num67 = 1f;
					num67 *= Main.cursorScale;
					Main.spriteBatch.Draw(Main.npcHeadTexture[this.mouseNPC], new Vector2((float)Main.mouseX + 26f * num67 - (float)Main.npcHeadTexture[this.mouseNPC].Width * 0.5f * num67, (float)Main.mouseY + 26f * num67 - (float)Main.npcHeadTexture[this.mouseNPC].Height * 0.5f * num67), new Rectangle?(new Rectangle(0, 0, Main.npcHeadTexture[this.mouseNPC].Width, Main.npcHeadTexture[this.mouseNPC].Height)), Color.White, 0f, default(Vector2), num67, SpriteEffects.None, 0f);
					if (Main.mouseRight && Main.mouseRightRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						this.mouseNPC = -1;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						if (this.mouseNPC == 0)
						{
							int x = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
							int y = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								y = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
							}
							int n2 = -1;
							if (WorldGen.MoveNPC(x, y, n2))
							{
								Main.NewText(Lang.inter[39], 255, 240, 20, false);
							}
						}
						else
						{
							int num68 = 0;
							for (int num69 = 0; num69 < 200; num69++)
							{
								if (Main.npc[num69].active && Main.npc[num69].type == NPC.NumToType(this.mouseNPC))
								{
									num68 = num69;
									break;
								}
							}
							if (num68 >= 0)
							{
								int x2 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
								int y2 = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
								if (WorldGen.MoveNPC(x2, y2, num68))
								{
									this.mouseNPC = -1;
									WorldGen.moveRoom(x2, y2, num68);
									Main.PlaySound(12, -1, -1, 1);
								}
							}
							else
							{
								this.mouseNPC = 0;
							}
						}
					}
				}
			}
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawMouseOver();
					goto IL_2AA1;
				}
				catch
				{
					goto IL_2AA1;
				}
			}
			this.DrawMouseOver();
			IL_2AA1:
			if (Main.mouseRight)
			{
				Main.npcChatRelease = false;
			}
			else
			{
				Main.npcChatRelease = true;
			}
			if (Main.player[Main.myPlayer].showItemIcon && (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type > 0 || Main.player[Main.myPlayer].showItemIcon2 != 0))
			{
				int num70 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type;
				Color color3 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetAlpha(Color.White);
				Color color4 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetColor(Color.White);
				if (Main.player[Main.myPlayer].showItemIcon2 != 0)
				{
					num70 = Main.player[Main.myPlayer].showItemIcon2;
					color3 = Color.White;
					color4 = default(Color);
				}
				float scale3 = Main.cursorScale;
				if (num70 == 662 || num70 == 663)
				{
					color3.R = (byte)Main.DiscoR;
					color3.G = (byte)Main.DiscoG;
					color3.B = (byte)Main.DiscoB;
					color3.A = 255;
				}
				SpriteEffects effects2 = SpriteEffects.None;
				if ((Main.player[Main.myPlayer].showItemIcon2 == 928 || Main.player[Main.myPlayer].showItemIcon2 == 1337) && Main.player[Main.myPlayer].showItemIconR)
				{
					effects2 = SpriteEffects.FlipHorizontally;
				}
				if (num70 > 0)
				{
					Main.spriteBatch.Draw(Main.itemTexture[num70], new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[num70].Width, Main.itemTexture[num70].Height)), color3, 0f, default(Vector2), scale3, effects2, 0f);
				}
				if (Main.player[Main.myPlayer].showItemIconText != "")
				{
					this.MouseText(Main.player[Main.myPlayer].showItemIconText, 0, 0);
				}
				if (Main.player[Main.myPlayer].showItemIcon2 == 0 && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].color != default(Color))
				{
					Main.spriteBatch.Draw(Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type], new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10)), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Height)), color4, 0f, default(Vector2), scale3, SpriteEffects.None, 0f);
				}
			}
			Main.player[Main.myPlayer].showItemIcon = false;
			Main.player[Main.myPlayer].showItemIcon2 = 0;
			Main.player[Main.myPlayer].showItemIconText = string.Empty;
		}
		protected void QuitGame()
		{
			base.Exit();
		}
		protected Color randColor()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			while (num + num3 + num2 <= 150)
			{
				num = Main.rand.Next(256);
				num2 = Main.rand.Next(256);
				num3 = Main.rand.Next(256);
			}
			return new Color(num, num2, num3, 255);
		}
		public static Color hslToRgb(float Hue, float Saturation, float Luminosity)
		{
			byte r;
			byte g;
			byte b;
			if (Saturation == 0f)
			{
				r = (byte)Math.Round((double)Luminosity * 255.0);
				g = (byte)Math.Round((double)Luminosity * 255.0);
				b = (byte)Math.Round((double)Luminosity * 255.0);
			}
			else
			{
				double num = (double)Hue;
				double num2;
				if ((double)Luminosity < 0.5)
				{
					num2 = (double)Luminosity * (1.0 + (double)Saturation);
				}
				else
				{
					num2 = (double)(Luminosity + Saturation - Luminosity * Saturation);
				}
				double t = 2.0 * (double)Luminosity - num2;
				double num3 = num + 0.33333333333333331;
				double num4 = num;
				double num5 = num - 0.33333333333333331;
				num3 = Main.hue2rgb(num3, t, num2);
				num4 = Main.hue2rgb(num4, t, num2);
				num5 = Main.hue2rgb(num5, t, num2);
				r = (byte)Math.Round(num3 * 255.0);
				g = (byte)Math.Round(num4 * 255.0);
				b = (byte)Math.Round(num5 * 255.0);
			}
			return new Color((int)r, (int)g, (int)b);
		}
		public static double hue2rgb(double c, double t1, double t2)
		{
			if (c < 0.0)
			{
				c += 1.0;
			}
			if (c > 1.0)
			{
				c -= 1.0;
			}
			if (6.0 * c < 1.0)
			{
				return t1 + (t2 - t1) * 6.0 * c;
			}
			if (2.0 * c < 1.0)
			{
				return t2;
			}
			if (3.0 * c < 2.0)
			{
				return t1 + (t2 - t1) * (0.66666666666666663 - c) * 6.0;
			}
			return t1;
		}
		public static Vector3 rgbToHsl(Color newColor)
		{
			float num = (float)newColor.R;
			float num2 = (float)newColor.G;
			float num3 = (float)newColor.B;
			num /= 255f;
			num2 /= 255f;
			num3 /= 255f;
			float num4 = Math.Max(num, num2);
			num4 = Math.Max(num4, num3);
			float num5 = Math.Min(num, num2);
			num5 = Math.Min(num5, num3);
			float num6 = 0f;
			float num7 = (num4 + num5) / 2f;
			float y;
			if (num4 == num5)
			{
				y = (num6 = 0f);
			}
			else
			{
				float num8 = num4 - num5;
				y = (((double)num7 > 0.5) ? (num8 / (2f - num4 - num5)) : (num8 / (num4 + num5)));
				if (num4 == num)
				{
					num6 = (num2 - num3) / num8 + (float)((num2 < num3) ? 6 : 0);
				}
				if (num4 == num2)
				{
					num6 = (num3 - num) / num8 + 2f;
				}
				if (num4 == num3)
				{
					num6 = (num - num2) / num8 + 4f;
				}
				num6 /= 6f;
			}
			return new Vector3(num6, y, num7);
		}
		protected void DrawMenu()
		{
			Main.render = false;
			Star.UpdateStars();
			Cloud.UpdateClouds();
			Main.holyTiles = 0;
			Main.evilTiles = 0;
			Main.shroomTiles = 0;
			Main.bloodTiles = 0;
			Main.bloodTiles = 0;
			Main.jungleTiles = 0;
			Main.chatMode = false;
			for (int i = 0; i < Main.numChatLines; i++)
			{
				Main.chatLine[i] = new ChatLine();
			}
			this.DrawFPS();
			Main.screenLastPosition = Main.screenPosition;
			Main.screenPosition.Y = (float)(Main.worldSurface * 16.0 - (double)Main.screenHeight);
			if (Main.grabSky)
			{
				Main.screenPosition.X = Main.screenPosition.X + (float)(Main.mouseX - Main.screenWidth / 2) * 0.02f;
			}
			else
			{
				Main.screenPosition.X = Main.screenPosition.X + 2f;
			}
			if (Main.screenPosition.X > 2.14748352E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			if (Main.screenPosition.X < -2.14748352E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			Main.background = 0;
			byte b = (byte)((255 + Main.tileColor.R * 2) / 3);
			Color color = new Color((int)b, (int)b, (int)b, 255);
			this.logoRotation += this.logoRotationSpeed * 3E-05f;
			if ((double)this.logoRotation > 0.1)
			{
				this.logoRotationDirection = -1f;
			}
			else
			{
				if ((double)this.logoRotation < -0.1)
				{
					this.logoRotationDirection = 1f;
				}
			}
			if (this.logoRotationSpeed < 20f & this.logoRotationDirection == 1f)
			{
				this.logoRotationSpeed += 1f;
			}
			else
			{
				if (this.logoRotationSpeed > -20f & this.logoRotationDirection == -1f)
				{
					this.logoRotationSpeed -= 1f;
				}
			}
			this.logoScale += this.logoScaleSpeed * 1E-05f;
			if ((double)this.logoScale > 1.1)
			{
				this.logoScaleDirection = -1f;
			}
			else
			{
				if ((double)this.logoScale < 0.9)
				{
					this.logoScaleDirection = 1f;
				}
			}
			if (this.logoScaleSpeed < 50f & this.logoScaleDirection == 1f)
			{
				this.logoScaleSpeed += 1f;
			}
			else
			{
				if (this.logoScaleSpeed > -50f & this.logoScaleDirection == -1f)
				{
					this.logoScaleSpeed -= 1f;
				}
			}
			Color color2 = new Color((int)((byte)((float)color.R * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoA / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoA / 255f))));
			Color color3 = new Color((int)((byte)((float)color.R * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.G * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.B * ((float)Main.LogoB / 255f))), (int)((byte)((float)color.A * ((float)Main.LogoB / 255f))));
			Main.spriteBatch.Draw(Main.logoTexture, new Vector2((float)(Main.screenWidth / 2), 100f), new Rectangle?(new Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color2, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
			Main.spriteBatch.Draw(Main.logo2Texture, new Vector2((float)(Main.screenWidth / 2), 100f), new Rectangle?(new Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color3, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
			if (Main.dayTime)
			{
				Main.LogoA += 2;
				if (Main.LogoA > 255)
				{
					Main.LogoA = 255;
				}
				Main.LogoB--;
				if (Main.LogoB < 0)
				{
					Main.LogoB = 0;
				}
			}
			else
			{
				Main.LogoB += 2;
				if (Main.LogoB > 255)
				{
					Main.LogoB = 255;
				}
				Main.LogoA--;
				if (Main.LogoA < 0)
				{
					Main.LogoA = 0;
					Main.LogoT = true;
				}
			}
			int num = 250;
			int num2 = Main.screenWidth / 2;
			int num3 = 80;
			int num4 = 0;
			int num5 = Main.menuMode;
			int num6 = -1;
			int num7 = 0;
			int num8 = 0;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			int num9 = 0;
			bool[] array = new bool[Main.maxMenuItems];
			bool[] array2 = new bool[Main.maxMenuItems];
			bool[] array3 = new bool[Main.maxMenuItems];
			int[] array4 = new int[Main.maxMenuItems];
			int[] array5 = new int[Main.maxMenuItems];
			byte[] array6 = new byte[Main.maxMenuItems];
			float[] array7 = new float[Main.maxMenuItems];
			bool[] array8 = new bool[Main.maxMenuItems];
			for (int j = 0; j < Main.maxMenuItems; j++)
			{
				array[j] = false;
				array2[j] = false;
				array4[j] = 0;
				array5[j] = 0;
				array7[j] = 1f;
			}
			string[] array9 = new string[Main.maxMenuItems];
			if (Main.menuMode == -1)
			{
				Main.menuMode = 0;
			}
			if (Main.menuMode == 1212)
			{
				if (this.focusMenu == 2)
				{
					array9[0] = "Wählen Sie die Sprache";
				}
				else
				{
					if (this.focusMenu == 3)
					{
						array9[0] = "Selezionare la lingua";
					}
					else
					{
						if (this.focusMenu == 4)
						{
							array9[0] = "Sélectionnez la langue";
						}
						else
						{
							if (this.focusMenu == 5)
							{
								array9[0] = "Seleccione el idioma";
							}
							else
							{
								array9[0] = "Select language";
							}
						}
					}
				}
				num3 = 50;
				num = 200;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array4[4] = 25;
				array4[5] = 25;
				array[0] = true;
				array9[1] = "English";
				array9[2] = "Deutsch";
				array9[3] = "Italiano";
				array9[4] = "Française";
				array9[5] = "Español";
				num4 = 6;
				if (this.selectedMenu >= 1)
				{
					Lang.lang = this.selectedMenu;
					Lang.setLang(false);
					Main.menuMode = 0;
					Main.PlaySound(10, -1, -1, 1);
					Main.SaveSettings();
				}
			}
			else
			{
				if (Main.menuMode == 1213)
				{
					if (this.focusMenu == 1)
					{
						array9[0] = "Select language";
					}
					else
					{
						if (this.focusMenu == 2)
						{
							array9[0] = "Wählen Sie die Sprache";
						}
						else
						{
							if (this.focusMenu == 3)
							{
								array9[0] = "Selezionare la lingua";
							}
							else
							{
								if (this.focusMenu == 4)
								{
									array9[0] = "Sélectionnez la langue";
								}
								else
								{
									if (this.focusMenu == 5)
									{
										array9[0] = "Seleccione el idioma";
									}
									else
									{
										array9[0] = Lang.menu[102];
									}
								}
							}
						}
					}
					num3 = 48;
					num = 180;
					array4[1] = 25;
					array4[2] = 25;
					array4[3] = 25;
					array4[4] = 25;
					array4[5] = 25;
					array4[6] = 50;
					array[0] = true;
					array9[1] = "English";
					array9[2] = "Deutsch";
					array9[3] = "Italiano";
					array9[4] = "Française";
					array9[5] = "Español";
					array9[6] = Lang.menu[5];
					num4 = 7;
					if (this.selectedMenu == 6)
					{
						Main.menuMode = 11;
						Main.PlaySound(11, -1, -1, 1);
					}
					else
					{
						if (this.selectedMenu >= 1)
						{
							Lang.lang = this.selectedMenu;
							Lang.setLang(false);
							Main.PlaySound(12, -1, -1, 1);
							Main.SaveSettings();
						}
					}
				}
				else
				{
					if (Main.netMode == 2)
					{
						bool flag4 = true;
						for (int k = 0; k < 8; k++)
						{
							if (k < 255)
							{
								try
								{
									array9[k] = Netplay.serverSock[k].statusText;
									if (Netplay.serverSock[k].active && Main.showSpam)
									{
										string[] array10;
										string[] expr_836 = array10 = array9;
										IntPtr intPtr;
										int expr_83B = (int)(intPtr = (IntPtr)k);
										object obj = array10[(int)intPtr];
										expr_836[expr_83B] = string.Concat(new object[]
										{
											obj,
											" (",
											NetMessage.buffer[k].spamCount,
											")"
										});
									}
								}
								catch
								{
									array9[k] = "";
								}
								array[k] = true;
								if (array9[k] != "" && array9[k] != null)
								{
									flag4 = false;
								}
							}
						}
						if (flag4)
						{
							array9[0] = Lang.menu[0];
							array9[1] = Lang.menu[1] + Netplay.serverPort + ".";
						}
						num4 = 11;
						array9[9] = Main.statusText;
						array[9] = true;
						num = 170;
						num3 = 30;
						array4[10] = 20;
						array4[10] = 40;
						array9[10] = Lang.menu[2];
						if (this.selectedMenu == 10)
						{
							Netplay.disconnect = true;
							Main.PlaySound(11, -1, -1, 1);
						}
					}
					else
					{
						if (Main.menuMode == 31)
						{
							string password = Netplay.password;
							Netplay.password = Main.GetInputText(Netplay.password);
							if (password != Netplay.password)
							{
								Main.PlaySound(12, -1, -1, 1);
							}
							array9[0] = Lang.menu[3];
							this.textBlinkerCount++;
							if (this.textBlinkerCount >= 20)
							{
								if (this.textBlinkerState == 0)
								{
									this.textBlinkerState = 1;
								}
								else
								{
									this.textBlinkerState = 0;
								}
								this.textBlinkerCount = 0;
							}
							array9[1] = Netplay.password;
							if (this.textBlinkerState == 1)
							{
								string[] array10;
								(array10 = array9)[1] = array10[1] + "|";
								array5[1] = 1;
							}
							else
							{
								string[] array10;
								(array10 = array9)[1] = array10[1] + " ";
							}
							array[0] = true;
							array[1] = true;
							array4[1] = -20;
							array4[2] = 20;
							array9[2] = Lang.menu[4];
							array9[3] = Lang.menu[5];
							num4 = 4;
							if (this.selectedMenu == 3)
							{
								Main.PlaySound(11, -1, -1, 1);
								Main.menuMode = 0;
								Netplay.disconnect = true;
								Netplay.password = "";
							}
							else
							{
								if (this.selectedMenu == 2 || Main.inputTextEnter)
								{
									NetMessage.SendData(38, -1, -1, Netplay.password, 0, 0f, 0f, 0f, 0);
									Main.menuMode = 14;
								}
							}
						}
						else
						{
							if (Main.netMode == 1 || Main.menuMode == 14)
							{
								num4 = 2;
								array9[0] = Main.statusText;
								array[0] = true;
								num = 300;
								array9[1] = Lang.menu[6];
								if (this.selectedMenu != 1)
								{
									goto IL_45BA;
								}
								Netplay.disconnect = true;
								Netplay.clientSock.tcpClient.Close();
								Main.PlaySound(11, -1, -1, 1);
								Main.menuMode = 0;
								Main.netMode = 0;
								try
								{
									this.tServer.Kill();
									goto IL_45BA;
								}
								catch
								{
									goto IL_45BA;
								}
							}
							if (Main.menuMode == 30)
							{
								string password2 = Netplay.password;
								Netplay.password = Main.GetInputText(Netplay.password);
								if (password2 != Netplay.password)
								{
									Main.PlaySound(12, -1, -1, 1);
								}
								array9[0] = Lang.menu[7];
								this.textBlinkerCount++;
								if (this.textBlinkerCount >= 20)
								{
									if (this.textBlinkerState == 0)
									{
										this.textBlinkerState = 1;
									}
									else
									{
										this.textBlinkerState = 0;
									}
									this.textBlinkerCount = 0;
								}
								array9[1] = Netplay.password;
								if (this.textBlinkerState == 1)
								{
									string[] array10;
									(array10 = array9)[1] = array10[1] + "|";
									array5[1] = 1;
								}
								else
								{
									string[] array10;
									(array10 = array9)[1] = array10[1] + " ";
								}
								array[0] = true;
								array[1] = true;
								array4[1] = -20;
								array4[2] = 20;
								array9[2] = Lang.menu[4];
								array9[3] = Lang.menu[5];
								num4 = 4;
								if (this.selectedMenu == 3)
								{
									Main.PlaySound(11, -1, -1, 1);
									Main.menuMode = 6;
									Netplay.password = "";
								}
								else
								{
									if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
									{
										this.tServer.StartInfo.FileName = "TerrariaServer.exe";
										this.tServer.StartInfo.Arguments = string.Concat(new object[]
										{
											"-autoshutdown -world \"",
											Main.worldPathName,
											"\" -password \"",
											Netplay.password,
											"\" -lang ",
											Lang.lang
										});
										if (Main.libPath != "")
										{
											ProcessStartInfo expr_CE0 = this.tServer.StartInfo;
											expr_CE0.Arguments = expr_CE0.Arguments + " -loadlib " + Main.libPath;
										}
										this.tServer.StartInfo.UseShellExecute = false;
										this.tServer.StartInfo.CreateNoWindow = true;
										this.tServer.Start();
										Netplay.SetIP("127.0.0.1");
										Main.autoPass = true;
										Main.statusText = Lang.menu[8];
										Netplay.StartClient();
										Main.menuMode = 10;
									}
								}
							}
							else
							{
								if (Main.menuMode == 15)
								{
									num4 = 2;
									array9[0] = Main.statusText;
									array[0] = true;
									num = 80;
									num3 = 400;
									array9[1] = Lang.menu[5];
									if (this.selectedMenu == 1)
									{
										Netplay.disconnect = true;
										Main.PlaySound(11, -1, -1, 1);
										Main.menuMode = 0;
										Main.netMode = 0;
									}
								}
								else
								{
									if (Main.menuMode == 200)
									{
										num4 = 3;
										array9[0] = Lang.menu[9];
										array[0] = true;
										num -= 30;
										array4[1] = 70;
										array4[2] = 50;
										array9[1] = Lang.menu[10];
										array9[2] = Lang.menu[6];
										if (this.selectedMenu == 1)
										{
											if (File.Exists(Main.worldPathName + ".bak"))
											{
												File.Copy(Main.worldPathName, Main.worldPathName + ".bad", true);
												File.Copy(Main.worldPathName + ".bak", Main.worldPathName, true);
												File.Delete(Main.worldPathName + ".bak");
												Main.PlaySound(10, -1, -1, 1);
												WorldGen.playWorld();
												Main.menuMode = 10;
											}
											else
											{
												Main.PlaySound(11, -1, -1, 1);
												Main.menuMode = 0;
												Main.netMode = 0;
											}
										}
										if (this.selectedMenu == 2)
										{
											Main.PlaySound(11, -1, -1, 1);
											Main.menuMode = 0;
											Main.netMode = 0;
										}
									}
									else
									{
										if (Main.menuMode == 201)
										{
											num4 = 3;
											array9[0] = Lang.menu[9];
											array[0] = true;
											array[1] = true;
											num -= 30;
											array4[1] = -30;
											array4[2] = 50;
											array9[1] = Lang.menu[11];
											array9[2] = Lang.menu[5];
											if (this.selectedMenu == 2)
											{
												Main.PlaySound(11, -1, -1, 1);
												Main.menuMode = 0;
												Main.netMode = 0;
											}
										}
										else
										{
											if (Main.menuMode == 10)
											{
												num4 = 1;
												array9[0] = Main.statusText;
												array[0] = true;
												num = 300;
											}
											else
											{
												if (Main.menuMode == 100)
												{
													num4 = 1;
													array9[0] = Main.statusText;
													array[0] = true;
													num = 300;
												}
												else
												{
													if (Main.menuMode == 0)
													{
														Main.eclipse = false;
														Main.pumpkinMoon = false;
														Main.snowMoon = false;
														Main.ServerSideCharacter = false;
														Main.menuMultiplayer = false;
														Main.menuServer = false;
														Main.netMode = 0;
														array9[0] = Lang.menu[12];
														array9[1] = Lang.menu[13];
														array9[2] = Lang.menu[14];
														array9[3] = Lang.menu[15];
														num4 = 4;
														if (this.selectedMenu == 3)
														{
															this.QuitGame();
														}
														if (this.selectedMenu == 1)
														{
															Main.PlaySound(10, -1, -1, 1);
															Main.menuMode = 12;
														}
														if (this.selectedMenu == 2)
														{
															Main.PlaySound(10, -1, -1, 1);
															Main.menuMode = 11;
														}
														if (this.selectedMenu == 0)
														{
															Main.PlaySound(10, -1, -1, 1);
															Main.menuMode = 1;
															Main.LoadPlayers();
														}
													}
													else
													{
														if (Main.menuMode == 1)
														{
															Main.ServerSideCharacter = false;
															Main.myPlayer = 0;
															num = 180;
															num3 = 40;
															num4 = 10;
															array4[7] += 10;
															array4[8] += 10;
															array4[9] += 10;
															for (int l = 0; l < num4; l++)
															{
																array7[l] = 0.8f;
															}
															array9[7] = Lang.menu[16];
															array9[8] = Lang.menu[17];
															if (Main.numLoadPlayers >= Main.maxLoadPlayer)
															{
																array2[7] = true;
																array9[7] = "";
															}
															else
															{
																if (Main.numLoadPlayers == 0)
																{
																	array2[8] = true;
																	array9[8] = "";
																}
															}
															array9[9] = Lang.menu[5];
															for (int m = 0; m < 7; m++)
															{
																if (m + Main.menuSkip < Main.numLoadPlayers)
																{
																	array9[m] = Main.loadPlayer[m + Main.menuSkip].name;
																	switch (Main.loadPlayer[m + Main.menuSkip].loadStatus)
																	{
																	case 0:
																		array6[m] = Main.loadPlayer[m + Main.menuSkip].difficulty;
																		break;
																	case 1:
																		array6[m] = 3;
																		break;
																	case 2:
																		array6[m] = 6;
																		break;
																	case 3:
																		array6[m] = 4;
																		break;
																	case 4:
																		array6[m] = 5;
																		break;
																	default:
																		array6[m] = Main.loadPlayer[m + Main.menuSkip].difficulty;
																		break;
																	}
																}
																else
																{
																	array9[m] = null;
																}
															}
															bool[] array11 = new bool[num4];
															if (Main.numLoadPlayers > 7 + Main.menuSkip)
															{
																this.menuWide[6] = true;
																array6[6] = 0;
																array11[6] = true;
																array9[6] = "▼";
																array7[6] = 0.6f;
																array4[6] += 8;
																array3[6] = true;
															}
															if (Main.menuSkip > 0)
															{
																this.menuWide[0] = true;
																array6[0] = 0;
																array11[0] = true;
																array9[0] = "▲";
																array7[0] = 0.6f;
																array4[0] += 8;
																array3[0] = true;
															}
															array11[7] = true;
															array11[8] = true;
															array11[9] = true;
															if (this.focusMenu >= 0 && this.focusMenu < Main.numLoadPlayers && !array11[this.focusMenu])
															{
																num6 = this.focusMenu + Main.menuSkip;
																Vector2 vector = Main.fontDeathText.MeasureString(array9[num6 - Main.menuSkip]);
																num7 = (int)((double)(Main.screenWidth / 2) + (double)vector.X * 0.5 + 10.0);
																num8 = num + num3 * this.focusMenu + 4;
															}
															if (this.selectedMenu == 0 && Main.menuSkip > 0)
															{
																Main.PlaySound(12, -1, -1, 1);
																Main.menuSkip -= 5;
																if (Main.menuSkip < 0)
																{
																	Main.menuSkip = 0;
																}
															}
															else
															{
																if (this.selectedMenu == 6 && Main.menuSkip < Main.numLoadPlayers - 7)
																{
																	Main.PlaySound(12, -1, -1, 1);
																	Main.menuSkip += 5;
																	if (Main.menuSkip >= Main.numLoadPlayers - 7)
																	{
																		Main.menuSkip = Main.numLoadPlayers - 7;
																	}
																}
																else
																{
																	if (this.selectedMenu == 9)
																	{
																		Main.autoJoin = false;
																		Main.autoPass = false;
																		Main.PlaySound(11, -1, -1, 1);
																		if (Main.menuMultiplayer)
																		{
																			Main.menuMode = 12;
																			Main.menuMultiplayer = false;
																			Main.menuServer = false;
																		}
																		else
																		{
																			Main.menuMode = 0;
																		}
																	}
																	else
																	{
																		if (this.selectedMenu == 7)
																		{
																			Main.loadPlayer[Main.numLoadPlayers] = new Player();
																			Main.loadPlayer[Main.numLoadPlayers].inventory[0].SetDefaults("Copper Shortsword");
																			Main.loadPlayer[Main.numLoadPlayers].inventory[0].Prefix(-1);
																			Main.loadPlayer[Main.numLoadPlayers].inventory[1].SetDefaults("Copper Pickaxe");
																			Main.loadPlayer[Main.numLoadPlayers].inventory[1].Prefix(-1);
																			Main.loadPlayer[Main.numLoadPlayers].inventory[2].SetDefaults("Copper Axe");
																			Main.loadPlayer[Main.numLoadPlayers].inventory[2].Prefix(-1);
																			Main.PlaySound(10, -1, -1, 1);
																			Main.menuMode = 2;
																		}
																		else
																		{
																			if (this.selectedMenu == 8)
																			{
																				Main.PlaySound(10, -1, -1, 1);
																				Main.menuMode = 4;
																			}
																			else
																			{
																				if (this.selectedMenu >= 0 && Main.loadPlayer[this.selectedMenu + Main.menuSkip].loadStatus == 0)
																				{
																					if (Main.menuMultiplayer)
																					{
																						Main.ServerSideCharacter = false;
																						this.selectedPlayer = this.selectedMenu + Main.menuSkip;
																						Main.player[Main.myPlayer] = (Player)Main.loadPlayer[this.selectedPlayer].Clone();
																						Main.playerPathName = Main.loadPlayerPath[this.selectedPlayer];
																						Main.PlaySound(10, -1, -1, 1);
																						if (Main.autoJoin)
																						{
																							if (Netplay.SetIP(Main.getIP))
																							{
																								Main.menuMode = 10;
																								Netplay.StartClient();
																							}
																							else
																							{
																								if (Netplay.SetIP2(Main.getIP))
																								{
																									Main.menuMode = 10;
																									Netplay.StartClient();
																								}
																							}
																							Main.autoJoin = false;
																						}
																						else
																						{
																							if (Main.menuServer)
																							{
																								Main.LoadWorlds();
																								Main.menuMode = 6;
																							}
																							else
																							{
																								Main.menuMode = 13;
																								Main.clrInput();
																							}
																						}
																					}
																					else
																					{
																						Main.ServerSideCharacter = false;
																						Main.myPlayer = 0;
																						this.selectedPlayer = this.selectedMenu + Main.menuSkip;
																						Main.player[Main.myPlayer] = (Player)Main.loadPlayer[this.selectedPlayer].Clone();
																						Main.player[Main.myPlayer].position = Vector2.Zero;
																						Main.playerPathName = Main.loadPlayerPath[this.selectedPlayer];
																						Main.LoadWorlds();
																						Main.PlaySound(10, -1, -1, 1);
																						Main.menuMode = 6;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
														else
														{
															if (Main.menuMode == 2)
															{
																if (this.selectedMenu == 0)
																{
																	Main.menuMode = 17;
																	Main.PlaySound(10, -1, -1, 1);
																	Main.selColor = Main.loadPlayer[Main.numLoadPlayers].hairColor;
																}
																if (this.selectedMenu == 1)
																{
																	Main.menuMode = 18;
																	Main.PlaySound(10, -1, -1, 1);
																	Main.selColor = Main.loadPlayer[Main.numLoadPlayers].eyeColor;
																}
																if (this.selectedMenu == 2)
																{
																	Main.menuMode = 19;
																	Main.PlaySound(10, -1, -1, 1);
																	Main.selColor = Main.loadPlayer[Main.numLoadPlayers].skinColor;
																}
																if (this.selectedMenu == 3)
																{
																	Main.menuMode = 20;
																	Main.PlaySound(10, -1, -1, 1);
																}
																array9[0] = Lang.menu[18];
																array9[1] = Lang.menu[19];
																array9[2] = Lang.menu[20];
																array9[3] = Lang.menu[21];
																num = 220;
																for (int n = 0; n < 9; n++)
																{
																	if (n < 6)
																	{
																		array7[n] = 0.75f;
																	}
																	else
																	{
																		array7[n] = 0.9f;
																	}
																}
																num3 = 38;
																array4[6] = 6;
																array4[7] = 12;
																array4[8] = 18;
																num6 = Main.numLoadPlayers;
																num7 = Main.screenWidth / 2 - 16;
																num8 = 176;
																if (Main.loadPlayer[num6].male)
																{
																	array9[4] = Lang.menu[22];
																}
																else
																{
																	array9[4] = Lang.menu[23];
																}
																if (this.selectedMenu == 4)
																{
																	if (Main.loadPlayer[num6].male)
																	{
																		Main.PlaySound(20, -1, -1, 1);
																		Main.loadPlayer[num6].male = false;
																	}
																	else
																	{
																		Main.PlaySound(1, -1, -1, 1);
																		Main.loadPlayer[num6].male = true;
																	}
																}
																if (Main.loadPlayer[num6].difficulty == 2)
																{
																	array9[5] = Lang.menu[24];
																	array6[5] = Main.loadPlayer[num6].difficulty;
																}
																else
																{
																	if (Main.loadPlayer[num6].difficulty == 1)
																	{
																		array9[5] = Lang.menu[25];
																		array6[5] = Main.loadPlayer[num6].difficulty;
																	}
																	else
																	{
																		array9[5] = Lang.menu[26];
																	}
																}
																if (this.selectedMenu == 5)
																{
																	Main.PlaySound(10, -1, -1, 1);
																	Main.menuMode = 222;
																}
																if (this.selectedMenu == 7)
																{
																	Main.PlaySound(12, -1, -1, 1);
																	Main.loadPlayer[num6].hair = Main.rand.Next(51);
																	Main.loadPlayer[num6].eyeColor = this.randColor();
																	while ((int)(Main.loadPlayer[num6].eyeColor.R + Main.loadPlayer[num6].eyeColor.G + Main.loadPlayer[num6].eyeColor.B) > 300)
																	{
																		Main.loadPlayer[num6].eyeColor = this.randColor();
																	}
																	Main.loadPlayer[num6].hairColor = this.randColor();
																	Main.loadPlayer[num6].pantsColor = this.randColor();
																	Main.loadPlayer[num6].shirtColor = this.randColor();
																	Main.loadPlayer[num6].shoeColor = this.randColor();
																	Main.loadPlayer[num6].skinColor = this.randColor();
																	float num10 = (float)Main.rand.Next(60, 120) * 0.01f;
																	if (num10 > 1f)
																	{
																		num10 = 1f;
																	}
																	Main.loadPlayer[num6].skinColor.R = (byte)((float)Main.rand.Next(240, 255) * num10);
																	Main.loadPlayer[num6].skinColor.G = (byte)((float)Main.rand.Next(110, 140) * num10);
																	Main.loadPlayer[num6].skinColor.B = (byte)((float)Main.rand.Next(75, 110) * num10);
																	Main.loadPlayer[num6].underShirtColor = this.randColor();
																	int num11 = Main.loadPlayer[num6].hair + 1;
																	if (num11 == 5 || num11 == 6 || num11 == 7 || num11 == 10 || num11 == 12 || num11 == 19 || num11 == 22 || num11 == 23 || num11 == 26 || num11 == 27 || num11 == 30 || num11 == 33)
																	{
																		Main.loadPlayer[num6].male = false;
																	}
																	else
																	{
																		Main.loadPlayer[num6].male = true;
																	}
																}
																array9[7] = Lang.menu[27];
																array9[6] = Lang.menu[28];
																array9[8] = Lang.menu[5];
																num4 = 9;
																if (this.selectedMenu == 8)
																{
																	Main.PlaySound(11, -1, -1, 1);
																	Main.menuMode = 1;
																}
																else
																{
																	if (this.selectedMenu == 6)
																	{
																		Main.PlaySound(10, -1, -1, 1);
																		Main.loadPlayer[Main.numLoadPlayers].name = "";
																		Main.menuMode = 3;
																		Main.clrInput();
																	}
																}
															}
															else
															{
																if (Main.menuMode == 222)
																{
																	if (this.focusMenu == 3)
																	{
																		array9[0] = Lang.menu[29];
																	}
																	else
																	{
																		if (this.focusMenu == 2)
																		{
																			array9[0] = Lang.menu[30];
																		}
																		else
																		{
																			if (this.focusMenu == 1)
																			{
																				array9[0] = Lang.menu[31];
																			}
																			else
																			{
																				array9[0] = Lang.menu[32];
																			}
																		}
																	}
																	num3 = 50;
																	array4[1] = 25;
																	array4[2] = 25;
																	array4[3] = 25;
																	array[0] = true;
																	array9[1] = Lang.menu[26];
																	array9[2] = Lang.menu[25];
																	array6[2] = 1;
																	array9[3] = Lang.menu[24];
																	array6[3] = 2;
																	num4 = 4;
																	if (this.selectedMenu == 1)
																	{
																		Main.loadPlayer[Main.numLoadPlayers].difficulty = 0;
																		Main.menuMode = 2;
																	}
																	else
																	{
																		if (this.selectedMenu == 2)
																		{
																			Main.menuMode = 2;
																			Main.loadPlayer[Main.numLoadPlayers].difficulty = 1;
																		}
																		else
																		{
																			if (this.selectedMenu == 3)
																			{
																				Main.loadPlayer[Main.numLoadPlayers].difficulty = 2;
																				Main.menuMode = 2;
																			}
																		}
																	}
																}
																else
																{
																	if (Main.menuMode == 20)
																	{
																		if (this.selectedMenu == 0)
																		{
																			Main.menuMode = 21;
																			Main.PlaySound(10, -1, -1, 1);
																			Main.selColor = Main.loadPlayer[Main.numLoadPlayers].shirtColor;
																		}
																		if (this.selectedMenu == 1)
																		{
																			Main.menuMode = 22;
																			Main.PlaySound(10, -1, -1, 1);
																			Main.selColor = Main.loadPlayer[Main.numLoadPlayers].underShirtColor;
																		}
																		if (this.selectedMenu == 2)
																		{
																			Main.menuMode = 23;
																			Main.PlaySound(10, -1, -1, 1);
																			Main.selColor = Main.loadPlayer[Main.numLoadPlayers].pantsColor;
																		}
																		if (this.selectedMenu == 3)
																		{
																			Main.selColor = Main.loadPlayer[Main.numLoadPlayers].shoeColor;
																			Main.menuMode = 24;
																			Main.PlaySound(10, -1, -1, 1);
																		}
																		array9[0] = Lang.menu[33];
																		array9[1] = Lang.menu[34];
																		array9[2] = Lang.menu[35];
																		array9[3] = Lang.menu[36];
																		num = 260;
																		num3 = 50;
																		array4[5] = 20;
																		array9[5] = Lang.menu[5];
																		num4 = 6;
																		num6 = Main.numLoadPlayers;
																		num7 = Main.screenWidth / 2 - 16;
																		num8 = 210;
																		if (this.selectedMenu == 5)
																		{
																			Main.PlaySound(11, -1, -1, 1);
																			Main.menuMode = 2;
																		}
																	}
																	else
																	{
																		if (Main.menuMode == 17)
																		{
																			num6 = Main.numLoadPlayers;
																			num7 = Main.screenWidth / 2 - 16;
																			num8 = 210;
																			flag = true;
																			num9 = 390;
																			num = 260;
																			num3 = 60;
																			Main.loadPlayer[num6].hairColor = Main.selColor;
																			num4 = 3;
																			array9[0] = Lang.menu[37] + " " + (Main.loadPlayer[num6].hair + 1);
																			array9[1] = Lang.menu[38];
																			array[1] = true;
																			array4[2] = 150;
																			array4[1] = 10;
																			array9[2] = Lang.menu[5];
																			if (this.selectedMenu == 0)
																			{
																				Main.PlaySound(12, -1, -1, 1);
																				Main.loadPlayer[num6].hair++;
																				if (Main.loadPlayer[num6].hair >= 51)
																				{
																					Main.loadPlayer[num6].hair = 0;
																				}
																			}
																			else
																			{
																				if (this.selectedMenu2 == 0)
																				{
																					Main.PlaySound(12, -1, -1, 1);
																					Main.loadPlayer[num6].hair--;
																					if (Main.loadPlayer[num6].hair < 0)
																					{
																						Main.loadPlayer[num6].hair = 50;
																					}
																				}
																			}
																			if (this.selectedMenu == 2)
																			{
																				Main.menuMode = 2;
																				Main.PlaySound(11, -1, -1, 1);
																			}
																		}
																		else
																		{
																			if (Main.menuMode == 18)
																			{
																				num6 = Main.numLoadPlayers;
																				num7 = Main.screenWidth / 2 - 16;
																				num8 = 210;
																				flag = true;
																				num9 = 370;
																				num = 240;
																				num3 = 60;
																				Main.loadPlayer[num6].eyeColor = Main.selColor;
																				num4 = 3;
																				array9[0] = "";
																				array9[1] = Lang.menu[39];
																				array[1] = true;
																				array4[2] = 170;
																				array4[1] = 10;
																				array9[2] = Lang.menu[5];
																				if (this.selectedMenu == 2)
																				{
																					Main.menuMode = 2;
																					Main.PlaySound(11, -1, -1, 1);
																				}
																			}
																			else
																			{
																				if (Main.menuMode == 19)
																				{
																					num6 = Main.numLoadPlayers;
																					num7 = Main.screenWidth / 2 - 16;
																					num8 = 210;
																					flag = true;
																					num9 = 370;
																					num = 240;
																					num3 = 60;
																					Main.loadPlayer[num6].skinColor = Main.selColor;
																					num4 = 3;
																					array9[0] = "";
																					array9[1] = Lang.menu[40];
																					array[1] = true;
																					array4[2] = 170;
																					array4[1] = 10;
																					array9[2] = Lang.menu[5];
																					if (this.selectedMenu == 2)
																					{
																						Main.menuMode = 2;
																						Main.PlaySound(11, -1, -1, 1);
																					}
																				}
																				else
																				{
																					if (Main.menuMode == 21)
																					{
																						num6 = Main.numLoadPlayers;
																						num7 = Main.screenWidth / 2 - 16;
																						num8 = 210;
																						flag = true;
																						num9 = 370;
																						num = 240;
																						num3 = 60;
																						Main.loadPlayer[num6].shirtColor = Main.selColor;
																						num4 = 3;
																						array9[0] = "";
																						array9[1] = Lang.menu[41];
																						array[1] = true;
																						array4[2] = 170;
																						array4[1] = 10;
																						array9[2] = Lang.menu[5];
																						if (this.selectedMenu == 2)
																						{
																							Main.menuMode = 20;
																							Main.PlaySound(11, -1, -1, 1);
																						}
																					}
																					else
																					{
																						if (Main.menuMode == 22)
																						{
																							num6 = Main.numLoadPlayers;
																							num7 = Main.screenWidth / 2 - 16;
																							num8 = 210;
																							flag = true;
																							num9 = 370;
																							num = 240;
																							num3 = 60;
																							Main.loadPlayer[num6].underShirtColor = Main.selColor;
																							num4 = 3;
																							array9[0] = "";
																							array9[1] = Lang.menu[42];
																							array[1] = true;
																							array4[2] = 170;
																							array4[1] = 10;
																							array9[2] = Lang.menu[5];
																							if (this.selectedMenu == 2)
																							{
																								Main.menuMode = 20;
																								Main.PlaySound(11, -1, -1, 1);
																							}
																						}
																						else
																						{
																							if (Main.menuMode == 23)
																							{
																								num6 = Main.numLoadPlayers;
																								num7 = Main.screenWidth / 2 - 16;
																								num8 = 210;
																								flag = true;
																								num9 = 370;
																								num = 240;
																								num3 = 60;
																								Main.loadPlayer[num6].pantsColor = Main.selColor;
																								num4 = 3;
																								array9[0] = "";
																								array9[1] = Lang.menu[43];
																								array[1] = true;
																								array4[2] = 170;
																								array4[1] = 10;
																								array9[2] = Lang.menu[5];
																								if (this.selectedMenu == 2)
																								{
																									Main.menuMode = 20;
																									Main.PlaySound(11, -1, -1, 1);
																								}
																							}
																							else
																							{
																								if (Main.menuMode == 24)
																								{
																									num6 = Main.numLoadPlayers;
																									num7 = Main.screenWidth / 2 - 16;
																									num8 = 210;
																									flag = true;
																									num9 = 370;
																									num = 240;
																									num3 = 60;
																									Main.loadPlayer[num6].shoeColor = Main.selColor;
																									num4 = 3;
																									array9[0] = "";
																									array9[1] = Lang.menu[44];
																									array[1] = true;
																									array4[2] = 170;
																									array4[1] = 10;
																									array9[2] = Lang.menu[5];
																									if (this.selectedMenu == 2)
																									{
																										Main.menuMode = 20;
																										Main.PlaySound(11, -1, -1, 1);
																									}
																								}
																								else
																								{
																									if (Main.menuMode == 3)
																									{
																										string name = Main.loadPlayer[Main.numLoadPlayers].name;
																										Main.loadPlayer[Main.numLoadPlayers].name = Main.GetInputText(Main.loadPlayer[Main.numLoadPlayers].name);
																										if (Main.loadPlayer[Main.numLoadPlayers].name.Length > Player.nameLen)
																										{
																											Main.loadPlayer[Main.numLoadPlayers].name = Main.loadPlayer[Main.numLoadPlayers].name.Substring(0, Player.nameLen);
																										}
																										if (name != Main.loadPlayer[Main.numLoadPlayers].name)
																										{
																											Main.PlaySound(12, -1, -1, 1);
																										}
																										array9[0] = Lang.menu[45];
																										array2[2] = true;
																										if (Main.loadPlayer[Main.numLoadPlayers].name != "")
																										{
																											if (Main.loadPlayer[Main.numLoadPlayers].name.Substring(0, 1) == " ")
																											{
																												Main.loadPlayer[Main.numLoadPlayers].name = "";
																											}
																											for (int num12 = 0; num12 < Main.loadPlayer[Main.numLoadPlayers].name.Length; num12++)
																											{
																												if (Main.loadPlayer[Main.numLoadPlayers].name.Substring(num12, 1) != " ")
																												{
																													array2[2] = false;
																												}
																											}
																										}
																										this.textBlinkerCount++;
																										if (this.textBlinkerCount >= 20)
																										{
																											if (this.textBlinkerState == 0)
																											{
																												this.textBlinkerState = 1;
																											}
																											else
																											{
																												this.textBlinkerState = 0;
																											}
																											this.textBlinkerCount = 0;
																										}
																										array9[1] = Main.loadPlayer[Main.numLoadPlayers].name;
																										if (this.textBlinkerState == 1)
																										{
																											string[] array10;
																											(array10 = array9)[1] = array10[1] + "|";
																											array5[1] = 1;
																										}
																										else
																										{
																											string[] array10;
																											(array10 = array9)[1] = array10[1] + " ";
																										}
																										array[0] = true;
																										array[1] = true;
																										array4[1] = -20;
																										array4[2] = 20;
																										array9[2] = Lang.menu[4];
																										array9[3] = Lang.menu[5];
																										num4 = 4;
																										if (this.selectedMenu == 3)
																										{
																											Main.PlaySound(11, -1, -1, 1);
																											Main.menuMode = 2;
																										}
																										if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
																										{
																											Main.loadPlayer[Main.numLoadPlayers].name.Trim();
																											Main.loadPlayerPath[Main.numLoadPlayers] = Main.getPlayerPathName(Main.loadPlayer[Main.numLoadPlayers].name);
																											Player.SavePlayer(Main.loadPlayer[Main.numLoadPlayers], Main.loadPlayerPath[Main.numLoadPlayers], true, false);
																											Main.LoadPlayers();
																											Main.PlaySound(10, -1, -1, 1);
																											Main.menuMode = 1;
																										}
																									}
																									else
																									{
																										if (Main.menuMode == 4)
																										{
																											num = 180;
																											num3 = 40;
																											num4 = 8;
																											array9[7] = Lang.menu[5];
																											array4[7] += 40;
																											for (int num13 = 0; num13 < num4; num13++)
																											{
																												array7[num13] = 0.8f;
																											}
																											for (int num14 = 0; num14 < 7; num14++)
																											{
																												if (num14 + Main.menuSkip < Main.numLoadPlayers)
																												{
																													array9[num14] = Main.loadPlayer[num14 + Main.menuSkip].name;
																													switch (Main.loadPlayer[num14 + Main.menuSkip].loadStatus)
																													{
																													case 0:
																														array6[num14] = Main.loadPlayer[num14 + Main.menuSkip].difficulty;
																														break;
																													case 1:
																														array6[num14] = 3;
																														break;
																													case 2:
																														array6[num14] = 6;
																														break;
																													case 3:
																														array6[num14] = 4;
																														break;
																													case 4:
																														array6[num14] = 5;
																														break;
																													default:
																														array6[num14] = Main.loadPlayer[num14 + Main.menuSkip].difficulty;
																														break;
																													}
																												}
																												else
																												{
																													array9[num14] = null;
																												}
																											}
																											bool[] array12 = new bool[num4];
																											array12[7] = true;
																											if (Main.numLoadPlayers > 7 + Main.menuSkip)
																											{
																												this.menuWide[6] = true;
																												array6[6] = 0;
																												array12[6] = true;
																												array9[6] = "▼";
																												array7[6] = 0.6f;
																												array4[6] += 8;
																												array3[6] = true;
																											}
																											if (Main.menuSkip > 0)
																											{
																												this.menuWide[0] = true;
																												array6[0] = 0;
																												array12[0] = true;
																												array9[0] = "▲";
																												array7[0] = 0.6f;
																												array4[0] += 8;
																												array3[0] = true;
																											}
																											if (this.focusMenu >= 0 && this.focusMenu < Main.numLoadPlayers && !array12[this.focusMenu])
																											{
																												num6 = this.focusMenu + Main.menuSkip;
																												Vector2 vector2 = Main.fontDeathText.MeasureString(array9[num6 - Main.menuSkip]);
																												num7 = (int)((double)(Main.screenWidth / 2) + (double)vector2.X * 0.5 + 10.0);
																												num8 = num + num3 * this.focusMenu + 4;
																											}
																											if (this.selectedMenu == 0 && Main.menuSkip > 0)
																											{
																												Main.PlaySound(12, -1, -1, 1);
																												Main.menuSkip -= 5;
																												if (Main.menuSkip < 0)
																												{
																													Main.menuSkip = 0;
																												}
																											}
																											else
																											{
																												if (this.selectedMenu == 6 && Main.menuSkip < Main.numLoadPlayers - 7)
																												{
																													Main.PlaySound(12, -1, -1, 1);
																													Main.menuSkip += 5;
																													if (Main.menuSkip >= Main.numLoadPlayers - 7)
																													{
																														Main.menuSkip = Main.numLoadPlayers - 7;
																													}
																												}
																												else
																												{
																													if (this.selectedMenu == 7)
																													{
																														Main.PlaySound(11, -1, -1, 1);
																														Main.menuMode = 1;
																													}
																													else
																													{
																														if (this.selectedMenu >= 0)
																														{
																															this.selectedPlayer = this.selectedMenu + Main.menuSkip;
																															Main.PlaySound(10, -1, -1, 1);
																															Main.menuMode = 5;
																														}
																													}
																												}
																											}
																										}
																										else
																										{
																											if (Main.menuMode == 5)
																											{
																												array9[0] = Lang.menu[46] + " " + Main.loadPlayer[this.selectedPlayer].name + "?";
																												array[0] = true;
																												array9[1] = Lang.menu[104];
																												array9[2] = Lang.menu[105];
																												num4 = 3;
																												if (this.selectedMenu == 1)
																												{
																													Main.ErasePlayer(this.selectedPlayer);
																													Main.PlaySound(10, -1, -1, 1);
																													Main.menuMode = 1;
																												}
																												else
																												{
																													if (this.selectedMenu == 2)
																													{
																														Main.PlaySound(11, -1, -1, 1);
																														Main.menuMode = 1;
																													}
																												}
																											}
																											else
																											{
																												if (Main.menuMode == 6)
																												{
																													num = 180;
																													num3 = 40;
																													num4 = 10;
																													array4[7] += 10;
																													array4[8] += 10;
																													array4[9] += 10;
																													for (int num15 = 0; num15 < num4; num15++)
																													{
																														array7[num15] = 0.8f;
																													}
																													array9[7] = Lang.menu[47];
																													array9[8] = Lang.menu[17];
																													if (Main.numLoadWorlds >= Main.maxLoadWorld)
																													{
																														array2[7] = true;
																														array9[7] = "";
																													}
																													else
																													{
																														if (Main.numLoadWorlds == 0)
																														{
																															array2[8] = true;
																															array9[8] = "";
																														}
																													}
																													array9[9] = Lang.menu[5];
																													for (int num16 = 0; num16 < 7; num16++)
																													{
																														if (num16 + Main.menuSkip < Main.numLoadWorlds)
																														{
																															array9[num16] = Main.loadWorld[num16 + Main.menuSkip];
																														}
																														else
																														{
																															array9[num16] = null;
																														}
																													}
																													if (Main.numLoadWorlds > 7 + Main.menuSkip)
																													{
																														this.menuWide[6] = true;
																														array9[6] = "more";
																														array9[6] = "▼";
																														array7[6] = 0.6f;
																														array4[6] += 8;
																													}
																													if (Main.menuSkip > 0)
																													{
																														array9[0] = "▲";
																														array7[0] = 0.6f;
																														array4[0] += 8;
																														this.menuWide[0] = true;
																													}
																													if (this.selectedMenu == 0 && Main.menuSkip > 0)
																													{
																														Main.PlaySound(12, -1, -1, 1);
																														Main.menuSkip -= 5;
																														if (Main.menuSkip < 0)
																														{
																															Main.menuSkip = 0;
																														}
																													}
																													else
																													{
																														if (this.selectedMenu == 6 && Main.menuSkip < Main.numLoadWorlds - 7)
																														{
																															Main.PlaySound(12, -1, -1, 1);
																															Main.menuSkip += 5;
																															if (Main.menuSkip >= Main.numLoadWorlds - 7)
																															{
																																Main.menuSkip = Main.numLoadWorlds - 7;
																															}
																														}
																														else
																														{
																															if (this.selectedMenu == 9)
																															{
																																if (Main.menuMultiplayer)
																																{
																																	Main.menuMode = 12;
																																}
																																else
																																{
																																	Main.menuMode = 1;
																																}
																																Main.PlaySound(11, -1, -1, 1);
																															}
																															else
																															{
																																if (this.selectedMenu == 7)
																																{
																																	Main.PlaySound(10, -1, -1, 1);
																																	Main.menuMode = 16;
																																	Main.newWorldName = Lang.gen[57] + " " + (Main.numLoadWorlds + 1);
																																}
																																else
																																{
																																	if (this.selectedMenu == 8)
																																	{
																																		Main.PlaySound(10, -1, -1, 1);
																																		Main.menuMode = 8;
																																	}
																																	else
																																	{
																																		if (this.selectedMenu >= 0)
																																		{
																																			if (Main.menuMultiplayer)
																																			{
																																				Main.PlaySound(10, -1, -1, 1);
																																				Main.worldPathName = Main.loadWorldPath[this.selectedMenu + Main.menuSkip];
																																				Main.menuMode = 30;
																																				Main.GetInputText("");
																																			}
																																			else
																																			{
																																				Main.PlaySound(10, -1, -1, 1);
																																				Main.worldPathName = Main.loadWorldPath[this.selectedMenu + Main.menuSkip];
																																				WorldGen.playWorld();
																																				Main.menuMode = 10;
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																												else
																												{
																													if (Main.menuMode == 7)
																													{
																														string text = Main.newWorldName;
																														Main.newWorldName = Main.GetInputText(Main.newWorldName);
																														if (Main.newWorldName.Length > 20)
																														{
																															Main.newWorldName = Main.newWorldName.Substring(0, 20);
																														}
																														if (text != Main.newWorldName)
																														{
																															Main.PlaySound(12, -1, -1, 1);
																														}
																														array9[0] = Lang.menu[48];
																														array2[2] = true;
																														if (Main.newWorldName != "")
																														{
																															if (Main.newWorldName.Substring(0, 1) == " ")
																															{
																																Main.newWorldName = "";
																															}
																															for (int num17 = 0; num17 < Main.newWorldName.Length; num17++)
																															{
																																if (Main.newWorldName != " ")
																																{
																																	array2[2] = false;
																																}
																															}
																														}
																														this.textBlinkerCount++;
																														if (this.textBlinkerCount >= 20)
																														{
																															if (this.textBlinkerState == 0)
																															{
																																this.textBlinkerState = 1;
																															}
																															else
																															{
																																this.textBlinkerState = 0;
																															}
																															this.textBlinkerCount = 0;
																														}
																														array9[1] = Main.newWorldName;
																														if (this.textBlinkerState == 1)
																														{
																															string[] array10;
																															(array10 = array9)[1] = array10[1] + "|";
																															array5[1] = 1;
																														}
																														else
																														{
																															string[] array10;
																															(array10 = array9)[1] = array10[1] + " ";
																														}
																														array[0] = true;
																														array[1] = true;
																														array4[1] = -20;
																														array4[2] = 20;
																														array9[2] = Lang.menu[4];
																														array9[3] = Lang.menu[5];
																														num4 = 4;
																														if (this.selectedMenu == 3)
																														{
																															Main.PlaySound(11, -1, -1, 1);
																															Main.menuMode = 16;
																														}
																														if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
																														{
																															Main.menuMode = 10;
																															Main.worldName = Main.newWorldName;
																															Main.worldPathName = Main.getWorldPathName(Main.worldName);
																															WorldGen.CreateNewWorld();
																														}
																													}
																													else
																													{
																														if (Main.menuMode == 8)
																														{
																															num = 180;
																															num3 = 40;
																															num4 = 8;
																															array4[7] += 30;
																															for (int num18 = 0; num18 < num4; num18++)
																															{
																																array7[num18] = 0.8f;
																															}
																															array9[7] = Lang.menu[5];
																															for (int num19 = 0; num19 < 7; num19++)
																															{
																																if (num19 < Main.numLoadWorlds)
																																{
																																	array9[num19] = Main.loadWorld[num19 + Main.menuSkip];
																																}
																																else
																																{
																																	array9[num19] = null;
																																}
																															}
																															if (Main.numLoadWorlds > 7 + Main.menuSkip)
																															{
																																array9[6] = "more";
																																array9[6] = "▼";
																																array7[6] = 0.6f;
																																array4[6] += 8;
																																this.menuWide[6] = true;
																															}
																															if (Main.menuSkip > 0)
																															{
																																array9[0] = "▲";
																																array7[0] = 0.6f;
																																array4[0] += 8;
																																this.menuWide[0] = true;
																															}
																															if (this.selectedMenu == 0 && Main.menuSkip > 0)
																															{
																																Main.PlaySound(12, -1, -1, 1);
																																Main.menuSkip -= 5;
																																if (Main.menuSkip < 0)
																																{
																																	Main.menuSkip = 0;
																																}
																															}
																															else
																															{
																																if (this.selectedMenu == 6 && Main.menuSkip < Main.numLoadWorlds - 7)
																																{
																																	Main.PlaySound(12, -1, -1, 1);
																																	Main.menuSkip += 5;
																																	if (Main.menuSkip >= Main.numLoadPlayers - 7)
																																	{
																																		Main.menuSkip = Main.numLoadWorlds - 7;
																																	}
																																}
																																else
																																{
																																	if (this.selectedMenu == 7)
																																	{
																																		Main.PlaySound(11, -1, -1, 1);
																																		Main.menuMode = 6;
																																	}
																																	else
																																	{
																																		if (this.selectedMenu >= 0)
																																		{
																																			this.selectedWorld = this.selectedMenu + Main.menuSkip;
																																			Main.PlaySound(10, -1, -1, 1);
																																			Main.menuMode = 9;
																																		}
																																	}
																																}
																															}
																														}
																														else
																														{
																															if (Main.menuMode == 9)
																															{
																																array9[0] = Lang.menu[46] + " " + Main.loadWorld[this.selectedWorld] + "?";
																																array[0] = true;
																																array9[1] = Lang.menu[104];
																																array9[2] = Lang.menu[105];
																																num4 = 3;
																																if (this.selectedMenu == 1)
																																{
																																	Main.EraseWorld(this.selectedWorld);
																																	Main.PlaySound(10, -1, -1, 1);
																																	Main.menuMode = 6;
																																}
																																else
																																{
																																	if (this.selectedMenu == 2)
																																	{
																																		Main.PlaySound(11, -1, -1, 1);
																																		Main.menuMode = 6;
																																	}
																																}
																															}
																															else
																															{
																																if (Main.menuMode == 1111)
																																{
																																	num = 210;
																																	num3 = 40;
																																	for (int num20 = 0; num20 < 8; num20++)
																																	{
																																		array7[num20] = 0.8f;
																																	}
																																	array4[8] = 10;
																																	num4 = 9;
																																	if (Main.graphics.IsFullScreen)
																																	{
																																		array9[0] = Lang.menu[49];
																																	}
																																	else
																																	{
																																		array9[0] = Lang.menu[50];
																																	}
																																	Main.bgScroll = (int)Math.Round((double)((1f - Main.caveParrallax) * 500f));
																																	array9[1] = Lang.menu[51];
																																	array9[2] = Lang.menu[52];
																																	if (Main.fixedTiming)
																																	{
																																		array9[3] = Lang.menu[53];
																																	}
																																	else
																																	{
																																		array9[3] = Lang.menu[54];
																																	}
																																	if (Lighting.lightMode == 0)
																																	{
																																		array9[4] = Lang.menu[55];
																																	}
																																	else
																																	{
																																		if (Lighting.lightMode == 1)
																																		{
																																			array9[4] = Lang.menu[56];
																																		}
																																		else
																																		{
																																			if (Lighting.lightMode == 2)
																																			{
																																				array9[4] = Lang.menu[57];
																																			}
																																			else
																																			{
																																				if (Lighting.lightMode == 3)
																																				{
																																					array9[4] = Lang.menu[58];
																																				}
																																			}
																																		}
																																	}
																																	if (Lighting.LightingThreads == 0)
																																	{
																																		array9[5] = Lang.menu[116] + " " + Lang.menu[117];
																																	}
																																	else
																																	{
																																		array9[5] = Lang.menu[116] + " " + (Lighting.LightingThreads + 1);
																																	}
																																	if (Main.qaStyle == 0)
																																	{
																																		array9[6] = Lang.menu[59];
																																	}
																																	else
																																	{
																																		if (Main.qaStyle == 1)
																																		{
																																			array9[6] = Lang.menu[60];
																																		}
																																		else
																																		{
																																			if (Main.qaStyle == 2)
																																			{
																																				array9[6] = Lang.menu[61];
																																			}
																																			else
																																			{
																																				array9[6] = Lang.menu[62];
																																			}
																																		}
																																	}
																																	if (Main.owBack)
																																	{
																																		array9[7] = Lang.menu[100];
																																	}
																																	else
																																	{
																																		array9[7] = Lang.menu[101];
																																	}
																																	if (this.selectedMenu == 7)
																																	{
																																		Main.PlaySound(12, -1, -1, 1);
																																		if (Main.owBack)
																																		{
																																			Main.owBack = false;
																																		}
																																		else
																																		{
																																			Main.owBack = true;
																																		}
																																	}
																																	array9[8] = Lang.menu[5];
																																	if (this.selectedMenu == 8)
																																	{
																																		Main.PlaySound(11, -1, -1, 1);
																																		Main.SaveSettings();
																																		Main.menuMode = 11;
																																	}
																																	if (this.selectedMenu == 6)
																																	{
																																		Main.PlaySound(12, -1, -1, 1);
																																		Main.qaStyle++;
																																		if (Main.qaStyle > 3)
																																		{
																																			Main.qaStyle = 0;
																																		}
																																	}
																																	if (this.selectedMenu == 5)
																																	{
																																		Main.PlaySound(12, -1, -1, 1);
																																		Lighting.LightingThreads++;
																																		if (Lighting.LightingThreads > Environment.ProcessorCount - 1)
																																		{
																																			Lighting.LightingThreads = 0;
																																		}
																																	}
																																	if (this.selectedMenu == 4)
																																	{
																																		Main.PlaySound(12, -1, -1, 1);
																																		Lighting.lightMode++;
																																		if (Lighting.lightMode >= 4)
																																		{
																																			Lighting.lightMode = 0;
																																		}
																																	}
																																	if (this.selectedMenu == 3)
																																	{
																																		Main.PlaySound(12, -1, -1, 1);
																																		if (Main.fixedTiming)
																																		{
																																			Main.fixedTiming = false;
																																		}
																																		else
																																		{
																																			Main.fixedTiming = true;
																																		}
																																	}
																																	if (this.selectedMenu == 2)
																																	{
																																		Main.PlaySound(11, -1, -1, 1);
																																		Main.menuMode = 28;
																																	}
																																	if (this.selectedMenu == 1)
																																	{
																																		Main.PlaySound(10, -1, -1, 1);
																																		Main.menuMode = 111;
																																	}
																																	if (this.selectedMenu == 0)
																																	{
																																		Main.graphics.ToggleFullScreen();
																																	}
																																}
																																else
																																{
																																	if (Main.menuMode == 11)
																																	{
																																		num = 176;
																																		num3 = 37;
																																		array4[10] = 8;
																																		num4 = 11;
																																		for (int num21 = 0; num21 < 11; num21++)
																																		{
																																			array7[num21] = 0.73f;
																																		}
																																		array9[0] = Lang.menu[63];
																																		array9[1] = Lang.menu[64];
																																		array9[2] = Lang.menu[65];
																																		array9[3] = Lang.menu[66];
																																		array9[4] = Lang.menu[115];
																																		if (Main.autoSave)
																																		{
																																			array9[5] = Lang.menu[67];
																																		}
																																		else
																																		{
																																			array9[5] = Lang.menu[68];
																																		}
																																		if (Main.autoPause)
																																		{
																																			array9[6] = Lang.menu[69];
																																		}
																																		else
																																		{
																																			array9[6] = Lang.menu[70];
																																		}
																																		if (Main.showItemText)
																																		{
																																			array9[7] = Lang.menu[71];
																																		}
																																		else
																																		{
																																			array9[7] = Lang.menu[72];
																																		}
																																		if (Main.mapEnabled)
																																		{
																																			array9[8] = Lang.menu[112];
																																		}
																																		else
																																		{
																																			array9[8] = Lang.menu[113];
																																		}
																																		array9[10] = Lang.menu[5];
																																		array9[9] = Lang.menu[103];
																																		if (this.selectedMenu == 9)
																																		{
																																			Main.PlaySound(10, -1, -1, 1);
																																			Main.menuMode = 1213;
																																		}
																																		if (this.selectedMenu == 10)
																																		{
																																			Main.PlaySound(11, -1, -1, 1);
																																			Main.SaveSettings();
																																			Main.menuMode = 0;
																																		}
																																		if (this.selectedMenu == 8)
																																		{
																																			Main.PlaySound(12, -1, -1, 1);
																																			if (Main.mapEnabled)
																																			{
																																				Main.mapEnabled = false;
																																			}
																																			else
																																			{
																																				Main.mapEnabled = true;
																																			}
																																		}
																																		if (this.selectedMenu == 7)
																																		{
																																			Main.PlaySound(12, -1, -1, 1);
																																			if (Main.showItemText)
																																			{
																																				Main.showItemText = false;
																																			}
																																			else
																																			{
																																				Main.showItemText = true;
																																			}
																																		}
																																		if (this.selectedMenu == 6)
																																		{
																																			Main.PlaySound(12, -1, -1, 1);
																																			if (Main.autoPause)
																																			{
																																				Main.autoPause = false;
																																			}
																																			else
																																			{
																																				Main.autoPause = true;
																																			}
																																		}
																																		if (this.selectedMenu == 5)
																																		{
																																			Main.PlaySound(12, -1, -1, 1);
																																			if (Main.autoSave)
																																			{
																																				Main.autoSave = false;
																																			}
																																			else
																																			{
																																				Main.autoSave = true;
																																			}
																																		}
																																		if (this.selectedMenu == 4)
																																		{
																																			Main.PlaySound(11, -1, -1, 1);
																																			Main.menuMode = 272727;
																																		}
																																		if (this.selectedMenu == 3)
																																		{
																																			Main.PlaySound(11, -1, -1, 1);
																																			Main.menuMode = 27;
																																		}
																																		if (this.selectedMenu == 2)
																																		{
																																			Main.PlaySound(11, -1, -1, 1);
																																			Main.menuMode = 26;
																																		}
																																		if (this.selectedMenu == 1)
																																		{
																																			Main.PlaySound(10, -1, -1, 1);
																																			Main.selColor = Main.mouseColor;
																																			Main.menuMode = 25;
																																		}
																																		if (this.selectedMenu == 0)
																																		{
																																			Main.PlaySound(10, -1, -1, 1);
																																			Main.menuMode = 1111;
																																		}
																																	}
																																	else
																																	{
																																		if (Main.menuMode == 111)
																																		{
																																			num = 240;
																																			num3 = 60;
																																			num4 = 3;
																																			array9[0] = Lang.menu[73];
																																			array9[1] = Main.graphics.PreferredBackBufferWidth + "x" + Main.graphics.PreferredBackBufferHeight;
																																			array[0] = true;
																																			array4[2] = 170;
																																			array4[1] = 10;
																																			array9[2] = Lang.menu[5];
																																			if (this.selectedMenu == 1)
																																			{
																																				Main.PlaySound(12, -1, -1, 1);
																																				int num22 = 0;
																																				for (int num23 = 0; num23 < Main.numDisplayModes; num23++)
																																				{
																																					if (Main.displayWidth[num23] == Main.graphics.PreferredBackBufferWidth && Main.displayHeight[num23] == Main.graphics.PreferredBackBufferHeight)
																																					{
																																						num22 = num23;
																																						break;
																																					}
																																				}
																																				num22++;
																																				if (num22 >= Main.numDisplayModes)
																																				{
																																					num22 = 0;
																																				}
																																				Main.graphics.PreferredBackBufferWidth = Main.displayWidth[num22];
																																				Main.graphics.PreferredBackBufferHeight = Main.displayHeight[num22];
																																			}
																																			if (this.selectedMenu == 2)
																																			{
																																				if (Main.graphics.IsFullScreen)
																																				{
																																					Main.graphics.ApplyChanges();
																																				}
																																				Main.menuMode = 1111;
																																				Main.PlaySound(11, -1, -1, 1);
																																			}
																																		}
																																		else
																																		{
																																			if (Main.menuMode == 25)
																																			{
																																				flag = true;
																																				num9 = 370;
																																				num = 240;
																																				num3 = 60;
																																				Main.mouseColor = Main.selColor;
																																				num4 = 3;
																																				array9[0] = "";
																																				array9[1] = Lang.menu[64];
																																				array[1] = true;
																																				array4[2] = 170;
																																				array4[1] = 10;
																																				array9[2] = Lang.menu[5];
																																				if (this.selectedMenu == 2)
																																				{
																																					Main.menuMode = 11;
																																					Main.PlaySound(11, -1, -1, 1);
																																				}
																																			}
																																			else
																																			{
																																				if (Main.menuMode == 26)
																																				{
																																					flag2 = true;
																																					num = 240;
																																					num3 = 60;
																																					num4 = 3;
																																					array9[0] = "";
																																					array9[1] = Lang.menu[65];
																																					array[1] = true;
																																					array4[2] = 170;
																																					array4[1] = 10;
																																					array9[2] = Lang.menu[5];
																																					if (this.selectedMenu == 2)
																																					{
																																						Main.menuMode = 11;
																																						Main.PlaySound(11, -1, -1, 1);
																																					}
																																				}
																																				else
																																				{
																																					if (Main.menuMode == 28)
																																					{
																																						Main.caveParrallax = 1f - (float)Main.bgScroll / 500f;
																																						flag3 = true;
																																						num = 240;
																																						num3 = 60;
																																						num4 = 3;
																																						array9[0] = "";
																																						array9[1] = Lang.menu[52];
																																						array[1] = true;
																																						array4[2] = 170;
																																						array4[1] = 10;
																																						array9[2] = Lang.menu[5];
																																						if (this.selectedMenu == 2)
																																						{
																																							Main.menuMode = 1111;
																																							Main.PlaySound(11, -1, -1, 1);
																																						}
																																					}
																																					else
																																					{
																																						if (Main.menuMode == 272727)
																																						{
																																							num = 200;
																																							num3 = 30;
																																							num4 = 14;
																																							string[] array13 = new string[12];
																																							array13[0] = Main.cMapStyle;
																																							array13[1] = Main.cMapFull;
																																							array13[2] = Main.cMapZoomIn;
																																							array13[3] = Main.cMapZoomOut;
																																							array13[4] = Main.cMapAlphaUp;
																																							array13[5] = Main.cMapAlphaDown;
																																							if (Main.setKey >= 0)
																																							{
																																								array13[Main.setKey] = "_";
																																							}
																																							array9[0] = Lang.menu[106] + array13[0];
																																							array9[1] = Lang.menu[107] + array13[1];
																																							array9[2] = Lang.menu[108] + array13[2];
																																							array9[3] = Lang.menu[109] + array13[3];
																																							array9[4] = Lang.menu[110] + array13[4];
																																							array9[5] = Lang.menu[111] + array13[5];
																																							for (int num24 = 0; num24 < 6; num24++)
																																							{
																																								array8[num24] = true;
																																								array7[num24] = 0.55f;
																																								array5[num24] = -140;
																																							}
																																							array7[6] = 0.8f;
																																							array7[6] = 0.8f;
																																							array4[6] = 6;
																																							array9[6] = Lang.menu[86];
																																							array4[7] = 16;
																																							array9[7] = Lang.menu[5];
																																							if (this.selectedMenu == 7)
																																							{
																																								Main.menuMode = 11;
																																								Main.PlaySound(11, -1, -1, 1);
																																							}
																																							else
																																							{
																																								if (this.selectedMenu == 6)
																																								{
																																									Main.cMapStyle = "Tab";
																																									Main.cMapFull = "M";
																																									Main.cMapZoomIn = "Add";
																																									Main.cMapZoomOut = "Subtract";
																																									Main.cMapAlphaUp = "PageUp";
																																									Main.cMapAlphaDown = "PageDown";
																																									Main.setKey = -1;
																																									Main.PlaySound(11, -1, -1, 1);
																																								}
																																								else
																																								{
																																									if (this.selectedMenu >= 0)
																																									{
																																										Main.setKey = this.selectedMenu;
																																									}
																																								}
																																							}
																																							if (Main.setKey >= 0)
																																							{
																																								Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
																																								if (pressedKeys.Length > 0)
																																								{
																																									string text2 = string.Concat(pressedKeys[0]);
																																									if (text2 != "None")
																																									{
																																										if (Main.setKey == 0)
																																										{
																																											Main.cMapStyle = text2;
																																										}
																																										if (Main.setKey == 1)
																																										{
																																											Main.cMapFull = text2;
																																										}
																																										if (Main.setKey == 2)
																																										{
																																											Main.cMapZoomIn = text2;
																																										}
																																										if (Main.setKey == 3)
																																										{
																																											Main.cMapZoomOut = text2;
																																										}
																																										if (Main.setKey == 4)
																																										{
																																											Main.cMapAlphaUp = text2;
																																										}
																																										if (Main.setKey == 5)
																																										{
																																											Main.cMapAlphaDown = text2;
																																										}
																																										Main.setKey = -1;
																																									}
																																								}
																																							}
																																						}
																																						else
																																						{
																																							if (Main.menuMode == 27)
																																							{
																																								num = 176;
																																								num3 = 28;
																																								num4 = 14;
																																								string[] array14 = new string[]
																																								{
																																									Main.cUp,
																																									Main.cDown,
																																									Main.cLeft,
																																									Main.cRight,
																																									Main.cJump,
																																									Main.cThrowItem,
																																									Main.cInv,
																																									Main.cHeal,
																																									Main.cMana,
																																									Main.cBuff,
																																									Main.cHook,
																																									Main.cTorch
																																								};
																																								if (Main.setKey >= 0)
																																								{
																																									array14[Main.setKey] = "_";
																																								}
																																								array9[0] = Lang.menu[74] + array14[0];
																																								array9[1] = Lang.menu[75] + array14[1];
																																								array9[2] = Lang.menu[76] + array14[2];
																																								array9[3] = Lang.menu[77] + array14[3];
																																								array9[4] = Lang.menu[78] + array14[4];
																																								array9[5] = Lang.menu[79] + array14[5];
																																								array9[6] = Lang.menu[80] + array14[6];
																																								array9[7] = Lang.menu[81] + array14[7];
																																								array9[8] = Lang.menu[82] + array14[8];
																																								array9[9] = Lang.menu[83] + array14[9];
																																								array9[10] = Lang.menu[84] + array14[10];
																																								array9[11] = Lang.menu[85] + array14[11];
																																								for (int num25 = 0; num25 < 12; num25++)
																																								{
																																									array8[num25] = true;
																																									array7[num25] = 0.55f;
																																									array5[num25] = -80;
																																								}
																																								array7[12] = 0.8f;
																																								array7[13] = 0.8f;
																																								array4[12] = 6;
																																								array9[12] = Lang.menu[86];
																																								array4[13] = 16;
																																								array9[13] = Lang.menu[5];
																																								if (this.selectedMenu == 13)
																																								{
																																									Main.menuMode = 11;
																																									Main.PlaySound(11, -1, -1, 1);
																																								}
																																								else
																																								{
																																									if (this.selectedMenu == 12)
																																									{
																																										Main.cUp = "W";
																																										Main.cDown = "S";
																																										Main.cLeft = "A";
																																										Main.cRight = "D";
																																										Main.cJump = "Space";
																																										Main.cThrowItem = "T";
																																										Main.cInv = "Escape";
																																										Main.cHeal = "H";
																																										Main.cMana = "M";
																																										Main.cBuff = "B";
																																										Main.cHook = "E";
																																										Main.cTorch = "LeftShift";
																																										Main.setKey = -1;
																																										Main.PlaySound(11, -1, -1, 1);
																																									}
																																									else
																																									{
																																										if (this.selectedMenu >= 0)
																																										{
																																											Main.setKey = this.selectedMenu;
																																										}
																																									}
																																								}
																																								if (Main.setKey >= 0)
																																								{
																																									Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Main.keyState.GetPressedKeys();
																																									if (pressedKeys2.Length > 0)
																																									{
																																										string text3 = string.Concat(pressedKeys2[0]);
																																										if (text3 != "None")
																																										{
																																											if (Main.setKey == 0)
																																											{
																																												Main.cUp = text3;
																																											}
																																											if (Main.setKey == 1)
																																											{
																																												Main.cDown = text3;
																																											}
																																											if (Main.setKey == 2)
																																											{
																																												Main.cLeft = text3;
																																											}
																																											if (Main.setKey == 3)
																																											{
																																												Main.cRight = text3;
																																											}
																																											if (Main.setKey == 4)
																																											{
																																												Main.cJump = text3;
																																											}
																																											if (Main.setKey == 5)
																																											{
																																												Main.cThrowItem = text3;
																																											}
																																											if (Main.setKey == 6)
																																											{
																																												Main.cInv = text3;
																																											}
																																											if (Main.setKey == 7)
																																											{
																																												Main.cHeal = text3;
																																											}
																																											if (Main.setKey == 8)
																																											{
																																												Main.cMana = text3;
																																											}
																																											if (Main.setKey == 9)
																																											{
																																												Main.cBuff = text3;
																																											}
																																											if (Main.setKey == 10)
																																											{
																																												Main.cHook = text3;
																																											}
																																											if (Main.setKey == 11)
																																											{
																																												Main.cTorch = text3;
																																											}
																																											Main.setKey = -1;
																																										}
																																									}
																																								}
																																							}
																																							else
																																							{
																																								if (Main.menuMode == 12)
																																								{
																																									Main.menuServer = false;
																																									array9[0] = Lang.menu[87];
																																									array9[1] = Lang.menu[88];
																																									array9[2] = Lang.menu[5];
																																									if (this.selectedMenu == 0)
																																									{
																																										Main.LoadPlayers();
																																										Main.menuMultiplayer = true;
																																										Main.PlaySound(10, -1, -1, 1);
																																										Main.menuMode = 1;
																																									}
																																									else
																																									{
																																										if (this.selectedMenu == 1)
																																										{
																																											Main.LoadPlayers();
																																											Main.PlaySound(10, -1, -1, 1);
																																											Main.menuMode = 1;
																																											Main.menuMultiplayer = true;
																																											Main.menuServer = true;
																																										}
																																									}
																																									if (this.selectedMenu == 2)
																																									{
																																										Main.PlaySound(11, -1, -1, 1);
																																										Main.menuMode = 0;
																																									}
																																									num4 = 3;
																																								}
																																								else
																																								{
																																									if (Main.menuMode == 13)
																																									{
																																										string text4 = Main.getIP;
																																										Main.getIP = Main.GetInputText(Main.getIP);
																																										if (text4 != Main.getIP)
																																										{
																																											Main.PlaySound(12, -1, -1, 1);
																																										}
																																										array9[0] = Lang.menu[89];
																																										array2[9] = true;
																																										if (Main.getIP != "")
																																										{
																																											if (Main.getIP.Substring(0, 1) == " ")
																																											{
																																												Main.getIP = "";
																																											}
																																											for (int num26 = 0; num26 < Main.getIP.Length; num26++)
																																											{
																																												if (Main.getIP != " ")
																																												{
																																													array2[9] = false;
																																												}
																																											}
																																										}
																																										this.textBlinkerCount++;
																																										if (this.textBlinkerCount >= 20)
																																										{
																																											if (this.textBlinkerState == 0)
																																											{
																																												this.textBlinkerState = 1;
																																											}
																																											else
																																											{
																																												this.textBlinkerState = 0;
																																											}
																																											this.textBlinkerCount = 0;
																																										}
																																										array9[1] = Main.getIP;
																																										if (this.textBlinkerState == 1)
																																										{
																																											string[] array10;
																																											(array10 = array9)[1] = array10[1] + "|";
																																											array5[1] = 1;
																																										}
																																										else
																																										{
																																											string[] array10;
																																											(array10 = array9)[1] = array10[1] + " ";
																																										}
																																										array[0] = true;
																																										array[1] = true;
																																										array4[9] = 44;
																																										array4[10] = 64;
																																										array9[9] = Lang.menu[4];
																																										array9[10] = Lang.menu[5];
																																										num4 = 11;
																																										num = 180;
																																										num3 = 30;
																																										array4[1] = 19;
																																										for (int num27 = 2; num27 < 9; num27++)
																																										{
																																											int num28 = num27 - 2;
																																											if (Main.recentWorld[num28] != null && Main.recentWorld[num28] != "")
																																											{
																																												array9[num27] = string.Concat(new object[]
																																												{
																																													Main.recentWorld[num28],
																																													" (",
																																													Main.recentIP[num28],
																																													":",
																																													Main.recentPort[num28],
																																													")"
																																												});
																																											}
																																											else
																																											{
																																												array9[num27] = "";
																																												array[num27] = true;
																																											}
																																											array7[num27] = 0.6f;
																																											array4[num27] = 40;
																																										}
																																										if (this.selectedMenu >= 2 && this.selectedMenu < 9)
																																										{
																																											Main.autoPass = false;
																																											int num29 = this.selectedMenu - 2;
																																											Netplay.serverPort = Main.recentPort[num29];
																																											Main.getIP = Main.recentIP[num29];
																																											if (Netplay.SetIP(Main.getIP))
																																											{
																																												Main.menuMode = 10;
																																												Netplay.StartClient();
																																											}
																																											else
																																											{
																																												if (Netplay.SetIP2(Main.getIP))
																																												{
																																													Main.menuMode = 10;
																																													Netplay.StartClient();
																																												}
																																											}
																																										}
																																										if (this.selectedMenu == 10)
																																										{
																																											Main.PlaySound(11, -1, -1, 1);
																																											Main.menuMode = 1;
																																										}
																																										if (this.selectedMenu == 9 || (!array2[2] && Main.inputTextEnter))
																																										{
																																											Main.PlaySound(12, -1, -1, 1);
																																											Main.menuMode = 131;
																																											Main.clrInput();
																																										}
																																									}
																																									else
																																									{
																																										if (Main.menuMode == 131)
																																										{
																																											int num30 = 7777;
																																											string text5 = Main.getPort;
																																											Main.getPort = Main.GetInputText(Main.getPort);
																																											if (text5 != Main.getPort)
																																											{
																																												Main.PlaySound(12, -1, -1, 1);
																																											}
																																											array9[0] = Lang.menu[90];
																																											array2[2] = true;
																																											if (Main.getPort != "")
																																											{
																																												bool flag5 = false;
																																												try
																																												{
																																													num30 = Convert.ToInt32(Main.getPort);
																																													if (num30 > 0 && num30 <= 65535)
																																													{
																																														flag5 = true;
																																													}
																																												}
																																												catch
																																												{
																																												}
																																												if (flag5)
																																												{
																																													array2[2] = false;
																																												}
																																											}
																																											this.textBlinkerCount++;
																																											if (this.textBlinkerCount >= 20)
																																											{
																																												if (this.textBlinkerState == 0)
																																												{
																																													this.textBlinkerState = 1;
																																												}
																																												else
																																												{
																																													this.textBlinkerState = 0;
																																												}
																																												this.textBlinkerCount = 0;
																																											}
																																											array9[1] = Main.getPort;
																																											if (this.textBlinkerState == 1)
																																											{
																																												string[] array10;
																																												(array10 = array9)[1] = array10[1] + "|";
																																												array5[1] = 1;
																																											}
																																											else
																																											{
																																												string[] array10;
																																												(array10 = array9)[1] = array10[1] + " ";
																																											}
																																											array[0] = true;
																																											array[1] = true;
																																											array4[1] = -20;
																																											array4[2] = 20;
																																											array9[2] = Lang.menu[4];
																																											array9[3] = Lang.menu[5];
																																											num4 = 4;
																																											if (this.selectedMenu == 3)
																																											{
																																												Main.PlaySound(11, -1, -1, 1);
																																												Main.menuMode = 1;
																																											}
																																											if (this.selectedMenu == 2 || (!array2[2] && Main.inputTextEnter))
																																											{
																																												Netplay.serverPort = num30;
																																												Main.autoPass = false;
																																												if (Netplay.SetIP(Main.getIP))
																																												{
																																													Main.menuMode = 10;
																																													Netplay.StartClient();
																																												}
																																												else
																																												{
																																													if (Netplay.SetIP2(Main.getIP))
																																													{
																																														Main.menuMode = 10;
																																														Netplay.StartClient();
																																													}
																																												}
																																											}
																																										}
																																										else
																																										{
																																											if (Main.menuMode == 16)
																																											{
																																												num = 200;
																																												num3 = 60;
																																												array4[1] = 30;
																																												array4[2] = 30;
																																												array4[3] = 30;
																																												array4[4] = 70;
																																												array9[0] = Lang.menu[91];
																																												array[0] = true;
																																												array9[1] = Lang.menu[92];
																																												array9[2] = Lang.menu[93];
																																												array9[3] = Lang.menu[94];
																																												array9[4] = Lang.menu[5];
																																												num4 = 5;
																																												if (this.selectedMenu == 4)
																																												{
																																													Main.menuMode = 6;
																																													Main.PlaySound(11, -1, -1, 1);
																																												}
																																												else
																																												{
																																													if (this.selectedMenu > 0)
																																													{
																																														if (this.selectedMenu == 1)
																																														{
																																															Main.maxTilesX = 4200;
																																															Main.maxTilesY = 1200;
																																														}
																																														else
																																														{
																																															if (this.selectedMenu == 2)
																																															{
																																																Main.maxTilesX = 6400;
																																																Main.maxTilesY = 1800;
																																															}
																																															else
																																															{
																																																Main.maxTilesX = 8400;
																																																Main.maxTilesY = 2400;
																																															}
																																														}
																																														Main.clrInput();
																																														Main.menuMode = 7;
																																														Main.PlaySound(10, -1, -1, 1);
																																														WorldGen.setWorldSize();
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			IL_45BA:
			if (Main.menuMode != num5)
			{
				Main.blockMouse = true;
				Main.menuSkip = 0;
				num4 = 0;
				for (int num31 = 0; num31 < Main.maxMenuItems; num31++)
				{
					this.menuItemScale[num31] = 0.8f;
				}
			}
			if (!Main.mouseLeft)
			{
				Main.blockMouse = true;
			}
			int num32 = this.focusMenu;
			this.selectedMenu = -1;
			this.selectedMenu2 = -1;
			this.focusMenu = -1;
			for (int num33 = 0; num33 < num4; num33++)
			{
				if (array9[num33] != null)
				{
					if (!flag)
					{
						this.grabColorSlider = 0;
						Main.hBar = -1f;
						Main.sBar = -1f;
						Main.lBar = -1f;
					}
					if (flag)
					{
						if (!Main.mouseLeft)
						{
							this.grabColorSlider = 0;
							Main.blockMouse = false;
						}
						int num34 = num9;
						int num35 = Main.screenWidth / 2 - this.hueTexture.Width / 2;
						int num36 = 167;
						Vector3 vector3 = Main.rgbToHsl(Main.selColor);
						float num37 = vector3.X;
						float num38 = vector3.Y;
						float num39 = vector3.Z;
						if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
						{
							Main.hBar = num37;
							Main.sBar = num38;
							Main.lBar = num39;
						}
						else
						{
							num37 = Main.hBar;
							num38 = Main.sBar;
							num39 = Main.lBar;
						}
						Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num35, (float)num34), Color.White);
						Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num35 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num34 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
						if (((Main.mouseX > num35 - 4 && Main.mouseX < num35 + this.hueTexture.Width + 4 && Main.mouseY > num34 - 4 && Main.mouseY < num34 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 1;
							num37 = (float)(Main.mouseX - num35);
							num37 /= (float)this.hueTexture.Width;
							if (num37 < 0f)
							{
								num37 = 0f;
							}
							if (num37 > 1f)
							{
								num37 = 1f;
							}
							Main.hBar = num37;
						}
						num34 += 26;
						Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num35, (float)num34), Color.White);
						for (int num40 = 0; num40 <= num36; num40++)
						{
							float saturation = (float)num40 / (float)num36;
							Color color4 = Main.hslToRgb(num37, saturation, num39);
							Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num35 + num40 + 5), (float)(num34 + 4)), color4);
						}
						Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num35 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num34 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
						if (((Main.mouseX > num35 - 4 && Main.mouseX < num35 + this.hueTexture.Width + 4 && Main.mouseY > num34 - 4 && Main.mouseY < num34 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 2;
							num38 = (float)(Main.mouseX - num35);
							num38 /= (float)this.hueTexture.Width;
							if (num38 < 0f)
							{
								num38 = 0f;
							}
							if (num38 > 1f)
							{
								num38 = 1f;
							}
							Main.sBar = num38;
						}
						num34 += 26;
						Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num35, (float)num34), Color.White);
						float num41 = 0.15f;
						for (int num42 = 0; num42 <= num36; num42++)
						{
							float luminosity = (float)num42 / (float)num36;
							Color color5 = Main.hslToRgb(num37, num38, luminosity);
							Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num35 + num42 + 5), (float)(num34 + 4)), color5);
						}
						Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num35 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - num41) / (1f - num41)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num34 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Color.White);
						if (((Main.mouseX > num35 - 4 && Main.mouseX < num35 + this.hueTexture.Width + 4 && Main.mouseY > num34 - 4 && Main.mouseY < num34 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 3;
							num39 = (float)(Main.mouseX - num35);
							num39 /= (float)this.hueTexture.Width;
							if (num39 < 0f)
							{
								num39 = 0f;
							}
							if (num39 > 1f)
							{
								num39 = 1f;
							}
							num39 = num39 * (1f - num41) + num41;
							Main.lBar = num39;
						}
						Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
					}
					else
					{
						if (flag)
						{
							string text6 = "";
							for (int num43 = 0; num43 < 6; num43++)
							{
								int num44 = num9;
								int num45 = 370 + Main.screenWidth / 2 - 400;
								if (num43 == 0)
								{
									text6 = Lang.menu[95];
								}
								if (num43 == 1)
								{
									text6 = Lang.menu[96];
									num44 += 30;
								}
								if (num43 == 2)
								{
									text6 = Lang.menu[97];
									num44 += 60;
								}
								if (num43 == 3)
								{
									text6 = string.Concat(Main.selColor.R);
									num45 += 90;
								}
								if (num43 == 4)
								{
									text6 = string.Concat(Main.selColor.G);
									num45 += 90;
									num44 += 30;
								}
								if (num43 == 5)
								{
									text6 = string.Concat(Main.selColor.B);
									num45 += 90;
									num44 += 60;
								}
								for (int num46 = 0; num46 < 5; num46++)
								{
									Color color6 = Color.Black;
									if (num46 == 4)
									{
										color6 = color;
										color6.R = (byte)((255 + color6.R) / 2);
										color6.G = (byte)((255 + color6.R) / 2);
										color6.B = (byte)((255 + color6.R) / 2);
									}
									int num47 = 255;
									int num48 = (int)color6.R - (255 - num47);
									if (num48 < 0)
									{
										num48 = 0;
									}
									color6 = new Color((int)((byte)num48), (int)((byte)num48), (int)((byte)num48), (int)((byte)num47));
									int num49 = 0;
									int num50 = 0;
									if (num46 == 0)
									{
										num49 = -2;
									}
									if (num46 == 1)
									{
										num49 = 2;
									}
									if (num46 == 2)
									{
										num50 = -2;
									}
									if (num46 == 3)
									{
										num50 = 2;
									}
									Main.spriteBatch.DrawString(Main.fontDeathText, text6, new Vector2((float)(num45 + num49), (float)(num44 + num50)), color6, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
								}
							}
							bool flag6 = false;
							for (int num51 = 0; num51 < 2; num51++)
							{
								for (int num52 = 0; num52 < 3; num52++)
								{
									int num53 = num9 + num52 * 30 - 12;
									int num54 = 360 + Main.screenWidth / 2 - 400;
									float scale = 0.9f;
									if (num51 == 0)
									{
										num54 -= 70;
										num53 += 2;
									}
									else
									{
										num54 -= 40;
									}
									text6 = "-";
									if (num51 == 1)
									{
										text6 = "+";
									}
									Vector2 vector4 = new Vector2(24f, 24f);
									int num55 = 142;
									if (Main.mouseX > num54 && (float)Main.mouseX < (float)num54 + vector4.X && Main.mouseY > num53 + 13 && (float)Main.mouseY < (float)(num53 + 13) + vector4.Y)
									{
										if (Main.focusColor != (num51 + 1) * (num52 + 10))
										{
											Main.PlaySound(12, -1, -1, 1);
										}
										Main.focusColor = (num51 + 1) * (num52 + 10);
										flag6 = true;
										num55 = 255;
										if (Main.mouseLeft)
										{
											if (Main.colorDelay <= 1)
											{
												if (Main.colorDelay == 0)
												{
													Main.colorDelay = 40;
												}
												else
												{
													Main.colorDelay = 3;
												}
												int num56 = num51;
												if (num51 == 0)
												{
													num56 = -1;
													if (Main.selColor.R + Main.selColor.G + Main.selColor.B <= 150)
													{
														num56 = 0;
													}
												}
												if (num52 == 0 && (int)Main.selColor.R + num56 >= 0 && (int)Main.selColor.R + num56 <= 255)
												{
													Main.selColor.R = (byte)((int)Main.selColor.R + num56);
												}
												if (num52 == 1 && (int)Main.selColor.G + num56 >= 0 && (int)Main.selColor.G + num56 <= 255)
												{
													Main.selColor.G = (byte)((int)Main.selColor.G + num56);
												}
												if (num52 == 2 && (int)Main.selColor.B + num56 >= 0 && (int)Main.selColor.B + num56 <= 255)
												{
													Main.selColor.B = (byte)((int)Main.selColor.B + num56);
												}
											}
											Main.colorDelay--;
										}
										else
										{
											Main.colorDelay = 0;
										}
									}
									for (int num57 = 0; num57 < 5; num57++)
									{
										Color color7 = Color.Black;
										if (num57 == 4)
										{
											color7 = color;
											color7.R = (byte)((255 + color7.R) / 2);
											color7.G = (byte)((255 + color7.R) / 2);
											color7.B = (byte)((255 + color7.R) / 2);
										}
										int num58 = (int)color7.R - (255 - num55);
										if (num58 < 0)
										{
											num58 = 0;
										}
										color7 = new Color((int)((byte)num58), (int)((byte)num58), (int)((byte)num58), (int)((byte)num55));
										int num59 = 0;
										int num60 = 0;
										if (num57 == 0)
										{
											num59 = -2;
										}
										if (num57 == 1)
										{
											num59 = 2;
										}
										if (num57 == 2)
										{
											num60 = -2;
										}
										if (num57 == 3)
										{
											num60 = 2;
										}
										Main.spriteBatch.DrawString(Main.fontDeathText, text6, new Vector2((float)(num54 + num59), (float)(num53 + num60)), color7, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
									}
								}
							}
							if (!flag6)
							{
								Main.focusColor = 0;
								Main.colorDelay = 0;
							}
						}
					}
					if (flag3)
					{
						int num61 = 400;
						string text7 = "";
						for (int num62 = 0; num62 < 4; num62++)
						{
							int num63 = num61;
							int num64 = 370 + Main.screenWidth / 2 - 400;
							if (num62 == 0)
							{
								text7 = Lang.menu[52] + ": " + Main.bgScroll;
							}
							for (int num65 = 0; num65 < 5; num65++)
							{
								Color color8 = Color.Black;
								if (num65 == 4)
								{
									color8 = color;
									color8.R = (byte)((255 + color8.R) / 2);
									color8.G = (byte)((255 + color8.R) / 2);
									color8.B = (byte)((255 + color8.R) / 2);
								}
								int num66 = 255;
								int num67 = (int)color8.R - (255 - num66);
								if (num67 < 0)
								{
									num67 = 0;
								}
								color8 = new Color((int)((byte)num67), (int)((byte)num67), (int)((byte)num67), (int)((byte)num66));
								int num68 = 0;
								int num69 = 0;
								if (num65 == 0)
								{
									num68 = -2;
								}
								if (num65 == 1)
								{
									num68 = 2;
								}
								if (num65 == 2)
								{
									num69 = -2;
								}
								if (num65 == 3)
								{
									num69 = 2;
								}
								Main.spriteBatch.DrawString(Main.fontDeathText, text7, new Vector2((float)(num64 + num68), (float)(num63 + num69)), color8, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
							}
						}
						IngameOptions.rightHover = -1;
						if (!Main.mouseLeft)
						{
							IngameOptions.rightLock = -1;
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num61 + 12));
						float num70 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, (float)Main.bgScroll / 100f);
						if (IngameOptions.inBar || IngameOptions.rightLock == 2)
						{
							IngameOptions.rightHover = 2;
							if (Main.mouseLeft && IngameOptions.rightLock == 2)
							{
								Main.bgScroll = (int)(num70 * 100f);
								Main.caveParrallax = 1f - (float)Main.bgScroll / 500f;
							}
						}
						if (IngameOptions.rightHover != -1)
						{
							IngameOptions.rightLock = IngameOptions.rightHover;
						}
					}
					if (flag2)
					{
						int num71 = 400;
						string text8 = "";
						for (int num72 = 0; num72 < 6; num72++)
						{
							int num73 = num71;
							int num74 = 370 + Main.screenWidth / 2 - 400;
							switch (num72)
							{
							case 0:
								text8 = Lang.menu[98];
								break;
							case 1:
								text8 = Lang.menu[99];
								num73 += 30;
								break;
							case 2:
								text8 = Lang.menu[119];
								num73 += 60;
								break;
							case 3:
								text8 = Math.Round((double)(Main.soundVolume * 100f)) + "%";
								num74 += 90;
								break;
							case 4:
								text8 = Math.Round((double)(Main.musicVolume * 100f)) + "%";
								num74 += 90;
								num73 += 30;
								break;
							case 5:
								text8 = Math.Round((double)(Main.ambientVolume * 100f)) + "%";
								num74 += 90;
								num73 += 60;
								break;
							}
							Color textColor = color;
							textColor.R = (byte)((255 + textColor.R) / 2);
							textColor.G = (byte)((255 + textColor.R) / 2);
							textColor.B = (byte)((255 + textColor.R) / 2);
							int num75 = 255;
							int num76 = (int)textColor.R - (255 - num75);
							if (num76 < 0)
							{
								num76 = 0;
							}
							textColor = new Color((int)((byte)num76), (int)((byte)num76), (int)((byte)num76), (int)((byte)num75));
							Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontDeathText, text8, (float)num74, (float)num73, textColor, Color.Black, Vector2.Zero, 0.5f);
						}
						IngameOptions.rightHover = -1;
						if (!Main.mouseLeft)
						{
							IngameOptions.rightLock = -1;
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num71 - 18 + 30));
						float num77 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.soundVolume);
						if (IngameOptions.inBar || IngameOptions.rightLock == 2)
						{
							IngameOptions.rightHover = 2;
							if (Main.mouseLeft && IngameOptions.rightLock == 2)
							{
								Main.soundVolume = num77;
							}
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num71 - 18 + 60));
						float num78 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.musicVolume);
						if (IngameOptions.inBar || IngameOptions.rightLock == 3)
						{
							IngameOptions.rightHover = 3;
							if (Main.mouseLeft && IngameOptions.rightLock == 3)
							{
								Main.musicVolume = num78;
							}
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num71 - 18 + 90));
						float num79 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.ambientVolume);
						if (IngameOptions.inBar || IngameOptions.rightLock == 4)
						{
							IngameOptions.rightHover = 4;
							if (Main.mouseLeft && IngameOptions.rightLock == 4)
							{
								Main.ambientVolume = num79;
							}
						}
						if (IngameOptions.rightHover != -1)
						{
							IngameOptions.rightLock = IngameOptions.rightHover;
						}
					}
					for (int num80 = 0; num80 < 5; num80++)
					{
						Color color9 = Color.Black;
						if (num80 == 4)
						{
							switch (array6[num33])
							{
							case 0:
								color9 = color;
								break;
							case 1:
								color9 = Main.mcColor;
								break;
							case 2:
								color9 = Main.hcColor;
								break;
							case 3:
								color9 = Main.highVersionColor;
								break;
							case 4:
							case 5:
							case 6:
								color9 = Main.errorColor;
								break;
							default:
								color9 = color;
								break;
							}
							color9.R = (byte)((255 + color9.R) / 2);
							color9.G = (byte)((255 + color9.G) / 2);
							color9.B = (byte)((255 + color9.B) / 2);
						}
						int num81 = (int)(255f * (this.menuItemScale[num33] * 2f - 1f));
						if (array[num33])
						{
							num81 = 255;
						}
						int num82 = (int)color9.R - (255 - num81);
						if (num82 < 0)
						{
							num82 = 0;
						}
						int num83 = (int)color9.G - (255 - num81);
						if (num83 < 0)
						{
							num83 = 0;
						}
						int num84 = (int)color9.B - (255 - num81);
						if (num84 < 0)
						{
							num84 = 0;
						}
						if (num32 == num33 && num80 == 4)
						{
							float num85 = (float)num81 / 255f;
							num82 = (int)((float)num82 * (1f - num85) + 255f * num85);
							num83 = (int)((float)num83 * (1f - num85) + 215f * num85);
							num84 = (int)((float)num84 * (1f - num85) + 0f * num85);
						}
						color9 = new Color((int)((byte)num82), (int)((byte)num83), (int)((byte)num84), (int)((byte)num81));
						if (array3[num33])
						{
							if (num80 == 4)
							{
								color9.R = (byte)((int)(color9.R * Main.mouseTextColor) / 300);
								color9.G = (byte)((int)(color9.G * Main.mouseTextColor) / 300);
								color9.B = (byte)((int)(color9.B * Main.mouseTextColor) / 300);
								color9.A = (byte)((int)(color9.A * Main.mouseTextColor) / 300);
							}
							else
							{
								color9.A -= (byte)(Main.mouseTextColor / 5);
							}
						}
						int num86 = 0;
						int num87 = 0;
						if (num80 == 0)
						{
							num86 = -2;
						}
						if (num80 == 1)
						{
							num86 = 2;
						}
						if (num80 == 2)
						{
							num87 = -2;
						}
						if (num80 == 3)
						{
							num87 = 2;
						}
						Vector2 origin = Main.fontDeathText.MeasureString(array9[num33]);
						origin.X *= 0.5f;
						origin.Y *= 0.5f;
						float num88 = this.menuItemScale[num33];
						if (Main.menuMode == 15 && num33 == 0)
						{
							num88 *= 0.35f;
						}
						else
						{
							if (Main.netMode == 2)
							{
								num88 *= 0.5f;
							}
						}
						num88 *= array7[num33];
						if (!array8[num33])
						{
							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num33], new Vector2((float)(num2 + num86 + array5[num33]), (float)(num + num3 * num33 + num87) + origin.Y * array7[num33] + (float)array4[num33]), color9, 0f, origin, num88, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num33], new Vector2((float)(num2 + num86 + array5[num33]), (float)(num + num3 * num33 + num87) + origin.Y * array7[num33] + (float)array4[num33]), color9, 0f, new Vector2(0f, origin.Y), num88, SpriteEffects.None, 0f);
						}
					}
					if (!array8[num33])
					{
						int num89 = 0;
						if (this.menuWide[num33])
						{
							num89 = 14;
						}
						this.menuWide[num33] = false;
						if ((float)Main.mouseX > (float)num2 - (float)(array9[num33].Length * 10) * array7[num33] + (float)array5[num33] - (float)num89 && (float)Main.mouseX < (float)num2 + (float)(array9[num33].Length * 10) * array7[num33] + (float)array5[num33] + (float)num89 && Main.mouseY > num + num3 * num33 + array4[num33] && (float)Main.mouseY < (float)(num + num3 * num33 + array4[num33]) + 50f * array7[num33] && Main.hasFocus)
						{
							this.focusMenu = num33;
							if (array[num33] || array2[num33])
							{
								this.focusMenu = -1;
							}
							else
							{
								if (num32 != this.focusMenu)
								{
									Main.PlaySound(12, -1, -1, 1);
								}
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									this.selectedMenu = num33;
								}
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									this.selectedMenu2 = num33;
								}
							}
						}
					}
					else
					{
						if (Main.mouseX > num2 + array5[num33] && (float)Main.mouseX < (float)num2 + (float)(array9[num33].Length * 20) * array7[num33] + (float)array5[num33] && Main.mouseY > num + num3 * num33 + array4[num33] && (float)Main.mouseY < (float)(num + num3 * num33 + array4[num33]) + 50f * array7[num33] && Main.hasFocus)
						{
							this.focusMenu = num33;
							if (array[num33] || array2[num33])
							{
								this.focusMenu = -1;
							}
							else
							{
								if (num32 != this.focusMenu)
								{
									Main.PlaySound(12, -1, -1, 1);
								}
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									this.selectedMenu = num33;
								}
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									this.selectedMenu2 = num33;
								}
							}
						}
					}
				}
			}
			for (int num90 = 0; num90 < Main.maxMenuItems; num90++)
			{
				if (num90 == this.focusMenu)
				{
					if (this.menuItemScale[num90] < 1f)
					{
						this.menuItemScale[num90] += 0.02f;
					}
					if (this.menuItemScale[num90] > 1f)
					{
						this.menuItemScale[num90] = 1f;
					}
				}
				else
				{
					if ((double)this.menuItemScale[num90] > 0.8)
					{
						this.menuItemScale[num90] -= 0.02f;
					}
				}
			}
			if (num6 >= 0 && num6 <= Main.numLoadPlayers)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				Main.loadPlayer[num6].PlayerFrame();
				Main.loadPlayer[num6].position.X = (float)num7 + Main.screenPosition.X;
				Main.loadPlayer[num6].position.Y = (float)num8 + Main.screenPosition.Y;
				this.DrawPlayer(Main.loadPlayer[num6]);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
			}
			for (int num91 = 0; num91 < 5; num91++)
			{
				Color color10 = Color.Black;
				if (num91 == 4)
				{
					color10 = color;
					color10.R = (byte)((255 + color10.R) / 2);
					color10.G = (byte)((255 + color10.R) / 2);
					color10.B = (byte)((255 + color10.R) / 2);
				}
				color10.A = (byte)((float)color10.A * 0.3f);
				int num92 = 0;
				int num93 = 0;
				if (num91 == 0)
				{
					num92 = -2;
				}
				if (num91 == 1)
				{
					num92 = 2;
				}
				if (num91 == 2)
				{
					num93 = -2;
				}
				if (num91 == 3)
				{
					num93 = 2;
				}
				string text9 = "Copyright © 2014 Re-Logic";
				Vector2 origin2 = Main.fontMouseText.MeasureString(text9);
				origin2.X *= 0.5f;
				origin2.Y *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, text9, new Vector2((float)Main.screenWidth - origin2.X + (float)num92 - 10f, (float)Main.screenHeight - origin2.Y + (float)num93 - 2f), color10, 0f, origin2, 1f, SpriteEffects.None, 0f);
			}
			for (int num94 = 0; num94 < 5; num94++)
			{
				Color color11 = Color.Black;
				if (num94 == 4)
				{
					color11 = color;
					color11.R = (byte)((255 + color11.R) / 2);
					color11.G = (byte)((255 + color11.R) / 2);
					color11.B = (byte)((255 + color11.R) / 2);
				}
				color11.A = (byte)((float)color11.A * 0.3f);
				int num95 = 0;
				int num96 = 0;
				if (num94 == 0)
				{
					num95 = -2;
				}
				if (num94 == 1)
				{
					num95 = 2;
				}
				if (num94 == 2)
				{
					num96 = -2;
				}
				if (num94 == 3)
				{
					num96 = 2;
				}
				Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
				origin3.X *= 0.5f;
				origin3.Y *= 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num95 + 10f, (float)Main.screenHeight - origin3.Y + (float)num96 - 2f), color11, 0f, origin3, 1f, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(Main.cursorTexture, new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), new Rectangle?(new Rectangle(0, 0, Main.cursorTexture.Width, Main.cursorTexture.Height)), new Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f)), 0f, default(Vector2), Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
			Main.spriteBatch.Draw(Main.cursorTexture, new Vector2((float)Main.mouseX, (float)Main.mouseY), new Rectangle?(new Rectangle(0, 0, Main.cursorTexture.Width, Main.cursorTexture.Height)), Main.cursorColor, 0f, default(Vector2), Main.cursorScale, SpriteEffects.None, 0f);
			if (Main.fadeCounter > 0)
			{
				Color white = Color.White;
				Main.fadeCounter--;
				float num97 = (float)Main.fadeCounter / 75f * 255f;
				byte b2 = (byte)num97;
				white = new Color((int)b2, (int)b2, (int)b2, (int)b2);
				Main.spriteBatch.Draw(Main.fadeTexture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
			}
			Main.spriteBatch.End();
			if (Main.mouseLeft)
			{
				Main.mouseLeftRelease = false;
			}
			else
			{
				Main.mouseLeftRelease = true;
			}
			if (Main.mouseRight)
			{
				Main.mouseRightRelease = false;
				return;
			}
			Main.mouseRightRelease = true;
		}
		public static void CursorColor()
		{
			Main.cursorAlpha += (float)Main.cursorColorDirection * 0.015f;
			if (Main.cursorAlpha >= 1f)
			{
				Main.cursorAlpha = 1f;
				Main.cursorColorDirection = -1;
			}
			if ((double)Main.cursorAlpha <= 0.6)
			{
				Main.cursorAlpha = 0.6f;
				Main.cursorColorDirection = 1;
			}
			float num = Main.cursorAlpha * 0.3f + 0.7f;
			byte r = (byte)((float)Main.mouseColor.R * Main.cursorAlpha);
			byte g = (byte)((float)Main.mouseColor.G * Main.cursorAlpha);
			byte b = (byte)((float)Main.mouseColor.B * Main.cursorAlpha);
			byte b2 = (byte)(255f * num);
			Main.cursorColor = new Color((int)r, (int)g, (int)b, (int)b2);
			Main.cursorScale = Main.cursorAlpha * 0.3f + 0.7f + 0.1f;
		}
		protected void DrawSplash(GameTime gameTime)
		{
			base.GraphicsDevice.Clear(Color.Black);
			base.Draw(gameTime);
			Main.spriteBatch.Begin();
			this.splashCounter++;
			Color white = Color.White;
			byte b = 0;
			if (this.splashCounter <= 75)
			{
				float num = (float)this.splashCounter / 75f * 255f;
				b = (byte)num;
			}
			else
			{
				if (this.splashCounter <= 125)
				{
					b = 255;
				}
				else
				{
					if (this.splashCounter <= 200)
					{
						int num2 = 125 - this.splashCounter;
						float num3 = (float)num2 / 75f * 255f;
						b = (byte)num3;
					}
					else
					{
						Main.showSplash = false;
						Main.fadeCounter = 75;
					}
				}
			}
			white = new Color((int)b, (int)b, (int)b, (int)b);
			Main.spriteBatch.Draw(Main.loTexture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
			Main.spriteBatch.End();
		}
		protected void DrawBackground()
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - Main.gfxQuality) + 140f * Main.gfxQuality);
			int num2 = (int)(200f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			int num3 = 128;
			Vector2 value = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				value = default(Vector2);
			}
			float num4 = 0.9f;
			float num5 = num4;
			float num6 = num4;
			float num7 = num4;
			float num8 = 0f;
			if (Main.bloodTiles > Main.evilTiles && Main.bloodTiles > Main.holyTiles)
			{
				num8 = (float)Main.bloodTiles / 800f;
			}
			else
			{
				if (Main.holyTiles > Main.evilTiles)
				{
					num8 = (float)Main.holyTiles / 800f;
				}
				else
				{
					if (Main.evilTiles > Main.holyTiles)
					{
						num8 = (float)Main.evilTiles / 800f;
					}
				}
			}
			if (num8 > 1f)
			{
				num8 = 1f;
			}
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			float num9 = (float)((double)Main.screenPosition.Y - Main.worldSurface * 16.0) / 300f;
			if (num9 < 0f)
			{
				num9 = 0f;
			}
			else
			{
				if (num9 > 1f)
				{
					num9 = 1f;
				}
			}
			float num10 = 1f * (1f - num9) + num5 * num9;
			Lighting.brightness = Lighting.defBrightness * (1f - num9) + 1f * num9;
			float num11 = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16.0) / 300f;
			if (num11 < 0f)
			{
				num11 = 0f;
			}
			else
			{
				if (num11 > 1f)
				{
					num11 = 1f;
				}
			}
			if (Main.bloodTiles > Main.evilTiles && Main.bloodTiles > Main.holyTiles)
			{
				num5 = 1f * num8 + num5 * (1f - num8);
				num6 = 0.55f * num8 + num6 * (1f - num8);
				num7 = 0.5f * num8 + num7 * (1f - num8);
			}
			else
			{
				if (Main.evilTiles > 0)
				{
					num5 = 0.8f * num8 + num5 * (1f - num8);
					num6 = 0.75f * num8 + num6 * (1f - num8);
					num7 = 1.1f * num8 + num7 * (1f - num8);
				}
				else
				{
					if (Main.holyTiles > 0)
					{
						num5 = 1f * num8 + num5 * (1f - num8);
						num6 = 0.7f * num8 + num6 * (1f - num8);
						num7 = 0.9f * num8 + num7 * (1f - num8);
					}
				}
			}
			num5 = 1f * (num10 - num11) + num5 * num11;
			num6 = 1f * (num10 - num11) + num6 * num11;
			num7 = 1f * (num10 - num11) + num7 * num11;
			int num12 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int num13;
			if (num12 <= Main.caveBackX[0])
			{
				num13 = Main.caveBackStyle[0];
			}
			else
			{
				if (num12 <= Main.treeX[1])
				{
					num13 = Main.caveBackStyle[1];
				}
				else
				{
					if (num12 <= Main.treeX[2])
					{
						num13 = Main.caveBackStyle[2];
					}
					else
					{
						num13 = Main.caveBackStyle[3];
					}
				}
			}
			num13 += 3;
			if (Main.snowTiles > 300 && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
			{
				num13 = 1;
			}
			if (Main.jungleTiles > 80)
			{
				if (num13 == 1)
				{
					if (Main.jungleTiles > Main.snowTiles)
					{
						num13 = 11;
					}
				}
				else
				{
					num13 = 11;
				}
			}
			if (Main.shroomTiles > 200)
			{
				num13 = 2;
			}
			if (num13 != Main.ugBack)
			{
				Main.oldUgBack = Main.ugBack;
				Main.ugBack = num13;
				Main.ugBackTransition = 1f;
			}
			if (Main.ugBackTransition > 0f)
			{
				Main.ugBackTransition -= 0.25f;
			}
			if (Main.ugBackTransition < 0f)
			{
				Main.ugBackTransition = 0f;
			}
			int[] array = new int[6];
			int[] array2 = new int[6];
			for (int i = 0; i < 2; i++)
			{
				int num14 = Main.ugBack;
				if (i == 1)
				{
					num14 = Main.oldUgBack;
				}
				int[] array3 = new int[6];
				if (num14 == 0)
				{
					array3[0] = 1;
					array3[1] = 2;
					array3[2] = 4;
					array3[3] = 3;
					array3[4] = 6;
					array3[5] = 5;
				}
				else
				{
					if (num14 == 1)
					{
						if (Main.iceBackStyle == 0)
						{
							array3[1] = 33;
							array3[3] = 32;
							array3[0] = 40;
							array3[2] = 34;
						}
						else
						{
							if (Main.iceBackStyle == 1)
							{
								array3[1] = 118;
								array3[3] = 117;
								array3[0] = 160;
								array3[2] = 161;
							}
							else
							{
								if (Main.iceBackStyle == 2)
								{
									array3[1] = 165;
									array3[3] = 167;
									array3[0] = 164;
									array3[2] = 166;
								}
								else
								{
									array3[1] = 120;
									array3[3] = 119;
									array3[0] = 162;
									array3[2] = 163;
								}
							}
						}
						array3[4] = array3[3];
					}
					else
					{
						if (num14 == 2)
						{
							array3[0] = 62;
							array3[1] = 63;
							array3[2] = 64;
							array3[3] = 65;
							array3[4] = 143 + Main.hellBackStyle;
						}
						else
						{
							if (num14 == 3)
							{
								array3[0] = 66;
								array3[1] = 67;
								array3[2] = 68;
								array3[3] = 69;
								array3[4] = 128 + Main.hellBackStyle;
							}
							else
							{
								if (num14 == 4)
								{
									array3[0] = 70;
									array3[1] = 71;
									array3[2] = 68;
									array3[3] = 72;
									array3[4] = 128 + Main.hellBackStyle;
								}
								else
								{
									if (num14 == 5)
									{
										array3[0] = 73;
										array3[1] = 74;
										array3[2] = 75;
										array3[3] = 76;
										array3[4] = 131 + Main.hellBackStyle;
									}
									else
									{
										if (num14 == 6)
										{
											array3[0] = 77;
											array3[1] = 78;
											array3[2] = 79;
											array3[3] = 80;
											array3[4] = 134 + Main.hellBackStyle;
										}
										else
										{
											if (num14 == 7)
											{
												array3[0] = 77;
												array3[1] = 81;
												array3[2] = 79;
												array3[3] = 82;
												array3[4] = 134 + Main.hellBackStyle;
											}
											else
											{
												if (num14 == 8)
												{
													array3[0] = 83;
													array3[1] = 84;
													array3[2] = 85;
													array3[3] = 86;
													array3[4] = 137 + Main.hellBackStyle;
												}
												else
												{
													if (num14 == 9)
													{
														array3[0] = 83;
														array3[1] = 87;
														array3[2] = 88;
														array3[3] = 89;
														array3[4] = 137 + Main.hellBackStyle;
													}
													else
													{
														if (num14 == 10)
														{
															array3[0] = 121;
															array3[1] = 122;
															array3[2] = 123;
															array3[3] = 124;
															array3[4] = 140 + Main.hellBackStyle;
														}
														else
														{
															if (num14 == 11)
															{
																if (Main.jungleBackStyle == 0)
																{
																	array3[0] = 153;
																	array3[1] = 147;
																	array3[2] = 148;
																	array3[3] = 149;
																	array3[4] = 150 + Main.hellBackStyle;
																}
																else
																{
																	array3[0] = 146;
																	array3[1] = 154;
																	array3[2] = 155;
																	array3[3] = 156;
																	array3[4] = 157 + Main.hellBackStyle;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				if (Main.hellBackStyle == 0)
				{
					array3[5] = 125;
				}
				if (Main.hellBackStyle == 1)
				{
					array3[5] = 126;
				}
				if (Main.hellBackStyle == 2)
				{
					array3[5] = 127;
				}
				this.LoadBackground(array3[0]);
				this.LoadBackground(array3[1]);
				this.LoadBackground(array3[2]);
				this.LoadBackground(array3[3]);
				this.LoadBackground(array3[4]);
				this.LoadBackground(array3[5]);
				if (i == 0)
				{
					for (int j = 0; j < 6; j++)
					{
						array[j] = array3[j];
					}
				}
				else
				{
					for (int k = 0; k < 6; k++)
					{
						array2[k] = array3[k];
					}
				}
			}
			Lighting.defBrightness = 1.2f * (1f - num11) + 1f * num11;
			this.bgParrallax = (double)Main.caveParrallax;
			this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParrallax, (double)num3) - (double)(num3 / 2)) - (int)value.X;
			this.bgLoops = Main.screenWidth / num3 + 2;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16 - 16) - Main.screenPosition.Y + 16f);
			for (int l = 0; l < this.bgLoops; l++)
			{
				for (int m = 0; m < num3 / 16; m++)
				{
					float num15 = (float)this.bgStart + Main.screenPosition.X;
					num15 = -(float)Math.IEEERemainder((double)num15, 16.0);
					num15 = (float)Math.Round((double)num15);
					int num16 = (int)num15;
					if (num16 == -8)
					{
						num16 = 8;
					}
					float num17 = (float)(this.bgStart + num3 * l + m * 16 + 8);
					float num18 = (float)this.bgTop;
					Color color = Lighting.GetColor((int)((num17 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num18) / 16f));
					color.R = (byte)((float)color.R * num5);
					color.G = (byte)((float)color.G * num6);
					color.B = (byte)((float)color.B * num7);
					Main.spriteBatch.Draw(Main.backgroundTexture[array[0]], new Vector2((float)(this.bgStart + num3 * l + 16 * m + num16), (float)this.bgTop) + value, new Rectangle?(new Rectangle(16 * m + num16 + 16, 0, 16, 16)), color);
					if (Main.ugBackTransition > 0f)
					{
						Color color2 = color;
						color2.R = (byte)((float)color2.R * Main.ugBackTransition);
						color2.G = (byte)((float)color2.G * Main.ugBackTransition);
						color2.B = (byte)((float)color2.B * Main.ugBackTransition);
						color2.A = (byte)((float)color2.A * Main.ugBackTransition);
						Main.spriteBatch.Draw(Main.backgroundTexture[array2[0]], new Vector2((float)(this.bgStart + num3 * l + 16 * m + num16), (float)this.bgTop) + value, new Rectangle?(new Rectangle(16 * m + num16 + 16, 0, 16, 16)), color2);
					}
				}
			}
			double num19 = (double)(Main.maxTilesY - 230);
			double num20 = (double)((int)((num19 - Main.worldSurface) / 6.0) * 6);
			num19 = Main.worldSurface + num20 - 5.0;
			bool flag = false;
			bool flag2 = false;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
			if (Main.worldSurface * 16.0 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight + (float)Main.offScreenRange))
			{
				this.bgParrallax = (double)Main.caveParrallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParrallax, (double)num3) - (double)(num3 / 2)) - (int)value.X;
				this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num3 + 2;
				if (Main.worldSurface * 16.0 < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (Main.rockLayer * 16.0 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(Main.rockLayer * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag2 = true;
				}
				float num21 = (float)this.bgStart + Main.screenPosition.X;
				num21 = -(float)Math.IEEERemainder((double)num21, 16.0);
				num21 = (float)Math.Round((double)num21);
				int num22 = (int)num21;
				if (num22 == -8)
				{
					num22 = 8;
				}
				for (int n = 0; n < this.bgLoops; n++)
				{
					for (int num23 = 0; num23 < this.bgLoopsY; num23++)
					{
						for (int num24 = 0; num24 < num3 / 16; num24++)
						{
							for (int num25 = 0; num25 < 6; num25++)
							{
								float num26 = (float)(this.bgStartY + num23 * 96 + num25 * 16 + 8);
								float num27 = (float)(this.bgStart + num3 * n + num24 * 16 + 8);
								int num28 = (int)((num27 + Main.screenPosition.X) / 16f);
								int num29 = (int)((num26 + Main.screenPosition.Y) / 16f);
								Color color3 = Lighting.GetColor(num28, num29);
								if (Main.tile[num28, num29] == null)
								{
									Main.tile[num28, num29] = new Tile();
								}
								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
								{
									if (((int)color3.R > num || (double)color3.G > (double)num * 1.1 || (double)color3.B > (double)num * 1.2) && !Main.tile[num28, num29].active() && Main.wallLight[(int)Main.tile[num28, num29].wall] && Main.ugBackTransition == 0f)
									{
										try
										{
											for (int num30 = 0; num30 < 9; num30++)
											{
												int num31 = 0;
												int num32 = 0;
												int width = 4;
												int height = 4;
												Color color4 = color3;
												Color color5 = color3;
												if (num30 == 0 && !Main.tile[num28 - 1, num29 - 1].active())
												{
													color5 = Lighting.GetColor(num28 - 1, num29 - 1);
												}
												if (num30 == 1)
												{
													width = 8;
													num31 = 4;
													if (!Main.tile[num28, num29 - 1].active())
													{
														color5 = Lighting.GetColor(num28, num29 - 1);
													}
												}
												if (num30 == 2)
												{
													if (!Main.tile[num28 + 1, num29 - 1].active())
													{
														color5 = Lighting.GetColor(num28 + 1, num29 - 1);
													}
													if (Main.tile[num28 + 1, num29 - 1] == null)
													{
														Main.tile[num28 + 1, num29 - 1] = new Tile();
													}
													num31 = 12;
												}
												if (num30 == 3)
												{
													if (!Main.tile[num28 - 1, num29].active())
													{
														color5 = Lighting.GetColor(num28 - 1, num29);
													}
													height = 8;
													num32 = 4;
												}
												if (num30 == 4)
												{
													width = 8;
													height = 8;
													num31 = 4;
													num32 = 4;
												}
												if (num30 == 5)
												{
													num31 = 12;
													num32 = 4;
													height = 8;
													if (!Main.tile[num28 + 1, num29].active())
													{
														color5 = Lighting.GetColor(num28 + 1, num29);
													}
												}
												if (num30 == 6)
												{
													if (!Main.tile[num28 - 1, num29 + 1].active())
													{
														color5 = Lighting.GetColor(num28 - 1, num29 + 1);
													}
													num32 = 12;
												}
												if (num30 == 7)
												{
													width = 8;
													height = 4;
													num31 = 4;
													num32 = 12;
													if (!Main.tile[num28, num29 + 1].active())
													{
														color5 = Lighting.GetColor(num28, num29 + 1);
													}
												}
												if (num30 == 8)
												{
													if (!Main.tile[num28 + 1, num29 + 1].active())
													{
														color5 = Lighting.GetColor(num28 + 1, num29 + 1);
													}
													num31 = 12;
													num32 = 12;
												}
												color4.R = (byte)((color3.R + color5.R) / 2);
												color4.G = (byte)((color3.G + color5.G) / 2);
												color4.B = (byte)((color3.B + color5.B) / 2);
												color4.R = (byte)((float)color4.R * num5);
												color4.G = (byte)((float)color4.G * num6);
												color4.B = (byte)((float)color4.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num31 + num22), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num23 + 16 * num25 + num32)) + value, new Rectangle?(new Rectangle(16 * num24 + num31 + num22 + 16, 16 * num25 + num32, width, height)), color4);
												if (Main.ugBackTransition > 0f)
												{
													Color color6 = color4;
													color6.R = (byte)((float)color6.R * Main.ugBackTransition);
													color6.G = (byte)((float)color6.G * Main.ugBackTransition);
													color6.B = (byte)((float)color6.B * Main.ugBackTransition);
													color6.A = (byte)((float)color6.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num31 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25 + num32)) + value, new Rectangle?(new Rectangle(16 * num24 + num31 + num22 + 16, 16 * num25 + num32, width, height)), color6);
												}
											}
											goto IL_1815;
										}
										catch
										{
											color3.R = (byte)((float)color3.R * num5);
											color3.G = (byte)((float)color3.G * num6);
											color3.B = (byte)((float)color3.B * num7);
											Main.spriteBatch.Draw(Main.backgroundTexture[array[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num23 + 16 * num25)) + value, new Rectangle?(new Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
											goto IL_1815;
										}
									}
									if (((int)color3.R > num2 || (double)color3.G > (double)num2 * 1.1 || (double)color3.B > (double)num2 * 1.2) && Main.ugBackTransition == 0f)
									{
										for (int num33 = 0; num33 < 4; num33++)
										{
											int num34 = 0;
											int num35 = 0;
											Color color7 = color3;
											Color color8 = color3;
											if (num33 == 0)
											{
												if (Lighting.Brighter(num28, num29 - 1, num28 - 1, num29))
												{
													color8 = Lighting.GetColor(num28 - 1, num29);
												}
												else
												{
													color8 = Lighting.GetColor(num28, num29 - 1);
												}
											}
											if (num33 == 1)
											{
												if (Lighting.Brighter(num28, num29 - 1, num28 + 1, num29))
												{
													color8 = Lighting.GetColor(num28 + 1, num29);
												}
												else
												{
													color8 = Lighting.GetColor(num28, num29 - 1);
												}
												num34 = 8;
											}
											if (num33 == 2)
											{
												if (Lighting.Brighter(num28, num29 + 1, num28 - 1, num29))
												{
													color8 = Lighting.GetColor(num28 - 1, num29);
												}
												else
												{
													color8 = Lighting.GetColor(num28, num29 + 1);
												}
												num35 = 8;
											}
											if (num33 == 3)
											{
												if (Lighting.Brighter(num28, num29 + 1, num28 + 1, num29))
												{
													color8 = Lighting.GetColor(num28 + 1, num29);
												}
												else
												{
													color8 = Lighting.GetColor(num28, num29 + 1);
												}
												num34 = 8;
												num35 = 8;
											}
											color7.R = (byte)((color3.R + color8.R) / 2);
											color7.G = (byte)((color3.G + color8.G) / 2);
											color7.B = (byte)((color3.B + color8.B) / 2);
											color7.R = (byte)((float)color7.R * num5);
											color7.G = (byte)((float)color7.G * num6);
											color7.B = (byte)((float)color7.B * num7);
											Main.spriteBatch.Draw(Main.backgroundTexture[array[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num34 + num22), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num23 + 16 * num25 + num35)) + value, new Rectangle?(new Rectangle(16 * num24 + num34 + num22 + 16, 16 * num25 + num35, 8, 8)), color7);
											if (Main.ugBackTransition > 0f)
											{
												Color color9 = color7;
												color9.R = (byte)((float)color9.R * Main.ugBackTransition);
												color9.G = (byte)((float)color9.G * Main.ugBackTransition);
												color9.B = (byte)((float)color9.B * Main.ugBackTransition);
												color9.A = (byte)((float)color9.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num34 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25 + num35)) + value, new Rectangle?(new Rectangle(16 * num24 + num34 + num22 + 16, 16 * num25 + num35, 8, 8)), color9);
											}
										}
									}
									else
									{
										color3.R = (byte)((float)color3.R * num5);
										color3.G = (byte)((float)color3.G * num6);
										color3.B = (byte)((float)color3.B * num7);
										Main.spriteBatch.Draw(Main.backgroundTexture[array[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num23 + 16 * num25)) + value, new Rectangle?(new Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
										if (Main.ugBackTransition > 0f)
										{
											Color color10 = color3;
											color10.R = (byte)((float)color10.R * Main.ugBackTransition);
											color10.G = (byte)((float)color10.G * Main.ugBackTransition);
											color10.B = (byte)((float)color10.B * Main.ugBackTransition);
											color10.A = (byte)((float)color10.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array2[1]] * num23 + 16 * num25)) + value, new Rectangle?(new Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color10);
										}
									}
								}
								else
								{
									color3.R = (byte)((float)color3.R * num5);
									color3.G = (byte)((float)color3.G * num6);
									color3.B = (byte)((float)color3.B * num7);
									Main.spriteBatch.Draw(Main.backgroundTexture[array[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Main.backgroundHeight[array[1]] * num23 + 16 * num25)) + value, new Rectangle?(new Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
								}
								IL_1815:;
							}
						}
					}
				}
				if (flag2)
				{
					this.bgParrallax = (double)Main.caveParrallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParrallax, (double)num3) - (double)(num3 / 2)) - (int)value.X;
					this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num3 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					if (this.bgTop > -32)
					{
						for (int num36 = 0; num36 < this.bgLoops; num36++)
						{
							for (int num37 = 0; num37 < num3 / 16; num37++)
							{
								float num38 = (float)(this.bgStart + num3 * num36 + num37 * 16 + 8);
								float num39 = (float)this.bgTop;
								Color color11 = Lighting.GetColor((int)((num38 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num39) / 16f));
								color11.R = (byte)((float)color11.R * num5);
								color11.G = (byte)((float)color11.G * num6);
								color11.B = (byte)((float)color11.B * num7);
								Main.spriteBatch.Draw(Main.backgroundTexture[array[2]], new Vector2((float)(this.bgStart + num3 * num36 + 16 * num37 + num22), (float)this.bgTop) + value, new Rectangle?(new Rectangle(16 * num37 + num22 + 16, 0, 16, 16)), color11);
								if (Main.ugBackTransition > 0f)
								{
									Color color12 = color11;
									color12.R = (byte)((float)color12.R * Main.ugBackTransition);
									color12.G = (byte)((float)color12.G * Main.ugBackTransition);
									color12.B = (byte)((float)color12.B * Main.ugBackTransition);
									color12.A = (byte)((float)color12.A * Main.ugBackTransition);
									Main.spriteBatch.Draw(Main.backgroundTexture[array2[2]], new Vector2((float)(this.bgStart + num3 * num36 + 16 * num37 + num22), (float)this.bgTop) + value, new Rectangle?(new Rectangle(16 * num37 + num22 + 16, 0, 16, 16)), color12);
								}
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
			if (Main.rockLayer * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgParrallax = (double)Main.caveParrallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParrallax, (double)num3) - (double)(num3 / 2)) - (int)value.X;
				this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num3 + 2;
				if (Main.rockLayer * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[3]) - (double)Main.backgroundHeight[3]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (num19 * 16.0 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(num19 * 16.0 - (double)Main.screenPosition.Y + 600.0 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag = true;
				}
				float num40 = (float)this.bgStart + Main.screenPosition.X;
				num40 = -(float)Math.IEEERemainder((double)num40, 16.0);
				num40 = (float)Math.Round((double)num40);
				int num41 = (int)num40;
				if (num41 == -8)
				{
					num41 = 8;
				}
				for (int num42 = 0; num42 < this.bgLoops; num42++)
				{
					for (int num43 = 0; num43 < this.bgLoopsY; num43++)
					{
						for (int num44 = 0; num44 < num3 / 16; num44++)
						{
							for (int num45 = 0; num45 < 6; num45++)
							{
								float num46 = (float)(this.bgStartY + num43 * 96 + num45 * 16 + 8);
								float num47 = (float)(this.bgStart + num3 * num42 + num44 * 16 + 8);
								int num48 = (int)((num47 + Main.screenPosition.X) / 16f);
								int num49 = (int)((num46 + Main.screenPosition.Y) / 16f);
								Color color13 = Lighting.GetColor(num48, num49);
								if (Main.tile[num48, num49] == null)
								{
									Main.tile[num48, num49] = new Tile();
								}
								bool flag3 = false;
								if (Main.caveParrallax != 0f)
								{
									if (Main.tile[num48 - 1, num49] == null)
									{
										Main.tile[num48 - 1, num49] = new Tile();
									}
									if (Main.tile[num48 + 1, num49] == null)
									{
										Main.tile[num48 + 1, num49] = new Tile();
									}
									if (Main.wallLight[(int)Main.tile[num48, num49].wall] || Main.wallLight[(int)Main.tile[num48 - 1, num49].wall] || Main.wallLight[(int)Main.tile[num48 + 1, num49].wall])
									{
										flag3 = true;
									}
								}
								else
								{
									if (Main.wallLight[(int)Main.tile[num48, num49].wall])
									{
										flag3 = true;
									}
								}
								if ((flag3 || color13.R == 0 || color13.G == 0 || color13.B == 0) && (color13.R > 0 || color13.G > 0 || color13.B > 0) && (Main.wallLight[(int)Main.tile[num48, num49].wall] || Main.caveParrallax != 0f))
								{
									if (Lighting.lightMode < 2 && color13.R < 230 && color13.G < 230 && color13.B < 230 && Main.ugBackTransition == 0f)
									{
										if (((int)color13.R > num || (double)color13.G > (double)num * 1.1 || (double)color13.B > (double)num * 1.2) && !Main.tile[num48, num49].active())
										{
											for (int num50 = 0; num50 < 9; num50++)
											{
												int num51 = 0;
												int num52 = 0;
												int width2 = 4;
												int height2 = 4;
												Color color14 = color13;
												Color color15 = color13;
												if (num50 == 0 && !Main.tile[num48 - 1, num49 - 1].active())
												{
													color15 = Lighting.GetColor(num48 - 1, num49 - 1);
												}
												if (num50 == 1)
												{
													width2 = 8;
													num51 = 4;
													if (!Main.tile[num48, num49 - 1].active())
													{
														color15 = Lighting.GetColor(num48, num49 - 1);
													}
												}
												if (num50 == 2)
												{
													if (!Main.tile[num48 + 1, num49 - 1].active())
													{
														color15 = Lighting.GetColor(num48 + 1, num49 - 1);
													}
													num51 = 12;
												}
												if (num50 == 3)
												{
													if (!Main.tile[num48 - 1, num49].active())
													{
														color15 = Lighting.GetColor(num48 - 1, num49);
													}
													height2 = 8;
													num52 = 4;
												}
												if (num50 == 4)
												{
													width2 = 8;
													height2 = 8;
													num51 = 4;
													num52 = 4;
												}
												if (num50 == 5)
												{
													num51 = 12;
													num52 = 4;
													height2 = 8;
													if (!Main.tile[num48 + 1, num49].active())
													{
														color15 = Lighting.GetColor(num48 + 1, num49);
													}
												}
												if (num50 == 6)
												{
													if (!Main.tile[num48 - 1, num49 + 1].active())
													{
														color15 = Lighting.GetColor(num48 - 1, num49 + 1);
													}
													num52 = 12;
												}
												if (num50 == 7)
												{
													width2 = 8;
													height2 = 4;
													num51 = 4;
													num52 = 12;
													if (!Main.tile[num48, num49 + 1].active())
													{
														color15 = Lighting.GetColor(num48, num49 + 1);
													}
												}
												if (num50 == 8)
												{
													if (!Main.tile[num48 + 1, num49 + 1].active())
													{
														color15 = Lighting.GetColor(num48 + 1, num49 + 1);
													}
													num51 = 12;
													num52 = 12;
												}
												color14.R = (byte)((color13.R + color15.R) / 2);
												color14.G = (byte)((color13.G + color15.G) / 2);
												color14.B = (byte)((color13.B + color15.B) / 2);
												color14.R = (byte)((float)color14.R * num5);
												color14.G = (byte)((float)color14.G * num6);
												color14.B = (byte)((float)color14.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num51 + num41), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num43 + 16 * num45 + num52)) + value, new Rectangle?(new Rectangle(16 * num44 + num51 + num41 + 16, 16 * num45 + num52, width2, height2)), color14);
												if (Main.ugBackTransition > 0f)
												{
													Color color16 = color14;
													color16.R = (byte)((float)color16.R * Main.ugBackTransition);
													color16.G = (byte)((float)color16.G * Main.ugBackTransition);
													color16.B = (byte)((float)color16.B * Main.ugBackTransition);
													color16.A = (byte)((float)color16.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num51 + num41), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num43 + 16 * num45 + num52)) + value, new Rectangle?(new Rectangle(16 * num44 + num51 + num41 + 16, 16 * num45 + num52, width2, height2)), color16);
												}
											}
										}
										else
										{
											if ((int)color13.R > num2 || (double)color13.G > (double)num2 * 1.1 || (double)color13.B > (double)num2 * 1.2)
											{
												for (int num53 = 0; num53 < 4; num53++)
												{
													int num54 = 0;
													int num55 = 0;
													Color color17 = color13;
													Color color18 = color13;
													if (num53 == 0)
													{
														if (Lighting.Brighter(num48, num49 - 1, num48 - 1, num49))
														{
															color18 = Lighting.GetColor(num48 - 1, num49);
														}
														else
														{
															color18 = Lighting.GetColor(num48, num49 - 1);
														}
													}
													if (num53 == 1)
													{
														if (Lighting.Brighter(num48, num49 - 1, num48 + 1, num49))
														{
															color18 = Lighting.GetColor(num48 + 1, num49);
														}
														else
														{
															color18 = Lighting.GetColor(num48, num49 - 1);
														}
														num54 = 8;
													}
													if (num53 == 2)
													{
														if (Lighting.Brighter(num48, num49 + 1, num48 - 1, num49))
														{
															color18 = Lighting.GetColor(num48 - 1, num49);
														}
														else
														{
															color18 = Lighting.GetColor(num48, num49 + 1);
														}
														num55 = 8;
													}
													if (num53 == 3)
													{
														if (Lighting.Brighter(num48, num49 + 1, num48 + 1, num49))
														{
															color18 = Lighting.GetColor(num48 + 1, num49);
														}
														else
														{
															color18 = Lighting.GetColor(num48, num49 + 1);
														}
														num54 = 8;
														num55 = 8;
													}
													color17.R = (byte)((color13.R + color18.R) / 2);
													color17.G = (byte)((color13.G + color18.G) / 2);
													color17.B = (byte)((color13.B + color18.B) / 2);
													color17.R = (byte)((float)color17.R * num5);
													color17.G = (byte)((float)color17.G * num6);
													color17.B = (byte)((float)color17.B * num7);
													Main.spriteBatch.Draw(Main.backgroundTexture[array[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num54 + num41), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num43 + 16 * num45 + num55)) + value, new Rectangle?(new Rectangle(16 * num44 + num54 + num41 + 16, 16 * num45 + num55, 8, 8)), color17);
													if (Main.ugBackTransition > 0f)
													{
														Color color19 = color17;
														color19.R = (byte)((float)color19.R * Main.ugBackTransition);
														color19.G = (byte)((float)color19.G * Main.ugBackTransition);
														color19.B = (byte)((float)color19.B * Main.ugBackTransition);
														color19.A = (byte)((float)color19.A * Main.ugBackTransition);
														Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num54 + num41), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num43 + 16 * num45 + num55)) + value, new Rectangle?(new Rectangle(16 * num44 + num54 + num41 + 16, 16 * num45 + num55, 8, 8)), color19);
													}
												}
											}
											else
											{
												color13.R = (byte)((float)color13.R * num5);
												color13.G = (byte)((float)color13.G * num6);
												color13.B = (byte)((float)color13.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num41), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num43 + 16 * num45)) + value, new Rectangle?(new Rectangle(16 * num44 + num41 + 16, 16 * num45, 16, 16)), color13);
												if (Main.ugBackTransition > 0f)
												{
													Color color20 = color13;
													color20.R = (byte)((float)color20.R * Main.ugBackTransition);
													color20.G = (byte)((float)color20.G * Main.ugBackTransition);
													color20.B = (byte)((float)color20.B * Main.ugBackTransition);
													color20.A = (byte)((float)color20.A * Main.ugBackTransition);
													Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num41), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num43 + 16 * num45)) + value, new Rectangle?(new Rectangle(16 * num44 + num41 + 16, 16 * num45, 16, 16)), color20);
												}
											}
										}
									}
									else
									{
										color13.R = (byte)((float)color13.R * num5);
										color13.G = (byte)((float)color13.G * num6);
										color13.B = (byte)((float)color13.B * num7);
										Main.spriteBatch.Draw(Main.backgroundTexture[array[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num41), (float)(this.bgStartY + Main.backgroundHeight[array[3]] * num43 + 16 * num45)) + value, new Rectangle?(new Rectangle(16 * num44 + num41 + 16, 16 * num45, 16, 16)), color13);
										if (Main.ugBackTransition > 0f)
										{
											Color color21 = color13;
											color21.R = (byte)((float)color21.R * Main.ugBackTransition);
											color21.G = (byte)((float)color21.G * Main.ugBackTransition);
											color21.B = (byte)((float)color21.B * Main.ugBackTransition);
											color21.A = (byte)((float)color21.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num42 + 16 * num44 + num41), (float)(this.bgStartY + Main.backgroundHeight[array2[3]] * num43 + 16 * num45)) + value, new Rectangle?(new Rectangle(16 * num44 + num41 + 16, 16 * num45, 16, 16)), color21);
										}
									}
								}
							}
						}
					}
				}
				num3 = 128;
				if (flag)
				{
					this.bgParrallax = (double)Main.caveParrallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParrallax, (double)num3) - (double)(num3 / 2)) - (int)value.X;
					this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num3 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int num56 = 0; num56 < this.bgLoops; num56++)
					{
						for (int num57 = 0; num57 < num3 / 16; num57++)
						{
							float num58 = (float)(this.bgStart + num3 * num56 + num57 * 16 + 8);
							float num59 = (float)this.bgTop;
							Color color22 = Lighting.GetColor((int)((num58 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + num59) / 16f));
							color22.R = (byte)((float)color22.R * num5);
							color22.G = (byte)((float)color22.G * num6);
							color22.B = (byte)((float)color22.B * num7);
							Main.spriteBatch.Draw(Main.backgroundTexture[array[4]], new Vector2((float)(this.bgStart + num3 * num56 + 16 * num57 + num41), (float)this.bgTop) + value, new Rectangle?(new Rectangle(16 * num57 + num41 + 16, Main.magmaBGFrame * 16, 16, 16)), color22);
							if (Main.ugBackTransition > 0f)
							{
								Color color23 = color22;
								color23.R = (byte)((float)color23.R * Main.ugBackTransition);
								color23.G = (byte)((float)color23.G * Main.ugBackTransition);
								color23.B = (byte)((float)color23.B * Main.ugBackTransition);
								color23.A = (byte)((float)color23.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(Main.backgroundTexture[array2[4]], new Vector2((float)(this.bgStart + num3 * num56 + 16 * num57 + num41), (float)this.bgTop) + value, new Rectangle?(new Rectangle(16 * num57 + num41 + 16, Main.magmaBGFrame * 16, 16, 16)), color23);
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)num19 * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
			if (num19 * 16.0 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Main.screenPosition.X * this.bgParrallax, (double)num3) - (double)(num3 / 2)) - (int)value.X;
				this.bgLoops = (Main.screenWidth + (int)value.X * 2) / num3 + 2;
				if (num19 * 16.0 + (double)Main.screenHeight < (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)value.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				num = (int)((double)num * 1.5);
				num2 = (int)((double)num2 * 1.5);
				float num60 = (float)this.bgStart + Main.screenPosition.X;
				num60 = -(float)Math.IEEERemainder((double)num60, 16.0);
				num60 = (float)Math.Round((double)num60);
				int num61 = (int)num60;
				if (num61 == -8)
				{
					num61 = 8;
				}
				for (int num62 = 0; num62 < this.bgLoops; num62++)
				{
					for (int num63 = 0; num63 < this.bgLoopsY; num63++)
					{
						for (int num64 = 0; num64 < num3 / 16; num64++)
						{
							for (int num65 = 0; num65 < 6; num65++)
							{
								float num66 = (float)(this.bgStartY + num63 * 96 + num65 * 16 + 8);
								float num67 = (float)(this.bgStart + num3 * num62 + num64 * 16 + 8);
								int num68 = (int)((num67 + Main.screenPosition.X) / 16f);
								int num69 = (int)((num66 + Main.screenPosition.Y) / 16f);
								Color color24 = Lighting.GetColor(num68, num69);
								if (Main.tile[num68, num69] == null)
								{
									Main.tile[num68, num69] = new Tile();
								}
								bool flag4 = false;
								if (Main.caveParrallax != 0f)
								{
									if (Main.tile[num68 - 1, num69] == null)
									{
										Main.tile[num68 - 1, num69] = new Tile();
									}
									if (Main.tile[num68 + 1, num69] == null)
									{
										Main.tile[num68 + 1, num69] = new Tile();
									}
									if (Main.wallLight[(int)Main.tile[num68, num69].wall] || Main.wallLight[(int)Main.tile[num68 - 1, num69].wall] || Main.wallLight[(int)Main.tile[num68 + 1, num69].wall])
									{
										flag4 = true;
									}
								}
								else
								{
									if (Main.wallLight[(int)Main.tile[num68, num69].wall])
									{
										flag4 = true;
									}
								}
								if ((flag4 || color24.R == 0 || color24.G == 0 || color24.B == 0) && (color24.R > 0 || color24.G > 0 || color24.B > 0) && (Main.wallLight[(int)Main.tile[num68, num69].wall] || Main.caveParrallax != 0f))
								{
									if (Lighting.lightMode < 2 && color24.R < 230 && color24.G < 230 && color24.B < 230)
									{
										if (((int)color24.R > num || (double)color24.G > (double)num * 1.1 || (double)color24.B > (double)num * 1.2) && !Main.tile[num68, num69].active())
										{
											for (int num70 = 0; num70 < 9; num70++)
											{
												int num71 = 0;
												int num72 = 0;
												int width3 = 4;
												int height3 = 4;
												Color color25 = color24;
												Color color26 = color24;
												if (num70 == 0 && !Main.tile[num68 - 1, num69 - 1].active())
												{
													color26 = Lighting.GetColor(num68 - 1, num69 - 1);
												}
												if (num70 == 1)
												{
													width3 = 8;
													num71 = 4;
													if (!Main.tile[num68, num69 - 1].active())
													{
														color26 = Lighting.GetColor(num68, num69 - 1);
													}
												}
												if (num70 == 2)
												{
													if (!Main.tile[num68 + 1, num69 - 1].active())
													{
														color26 = Lighting.GetColor(num68 + 1, num69 - 1);
													}
													num71 = 12;
												}
												if (num70 == 3)
												{
													if (!Main.tile[num68 - 1, num69].active())
													{
														color26 = Lighting.GetColor(num68 - 1, num69);
													}
													height3 = 8;
													num72 = 4;
												}
												if (num70 == 4)
												{
													width3 = 8;
													height3 = 8;
													num71 = 4;
													num72 = 4;
												}
												if (num70 == 5)
												{
													num71 = 12;
													num72 = 4;
													height3 = 8;
													if (!Main.tile[num68 + 1, num69].active())
													{
														color26 = Lighting.GetColor(num68 + 1, num69);
													}
												}
												if (num70 == 6)
												{
													if (!Main.tile[num68 - 1, num69 + 1].active())
													{
														color26 = Lighting.GetColor(num68 - 1, num69 + 1);
													}
													num72 = 12;
												}
												if (num70 == 7)
												{
													width3 = 8;
													height3 = 4;
													num71 = 4;
													num72 = 12;
													if (!Main.tile[num68, num69 + 1].active())
													{
														color26 = Lighting.GetColor(num68, num69 + 1);
													}
												}
												if (num70 == 8)
												{
													if (!Main.tile[num68 + 1, num69 + 1].active())
													{
														color26 = Lighting.GetColor(num68 + 1, num69 + 1);
													}
													num71 = 12;
													num72 = 12;
												}
												color25.R = (byte)((color24.R + color26.R) / 2);
												color25.G = (byte)((color24.G + color26.G) / 2);
												color25.B = (byte)((color24.B + color26.B) / 2);
												color25.R = (byte)((float)color25.R * num5);
												color25.G = (byte)((float)color25.G * num6);
												color25.B = (byte)((float)color25.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array[5]], new Vector2((float)(this.bgStart + num3 * num62 + 16 * num64 + num71 + num61), (float)(this.bgStartY + Main.backgroundHeight[2] * num63 + 16 * num65 + num72)) + value, new Rectangle?(new Rectangle(16 * num64 + num71 + num61 + 16, 16 * num65 + Main.backgroundHeight[2] * Main.magmaBGFrame + num72, width3, height3)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
											}
										}
										else
										{
											if ((int)color24.R > num2 || (double)color24.G > (double)num2 * 1.1 || (double)color24.B > (double)num2 * 1.2)
											{
												for (int num73 = 0; num73 < 4; num73++)
												{
													int num74 = 0;
													int num75 = 0;
													Color color27 = color24;
													Color color28 = color24;
													if (num73 == 0)
													{
														if (Lighting.Brighter(num68, num69 - 1, num68 - 1, num69))
														{
															color28 = Lighting.GetColor(num68 - 1, num69);
														}
														else
														{
															color28 = Lighting.GetColor(num68, num69 - 1);
														}
													}
													if (num73 == 1)
													{
														if (Lighting.Brighter(num68, num69 - 1, num68 + 1, num69))
														{
															color28 = Lighting.GetColor(num68 + 1, num69);
														}
														else
														{
															color28 = Lighting.GetColor(num68, num69 - 1);
														}
														num74 = 8;
													}
													if (num73 == 2)
													{
														if (Lighting.Brighter(num68, num69 + 1, num68 - 1, num69))
														{
															color28 = Lighting.GetColor(num68 - 1, num69);
														}
														else
														{
															color28 = Lighting.GetColor(num68, num69 + 1);
														}
														num75 = 8;
													}
													if (num73 == 3)
													{
														if (Lighting.Brighter(num68, num69 + 1, num68 + 1, num69))
														{
															color28 = Lighting.GetColor(num68 + 1, num69);
														}
														else
														{
															color28 = Lighting.GetColor(num68, num69 + 1);
														}
														num74 = 8;
														num75 = 8;
													}
													color27.R = (byte)((color24.R + color28.R) / 2);
													color27.G = (byte)((color24.G + color28.G) / 2);
													color27.B = (byte)((color24.B + color28.B) / 2);
													color27.R = (byte)((float)color27.R * num5);
													color27.G = (byte)((float)color27.G * num6);
													color27.B = (byte)((float)color27.B * num7);
													Main.spriteBatch.Draw(Main.backgroundTexture[array[5]], new Vector2((float)(this.bgStart + num3 * num62 + 16 * num64 + num74 + num61), (float)(this.bgStartY + Main.backgroundHeight[2] * num63 + 16 * num65 + num75)) + value, new Rectangle?(new Rectangle(16 * num64 + num74 + num61 + 16, 16 * num65 + Main.backgroundHeight[2] * Main.magmaBGFrame + num75, 8, 8)), color27, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
												}
											}
											else
											{
												color24.R = (byte)((float)color24.R * num5);
												color24.G = (byte)((float)color24.G * num6);
												color24.B = (byte)((float)color24.B * num7);
												Main.spriteBatch.Draw(Main.backgroundTexture[array[5]], new Vector2((float)(this.bgStart + num3 * num62 + 16 * num64 + num61), (float)(this.bgStartY + Main.backgroundHeight[2] * num63 + 16 * num65)) + value, new Rectangle?(new Rectangle(16 * num64 + num61 + 16, 16 * num65 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color24, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
											}
										}
									}
									else
									{
										color24.R = (byte)((float)color24.R * num5);
										color24.G = (byte)((float)color24.G * num6);
										color24.B = (byte)((float)color24.B * num7);
										Main.spriteBatch.Draw(Main.backgroundTexture[array[5]], new Vector2((float)(this.bgStart + num3 * num62 + 16 * num64 + num61), (float)(this.bgStartY + Main.backgroundHeight[2] * num63 + 16 * num65)) + value, new Rectangle?(new Rectangle(16 * num64 + num61 + 16, 16 * num65 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16)), color24, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
					}
				}
			}
			Lighting.brightness = Lighting.defBrightness;
			Main.renderTimer[3] = (float)stopwatch.Elapsed.TotalMilliseconds;
		}
		protected void RenderBackground()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
			base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
			Main.spriteBatch.Begin();
			try
			{
				this.drawWaters(true);
			}
			catch
			{
			}
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			base.GraphicsDevice.SetRenderTarget(this.backgroundTarget);
			base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
			Main.spriteBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawBackground();
					goto IL_A0;
				}
				catch
				{
					goto IL_A0;
				}
			}
			this.DrawBackground();
			IL_A0:
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
		}
		protected void DrawToMap()
		{
			if (!Main.mapEnabled)
			{
				return;
			}
			int num = Main.maxTilesX / Main.textureMaxWidth;
			int num2 = Main.maxTilesY / Main.textureMaxHeight;
			for (int i = 0; i <= num; i++)
			{
				for (int j = 0; j <= num2; j++)
				{
					if (!this.checkMap(i, j))
					{
						return;
					}
				}
			}
			if (Main.clearMap)
			{
				for (int k = 0; k <= num; k++)
				{
					for (int l = 0; l <= num2; l++)
					{
						base.GraphicsDevice.SetRenderTarget(this.mapTarget[k, l]);
						base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
						base.GraphicsDevice.SetRenderTarget(null);
					}
				}
				Main.clearMap = false;
			}
			int num3 = -1;
			int num4 = -1;
			bool flag = false;
			int num5 = 0;
			int num6 = Main.mapMinY;
			int num7 = Main.mapMinY;
			int num8 = Main.mapMaxY;
			int num9 = Main.mapMaxY;
			int num10 = 1;
			if (Main.mapMinY / Main.textureMaxHeight != Main.mapMaxY / Main.textureMaxHeight)
			{
				num8 = Main.textureMaxHeight;
				num7 = Main.textureMaxHeight;
				num10 = 2;
			}
			for (int m = 0; m < num10; m++)
			{
				if (m == 0)
				{
					Main.mapMinY = num6;
					Main.mapMaxY = num8;
				}
				else
				{
					if (m == 1)
					{
						Main.mapMinY = num7;
						Main.mapMaxY = num9;
					}
				}
				for (int n = Main.mapMinX; n < Main.mapMaxX; n++)
				{
					for (int num11 = Main.mapMinY; num11 < Main.mapMaxY; num11++)
					{
						if (Main.map[n, num11] != null && Main.map[n, num11].changed)
						{
							num5++;
							if (num5 < Main.maxMapUpdates)
							{
								if (Main.loadMap)
								{
									Main.loadMapLastX = n;
								}
								Main.map[n, num11].changed = false;
								int num12 = n / Main.textureMaxWidth;
								int num13 = num11 / Main.textureMaxHeight;
								if (num12 != num3 || num13 != num4)
								{
									num3 = num12;
									num4 = num13;
									if (flag)
									{
										Main.spriteBatch.End();
										base.GraphicsDevice.SetRenderTarget(null);
									}
									flag = true;
									base.GraphicsDevice.SetRenderTarget(this.mapTarget[num12, num13]);
									Main.spriteBatch.Begin();
								}
								int num14 = n - num12 * Main.textureMaxWidth;
								int num15 = num11 - num13 * Main.textureMaxHeight;
								Color color;
								Main.map[n, num11].getColor(out color, num11);
								int num16 = 1;
								int num17 = 1;
								int num18 = num11 + 1;
								while (num18 < Main.mapMaxY && Main.map[n, num18] != null && Main.map[n, num18].changed && Main.map[n, num11].isTheSameAs(Main.map[n, num18]) && num18 / Main.textureMaxHeight == num13)
								{
									Main.map[n, num18].changed = false;
									num16++;
									num18++;
									num11++;
								}
								if (num16 == 1)
								{
									num18 = n + 1;
									while (num18 < Main.mapMaxX && Main.map[num18, num11] != null && Main.map[num18, num11].changed && Main.map[n, num11].isTheSameAs(Main.map[num18, num11]) && num18 / Main.textureMaxWidth == num12)
									{
										Main.map[num18, num11].changed = false;
										num17++;
										num18++;
									}
								}
								Main.spriteBatch.Draw(Main.magicPixel, new Vector2((float)num14, (float)num15), new Rectangle?(new Rectangle(0, 0, num17, num16)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			for (int num19 = 0; num19 < Map.numUpdateTile; num19++)
			{
				int num20 = (int)Map.updateTileX[num19];
				int num21 = (int)Map.updateTileY[num19];
				if (Main.map[num20, num21] != null && Main.map[num20, num21].changed)
				{
					Main.map[num20, num21].changed = false;
					int num22 = num20 / Main.textureMaxWidth;
					int num23 = num21 / Main.textureMaxHeight;
					if (num22 != num3 || num23 != num4)
					{
						num3 = num22;
						num4 = num23;
						if (flag)
						{
							Main.spriteBatch.End();
							base.GraphicsDevice.SetRenderTarget(null);
						}
						flag = true;
						base.GraphicsDevice.SetRenderTarget(this.mapTarget[num22, num23]);
						Main.spriteBatch.Begin();
					}
					int num24 = num20 - num22 * Main.textureMaxWidth;
					int num25 = num21 - num23 * Main.textureMaxHeight;
					Color color2;
					Main.map[num20, num21].getColor(out color2, num21);
					Main.spriteBatch.Draw(Main.magicPixel, new Vector2((float)num24, (float)num25), new Rectangle?(new Rectangle(0, 0, 1, 1)), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			Map.numUpdateTile = 0;
			if (flag)
			{
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
			Main.mapReady = true;
			Main.loadMapLastX = 0;
			Main.loadMap = false;
			Main.loadMapLock = false;
		}
		protected void DrawToMap_Section(int secX, int secY)
		{
			Stopwatch stopwatch = Stopwatch.StartNew();
			Color[] array = new Color[30000];
			int num = secX * 200;
			int num2 = num + 200;
			int num3 = secY * 150;
			int num4 = num3 + 150;
			int num5 = 0;
			Color color = new Color(0, 0, 0, 0);
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					Map map = Main.map[j, i];
					if (Main.map[j, i] != null)
					{
						map.getColor(out array[num5], i);
					}
					else
					{
						array[num5] = color;
					}
					num5++;
				}
			}
			int num6 = num / Main.textureMaxWidth;
			int num7 = num3 / Main.textureMaxHeight;
			int num8 = num % Main.textureMaxWidth;
			int num9 = num3 % Main.textureMaxHeight;
			base.GraphicsDevice.SetRenderTarget(this.mapTarget[num6, num7]);
			Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
			double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			this.mapSectionTexture.SetData<Color>(array, 0, array.Length);
			double arg_12C_0 = stopwatch.Elapsed.TotalMilliseconds;
			totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			Main.spriteBatch.Draw(this.mapSectionTexture, new Vector2((float)num8, (float)num9), Color.White);
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			double arg_183_0 = stopwatch.Elapsed.TotalMilliseconds;
			stopwatch.Stop();
		}
		protected void DrawMap()
		{
			string cursorText = "";
			if (!Main.mapEnabled)
			{
				return;
			}
			if (!Main.mapReady)
			{
				return;
			}
			float num = 0f;
			float num2 = 0f;
			float num3 = num;
			float num4 = num2;
			byte b = 255;
			int arg_40_0 = Main.maxTilesX / Main.textureMaxWidth;
			int num5 = Main.maxTilesY / Main.textureMaxHeight;
			float num6 = (float)Lighting.offScreenTiles;
			float num7 = (float)Lighting.offScreenTiles;
			float num8 = (float)(Main.maxTilesX - Lighting.offScreenTiles - 1);
			float num9 = (float)(Main.maxTilesY - Lighting.offScreenTiles - 42);
			float num10 = 0f;
			float num11 = 0f;
			num6 = 10f;
			num7 = 10f;
			num8 = (float)(Main.maxTilesX - 10);
			num9 = (float)(Main.maxTilesY - 10);
			num = 200f;
			num2 = 300f;
			float num12 = 0f;
			float num13 = 0f;
			float num14 = num8 - 1f;
			float num15 = num9 - 1f;
			float num16;
			if (Main.mapFullscreen)
			{
				num16 = Main.mapFullscreenScale;
			}
			else
			{
				if (Main.mapStyle == 1)
				{
					num16 = Main.mapMinimapScale;
				}
				else
				{
					num16 = Main.mapOverlayScale;
				}
			}
			bool flag = false;
			if (!Main.mapFullscreen && num16 > 1f)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
			}
			if (Main.mapFullscreen)
			{
				if (Main.mouseLeft && base.IsActive)
				{
					if (Main.mouseLeftRelease)
					{
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
					}
					else
					{
						float num17 = (float)Main.mouseX - Main.grabMapX;
						float num18 = (float)Main.mouseY - Main.grabMapY;
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
						num17 *= 0.06255f;
						num18 *= 0.06255f;
						Main.mapFullscreenPos.X = Main.mapFullscreenPos.X - num17 * (16f / Main.mapFullscreenScale);
						Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - num18 * (16f / Main.mapFullscreenScale);
					}
				}
				Main.player[Main.myPlayer].mouseInterface = true;
				float num19 = (float)Main.screenWidth / (float)Main.maxTilesX * 0.8f;
				if (Main.mapFullscreenScale < num19)
				{
					Main.mapFullscreenScale = num19;
				}
				if (Main.mapFullscreenScale > 16f)
				{
					Main.mapFullscreenScale = 16f;
				}
				num16 = Main.mapFullscreenScale;
				b = 255;
				if (Main.mapFullscreenPos.X < num6)
				{
					Main.mapFullscreenPos.X = num6;
				}
				if (Main.mapFullscreenPos.X > num8)
				{
					Main.mapFullscreenPos.X = num8;
				}
				if (Main.mapFullscreenPos.Y < num7)
				{
					Main.mapFullscreenPos.Y = num7;
				}
				if (Main.mapFullscreenPos.Y > num9)
				{
					Main.mapFullscreenPos.Y = num9;
				}
				float num20 = Main.mapFullscreenPos.X;
				float num21 = Main.mapFullscreenPos.Y;
				if (Main.resetMapFull)
				{
					Main.resetMapFull = false;
					num20 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
					num21 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
					Main.mapFullscreenPos.X = num20;
					Main.mapFullscreenPos.Y = num21;
				}
				num20 *= num16;
				num21 *= num16;
				num = -num20 + (float)(Main.screenWidth / 2);
				num2 = -num21 + (float)(Main.screenHeight / 2);
				num += num6 * num16;
				num2 += num7 * num16;
				float num22 = (float)(Main.maxTilesX / 840);
				num22 *= Main.mapFullscreenScale;
				float num23 = num;
				float num24 = num2;
				float num25 = (float)this.mapTexture.Width;
				float num26 = (float)this.mapTexture.Height;
				if (Main.maxTilesX == 8400)
				{
					num22 *= 0.999f;
					num23 -= 40.6f * num22;
					num24 = num2 - 5f * num22;
					num25 -= 8.045f;
					num25 *= num22;
					num26 += 0.12f;
					num26 *= num22;
					if ((double)num22 < 1.2)
					{
						num26 += 1f;
					}
				}
				else
				{
					if (Main.maxTilesX == 6400)
					{
						num22 *= 1.09f;
						num23 -= 38.8f * num22;
						num24 = num2 - 3.85f * num22;
						num25 -= 13.6f;
						num25 *= num22;
						num26 -= 6.92f;
						num26 *= num22;
						if ((double)num22 < 1.2)
						{
							num26 += 2f;
						}
					}
					else
					{
						if (Main.maxTilesX == 6300)
						{
							num22 *= 1.09f;
							num23 -= 39.8f * num22;
							num24 = num2 - 4.08f * num22;
							num25 -= 26.69f;
							num25 *= num22;
							num26 -= 6.92f;
							num26 *= num22;
							if ((double)num22 < 1.2)
							{
								num26 += 2f;
							}
						}
						else
						{
							if (Main.maxTilesX == 4200)
							{
								num22 *= 0.998f;
								num23 -= 37.3f * num22;
								num24 -= 1.7f * num22;
								num25 -= 16f;
								num25 *= num22;
								num26 -= 8.31f;
								num26 *= num22;
							}
						}
					}
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
				{
					Main.spriteBatch.Draw(this.mapBG3Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Color.White);
				}
				else
				{
					if (Main.player[Main.myPlayer].zoneDungeon)
					{
						Main.spriteBatch.Draw(this.mapBG5Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Color.White);
					}
					else
					{
						if ((double)Main.screenPosition.Y > Main.worldSurface * 16.0)
						{
							if (Main.player[Main.myPlayer].zoneSnow)
							{
								Main.spriteBatch.Draw(this.mapBG4Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Color.White);
							}
							else
							{
								Main.spriteBatch.Draw(this.mapBG2Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Color.White);
							}
						}
						else
						{
							int num27 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
							if (Main.player[Main.myPlayer].zoneEvil)
							{
								Main.spriteBatch.Draw(this.mapBG6Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
							}
							else
							{
								if (Main.player[Main.myPlayer].zoneBlood)
								{
									Main.spriteBatch.Draw(this.mapBG7Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
								}
								else
								{
									if (Main.player[Main.myPlayer].zoneHoly)
									{
										Main.spriteBatch.Draw(this.mapBG8Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
									}
									else
									{
										if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && (num27 < 380 || num27 > Main.maxTilesX - 380))
										{
											Main.spriteBatch.Draw(this.mapBG11Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
										}
										else
										{
											if (Main.player[Main.myPlayer].zoneSnow)
											{
												Main.spriteBatch.Draw(this.mapBG12Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
											}
											else
											{
												if (Main.player[Main.myPlayer].zoneJungle)
												{
													Main.spriteBatch.Draw(this.mapBG9Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
												}
												else
												{
													if (Main.sandTiles > 1000)
													{
														Main.spriteBatch.Draw(this.mapBG10Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
													}
													else
													{
														Main.spriteBatch.Draw(this.mapBG1Texture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				Rectangle destinationRectangle = new Rectangle((int)num23, (int)num24, (int)num25, (int)num26);
				Main.spriteBatch.Draw(this.mapTexture, destinationRectangle, Color.White);
				if (num16 < 1f)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					flag = false;
				}
			}
			else
			{
				if (Main.mapStyle == 1)
				{
					Main.miniMapWidth = 240;
					Main.miniMapHeight = 240;
					Main.miniMapX = Main.screenWidth - Main.miniMapWidth - 52;
					Main.miniMapY = 90;
					float arg_925_0 = (float)Main.miniMapHeight / (float)Main.maxTilesY;
					if ((double)Main.mapMinimapScale < 0.2)
					{
						Main.mapMinimapScale = 0.2f;
					}
					if (Main.mapMinimapScale > 3f)
					{
						Main.mapMinimapScale = 3f;
					}
					if ((double)Main.mapMinimapAlpha < 0.01)
					{
						Main.mapMinimapAlpha = 0.01f;
					}
					if (Main.mapMinimapAlpha > 1f)
					{
						Main.mapMinimapAlpha = 1f;
					}
					num16 = Main.mapMinimapScale;
					b = (byte)(255f * Main.mapMinimapAlpha);
					num = (float)Main.miniMapX;
					num2 = (float)Main.miniMapY;
					num3 = num;
					num4 = num2;
					float num28 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
					float num29 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
					num10 = -(num28 - (float)((int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f))) * num16;
					num11 = -(num29 - (float)((int)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f))) * num16;
					num14 = (float)Main.miniMapWidth / num16;
					num15 = (float)Main.miniMapHeight / num16;
					num12 = (float)((int)num28) - num14 / 2f;
					num13 = (float)((int)num29) - num15 / 2f;
					float num30 = (float)Main.maxTilesY + num13;
					num30 *= num16;
					float x = num3 - 6f;
					float y = num4 - 6f;
					Main.spriteBatch.Draw(Main.miniMapFrame2Texture, new Vector2(x, y), new Rectangle?(new Rectangle(0, 0, Main.miniMapFrame2Texture.Width, Main.miniMapFrame2Texture.Height)), new Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					if (Main.mapStyle == 2)
					{
						float num31 = (float)Main.screenWidth / (float)Main.maxTilesX;
						if (Main.mapOverlayScale < num31)
						{
							Main.mapOverlayScale = num31;
						}
						if (Main.mapOverlayScale > 16f)
						{
							Main.mapOverlayScale = 16f;
						}
						if ((double)Main.mapOverlayAlpha < 0.01)
						{
							Main.mapOverlayAlpha = 0.01f;
						}
						if (Main.mapOverlayAlpha > 1f)
						{
							Main.mapOverlayAlpha = 1f;
						}
						num16 = Main.mapOverlayScale;
						b = (byte)(255f * Main.mapOverlayAlpha);
						int arg_B76_0 = Main.maxTilesX;
						int arg_B7C_0 = Main.maxTilesY;
						float num32 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
						float num33 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
						num32 *= num16;
						num33 *= num16;
						num = -num32 + (float)(Main.screenWidth / 2);
						num2 = -num33 + (float)(Main.screenHeight / 2);
						num += num6 * num16;
						num2 += num7 * num16;
					}
				}
			}
			if (Main.mapStyle == 1 && !Main.mapFullscreen)
			{
				if (num12 < num6)
				{
					num -= (num12 - num6) * num16;
				}
				if (num13 < num7)
				{
					num2 -= (num13 - num7) * num16;
				}
			}
			num14 = num12 + num14;
			num15 = num13 + num15;
			if (num12 > num6)
			{
				num6 = num12;
			}
			if (num13 > num7)
			{
				num7 = num13;
			}
			if (num14 < num8)
			{
				num8 = num14;
			}
			if (num15 < num9)
			{
				num9 = num15;
			}
			float num34 = (float)Main.textureMaxWidth * num16;
			float num35 = (float)Main.textureMaxHeight * num16;
			float num36 = num;
			float num37 = 0f;
			for (int i = 0; i <= 4; i++)
			{
				if ((float)((i + 1) * Main.textureMaxWidth) > num6 && (float)(i * Main.textureMaxWidth) < num6 + num8)
				{
					for (int j = 0; j <= num5; j++)
					{
						if ((float)((j + 1) * Main.textureMaxHeight) > num7 && (float)(j * Main.textureMaxHeight) < num7 + num9)
						{
							float num38 = num + (float)((int)((float)i * num34));
							float num39 = num2 + (float)((int)((float)j * num35));
							float num40 = (float)(i * Main.textureMaxWidth);
							float num41 = (float)(j * Main.textureMaxHeight);
							float num42 = 0f;
							float num43 = 0f;
							if (num40 < num6)
							{
								num42 = num6 - num40;
							}
							else
							{
								num38 -= num6 * num16;
							}
							if (num41 < num7)
							{
								num43 = num7 - num41;
								num39 = num2;
							}
							else
							{
								num39 -= num7 * num16;
							}
							num38 = num36;
							float num44 = (float)Main.textureMaxWidth;
							float num45 = (float)Main.textureMaxHeight;
							float num46 = (float)((i + 1) * Main.textureMaxWidth);
							float num47 = (float)((j + 1) * Main.textureMaxHeight);
							if (num46 >= num8)
							{
								num44 -= num46 - num8;
							}
							if (num47 >= num9)
							{
								num45 -= num47 - num9;
							}
							num38 += num10;
							num39 += num11;
							if (num44 > num42)
							{
								if (this.mapTarget[i, j].IsContentLost)
								{
									Main.refreshMap = true;
									Main.clearMap = true;
								}
								Main.spriteBatch.Draw(this.mapTarget[i, j], new Vector2(num38, num39), new Rectangle?(new Rectangle((int)num42, (int)num43, (int)num44 - (int)num42, (int)num45 - (int)num43)), new Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num16, SpriteEffects.None, 0f);
							}
							num37 = (float)((int)num44 - (int)num42) * num16;
						}
						if (j == num5)
						{
							num36 += num37;
						}
					}
				}
			}
			if (flag)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
			}
			if (!Main.mapFullscreen)
			{
				if (Main.mapStyle == 2)
				{
					float num48 = (num16 * 0.2f * 2f + 1f) / 3f;
					if (num48 > 1f)
					{
						num48 = 1f;
					}
					if (num16 < 10f)
					{
						for (int k = 0; k < 200; k++)
						{
							if (Main.npc[k].active && Main.npc[k].townNPC)
							{
								int num49 = NPC.TypeToNum(Main.npc[k].type);
								if (num49 > 0)
								{
									SpriteEffects effects = SpriteEffects.None;
									if (Main.npc[k].direction > 0)
									{
										effects = SpriteEffects.FlipHorizontally;
									}
									float num50 = (Main.npc[k].position.X + (float)(Main.npc[k].width / 2)) / 16f * num16;
									float num51 = (Main.npc[k].position.Y + (float)(Main.npc[k].height / 2)) / 16f * num16;
									num50 += num;
									num51 += num2;
									num50 -= 10f * num16;
									num51 -= 10f * num16;
									Main.spriteBatch.Draw(Main.npcHeadTexture[num49], new Vector2(num50, num51), new Rectangle?(new Rectangle(0, 0, Main.npcHeadTexture[num49].Width, Main.npcHeadTexture[num49].Height)), new Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Main.npcHeadTexture[num49].Width / 2), (float)(Main.npcHeadTexture[num49].Height / 2)), num48, effects, 0f);
								}
							}
						}
						Main.spriteBatch.End();
						Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
						for (int l = 0; l < 255; l++)
						{
							if (Main.player[l].active && !Main.player[l].dead && l != Main.myPlayer && ((!Main.player[Main.myPlayer].hostile && !Main.player[l].hostile) || (Main.player[Main.myPlayer].team == Main.player[l].team && Main.player[l].team != 0) || l == Main.myPlayer))
							{
								float num52 = (Main.player[l].position.X + (float)(Main.player[l].width / 2)) / 16f * num16;
								float num53 = Main.player[l].position.Y / 16f * num16;
								num52 += num;
								num53 += num2;
								num52 -= 6f;
								num53 -= 2f;
								num53 -= 2f - num16 / 5f * 2f;
								num52 -= 10f * num16;
								num53 -= 10f * num16;
								this.DrawPlayerHead(Main.player[l], num52, num53, (float)b / 255f, num48);
							}
						}
						Main.spriteBatch.End();
						Main.spriteBatch.Begin();
					}
				}
				if (Main.mapStyle == 1)
				{
					float num54 = num3 - 6f;
					float num55 = num4 - 6f;
					float num56 = (num16 * 0.25f * 2f + 1f) / 3f;
					if (num56 > 1f)
					{
						num56 = 1f;
					}
					for (int m = 0; m < 200; m++)
					{
						if (Main.npc[m].active && Main.npc[m].townNPC)
						{
							int num57 = NPC.TypeToNum(Main.npc[m].type);
							if (num57 > 0)
							{
								SpriteEffects effects2 = SpriteEffects.None;
								if (Main.npc[m].direction > 0)
								{
									effects2 = SpriteEffects.FlipHorizontally;
								}
								float num58 = ((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f - num12) * num16;
								float num59 = ((Main.npc[m].position.Y + Main.npc[m].gfxOffY + (float)(Main.npc[m].height / 2)) / 16f - num13) * num16;
								num58 += num3;
								num59 += num4;
								num59 -= 2f * num16 / 5f;
								if (num58 > (float)(Main.miniMapX + 12) && num58 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num59 > (float)(Main.miniMapY + 10) && num59 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
								{
									Main.spriteBatch.Draw(Main.npcHeadTexture[num57], new Vector2(num58 + num10, num59 + num11), new Rectangle?(new Rectangle(0, 0, Main.npcHeadTexture[num57].Width, Main.npcHeadTexture[num57].Height)), new Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Main.npcHeadTexture[num57].Width / 2), (float)(Main.npcHeadTexture[num57].Height / 2)), num56, effects2, 0f);
									float num60 = num58 - (float)(Main.npcHeadTexture[num57].Width / 2) * num56;
									float num61 = num59 - (float)(Main.npcHeadTexture[num57].Height / 2) * num56;
									float num62 = num60 + (float)Main.npcHeadTexture[num57].Width * num56;
									float num63 = num61 + (float)Main.npcHeadTexture[num57].Height * num56;
									if ((float)Main.mouseX >= num60 && (float)Main.mouseX <= num62 && (float)Main.mouseY >= num61 && (float)Main.mouseY <= num63)
									{
										string text;
										if (num57 == 11)
										{
											text = Main.npc[m].displayName;
										}
										else
										{
											text = Main.npc[m].displayName + " the " + Main.npc[m].name;
										}
										cursorText = text;
									}
								}
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
					for (int n = 0; n < 255; n++)
					{
						if (Main.player[n].active && !Main.player[n].dead && ((!Main.player[Main.myPlayer].hostile && !Main.player[n].hostile) || (Main.player[Main.myPlayer].team == Main.player[n].team && Main.player[n].team != 0) || n == Main.myPlayer))
						{
							float num64 = ((Main.player[n].position.X + (float)(Main.player[n].width / 2)) / 16f - num12) * num16;
							float num65 = ((Main.player[n].position.Y + Main.player[n].gfxOffY + (float)(Main.player[n].height / 2)) / 16f - num13) * num16;
							num64 += num3;
							num65 += num4;
							num64 -= 6f;
							num65 -= 6f;
							num65 -= 2f - num16 / 5f * 2f;
							num64 += num10;
							num65 += num11;
							if (n == Main.myPlayer && Main.zoomX == 0f && Main.zoomY == 0f)
							{
								num64 = num3 + (float)(Main.miniMapWidth / 2);
								num65 = num4 + (float)(Main.miniMapHeight / 2);
								num65 -= 3f;
								num64 -= 4f;
							}
							if (num64 > (float)(Main.miniMapX + 6) && num64 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && num65 > (float)(Main.miniMapY + 6) && num65 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
							{
								this.DrawPlayerHead(Main.player[n], num64, num65, (float)b / 255f, num56);
								if (n != Main.myPlayer)
								{
									float num66 = num64 + 4f - 14f * num56;
									float num67 = num65 + 2f - 14f * num56;
									float num68 = num66 + 28f * num56;
									float num69 = num67 + 28f * num56;
									if ((float)Main.mouseX >= num66 && (float)Main.mouseX <= num68 && (float)Main.mouseY >= num67 && (float)Main.mouseY <= num69)
									{
										cursorText = Main.player[n].name;
									}
								}
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					Main.spriteBatch.Draw(Main.miniMapFrameTexture, new Vector2(num54, num55), new Rectangle?(new Rectangle(0, 0, Main.miniMapFrameTexture.Width, Main.miniMapFrameTexture.Height)), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					for (int num70 = 0; num70 < 3; num70++)
					{
						float num71 = num54 + 148f + (float)(num70 * 26);
						float num72 = num55 + 234f;
						if ((float)Main.mouseX > num71 && (float)Main.mouseX < num71 + 22f && (float)Main.mouseY > num72 && (float)Main.mouseY < num72 + 22f)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.spriteBatch.Draw(Main.miniMapButtonTexture[num70], new Vector2(num71, num72), new Rectangle?(new Rectangle(0, 0, Main.miniMapButtonTexture[num70].Width, Main.miniMapButtonTexture[num70].Height)), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							if (Main.mouseLeft)
							{
								if (Main.mouseLeftRelease)
								{
									Main.PlaySound(12, -1, -1, 1);
								}
								if (num70 == 0)
								{
									Main.mapMinimapScale = 1.25f;
								}
								else
								{
									if (num70 == 1)
									{
										Main.mapMinimapScale *= 0.975f;
									}
									else
									{
										if (num70 == 2)
										{
											Main.mapMinimapScale *= 1.025f;
										}
									}
								}
							}
						}
					}
				}
			}
			if (Main.mapFullscreen)
			{
				int num73 = (int)((-num + (float)Main.mouseX) / num16 + num6);
				int num74 = (int)((-num2 + (float)Main.mouseY) / num16 + num7);
				bool flag2 = false;
				if ((float)num73 < num6)
				{
					flag2 = true;
				}
				if ((float)num73 >= num8)
				{
					flag2 = true;
				}
				if ((float)num74 < num7)
				{
					flag2 = true;
				}
				if ((float)num74 >= num9)
				{
					flag2 = true;
				}
				if (!flag2 && Main.map[num73, num74] != null && Main.map[num73, num74].light > 40)
				{
					int type = (int)Main.map[num73, num74].type;
					int num75 = (int)Map.tileLookup[21];
					int num76 = Map.tileOptionCounts[21];
					if (type >= num75 && type < num75 + num76)
					{
						Tile tile = Main.tile[num73, num74];
						if (tile == null)
						{
							tile = new Tile();
							Main.tile[num73, num74] = tile;
						}
						int num77 = num73;
						int num78 = num74;
						if (tile.frameX % 36 != 0)
						{
							num77--;
						}
						if (tile.frameY % 36 != 0)
						{
							num78--;
						}
						int num79 = Chest.FindChest(num77, num78);
						if (num79 < 0)
						{
							cursorText = Lang.chestType[0];
						}
						else
						{
							if (Main.chest[num79].name != "")
							{
								cursorText = Lang.chestType[(int)(tile.frameX / 36)] + ": " + Main.chest[num79].name;
							}
							else
							{
								cursorText = Lang.chestType[(int)(tile.frameX / 36)];
							}
						}
					}
					else
					{
						cursorText = Lang.mapLegend[type];
					}
				}
				float num80 = (num16 * 0.25f * 2f + 1f) / 3f;
				if (num80 > 1f)
				{
					num80 = 1f;
				}
				for (int num81 = 0; num81 < 200; num81++)
				{
					if (Main.npc[num81].active && Main.npc[num81].townNPC)
					{
						int num82 = NPC.TypeToNum(Main.npc[num81].type);
						if (num82 > 0)
						{
							SpriteEffects effects3 = SpriteEffects.None;
							if (Main.npc[num81].direction > 0)
							{
								effects3 = SpriteEffects.FlipHorizontally;
							}
							float num83 = (Main.npc[num81].position.X + (float)(Main.npc[num81].width / 2)) / 16f * num16;
							float num84 = (Main.npc[num81].position.Y + Main.npc[num81].gfxOffY + (float)(Main.npc[num81].height / 2)) / 16f * num16;
							num83 += num;
							num84 += num2;
							num83 -= 10f * num16;
							num84 -= 10f * num16;
							Main.spriteBatch.Draw(Main.npcHeadTexture[num82], new Vector2(num83, num84), new Rectangle?(new Rectangle(0, 0, Main.npcHeadTexture[num82].Width, Main.npcHeadTexture[num82].Height)), new Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Main.npcHeadTexture[num82].Width / 2), (float)(Main.npcHeadTexture[num82].Height / 2)), num80, effects3, 0f);
							float num85 = num83 - (float)(Main.npcHeadTexture[num82].Width / 2) * num80;
							float num86 = num84 - (float)(Main.npcHeadTexture[num82].Height / 2) * num80;
							float num87 = num85 + (float)Main.npcHeadTexture[num82].Width * num80;
							float num88 = num86 + (float)Main.npcHeadTexture[num82].Height * num80;
							if ((float)Main.mouseX >= num85 && (float)Main.mouseX <= num87 && (float)Main.mouseY >= num86 && (float)Main.mouseY <= num88)
							{
								string text2;
								if (num82 == 11)
								{
									text2 = Main.npc[num81].displayName;
								}
								else
								{
									text2 = Main.npc[num81].displayName + " the " + Main.npc[num81].name;
								}
								cursorText = text2;
							}
						}
					}
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				for (int num89 = 0; num89 < 255; num89++)
				{
					if (Main.player[num89].active && !Main.player[num89].dead && ((!Main.player[Main.myPlayer].hostile && !Main.player[num89].hostile) || (Main.player[Main.myPlayer].team == Main.player[num89].team && Main.player[num89].team != 0) || num89 == Main.myPlayer))
					{
						float num90 = ((Main.player[num89].position.X + (float)(Main.player[num89].width / 2)) / 16f - num12) * num16;
						float num91 = ((Main.player[num89].position.Y + Main.player[num89].gfxOffY + (float)(Main.player[num89].height / 2)) / 16f - num13) * num16;
						num90 += num;
						num91 += num2;
						num90 -= 6f;
						num91 -= 2f;
						num91 -= 2f - num16 / 5f * 2f;
						num90 -= 10f * num16;
						num91 -= 10f * num16;
						this.DrawPlayerHead(Main.player[num89], num90, num91, (float)b / 255f, num80);
						float num92 = num90 + 4f - 14f * num80;
						float num93 = num91 + 2f - 14f * num80;
						float num94 = num92 + 28f * num80;
						float num95 = num93 + 28f * num80;
						if ((float)Main.mouseX >= num92 && (float)Main.mouseX <= num94 && (float)Main.mouseY >= num93 && (float)Main.mouseY <= num95)
						{
							cursorText = Main.player[num89].name;
						}
					}
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				int num96 = 10;
				int num97 = Main.screenHeight - 40;
				int num98 = 0;
				int num99 = 130;
				if (Main.mouseX >= num96 && Main.mouseX <= num96 + 32 && Main.mouseY >= num97 && Main.mouseY <= num97 + 30)
				{
					num99 = 255;
					num98 += 4;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.mapFullscreen = false;
					}
				}
				Main.spriteBatch.Draw(this.mapIconTexture[num98], new Vector2((float)num96, (float)num97), new Rectangle?(new Rectangle(0, 0, this.mapIconTexture[num98].Width, this.mapIconTexture[num98].Height)), new Color(num99, num99, num99, num99), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.cursorTexture, new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), new Rectangle?(new Rectangle(0, 0, Main.cursorTexture.Width, Main.cursorTexture.Height)), new Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f)), 0f, default(Vector2), Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.cursorTexture, new Vector2((float)Main.mouseX, (float)Main.mouseY), new Rectangle?(new Rectangle(0, 0, Main.cursorTexture.Width, Main.cursorTexture.Height)), Main.cursorColor, 0f, default(Vector2), Main.cursorScale, SpriteEffects.None, 0f);
			}
			if (cursorText != "")
			{
				this.MouseText(cursorText, 0, 0);
			}
		}
		protected void RenderTiles()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			this.RenderBlack();
			base.GraphicsDevice.SetRenderTarget(this.tileTarget);
			base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
			Main.spriteBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawTiles(true);
					goto IL_57;
				}
				catch
				{
					goto IL_57;
				}
			}
			this.DrawTiles(true);
			IL_57:
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
		}
		protected void RenderTiles2()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.tile2Target);
			base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
			Main.spriteBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawTiles(false);
					goto IL_51;
				}
				catch
				{
					goto IL_51;
				}
			}
			this.DrawTiles(false);
			IL_51:
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
		}
		protected void RenderWater()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.waterTarget);
			base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
			Main.spriteBatch.Begin();
			try
			{
				this.drawWaters(false);
				if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].mech)
				{
					this.DrawWires();
				}
			}
			catch
			{
			}
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
		}
		protected void drawWaters(bool bg = false)
		{
			if (!bg)
			{
				if (Main.bgStyle == 1)
				{
					Main.waterStyle = 2;
				}
				else
				{
					if (Main.bgStyle == 5)
					{
						if (Main.evilTiles > Main.holyTiles)
						{
							if (Main.bloodTiles > Main.evilTiles)
							{
								Main.waterStyle = 10;
							}
							else
							{
								Main.waterStyle = 2;
							}
						}
						else
						{
							if (Main.bloodTiles > Main.holyTiles)
							{
								Main.waterStyle = 10;
							}
							else
							{
								Main.waterStyle = 4;
							}
						}
					}
					else
					{
						if (Main.bgStyle == 5 && Main.bloodTiles > Main.holyTiles)
						{
							Main.waterStyle = 10;
						}
						else
						{
							if (Main.bgStyle == 3)
							{
								Main.waterStyle = 3;
							}
							else
							{
								if (Main.bgStyle == 8)
								{
									Main.waterStyle = 10;
								}
								else
								{
									if (Main.bgStyle == 6)
									{
										Main.waterStyle = 4;
									}
									else
									{
										if (Main.bgStyle == 7)
										{
											Main.waterStyle = 5;
										}
										else
										{
											if (Main.bgStyle == 2)
											{
												Main.waterStyle = 6;
											}
											else
											{
												if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer + 40.0)
												{
													if (Main.shroomTiles > 300)
													{
														Main.waterStyle = 7;
													}
													else
													{
														Main.waterStyle = 8;
													}
												}
												else
												{
													if ((double)(Main.screenPosition.Y / 16f) > Main.worldSurface)
													{
														Main.waterStyle = 7;
													}
													else
													{
														Main.waterStyle = 0;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				if (Main.bgStyle != 4 && Main.bloodMoon && !Main.dayTime)
				{
					Main.waterStyle = 9;
				}
				if (Main.fountainColor >= 0)
				{
					Main.waterStyle = Main.fountainColor;
				}
				if (Main.waterStyle == 0)
				{
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[0] += 0.2f;
					if (Main.liquidAlpha[0] > 1f)
					{
						Main.liquidAlpha[0] = 1f;
					}
				}
				if (Main.waterStyle == 2)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[2] += 0.2f;
					if (Main.liquidAlpha[2] > 1f)
					{
						Main.liquidAlpha[2] = 1f;
					}
				}
				if (Main.waterStyle == 3)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[3] += 0.2f;
					if (Main.liquidAlpha[3] > 1f)
					{
						Main.liquidAlpha[3] = 1f;
					}
				}
				if (Main.waterStyle == 4)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[4] += 0.2f;
					if (Main.liquidAlpha[4] > 1f)
					{
						Main.liquidAlpha[4] = 1f;
					}
				}
				if (Main.waterStyle == 5)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[5] += 0.2f;
					if (Main.liquidAlpha[5] > 1f)
					{
						Main.liquidAlpha[5] = 1f;
					}
				}
				if (Main.waterStyle == 6)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[6] += 0.2f;
					if (Main.liquidAlpha[6] > 1f)
					{
						Main.liquidAlpha[6] = 1f;
					}
				}
				if (Main.waterStyle == 7)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[7] += 0.2f;
					if (Main.liquidAlpha[7] > 1f)
					{
						Main.liquidAlpha[7] = 1f;
					}
				}
				if (Main.waterStyle == 8)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[8] += 0.2f;
					if (Main.liquidAlpha[8] > 1f)
					{
						Main.liquidAlpha[8] = 1f;
					}
				}
				if (Main.waterStyle == 9)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[10] -= 0.2f;
					if (Main.liquidAlpha[10] < 0f)
					{
						Main.liquidAlpha[10] = 0f;
					}
					Main.liquidAlpha[9] += 0.2f;
					if (Main.liquidAlpha[9] > 1f)
					{
						Main.liquidAlpha[9] = 1f;
					}
				}
				if (Main.waterStyle == 10)
				{
					Main.liquidAlpha[0] -= 0.2f;
					if (Main.liquidAlpha[0] < 0f)
					{
						Main.liquidAlpha[0] = 0f;
					}
					Main.liquidAlpha[2] -= 0.2f;
					if (Main.liquidAlpha[2] < 0f)
					{
						Main.liquidAlpha[2] = 0f;
					}
					Main.liquidAlpha[3] -= 0.2f;
					if (Main.liquidAlpha[3] < 0f)
					{
						Main.liquidAlpha[3] = 0f;
					}
					Main.liquidAlpha[4] -= 0.2f;
					if (Main.liquidAlpha[4] < 0f)
					{
						Main.liquidAlpha[4] = 0f;
					}
					Main.liquidAlpha[5] -= 0.2f;
					if (Main.liquidAlpha[5] < 0f)
					{
						Main.liquidAlpha[5] = 0f;
					}
					Main.liquidAlpha[6] -= 0.2f;
					if (Main.liquidAlpha[6] < 0f)
					{
						Main.liquidAlpha[6] = 0f;
					}
					Main.liquidAlpha[7] -= 0.2f;
					if (Main.liquidAlpha[7] < 0f)
					{
						Main.liquidAlpha[7] = 0f;
					}
					Main.liquidAlpha[8] -= 0.2f;
					if (Main.liquidAlpha[8] < 0f)
					{
						Main.liquidAlpha[8] = 0f;
					}
					Main.liquidAlpha[9] -= 0.2f;
					if (Main.liquidAlpha[9] < 0f)
					{
						Main.liquidAlpha[9] = 0f;
					}
					Main.liquidAlpha[10] += 0.2f;
					if (Main.liquidAlpha[10] > 1f)
					{
						Main.liquidAlpha[10] = 1f;
					}
				}
			}
			Main.drewLava = false;
			if (Main.liquidAlpha[0] > 0f)
			{
				if (bg)
				{
					this.DrawWater(bg, 0, 1f);
				}
				else
				{
					this.DrawWater(bg, 0, Main.liquidAlpha[0]);
				}
			}
			if (Main.liquidAlpha[2] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 2)
					{
						this.DrawWater(bg, 2, Main.liquidAlpha[2]);
					}
					else
					{
						this.DrawWater(bg, 2, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 2, Main.liquidAlpha[2]);
				}
			}
			if (Main.liquidAlpha[3] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 3)
					{
						this.DrawWater(bg, 3, Main.liquidAlpha[3]);
					}
					else
					{
						this.DrawWater(bg, 3, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 3, Main.liquidAlpha[3]);
				}
			}
			if (Main.liquidAlpha[4] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 4)
					{
						this.DrawWater(bg, 4, Main.liquidAlpha[4]);
					}
					else
					{
						this.DrawWater(bg, 4, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 4, Main.liquidAlpha[4]);
				}
			}
			if (Main.liquidAlpha[5] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 5)
					{
						this.DrawWater(bg, 5, Main.liquidAlpha[5]);
					}
					else
					{
						this.DrawWater(bg, 5, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 5, Main.liquidAlpha[5]);
				}
			}
			if (Main.liquidAlpha[6] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 6)
					{
						this.DrawWater(bg, 6, Main.liquidAlpha[6]);
					}
					else
					{
						this.DrawWater(bg, 6, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 6, Main.liquidAlpha[6]);
				}
			}
			if (Main.liquidAlpha[7] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 7)
					{
						this.DrawWater(bg, 7, Main.liquidAlpha[7]);
					}
					else
					{
						this.DrawWater(bg, 7, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 7, Main.liquidAlpha[7]);
				}
			}
			if (Main.liquidAlpha[8] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 8)
					{
						this.DrawWater(bg, 8, Main.liquidAlpha[8]);
					}
					else
					{
						this.DrawWater(bg, 8, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 8, Main.liquidAlpha[8]);
				}
			}
			if (Main.liquidAlpha[9] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 9)
					{
						this.DrawWater(bg, 9, Main.liquidAlpha[9]);
					}
					else
					{
						this.DrawWater(bg, 9, 1f);
					}
				}
				else
				{
					this.DrawWater(bg, 9, Main.liquidAlpha[9]);
				}
			}
			if (Main.liquidAlpha[10] > 0f)
			{
				if (bg)
				{
					if (Main.waterStyle < 10)
					{
						this.DrawWater(bg, 10, Main.liquidAlpha[10]);
						return;
					}
					this.DrawWater(bg, 10, 1f);
					return;
				}
				else
				{
					this.DrawWater(bg, 10, Main.liquidAlpha[10]);
				}
			}
		}
		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			float num = 0f;
			float num2 = 99999f;
			float num3 = 99999f;
			int num4 = -1;
			int num5 = -1;
			Vector2 value = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				value = default(Vector2);
			}
			int num6 = (int)(255f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			float arg_6B_0 = Main.gfxQuality;
			float arg_71_0 = Main.gfxQuality;
			int num7 = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
			int num8 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
			int num9 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f);
			int num10 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5;
			if (num7 < 5)
			{
				num7 = 5;
			}
			if (num8 > Main.maxTilesX - 5)
			{
				num8 = Main.maxTilesX - 5;
			}
			if (num9 < 5)
			{
				num9 = 5;
			}
			if (num10 > Main.maxTilesY - 5)
			{
				num10 = Main.maxTilesY - 5;
			}
			for (int i = num9; i < num10 + 4; i++)
			{
				for (int j = num7 - 2; j < num8 + 2; j++)
				{
					if (Main.tile[j, i] == null)
					{
						Main.tile[j, i] = new Tile();
					}
					if (Main.tile[j, i].liquid > 0 && (!Main.tile[j, i].nactive() || !Main.tileSolid[(int)Main.tile[j, i].type] || Main.tileSolidTop[(int)Main.tile[j, i].type]) && (Lighting.Brightness(j, i) > 0f || bg))
					{
						Color color = Lighting.GetColor(j, i);
						float num11 = (float)(256 - (int)Main.tile[j, i].liquid);
						num11 /= 32f;
						int num12 = 0;
						if (Main.tile[j, i].lava())
						{
							if (Main.drewLava)
							{
								goto IL_E8F;
							}
							float num13 = Math.Abs((float)(j * 16 + 8) - (Main.screenPosition.X + (float)(Main.screenWidth / 2)));
							float num14 = Math.Abs((float)(i * 16 + 8) - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
							if (num13 < (float)(Main.screenWidth * 2) && num14 < (float)(Main.screenHeight * 2))
							{
								float num15 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
								float num16 = 1f - num15 / ((float)Main.screenWidth * 0.75f);
								if (num16 > 0f)
								{
									num += num16;
								}
							}
							if (num13 < num2)
							{
								num2 = num13;
								num4 = j * 16 + 8;
							}
							if (num14 < num3)
							{
								num3 = num13;
								num5 = i * 16 + 8;
							}
							num12 = 1;
						}
						else
						{
							if (Main.tile[j, i].honey())
							{
								num12 = 11;
							}
						}
						if (num12 == 0)
						{
							num12 = Style;
						}
						if ((num12 != 1 && num12 != 11) || !Main.drewLava)
						{
							float num17 = 0.5f;
							if (bg)
							{
								num17 = 1f;
							}
							if (num12 != 1 && num12 != 11)
							{
								num17 *= Alpha;
							}
							Vector2 value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num11 * 2));
							Rectangle value3 = new Rectangle(0, 0, 16, 16 - (int)num11 * 2);
							if (Main.tile[j, i + 1].liquid < 245 && (!Main.tile[j, i + 1].nactive() || !Main.tileSolid[(int)Main.tile[j, i + 1].type] || Main.tileSolidTop[(int)Main.tile[j, i + 1].type]))
							{
								float num18 = (float)(256 - (int)Main.tile[j, i + 1].liquid);
								num18 /= 32f;
								num17 = 0.5f * (8f - num11) / 4f;
								if ((double)num17 > 0.55)
								{
									num17 = 0.55f;
								}
								if ((double)num17 < 0.35)
								{
									num17 = 0.35f;
								}
								float num19 = num11 / 2f;
								if (Main.tile[j, i + 1].liquid < 200)
								{
									if (bg)
									{
										goto IL_E8F;
									}
									if (Main.tile[j, i - 1].liquid > 0 && Main.tile[j, i - 1].liquid > 0)
									{
										value3 = new Rectangle(0, 4, 16, 16);
										num17 = 0.5f;
									}
									else
									{
										if (Main.tile[j, i - 1].liquid > 0)
										{
											value2 = new Vector2((float)(j * 16), (float)(i * 16 + 4));
											value3 = new Rectangle(0, 4, 16, 12);
											num17 = 0.5f;
										}
										else
										{
											if (Main.tile[j, i + 1].liquid > 0)
											{
												value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num11 * 2 + (int)num18 * 2));
												value3 = new Rectangle(0, 4, 16, 16 - (int)num11 * 2);
											}
											else
											{
												value2 = new Vector2((float)(j * 16 + (int)num19), (float)(i * 16 + (int)num19 * 2 + (int)num18 * 2));
												value3 = new Rectangle(0, 4, 16 - (int)num19 * 2, 16 - (int)num19 * 2);
											}
										}
									}
								}
								else
								{
									num17 = 0.5f;
									value3 = new Rectangle(0, 4, 16, 16 - (int)num11 * 2 + (int)num18 * 2);
								}
							}
							else
							{
								if (Main.tile[j, i - 1].liquid > 32)
								{
									value3 = new Rectangle(0, 4, value3.Width, value3.Height);
								}
								else
								{
									if (num11 < 1f && Main.tile[j, i - 1].nactive() && Main.tileSolid[(int)Main.tile[j, i - 1].type] && !Main.tileSolidTop[(int)Main.tile[j, i - 1].type])
									{
										value2 = new Vector2((float)(j * 16), (float)(i * 16));
										value3 = new Rectangle(0, 4, 16, 16);
									}
									else
									{
										bool flag = true;
										int num20 = i + 1;
										while (num20 < i + 6 && (!Main.tile[j, num20].nactive() || !Main.tileSolid[(int)Main.tile[j, num20].type] || Main.tileSolidTop[(int)Main.tile[j, num20].type]))
										{
											if (Main.tile[j, num20].liquid < 200)
											{
												flag = false;
												break;
											}
											num20++;
										}
										if (!flag)
										{
											num17 = 0.5f;
											value3 = new Rectangle(0, 4, 16, 16);
										}
										else
										{
											if (Main.tile[j, i - 1].liquid > 0)
											{
												value3 = new Rectangle(0, 2, value3.Width, value3.Height);
											}
										}
									}
								}
							}
							if ((color.R > 20 || color.B > 20 || color.G > 20) && value3.Y < 4)
							{
								int num21 = (int)color.R;
								if ((int)color.G > num21)
								{
									num21 = (int)color.G;
								}
								if ((int)color.B > num21)
								{
									num21 = (int)color.B;
								}
								num21 /= 30;
								if (Main.rand.Next(20000) < num21)
								{
									Color newColor = new Color(255, 255, 255);
									if (Main.tile[j, i].honey())
									{
										newColor = new Color(255, 255, 50);
									}
									int num22 = Dust.NewDust(new Vector2((float)(j * 16), value2.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
									Main.dust[num22].velocity *= 0f;
								}
							}
							if (Main.tile[j, i].honey())
							{
								num17 *= 1.6f;
								if (num17 > 1f)
								{
									num17 = 1f;
								}
							}
							if (Main.tile[j, i].lava())
							{
								num17 *= 1.8f;
								if (num17 > 1f)
								{
									num17 = 1f;
								}
								if (base.IsActive && !Main.gamePaused && Dust.lavaBubbles < 200)
								{
									if (Main.tile[j, i].liquid > 200 && Main.rand.Next(700) == 0)
									{
										Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 35, 0f, 0f, 0, default(Color), 1f);
									}
									if (value3.Y == 0 && Main.rand.Next(350) == 0)
									{
										int num23 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16) + num11 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Color), 1.5f);
										Main.dust[num23].velocity *= 0.8f;
										Dust expr_9D9_cp_0 = Main.dust[num23];
										expr_9D9_cp_0.velocity.X = expr_9D9_cp_0.velocity.X * 2f;
										Dust expr_9F7_cp_0 = Main.dust[num23];
										expr_9F7_cp_0.velocity.Y = expr_9F7_cp_0.velocity.Y - (float)Main.rand.Next(1, 7) * 0.1f;
										if (Main.rand.Next(10) == 0)
										{
											Dust expr_A31_cp_0 = Main.dust[num23];
											expr_A31_cp_0.velocity.Y = expr_A31_cp_0.velocity.Y * (float)Main.rand.Next(2, 5);
										}
										Main.dust[num23].noGravity = true;
									}
								}
							}
							float num24 = (float)color.R * num17;
							float num25 = (float)color.G * num17;
							float num26 = (float)color.B * num17;
							float num27 = (float)color.A * num17;
							color = new Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
							if (Lighting.lightMode < 2 && !bg)
							{
								Color color2 = color;
								if (num12 != 1 && ((double)color2.R > (double)num6 * 0.6 || (double)color2.G > (double)num6 * 0.65 || (double)color2.B > (double)num6 * 0.7))
								{
									for (int k = 0; k < 4; k++)
									{
										int num28 = 0;
										int num29 = 0;
										int width = 8;
										int height = 8;
										Color color3 = color2;
										Color color4 = Lighting.GetColor(j, i);
										if (k == 0)
										{
											color4 = Lighting.GetColor(j - 1, i - 1);
											if (value3.Height < 8)
											{
												height = value3.Height;
											}
										}
										if (k == 1)
										{
											color4 = Lighting.GetColor(j + 1, i - 1);
											num28 = 8;
											if (value3.Height < 8)
											{
												height = value3.Height;
											}
										}
										if (k == 2)
										{
											color4 = Lighting.GetColor(j - 1, i + 1);
											num29 = 8;
											height = 8 - (16 - value3.Height);
										}
										if (k == 3)
										{
											color4 = Lighting.GetColor(j + 1, i + 1);
											num28 = 8;
											num29 = 8;
											height = 8 - (16 - value3.Height);
										}
										num24 = (float)color4.R * num17;
										num25 = (float)color4.G * num17;
										num26 = (float)color4.B * num17;
										num27 = (float)color4.A * num17;
										color4 = new Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
										color3.R = (byte)((color2.R * 3 + color4.R * 2) / 5);
										color3.G = (byte)((color2.G * 3 + color4.G * 2) / 5);
										color3.B = (byte)((color2.B * 3 + color4.B * 2) / 5);
										color3.A = (byte)((color2.A * 3 + color4.A * 2) / 5);
										Main.spriteBatch.Draw(Main.liquidTexture[num12], value2 - Main.screenPosition + new Vector2((float)num28, (float)num29) + value, new Rectangle?(new Rectangle(value3.X + num28, value3.Y + num29, width, height)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									Main.spriteBatch.Draw(Main.liquidTexture[num12], value2 - Main.screenPosition + value, new Rectangle?(value3), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
							else
							{
								if (value3.Y < 4)
								{
									value3.X += (int)(Main.wFrame * 18f);
								}
								Main.spriteBatch.Draw(Main.liquidTexture[num12], value2 - Main.screenPosition + value, new Rectangle?(value3), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							if (Main.tile[j, i + 1].halfBrick())
							{
								color = Lighting.GetColor(j, i + 1);
								num24 = (float)color.R * num17;
								num25 = (float)color.G * num17;
								num26 = (float)color.B * num17;
								num27 = (float)color.A * num17;
								color = new Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
								value2 = new Vector2((float)(j * 16), (float)(i * 16 + 16));
								Main.spriteBatch.Draw(Main.liquidTexture[num12], value2 - Main.screenPosition + value, new Rectangle?(new Rectangle(0, 4, 16, 8)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
					IL_E8F:;
				}
			}
			if (!Main.drewLava)
			{
				Main.ambientLavaX = (float)num4;
				Main.ambientLavaY = (float)num5;
				Main.ambientLavaStrength = num;
			}
			Main.drewLava = true;
			if (!bg)
			{
				Main.renderTimer[4] = (float)stopwatch.Elapsed.TotalMilliseconds;
			}
		}
		protected bool FullTile(int x, int y)
		{
			if (Main.tile[x - 1, y].halfBrick() || Main.tile[x - 1, y].slope() != 0)
			{
				return false;
			}
			if (Main.tile[x + 1, y].halfBrick() || Main.tile[x + 1, y].slope() != 0)
			{
				return false;
			}
			if (Main.tile[x, y].active() && Main.tileSolid[(int)Main.tile[x, y].type] && !Main.tileSolidTop[(int)Main.tile[x, y].type] && Main.tile[x, y].type != 10 && Main.tile[x, y].type != 54 && Main.tile[x, y].type != 138 && Main.tile[x, y].type != 191 && Main.tile[x, y].type != 137)
			{
				int frameX = (int)Main.tile[x, y].frameX;
				int frameY = (int)Main.tile[x, y].frameY;
				if (frameY == 18)
				{
					if (frameX >= 18 && frameX <= 54)
					{
						return true;
					}
					if (frameX >= 108 && frameX <= 144)
					{
						return true;
					}
				}
				else
				{
					if (frameY >= 90 && frameY <= 196)
					{
						if (frameX <= 70)
						{
							return true;
						}
						if (frameX >= 144 && frameX <= 232)
						{
							return true;
						}
					}
				}
			}
			return false;
		}
		protected void DrawBlack()
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 value = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				value = default(Vector2);
			}
			int num = (int)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
			float num2 = (float)((double)num * 0.4) / 255f;
			if (Lighting.lightMode == 2)
			{
				num2 = (float)(Main.tileColor.R - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			else
			{
				if (Lighting.lightMode == 3)
				{
					num2 = (float)(num - 55) / 255f;
					if (num2 < 0f)
					{
						num2 = 0f;
					}
				}
			}
			int num3 = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
			int num4 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
			int num5 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f);
			int num6 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5;
			int num7 = Main.offScreenRange / 16;
			int num8 = Main.offScreenRange / 16;
			if (num3 - num7 < 0)
			{
				num3 = num7;
			}
			if (num4 + num7 > Main.maxTilesX)
			{
				num4 = Main.maxTilesX - num7;
			}
			if (num5 - num8 < 0)
			{
				num5 = num8;
			}
			if (num6 + num8 > Main.maxTilesY)
			{
				num6 = Main.maxTilesY - num8;
			}
			for (int i = num5 - num8; i < num6 + num8; i++)
			{
				if ((double)i <= Main.worldSurface)
				{
					for (int j = num3 - num7; j < num4 + num7; j++)
					{
						if (Main.tile[j, i] == null)
						{
							Main.tile[j, i] = new Tile();
						}
						if (Lighting.Brightness(j, i) <= num2 && (Main.tile[j, i].liquid < 250 || WorldGen.SolidTile(j, i) || (Main.tile[j, i].liquid > 250 && Lighting.Brightness(j, i) == 0f)) && (Main.tile[j, i].wall < 88 || Main.tile[j, i].wall > 92 || (Main.tile[j, i].active() && Main.tileBlockLight[(int)Main.tile[j, i].type])))
						{
							int num9 = j;
							j++;
							while (Main.tile[j, i] != null && Lighting.Brightness(j, i) < num2 && (Main.tile[j, i].liquid < 250 || WorldGen.SolidTile(j, i) || (Main.tile[j, i].liquid > 250 && Lighting.Brightness(j, i) == 0f)))
							{
								j++;
								if (j >= num4 + num7)
								{
									break;
								}
							}
							j--;
							int width = (j - num9 + 1) * 16;
							Main.spriteBatch.Draw(Main.blackTileTexture, new Vector2((float)(num9 * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(new Rectangle(0, 0, width, 16)), Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
				}
			}
			Main.renderTimer[5] = (float)stopwatch.Elapsed.TotalMilliseconds;
		}
		protected void RenderBlack()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.blackTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
			Main.spriteBatch.Begin();
			this.DrawBlack();
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
		}
		protected void DrawWalls()
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - Main.gfxQuality) + 100f * Main.gfxQuality);
			int num2 = (int)(120f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			Vector2 value = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				value = default(Vector2);
			}
			int num3 = (int)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
			float num4 = (float)((double)num3 * 0.53) / 255f;
			if (Lighting.lightMode == 2)
			{
				num4 = (float)(Main.tileColor.R - 12) / 255f;
			}
			if (Lighting.lightMode == 3)
			{
				num4 = (float)(num3 - 12) / 255f;
			}
			int num5 = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
			int num6 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
			int num7 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f);
			int num8 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5;
			int num9 = Main.offScreenRange / 16;
			int num10 = Main.offScreenRange / 16;
			if (num5 - num9 < 0)
			{
				num5 = num9;
			}
			if (num6 + num9 > Main.maxTilesX)
			{
				num6 = Main.maxTilesX - num9;
			}
			if (num7 - num10 < 0)
			{
				num7 = num10;
			}
			if (num8 + num10 > Main.maxTilesY)
			{
				num8 = Main.maxTilesY - num10;
			}
			for (int i = num7 - num10; i < num8 + num10; i++)
			{
				if ((double)i <= Main.worldSurface)
				{
					for (int j = num5 - num9; j < num6 + num9; j++)
					{
						Tile tile = Main.tile[j, i];
						if (tile == null)
						{
							tile = new Tile();
							Main.tile[j, i] = tile;
						}
						byte arg_213_0 = tile.wall;
						float num11 = Lighting.Brightness(j, i);
						if (num11 < num4 && (tile.liquid < 250 || WorldGen.SolidTile(tile) || (tile.liquid > 250 && num11 == 0f)) && (num11 == 0f || tile.wall < 88 || tile.wall > 93))
						{
							Main.spriteBatch.Draw(Main.blackTileTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + value, Lighting.GetBlackness(j, i));
						}
					}
				}
			}
			Color[] array = new Color[9];
			for (int k = num7 - num10; k < num8 + num10; k++)
			{
				for (int l = num5 - num9; l < num6 + num9; l++)
				{
					Tile tile2 = Main.tile[l, k];
					if (tile2 == null)
					{
						tile2 = new Tile();
						Main.tile[l, k] = tile2;
					}
					byte wall = tile2.wall;
					if (tile2.wall > 0 && Lighting.Brightness(l, k) > 0f && !this.FullTile(l, k))
					{
						this.LoadWall((int)tile2.wall);
						Color color = Lighting.GetColor(l, k);
						int num12 = (int)(Main.wallFrame[(int)wall] * 180);
						if (Lighting.lightMode < 2 && !Main.wallLight[(int)tile2.wall] && (tile2.wall < 88 || tile2.wall > 93) && !WorldGen.SolidTile(tile2))
						{
							if ((int)color.R > num || (double)color.G > (double)num * 1.1 || (double)color.B > (double)num * 1.2)
							{
								Texture2D texture;
								if (Main.canDrawColorWall(l, k))
								{
									texture = Main.wallAltTexture[(int)tile2.wall, (int)tile2.wallColor()];
								}
								else
								{
									texture = Main.wallTexture[(int)tile2.wall];
								}
								Lighting.GetColor9Slice(l, k, ref array);
								for (int m = 0; m < 9; m++)
								{
									int num13 = 0;
									int num14 = 0;
									int width = 12;
									int height = 12;
									Color color2;
									if (tile2.wall == 44)
									{
										color2 = new Color((int)((byte)Main.DiscoR), (int)((byte)Main.DiscoG), (int)((byte)Main.DiscoB));
									}
									else
									{
										Color color3 = array[m];
										color2 = new Color((int)((color.R + color3.R) / 2), (int)((color.G + color3.G) / 2), (int)((color.B + color3.B) / 2));
									}
									switch (m)
									{
									case 1:
										width = 8;
										num13 = 12;
										break;
									case 2:
										num13 = 20;
										break;
									case 3:
										height = 8;
										num14 = 12;
										break;
									case 4:
										width = 8;
										height = 8;
										num13 = 12;
										num14 = 12;
										break;
									case 5:
										num13 = 20;
										num14 = 12;
										height = 8;
										break;
									case 6:
										num14 = 20;
										break;
									case 7:
										width = 12;
										num13 = 12;
										num14 = 20;
										break;
									case 8:
										num13 = 20;
										num14 = 20;
										break;
									}
									Main.spriteBatch.Draw(texture, new Vector2((float)(l * 16 - (int)Main.screenPosition.X - 8 + num13), (float)(k * 16 - (int)Main.screenPosition.Y - 8 + num14)) + value, new Rectangle?(new Rectangle(tile2.wallFrameX() + num13, tile2.wallFrameY() + num14 + num12, width, height)), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
							else
							{
								if ((int)color.R > num2 || (double)color.G > (double)num2 * 1.1 || (double)color.B > (double)num2 * 1.2)
								{
									Texture2D texture;
									if (Main.canDrawColorWall(l, k))
									{
										texture = Main.wallAltTexture[(int)tile2.wall, (int)tile2.wallColor()];
									}
									else
									{
										texture = Main.wallTexture[(int)tile2.wall];
									}
									Lighting.GetColor4Slice(l, k, ref array);
									for (int n = 0; n < 4; n++)
									{
										int num15;
										int num16;
										switch (n)
										{
										case 0:
											num15 = 0;
											num16 = 0;
											break;
										case 1:
											num15 = 16;
											num16 = 0;
											break;
										case 2:
											num15 = 0;
											num16 = 16;
											break;
										case 3:
											num15 = 16;
											num16 = 16;
											break;
										default:
											num15 = 0;
											num16 = 0;
											break;
										}
										Color color4;
										if (tile2.wall == 44)
										{
											color4 = new Color((int)((byte)Main.DiscoR), (int)((byte)Main.DiscoG), (int)((byte)Main.DiscoB));
										}
										else
										{
											Color color5 = array[n];
											color4 = new Color((int)((color.R + color5.R) / 2), (int)((color.G + color5.G) / 2), (int)((color.B + color5.B) / 2));
										}
										Main.spriteBatch.Draw(texture, new Vector2((float)(l * 16 - (int)Main.screenPosition.X - 8 + num15), (float)(k * 16 - (int)Main.screenPosition.Y - 8 + num16)) + value, new Rectangle?(new Rectangle(tile2.wallFrameX() + num15, tile2.wallFrameY() + num16 + num12, 16, 16)), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									Texture2D texture;
									Color color6;
									if (tile2.wall == 44)
									{
										color6 = new Color((int)((byte)Main.DiscoR), (int)((byte)Main.DiscoG), (int)((byte)Main.DiscoB), 255);
										texture = Main.wallTexture[(int)tile2.wall];
									}
									else
									{
										if (Main.canDrawColorWall(l, k))
										{
											texture = Main.wallAltTexture[(int)tile2.wall, (int)tile2.wallColor()];
										}
										else
										{
											texture = Main.wallTexture[(int)tile2.wall];
										}
										color6 = Lighting.GetColor(l, k);
									}
									Rectangle value2 = new Rectangle(tile2.wallFrameX(), tile2.wallFrameY() + num12, 32, 32);
									Main.spriteBatch.Draw(texture, new Vector2((float)(l * 16 - (int)Main.screenPosition.X - 8), (float)(k * 16 - (int)Main.screenPosition.Y - 8)) + value, new Rectangle?(value2), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
						else
						{
							if (tile2.wall == 44)
							{
								Color color7 = default(Color);
								color7.R = (byte)Main.DiscoR;
								color7.G = (byte)Main.DiscoG;
								color7.B = (byte)Main.DiscoB;
								color7.A = 255;
								Rectangle value2 = new Rectangle(tile2.wallFrameX(), tile2.wallFrameY() + num12, 32, 32);
								Main.spriteBatch.Draw(Main.wallTexture[(int)tile2.wall], new Vector2((float)(l * 16 - (int)Main.screenPosition.X - 8), (float)(k * 16 - (int)Main.screenPosition.Y - 8)) + value, new Rectangle?(value2), color7, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								Rectangle value2 = new Rectangle(tile2.wallFrameX(), tile2.wallFrameY() + num12, 32, 32);
								if (Main.canDrawColorWall(l, k))
								{
									Main.spriteBatch.Draw(Main.wallAltTexture[(int)tile2.wall, (int)tile2.wallColor()], new Vector2((float)(l * 16 - (int)Main.screenPosition.X - 8), (float)(k * 16 - (int)Main.screenPosition.Y - 8)) + value, new Rectangle?(value2), Lighting.GetColor(l, k), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
								else
								{
									Main.spriteBatch.Draw(Main.wallTexture[(int)tile2.wall], new Vector2((float)(l * 16 - (int)Main.screenPosition.X - 8), (float)(k * 16 - (int)Main.screenPosition.Y - 8)) + value, new Rectangle?(value2), Lighting.GetColor(l, k), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
						if ((double)color.R > (double)num2 * 0.4 || (double)color.G > (double)num2 * 0.35 || (double)color.B > (double)num2 * 0.3)
						{
							bool flag = false;
							if (Main.tile[l - 1, k].wall > 0 && Main.wallBlend[(int)Main.tile[l - 1, k].wall] != Main.wallBlend[(int)tile2.wall])
							{
								flag = true;
							}
							bool flag2 = false;
							if (Main.tile[l + 1, k].wall > 0 && Main.wallBlend[(int)Main.tile[l + 1, k].wall] != Main.wallBlend[(int)tile2.wall])
							{
								flag2 = true;
							}
							bool flag3 = false;
							if (Main.tile[l, k - 1].wall > 0 && Main.wallBlend[(int)Main.tile[l, k - 1].wall] != Main.wallBlend[(int)tile2.wall])
							{
								flag3 = true;
							}
							bool flag4 = false;
							if (Main.tile[l, k + 1].wall > 0 && Main.wallBlend[(int)Main.tile[l, k + 1].wall] != Main.wallBlend[(int)tile2.wall])
							{
								flag4 = true;
							}
							if (flag)
							{
								Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(l * 16 - (int)Main.screenPosition.X), (float)(k * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(new Rectangle(0, 0, 2, 16)), Lighting.GetColor(l, k), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							if (flag2)
							{
								Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(l * 16 - (int)Main.screenPosition.X + 14), (float)(k * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(new Rectangle(14, 0, 2, 16)), Lighting.GetColor(l, k), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							if (flag3)
							{
								Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(l * 16 - (int)Main.screenPosition.X), (float)(k * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(new Rectangle(0, 0, 16, 2)), Lighting.GetColor(l, k), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							if (flag4)
							{
								Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(l * 16 - (int)Main.screenPosition.X), (float)(k * 16 - (int)Main.screenPosition.Y + 14)) + value, new Rectangle?(new Rectangle(0, 14, 16, 2)), Lighting.GetColor(l, k), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			Main.renderTimer[2] = (float)stopwatch.Elapsed.TotalMilliseconds;
		}
		protected void RenderWalls()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.wallTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
			Main.spriteBatch.Begin();
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawWalls();
					goto IL_68;
				}
				catch
				{
					goto IL_68;
				}
			}
			this.DrawWalls();
			IL_68:
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
		}
		protected void ReleaseTargets()
		{
			try
			{
				if (!Main.dedServ)
				{
					Main.offScreenRange = 0;
					Main.targetSet = false;
					this.waterTarget.Dispose();
					this.backWaterTarget.Dispose();
					this.blackTarget.Dispose();
					this.tileTarget.Dispose();
					this.tile2Target.Dispose();
					this.wallTarget.Dispose();
					this.backgroundTarget.Dispose();
				}
			}
			catch
			{
			}
		}
		protected bool checkMap(int i, int j)
		{
			if (!Main.initMap[i, j])
			{
				try
				{
					int width = Main.textureMaxWidth;
					int height = Main.textureMaxHeight;
					if (i == Main.mapTargetX - 1)
					{
						width = 400;
					}
					if (j == Main.mapTargetY - 1)
					{
						height = 600;
					}
					this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth16, 0, RenderTargetUsage.PreserveContents);
				}
				catch
				{
					Main.mapEnabled = false;
					for (int k = 0; k < Main.mapTargetX; k++)
					{
						for (int l = 0; l < Main.mapTargetY; l++)
						{
							try
							{
								Main.initMap[k, l] = false;
								this.mapTarget[k, l].Dispose();
							}
							catch
							{
							}
						}
					}
					return false;
				}
				Main.initMap[i, j] = true;
				return true;
			}
			return true;
		}
		protected void InitMap()
		{
			int num = Main.mapTargetX;
			int num2 = Main.mapTargetY;
			if (Main.mapEnabled)
			{
				try
				{
					for (int i = 0; i < num; i++)
					{
						for (int j = 0; j < num2; j++)
						{
							this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, Main.textureMaxWidth, Main.textureMaxHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
						}
					}
					Main.mapInit = true;
				}
				catch
				{
					Main.mapEnabled = false;
					for (int k = 0; k < num; k++)
					{
						for (int l = 0; l < num2; l++)
						{
							try
							{
								if (this.mapTarget[k, l] != null)
								{
									this.mapTarget[k, l].Dispose();
								}
							}
							catch
							{
							}
						}
					}
				}
			}
		}
		protected void InitTargets()
		{
			try
			{
				if (!Main.dedServ)
				{
					Main.offScreenRange = 192;
					Main.targetSet = true;
					if (base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2 > 2048)
					{
						Main.offScreenRange = (2048 - base.GraphicsDevice.PresentationParameters.BackBufferWidth) / 2;
					}
					this.waterTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2, base.GraphicsDevice.PresentationParameters.BackBufferHeight + Main.offScreenRange * 2, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.backWaterTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2, base.GraphicsDevice.PresentationParameters.BackBufferHeight + Main.offScreenRange * 2, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.blackTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2, base.GraphicsDevice.PresentationParameters.BackBufferHeight + Main.offScreenRange * 2, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.tileTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2, base.GraphicsDevice.PresentationParameters.BackBufferHeight + Main.offScreenRange * 2, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.tile2Target = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2, base.GraphicsDevice.PresentationParameters.BackBufferHeight + Main.offScreenRange * 2, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.wallTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2, base.GraphicsDevice.PresentationParameters.BackBufferHeight + Main.offScreenRange * 2, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.backgroundTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth + Main.offScreenRange * 2, base.GraphicsDevice.PresentationParameters.BackBufferHeight + Main.offScreenRange * 2, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
				}
			}
			catch
			{
				Lighting.lightMode = 2;
				Main.mapEnabled = false;
				Main.SaveSettings();
				try
				{
					this.ReleaseTargets();
				}
				catch
				{
				}
			}
		}
		protected void DrawWires()
		{
			float arg_05_0 = Main.gfxQuality;
			float arg_0B_0 = Main.gfxQuality;
			Vector2 value = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				value = default(Vector2);
			}
			int num = (int)((Main.screenPosition.X - value.X) / 16f - 1f);
			int num2 = (int)((Main.screenPosition.X + (float)Main.screenWidth + value.X) / 16f) + 2;
			int num3 = (int)((Main.screenPosition.Y - value.Y) / 16f - 1f);
			int num4 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + value.Y) / 16f) + 5;
			if (num < 0)
			{
				num = 0;
			}
			if (num2 > Main.maxTilesX)
			{
				num2 = Main.maxTilesX;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num4 > Main.maxTilesY)
			{
				num4 = Main.maxTilesY;
			}
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					if (Main.tile[j, i].wire() && Lighting.Brightness(j, i) > 0f)
					{
						Rectangle value2 = new Rectangle(0, 0, 16, 16);
						bool flag = Main.tile[j, i - 1].wire();
						bool flag2 = Main.tile[j, i + 1].wire();
						bool flag3 = Main.tile[j - 1, i].wire();
						bool flag4 = Main.tile[j + 1, i].wire();
						if (flag)
						{
							if (flag2)
							{
								if (flag3)
								{
									if (flag4)
									{
										value2 = new Rectangle(18, 18, 16, 16);
									}
									else
									{
										value2 = new Rectangle(54, 0, 16, 16);
									}
								}
								else
								{
									if (flag4)
									{
										value2 = new Rectangle(36, 0, 16, 16);
									}
									else
									{
										value2 = new Rectangle(0, 0, 16, 16);
									}
								}
							}
							else
							{
								if (flag3)
								{
									if (flag4)
									{
										value2 = new Rectangle(0, 18, 16, 16);
									}
									else
									{
										value2 = new Rectangle(54, 18, 16, 16);
									}
								}
								else
								{
									if (flag4)
									{
										value2 = new Rectangle(36, 18, 16, 16);
									}
									else
									{
										value2 = new Rectangle(36, 36, 16, 16);
									}
								}
							}
						}
						else
						{
							if (flag2)
							{
								if (flag3)
								{
									if (flag4)
									{
										value2 = new Rectangle(72, 0, 16, 16);
									}
									else
									{
										value2 = new Rectangle(72, 18, 16, 16);
									}
								}
								else
								{
									if (flag4)
									{
										value2 = new Rectangle(0, 36, 16, 16);
									}
									else
									{
										value2 = new Rectangle(18, 36, 16, 16);
									}
								}
							}
							else
							{
								if (flag3)
								{
									if (flag4)
									{
										value2 = new Rectangle(18, 0, 16, 16);
									}
									else
									{
										value2 = new Rectangle(54, 36, 16, 16);
									}
								}
								else
								{
									if (flag4)
									{
										value2 = new Rectangle(72, 36, 16, 16);
									}
									else
									{
										value2 = new Rectangle(0, 54, 16, 16);
									}
								}
							}
						}
						Color color = Lighting.GetColor(j, i);
						Main.spriteBatch.Draw(Main.wireTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(value2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.tile[j, i].wire2() && Lighting.Brightness(j, i) > 0f)
					{
						Rectangle value3 = new Rectangle(0, 0, 16, 16);
						bool flag5 = Main.tile[j, i - 1].wire2();
						bool flag6 = Main.tile[j, i + 1].wire2();
						bool flag7 = Main.tile[j - 1, i].wire2();
						bool flag8 = Main.tile[j + 1, i].wire2();
						if (flag5)
						{
							if (flag6)
							{
								if (flag7)
								{
									if (flag8)
									{
										value3 = new Rectangle(18, 18, 16, 16);
									}
									else
									{
										value3 = new Rectangle(54, 0, 16, 16);
									}
								}
								else
								{
									if (flag8)
									{
										value3 = new Rectangle(36, 0, 16, 16);
									}
									else
									{
										value3 = new Rectangle(0, 0, 16, 16);
									}
								}
							}
							else
							{
								if (flag7)
								{
									if (flag8)
									{
										value3 = new Rectangle(0, 18, 16, 16);
									}
									else
									{
										value3 = new Rectangle(54, 18, 16, 16);
									}
								}
								else
								{
									if (flag8)
									{
										value3 = new Rectangle(36, 18, 16, 16);
									}
									else
									{
										value3 = new Rectangle(36, 36, 16, 16);
									}
								}
							}
						}
						else
						{
							if (flag6)
							{
								if (flag7)
								{
									if (flag8)
									{
										value3 = new Rectangle(72, 0, 16, 16);
									}
									else
									{
										value3 = new Rectangle(72, 18, 16, 16);
									}
								}
								else
								{
									if (flag8)
									{
										value3 = new Rectangle(0, 36, 16, 16);
									}
									else
									{
										value3 = new Rectangle(18, 36, 16, 16);
									}
								}
							}
							else
							{
								if (flag7)
								{
									if (flag8)
									{
										value3 = new Rectangle(18, 0, 16, 16);
									}
									else
									{
										value3 = new Rectangle(54, 36, 16, 16);
									}
								}
								else
								{
									if (flag8)
									{
										value3 = new Rectangle(72, 36, 16, 16);
									}
									else
									{
										value3 = new Rectangle(0, 54, 16, 16);
									}
								}
							}
						}
						Color color2 = Lighting.GetColor(j, i);
						int num5 = 1;
						if (Main.tile[j, i].wire())
						{
							num5++;
						}
						float num6 = 1f / (float)num5;
						byte r = (byte)((float)color2.R * num6);
						byte g = (byte)((float)color2.G * num6);
						byte b = (byte)((float)color2.B * num6);
						byte b2 = (byte)((float)color2.A * num6);
						color2 = new Color((int)r, (int)g, (int)b, (int)b2);
						Main.spriteBatch.Draw(Main.wire2Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(value3), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.tile[j, i].wire3() && Lighting.Brightness(j, i) > 0f)
					{
						Rectangle value4 = new Rectangle(0, 0, 16, 16);
						bool flag9 = Main.tile[j, i - 1].wire3();
						bool flag10 = Main.tile[j, i + 1].wire3();
						bool flag11 = Main.tile[j - 1, i].wire3();
						bool flag12 = Main.tile[j + 1, i].wire3();
						if (flag9)
						{
							if (flag10)
							{
								if (flag11)
								{
									if (flag12)
									{
										value4 = new Rectangle(18, 18, 16, 16);
									}
									else
									{
										value4 = new Rectangle(54, 0, 16, 16);
									}
								}
								else
								{
									if (flag12)
									{
										value4 = new Rectangle(36, 0, 16, 16);
									}
									else
									{
										value4 = new Rectangle(0, 0, 16, 16);
									}
								}
							}
							else
							{
								if (flag11)
								{
									if (flag12)
									{
										value4 = new Rectangle(0, 18, 16, 16);
									}
									else
									{
										value4 = new Rectangle(54, 18, 16, 16);
									}
								}
								else
								{
									if (flag12)
									{
										value4 = new Rectangle(36, 18, 16, 16);
									}
									else
									{
										value4 = new Rectangle(36, 36, 16, 16);
									}
								}
							}
						}
						else
						{
							if (flag10)
							{
								if (flag11)
								{
									if (flag12)
									{
										value4 = new Rectangle(72, 0, 16, 16);
									}
									else
									{
										value4 = new Rectangle(72, 18, 16, 16);
									}
								}
								else
								{
									if (flag12)
									{
										value4 = new Rectangle(0, 36, 16, 16);
									}
									else
									{
										value4 = new Rectangle(18, 36, 16, 16);
									}
								}
							}
							else
							{
								if (flag11)
								{
									if (flag12)
									{
										value4 = new Rectangle(18, 0, 16, 16);
									}
									else
									{
										value4 = new Rectangle(54, 36, 16, 16);
									}
								}
								else
								{
									if (flag12)
									{
										value4 = new Rectangle(72, 36, 16, 16);
									}
									else
									{
										value4 = new Rectangle(0, 54, 16, 16);
									}
								}
							}
						}
						Color color3 = Lighting.GetColor(j, i);
						int num7 = 1;
						if (Main.tile[j, i].wire())
						{
							num7++;
						}
						if (Main.tile[j, i].wire2())
						{
							num7++;
						}
						float num8 = 1f / (float)num7;
						byte r2 = (byte)((float)color3.R * num8);
						byte g2 = (byte)((float)color3.G * num8);
						byte b3 = (byte)((float)color3.B * num8);
						byte b4 = (byte)((float)color3.A * num8);
						color3 = new Color((int)r2, (int)g2, (int)b3, (int)b4);
						Main.spriteBatch.Draw(Main.wire3Texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(value4), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.tile[j, i].actuator() && Lighting.Brightness(j, i) > 0f)
					{
						Color color4 = Lighting.GetColor(j, i);
						Main.spriteBatch.Draw(Main.actuatorTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + value, new Rectangle?(new Rectangle(0, 0, Main.actuatorTexture.Width, Main.actuatorTexture.Height)), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
		}
		public static int GetTreeStyle(int X)
		{
			int num;
			if (X <= Main.treeX[0])
			{
				num = Main.treeStyle[0];
			}
			else
			{
				if (X <= Main.treeX[1])
				{
					num = Main.treeStyle[1];
				}
				else
				{
					if (X <= Main.treeX[2])
					{
						num = Main.treeStyle[2];
					}
					else
					{
						num = Main.treeStyle[3];
					}
				}
			}
			if (num == 0)
			{
				return 0;
			}
			if (num == 5)
			{
				return 10;
			}
			return 5 + num;
		}
		protected void lookForColorTiles()
		{
			int num = (int)(Main.screenPosition.X / 16f - 2f);
			int num2 = (int)((Main.screenPosition.X + (float)Main.screenWidth) / 16f) + 3;
			int num3 = (int)(Main.screenPosition.Y / 16f - 2f);
			int num4 = (int)((Main.screenPosition.Y + (float)Main.screenHeight) / 16f) + 3;
			if (num < 1)
			{
				num = 1;
			}
			if (num2 > Main.maxTilesX - 2)
			{
				num = Main.maxTilesX - 2;
			}
			for (int i = num; i < num2; i++)
			{
				if (i > 0)
				{
					for (int j = num3; j < num4; j++)
					{
						if (Main.tile[i, j] != null)
						{
							if (Main.tile[i, j].active() && Main.tile[i, j].color() > 0)
							{
								this.tileColorCheck((int)Main.tile[i, j].type, (int)Main.tile[i, j].color());
							}
							if (Main.tile[i, j].wall > 0 && Main.tile[i, j].wallColor() > 0)
							{
								this.wallColorCheck((int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor());
							}
						}
					}
				}
			}
			for (int k = 0; k < Main.numTreeStyles; k++)
			{
				for (int l = 0; l < Main.numTileColors; l++)
				{
					if (Main.checkTreeAlt[k, l])
					{
						this.treeColorCheck(k, l);
						Main.checkTreeAlt[k, l] = false;
					}
				}
			}
		}
		protected void tileColorCheck(int t, int c)
		{
			this.LoadTiles(t);
			if (c >= Main.numTileColors)
			{
				return;
			}
			if (!Main.tileAltTextureInit[t, c])
			{
				Main.tileAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.tileTexture[t].Width, Main.tileTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.tileAltTextureInit[t, c] = true;
			}
			if (Main.tileAltTexture[t, c].IsContentLost)
			{
				Main.tileAltTextureDrawn[t, c] = false;
			}
			if (!Main.tileAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.tileAltTexture[t, c]);
				base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else
				{
					if (c > 0 && c < 13 && (t == 0 || t == 2 || t == 5 || t == 23 || t == 59 || t == 60 || t == 70 || t == 109 || t == 199))
					{
						int index2 = c + 27;
						Main.tileShader.CurrentTechnique.Passes[index2].Apply();
					}
					else
					{
						Main.tileShader.CurrentTechnique.Passes[c].Apply();
					}
				}
				Main.spriteBatch.Draw(Main.tileTexture[t], new Rectangle(0, 0, Main.tileTexture[t].Width, Main.tileTexture[t].Height), Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.tileAltTextureDrawn[t, c] = true;
			}
		}
		protected void treeColorCheck(int t, int c)
		{
			if (!Main.treeAltTextureInit[t, c])
			{
				Main.treeTopAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.treeTopTexture[t].Width, Main.treeTopTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.treeBranchAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.treeAltTextureInit[t, c] = true;
			}
			if (Main.treeTopAltTexture[t, c].IsContentLost || Main.treeBranchAltTexture[t, c].IsContentLost)
			{
				Main.treeAltTextureDrawn[t, c] = false;
			}
			if (!Main.treeAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.treeTopAltTexture[t, c]);
				base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index].Apply();
				}
				else
				{
					if (c > 0 && c < 13)
					{
						int index2 = c + 27;
						Main.tileShader.CurrentTechnique.Passes[index2].Apply();
					}
					else
					{
						Main.tileShader.CurrentTechnique.Passes[c].Apply();
					}
				}
				Main.spriteBatch.Draw(Main.treeTopTexture[t], new Rectangle(0, 0, Main.treeTopTexture[t].Width, Main.treeTopTexture[t].Height), Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				base.GraphicsDevice.SetRenderTarget(Main.treeBranchAltTexture[t, c]);
				base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int index3 = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[index3].Apply();
				}
				else
				{
					if (c > 0 && c < 13)
					{
						int index4 = c + 27;
						Main.tileShader.CurrentTechnique.Passes[index4].Apply();
					}
					else
					{
						Main.tileShader.CurrentTechnique.Passes[c].Apply();
					}
				}
				Main.spriteBatch.Draw(Main.treeBranchTexture[t], new Rectangle(0, 0, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height), Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.treeAltTextureDrawn[t, c] = true;
			}
		}
		protected void wallColorCheck(int t, int c)
		{
			this.LoadWall(t);
			if (!Main.wallAltTextureInit[t, c])
			{
				Main.wallAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.wallTexture[t].Width, Main.wallTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.wallAltTextureInit[t, c] = true;
			}
			if (Main.wallAltTexture[t, c].IsContentLost)
			{
				Main.wallAltTextureDrawn[t, c] = false;
			}
			if (!Main.wallAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.wallAltTexture[t, c]);
				base.GraphicsDevice.Clear(new Color(0, 0, 0, 0));
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c == 30)
				{
					Main.tileShader.CurrentTechnique.Passes[43].Apply();
				}
				else
				{
					if (c >= 28)
					{
						int index = 40 + c - 28;
						Main.tileShader.CurrentTechnique.Passes[index].Apply();
					}
					else
					{
						Main.tileShader.CurrentTechnique.Passes[c].Apply();
					}
				}
				Main.spriteBatch.Draw(Main.wallTexture[t], new Rectangle(0, 0, Main.wallTexture[t].Width, Main.wallTexture[t].Height), Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.wallAltTextureDrawn[t, c] = true;
			}
		}
		public void UpdateWeather()
		{
			Main.cloudLimit = 200;
			if (Main.windSpeed < Main.windSpeedSet)
			{
				Main.windSpeed += 0.001f * (float)Main.dayRate;
				if (Main.windSpeed > Main.windSpeedSet)
				{
					Main.windSpeed = Main.windSpeedSet;
				}
			}
			else
			{
				if (Main.windSpeed > Main.windSpeedSet)
				{
					Main.windSpeed -= 0.001f * (float)Main.dayRate;
					if (Main.windSpeed < Main.windSpeedSet)
					{
						Main.windSpeed = Main.windSpeedSet;
					}
				}
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.netMode != 2 && Main.gameMenu)
			{
				return;
			}
			Main.windSpeedSpeed += (float)Main.rand.Next(-10, 11) * 0.0001f;
			if (!Main.dayTime)
			{
				Main.windSpeedSpeed += (float)Main.rand.Next(-10, 11) * 0.0002f;
			}
			if ((double)Main.windSpeedSpeed < -0.002)
			{
				Main.windSpeedSpeed = -0.002f;
			}
			if ((double)Main.windSpeedSpeed > 0.002)
			{
				Main.windSpeedSpeed = 0.002f;
			}
			Main.windSpeedTemp += Main.windSpeedSpeed;
			if (Main.raining)
			{
				Main.windSpeedTemp += Main.windSpeedSpeed * 2f;
			}
			float num = 0.3f + 0.5f * Main.cloudAlpha;
			if (Main.windSpeedTemp < -num)
			{
				Main.windSpeedTemp = -num;
			}
			if (Main.windSpeedTemp > num)
			{
				Main.windSpeedTemp = num;
			}
			if (Main.rand.Next(60) == 0)
			{
				Main.numCloudsTemp += Main.rand.Next(-1, 2);
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudBGAlpha)
			{
				Main.numCloudsTemp++;
			}
			if ((float)Main.rand.Next(1000) < 25f * (1f - Main.cloudBGAlpha))
			{
				Main.numCloudsTemp--;
			}
			if ((float)Main.rand.Next(1000) < 200f * Main.cloudAlpha && Main.numCloudsTemp < Main.cloudLimit / 2)
			{
				Main.numCloudsTemp++;
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudAlpha)
			{
				Main.numCloudsTemp++;
			}
			if (Main.numCloudsTemp > Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp -= Main.rand.Next(1, 3);
			}
			if (Main.numCloudsTemp < Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp += Main.rand.Next(1, 3);
			}
			if (Main.cloudBGActive <= 0f && Main.numCloudsTemp > Main.cloudLimit / 2 && Main.cloudAlpha == 0f)
			{
				Main.numCloudsTemp = Main.cloudLimit / 2;
			}
			if (Main.numCloudsTemp < 0)
			{
				Main.numCloudsTemp = 0;
			}
			if (Main.numCloudsTemp > Main.cloudLimit)
			{
				Main.numCloudsTemp = Main.cloudLimit;
			}
			Main.weatherCounter -= Main.dayRate;
			if (Main.weatherCounter <= 0)
			{
				Main.numClouds = Main.numCloudsTemp;
				Main.windSpeedSet = Main.windSpeedTemp;
				Main.weatherCounter = Main.rand.Next(3600, 18000);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
				}
			}
		}
		protected void LoadBackground(int i)
		{
			if (i >= 0 && !Main.backgroundLoaded[i])
			{
				Main.backgroundTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Background_",
					i
				}));
				Main.backgroundWidth[i] = Main.backgroundTexture[i].Width;
				Main.backgroundHeight[i] = Main.backgroundTexture[i].Height;
				Main.backgroundLoaded[i] = true;
				if (Main.backgroundWidth[i] == 0)
				{
					Debugger.Break();
				}
			}
		}
		protected void LoadNPC(int i)
		{
			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
			{
				Main.npcTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"NPC_",
					i
				}));
				Main.NPCLoaded[i] = true;
			}
		}
		protected void LoadProjectile(int i)
		{
			if (!Main.projectileLoaded[i])
			{
				Main.projectileTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Projectile_",
					i
				}));
				Main.projectileLoaded[i] = true;
			}
		}
		protected void LoadGore(int i)
		{
			if (!Main.goreLoaded[i])
			{
				Main.goreTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Gore_",
					i
				}));
				Main.goreLoaded[i] = true;
			}
		}
		protected void LoadWall(int i)
		{
			if (!Main.wallLoaded[i])
			{
				Main.wallTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Wall_",
					i
				}));
				Main.wallLoaded[i] = true;
			}
		}
		protected void LoadTiles(int i)
		{
			if (!Main.tileSetsLoaded[i])
			{
				Main.tileTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Tiles_",
					i
				}));
				Main.tileSetsLoaded[i] = true;
			}
		}
		protected void LoadItemFlames(int i)
		{
			if (!Main.itemFlameLoaded[i])
			{
				try
				{
					Main.itemFlameTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
					{
						"Images",
						Path.DirectorySeparatorChar,
						"ItemFlame_",
						i
					}));
				}
				catch
				{
				}
				Main.itemFlameLoaded[i] = true;
			}
		}
		protected void LoadWings(int i)
		{
			if (!Main.wingsLoaded[i])
			{
				Main.wingsTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Wings_",
					i
				}));
				Main.wingsLoaded[i] = true;
			}
		}
		protected void LoadHair(int i)
		{
			if (!Main.hairLoaded[i])
			{
				Main.playerHairTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Player_Hair_",
					i + 1
				}));
				Main.playerHairAltTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Player_HairAlt_",
					i + 1
				}));
				Main.hairLoaded[i] = true;
			}
		}
		protected void LoadArmorHead(int i)
		{
			if (!Main.armorHeadLoaded[i])
			{
				Main.armorHeadTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Head_",
					i
				}));
				Main.armorHeadLoaded[i] = true;
			}
		}
		protected void LoadArmorBody(int i)
		{
			if (!Main.armorBodyLoaded[i])
			{
				Main.femaleBodyTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Female_Body_",
					i
				}));
				Main.armorBodyTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Body_",
					i
				}));
				Main.armorArmTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Arm_",
					i
				}));
				Main.armorBodyLoaded[i] = true;
			}
		}
		protected void LoadArmorLegs(int i)
		{
			if (!Main.armorLegsLoaded[i])
			{
				Main.armorLegTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
				{
					"Images",
					Path.DirectorySeparatorChar,
					"Armor_Legs_",
					i
				}));
				Main.armorLegsLoaded[i] = true;
			}
		}
		protected void LoadAccHandsOn(int i)
		{
			if (!Main.accHandsOnLoaded[i])
			{
				Main.accHandsOnTexture[i] = base.Content.Load<Texture2D>("Images/Acc_HandsOn_" + i);
				Main.accHandsOnLoaded[i] = true;
			}
		}
		protected void LoadAccHandsOff(int i)
		{
			if (!Main.accHandsOffLoaded[i])
			{
				Main.accHandsOffTexture[i] = base.Content.Load<Texture2D>("Images/Acc_HandsOff_" + i);
				Main.accHandsOffLoaded[i] = true;
			}
		}
		protected void LoadAccBack(int i)
		{
			if (!Main.accBackLoaded[i])
			{
				Main.accBackTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Back_" + i);
				Main.accBackLoaded[i] = true;
			}
		}
		protected void LoadAccFront(int i)
		{
			if (!Main.accFrontLoaded[i])
			{
				Main.accFrontTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Front_" + i);
				Main.accFrontLoaded[i] = true;
			}
		}
		protected void LoadAccShoes(int i)
		{
			if (!Main.accShoesLoaded[i])
			{
				Main.accShoesTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Shoes_" + i);
				Main.accShoesLoaded[i] = true;
			}
		}
		protected void LoadAccWaist(int i)
		{
			if (!Main.accWaistLoaded[i])
			{
				Main.accWaistTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Waist_" + i);
				Main.accWaistLoaded[i] = true;
			}
		}
		protected void LoadAccShield(int i)
		{
			if (!Main.accShieldLoaded[i])
			{
				Main.accShieldTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Shield_" + i);
				Main.accShieldLoaded[i] = true;
			}
		}
		protected void LoadAccNeck(int i)
		{
			if (!Main.accNeckLoaded[i])
			{
				Main.accNeckTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Neck_" + i);
				Main.accNeckLoaded[i] = true;
			}
		}
		protected void LoadAccFace(int i)
		{
			if (!Main.accFaceLoaded[i])
			{
				Main.accFaceTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Face_" + i);
				Main.accFaceLoaded[i] = true;
			}
		}
		protected void LoadAccBalloon(int i)
		{
			if (!Main.accballoonLoaded[i])
			{
				Main.accBalloonTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Balloon_" + i);
				Main.accballoonLoaded[i] = true;
			}
		}
		protected void DrawSurfaceBG()
		{
			if (!Main.mapFullscreen && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.cloud[i].active && Main.cloud[i].scale < 1f)
					{
						Color color = Main.cloud[i].cloudColor(Main.bgColor);
						float num = Main.cloud[i].scale * 0.8f;
						float num2 = (Main.cloud[i].scale + 1f) / 2f * 0.9f;
						color.R = (byte)((float)color.R * num);
						color.G = (byte)((float)color.G * num2);
						Main.atmo = 1f;
						if (Main.atmo < 1f)
						{
							color.R = (byte)((float)color.R * Main.atmo);
							color.G = (byte)((float)color.G * Main.atmo);
							color.B = (byte)((float)color.B * Main.atmo);
							color.A = (byte)((float)color.A * Main.atmo);
						}
						float num3 = Main.cloud[i].position.Y * ((float)Main.screenHeight / 600f);
						num3 = Main.cloud[i].position.Y + (float)((int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 750.0 + 830.0)) + (float)((int)this.scAdj);
						Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[i].type], new Vector2(Main.cloud[i].position.X + (float)Main.cloudTexture[Main.cloud[i].type].Width * 0.5f, num3 + (float)Main.cloudTexture[Main.cloud[i].type].Height * 0.5f), new Rectangle?(new Rectangle(0, 0, Main.cloudTexture[Main.cloud[i].type].Width, Main.cloudTexture[Main.cloud[i].type].Height)), color, Main.cloud[i].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[i].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[i].type].Height * 0.5f), Main.cloud[i].scale, Main.cloud[i].spriteDir, 0f);
					}
				}
			}
			Main.atmo = 1f;
			Main.bgScale *= 2f;
			this.bgParrallax = 0.15;
			if (Main.atmo < 1f)
			{
				Main.backColor.R = (byte)((float)Main.backColor.R * Main.atmo);
				Main.backColor.G = (byte)((float)Main.backColor.G * Main.atmo);
				Main.backColor.B = (byte)((float)Main.backColor.B * Main.atmo);
				Main.backColor.A = (byte)((float)Main.backColor.A * Main.atmo);
			}
			if (!Main.mapFullscreen && (double)(Main.screenPosition.Y / 16f) <= Main.worldSurface + 10.0)
			{
				if (Main.owBack)
				{
					if (Main.cloudBGActive > 0f)
					{
						Main.cloudBGAlpha += 0.0005f * (float)Main.dayRate;
						if (Main.cloudBGAlpha > 1f)
						{
							Main.cloudBGAlpha = 1f;
						}
					}
					else
					{
						Main.cloudBGAlpha -= 0.0005f * (float)Main.dayRate;
						if (Main.cloudBGAlpha < 0f)
						{
							Main.cloudBGAlpha = 0f;
						}
					}
					if (Main.cloudBGAlpha > 0f)
					{
						this.LoadBackground(Main.cloudBG[0]);
						this.LoadBackground(Main.cloudBG[1]);
						Main.bgScale *= 2f;
						this.bgParrallax = 0.15;
						float num4 = Main.cloudBGAlpha;
						if (num4 > 1f)
						{
							num4 = 1f;
						}
						Main.bgScale = 1.65f;
						this.bgParrallax = 0.090000003576278687;
						if (base.IsActive)
						{
							Main.cloudBGX[0] += Main.windSpeed * (float)this.bgParrallax * 5f * (float)Main.dayRate;
						}
						if (Main.cloudBGX[0] > (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale)
						{
							Main.cloudBGX[0] -= (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
						}
						if (Main.cloudBGX[0] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[0]]) * Main.bgScale)
						{
							Main.cloudBGX[0] += (float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale;
						}
						Main.bgW = (int)((float)Main.backgroundWidth[Main.cloudBG[0]] * Main.bgScale);
						this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 900.0 + 600.0) + (int)this.scAdj;
						if (Main.gameMenu)
						{
							this.bgTop = -150;
						}
						this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2) - (double)Main.bgW);
						this.bgStart += (int)Main.cloudBGX[0];
						this.bgLoops = Main.screenWidth / Main.bgW + 2 + 2;
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * num4);
						Main.backColor.G = (byte)((float)Main.backColor.G * num4);
						Main.backColor.B = (byte)((float)Main.backColor.B * num4);
						Main.backColor.A = (byte)((float)Main.backColor.A * num4);
						for (int j = 0; j < this.bgLoops; j++)
						{
							Main.spriteBatch.Draw(Main.backgroundTexture[Main.cloudBG[0]], new Vector2((float)(this.bgStart + Main.bgW * j), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[0]], Main.backgroundHeight[Main.cloudBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
						}
						num4 = Main.cloudBGAlpha * 1.5f;
						if (num4 > 1f)
						{
							num4 = 1f;
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * num4);
						Main.backColor.G = (byte)((float)Main.backColor.G * num4);
						Main.backColor.B = (byte)((float)Main.backColor.B * num4);
						Main.backColor.A = (byte)((float)Main.backColor.A * num4);
						Main.bgScale = 1.85f;
						this.bgParrallax = 0.12;
						if (base.IsActive)
						{
							Main.cloudBGX[1] += Main.windSpeed * (float)this.bgParrallax * 5f * (float)Main.dayRate;
						}
						if (Main.cloudBGX[1] > (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale)
						{
							Main.cloudBGX[1] -= (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
						}
						if (Main.cloudBGX[1] < (float)(-(float)Main.backgroundWidth[Main.cloudBG[1]]) * Main.bgScale)
						{
							Main.cloudBGX[1] += (float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale;
						}
						Main.bgW = (int)((float)Main.backgroundWidth[Main.cloudBG[1]] * Main.bgScale);
						this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1100.0 + 750.0) + (int)this.scAdj;
						if (Main.gameMenu)
						{
							this.bgTop = -50;
						}
						this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2) - (double)Main.bgW);
						this.bgStart += (int)Main.cloudBGX[1];
						this.bgLoops = Main.screenWidth / Main.bgW + 2 + 2;
						for (int k = 0; k < this.bgLoops; k++)
						{
							Main.spriteBatch.Draw(Main.backgroundTexture[Main.cloudBG[1]], new Vector2((float)(this.bgStart + Main.bgW * k), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.cloudBG[1]], Main.backgroundHeight[Main.cloudBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
						}
					}
					this.LoadBackground(Main.treeMntBG[0]);
					this.LoadBackground(Main.treeMntBG[1]);
					Main.bgScale = 1f;
					this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1300.0 + 1090.0) + (int)this.scAdj;
					Main.bgScale *= 2f;
					this.bgParrallax = 0.15;
					Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[0]] * Main.bgScale);
					this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
					this.bgLoops = Main.screenWidth / Main.bgW + 2;
					if (Main.gameMenu)
					{
						this.bgTop = 100;
					}
					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
					{
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[0]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[0]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[0]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[0]);
						if (Main.bgAlpha2[0] > 0f)
						{
							if (Main.treeMntBG[0] == 93 || (Main.treeMntBG[0] >= 168 && Main.treeMntBG[0] <= 170))
							{
								this.bgTop -= 50;
							}
							if (Main.treeMntBG[0] == 171)
							{
								this.bgTop -= 100;
							}
							if (Main.treeMntBG[0] == 176)
							{
								this.bgTop += 250;
							}
							if (Main.treeMntBG[0] == 179)
							{
								this.bgTop -= 100;
							}
							for (int l = 0; l < this.bgLoops; l++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeMntBG[0]], new Vector2((float)(this.bgStart + Main.bgW * l), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.treeMntBG[0]], Main.backgroundHeight[Main.treeMntBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
							if (Main.treeMntBG[0] == 93 || (Main.treeMntBG[0] >= 168 && Main.treeMntBG[0] <= 170))
							{
								this.bgTop += 50;
							}
							if (Main.treeMntBG[0] == 171)
							{
								this.bgTop += 100;
							}
							if (Main.treeMntBG[0] == 176)
							{
								this.bgTop -= 250;
							}
							if (Main.treeMntBG[0] == 179)
							{
								this.bgTop += 100;
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[1]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[1]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[1]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[1]);
						if (Main.bgAlpha2[1] > 0f)
						{
							this.LoadBackground(23);
							for (int m = 0; m < this.bgLoops; m++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[23], new Vector2((float)(this.bgStart + Main.bgW * m), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[23], Main.backgroundHeight[23])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[2]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[2]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[2]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[2]);
						if (Main.bgAlpha2[2] > 0f)
						{
							this.LoadBackground(24);
							for (int n = 0; n < this.bgLoops; n++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * n), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[4]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[4]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[4]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[4]);
						if (Main.bgAlpha2[4] > 0f)
						{
							this.LoadBackground(Main.snowMntBG[0]);
							for (int num5 = 0; num5 < this.bgLoops; num5++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowMntBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num5), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.snowMntBG[0]], Main.backgroundHeight[Main.snowMntBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[5]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[5]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[5]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[5]);
						if (Main.bgAlpha2[5] > 0f)
						{
							this.LoadBackground(24);
							for (int num6 = 0; num6 < this.bgLoops; num6++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * num6), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
					}
				}
				this.cTop = (float)(this.bgTop - 50);
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int num7 = 0; num7 < 200; num7++)
					{
						if (Main.cloud[num7].active && (double)Main.cloud[num7].scale < 1.15 && Main.cloud[num7].scale >= 1f)
						{
							Color color2 = Main.cloud[num7].cloudColor(Main.bgColor);
							if (Main.atmo < 1f)
							{
								color2.R = (byte)((float)color2.R * Main.atmo);
								color2.G = (byte)((float)color2.G * Main.atmo);
								color2.B = (byte)((float)color2.B * Main.atmo);
								color2.A = (byte)((float)color2.A * Main.atmo);
							}
							float num8 = Main.cloud[num7].position.Y * ((float)Main.screenHeight / 600f);
							float num9 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
							if (num9 < 0f)
							{
								num9 = 0f;
							}
							if (num9 > 1f)
							{
							}
							if (Main.gameMenu)
							{
							}
							Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[num7].type], new Vector2(Main.cloud[num7].position.X + (float)Main.cloudTexture[Main.cloud[num7].type].Width * 0.5f, num8 + (float)Main.cloudTexture[Main.cloud[num7].type].Height * 0.5f + this.cTop + 200f), new Rectangle?(new Rectangle(0, 0, Main.cloudTexture[Main.cloud[num7].type].Width, Main.cloudTexture[Main.cloud[num7].type].Height)), color2, Main.cloud[num7].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[num7].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[num7].type].Height * 0.5f), Main.cloud[num7].scale, Main.cloud[num7].spriteDir, 0f);
						}
					}
				}
				if (Main.holyTiles > 0 && Main.owBack)
				{
					this.bgParrallax = 0.17;
					Main.bgScale = 1.1f;
					Main.bgScale *= 2f;
					Main.bgW = (int)((double)(3500f * Main.bgScale) * 1.05);
					this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
					this.bgLoops = Main.screenWidth / Main.bgW + 2;
					this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1400.0 + 900.0) + (int)this.scAdj;
					if (Main.gameMenu)
					{
						this.bgTop = 230;
						this.bgStart -= 500;
					}
					Color color3 = Main.trueBackColor;
					float num10 = (float)Main.holyTiles / 400f;
					if (num10 > 0.5f)
					{
						num10 = 0.5f;
					}
					color3.R = (byte)((float)color3.R * num10);
					color3.G = (byte)((float)color3.G * num10);
					color3.B = (byte)((float)color3.B * num10);
					color3.A = (byte)((float)color3.A * num10 * 0.8f);
					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
					{
						this.LoadBackground(18);
						this.LoadBackground(19);
						for (int num11 = 0; num11 < this.bgLoops; num11++)
						{
							Main.spriteBatch.Draw(Main.backgroundTexture[18], new Vector2((float)(this.bgStart + Main.bgW * num11), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[18], Main.backgroundHeight[18])), color3, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.backgroundTexture[19], new Vector2((float)(this.bgStart + Main.bgW * num11 + 1700), (float)(this.bgTop + 100)), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[19], Main.backgroundHeight[19])), color3, 0f, default(Vector2), Main.bgScale * 0.9f, SpriteEffects.None, 0f);
						}
					}
				}
				if (Main.treeMntBG[1] > -1)
				{
					this.LoadBackground(Main.treeMntBG[1]);
					this.bgParrallax = 0.2;
					Main.bgScale = 1.15f;
					Main.bgScale *= 2f;
					Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[1]] * Main.bgScale);
					this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
					this.bgLoops = Main.screenWidth / Main.bgW + 2;
					this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1400.0 + 1260.0) + (int)this.scAdj;
				}
				if (Main.owBack)
				{
					if (Main.gameMenu)
					{
						this.bgTop = 230;
						this.bgStart -= 500;
					}
					if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
					{
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[0]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[0]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[0]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[0]);
						if (Main.bgAlpha2[0] > 0f && Main.treeMntBG[1] > -1)
						{
							if (Main.treeMntBG[1] == 172)
							{
								this.bgTop += 130;
							}
							if (Main.treeMntBG[1] == 177)
							{
								this.bgTop += 200;
							}
							if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
							{
								this.bgTop -= 350;
							}
							for (int num12 = 0; num12 < this.bgLoops; num12++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeMntBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num12), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.treeMntBG[1]], Main.backgroundHeight[Main.treeMntBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
							if (Main.treeMntBG[1] == 172)
							{
								this.bgTop -= 130;
							}
							if (Main.treeMntBG[1] == 177)
							{
								this.bgTop -= 200;
							}
							if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
							{
								this.bgTop += 350;
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[1]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[1]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[1]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[1]);
						if (Main.bgAlpha2[1] > 0f)
						{
							this.LoadBackground(22);
							for (int num13 = 0; num13 < this.bgLoops; num13++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[22], new Vector2((float)(this.bgStart + Main.bgW * num13), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[22], Main.backgroundHeight[22])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[2]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[2]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[2]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[2]);
						if (Main.bgAlpha2[2] > 0f)
						{
							this.LoadBackground(25);
							for (int num14 = 0; num14 < this.bgLoops; num14++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[25], new Vector2((float)(this.bgStart + Main.bgW * num14), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[25], Main.backgroundHeight[25])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[3]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[3]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[3]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[3]);
						if (Main.bgAlpha2[3] > 0f)
						{
							this.LoadBackground(Main.oceanBG);
							for (int num15 = 0; num15 < this.bgLoops; num15++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.oceanBG], new Vector2((float)(this.bgStart + Main.bgW * num15), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.oceanBG], Main.backgroundHeight[Main.oceanBG])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[4]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[4]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[4]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[4]);
						if (Main.bgAlpha2[4] > 0f)
						{
							this.LoadBackground(Main.snowMntBG[1]);
							for (int num16 = 0; num16 < this.bgLoops; num16++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowMntBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num16), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.snowMntBG[1]], Main.backgroundHeight[Main.snowMntBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha2[5]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha2[5]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha2[5]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha2[5]);
						if (Main.bgAlpha2[5] > 0f)
						{
							this.LoadBackground(42);
							for (int num17 = 0; num17 < this.bgLoops; num17++)
							{
								Main.spriteBatch.Draw(Main.backgroundTexture[42], new Vector2((float)(this.bgStart + Main.bgW * num17), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[42], Main.backgroundHeight[42])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
							}
						}
					}
				}
				this.cTop = (float)this.bgTop * 1.01f - 150f;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int num18 = 0; num18 < 200; num18++)
					{
						if (Main.cloud[num18].active && Main.cloud[num18].scale >= 1.15f)
						{
							Color color4 = Main.cloud[num18].cloudColor(Main.bgColor);
							if (Main.atmo < 1f)
							{
								color4.R = (byte)((float)color4.R * Main.atmo);
								color4.G = (byte)((float)color4.G * Main.atmo);
								color4.B = (byte)((float)color4.B * Main.atmo);
								color4.A = (byte)((float)color4.A * Main.atmo);
							}
							float num19 = Main.cloud[num18].position.Y * ((float)Main.screenHeight / 600f) - 100f;
							float num20 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
							if (num20 < 0f)
							{
								num20 = 0f;
							}
							if (num20 > 1f)
							{
							}
							if (Main.gameMenu)
							{
							}
							Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[num18].type], new Vector2(Main.cloud[num18].position.X + (float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, num19 + (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f + this.cTop), new Rectangle?(new Rectangle(0, 0, Main.cloudTexture[Main.cloud[num18].type].Width, Main.cloudTexture[Main.cloud[num18].type].Height)), color4, Main.cloud[num18].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f), Main.cloud[num18].scale, Main.cloud[num18].spriteDir, 0f);
						}
					}
				}
			}
			if (!Main.mapFullscreen)
			{
				for (int num21 = 0; num21 < 10; num21++)
				{
					if (Main.bgStyle == num21)
					{
						Main.bgAlpha[num21] += Main.tranSpeed;
						if (Main.bgAlpha[num21] > 1f)
						{
							Main.bgAlpha[num21] = 1f;
						}
					}
					else
					{
						Main.bgAlpha[num21] -= Main.tranSpeed;
						if (Main.bgAlpha[num21] < 0f)
						{
							Main.bgAlpha[num21] = 0f;
						}
					}
					if (Main.owBack)
					{
						Main.backColor = Main.trueBackColor;
						Main.backColor.R = (byte)((float)Main.backColor.R * Main.bgAlpha[num21]);
						Main.backColor.G = (byte)((float)Main.backColor.G * Main.bgAlpha[num21]);
						Main.backColor.B = (byte)((float)Main.backColor.B * Main.bgAlpha[num21]);
						Main.backColor.A = (byte)((float)Main.backColor.A * Main.bgAlpha[num21]);
						if (Main.bgAlpha[num21] > 0f && num21 == 3)
						{
							this.LoadBackground(Main.jungleBG[0]);
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[Main.jungleBG[0]] * Main.bgScale);
							this.bgParrallax = 0.4;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1660.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							if (Main.jungleBG[0] == 59)
							{
								this.bgTop -= 200;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num22 = 0; num22 < this.bgLoops; num22++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num22), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[0]], Main.backgroundHeight[Main.jungleBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							this.LoadBackground(Main.jungleBG[1]);
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[Main.jungleBG[1]] * Main.bgScale);
							this.bgParrallax = 0.43;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1840.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							if (Main.jungleBG[1] == 60)
							{
								this.bgTop -= 175;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num23 = 0; num23 < this.bgLoops; num23++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num23), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[1]], Main.backgroundHeight[Main.jungleBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.FlipHorizontally, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.jungleBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.jungleBG[2]] * Main.bgScale);
							this.bgParrallax = 0.49;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2060.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							if (Main.jungleBG[2] == 61)
							{
								this.bgTop -= 150;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num24 = 0; num24 < this.bgLoops; num24++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.jungleBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num24), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.jungleBG[2]], Main.backgroundHeight[Main.jungleBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 2)
						{
							this.LoadBackground(Main.desertBG[0]);
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[Main.desertBG[0]] * Main.bgScale);
							this.bgParrallax = 0.37;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num25 = 0; num25 < this.bgLoops; num25++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.desertBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num25), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.desertBG[0]], Main.backgroundHeight[Main.desertBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.desertBG[1]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.desertBG[1]] * Main.bgScale);
							this.bgParrallax = 0.49;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2150.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num26 = 0; num26 < this.bgLoops; num26++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.desertBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num26), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.desertBG[1]], Main.backgroundHeight[Main.desertBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 5)
						{
							this.LoadBackground(26);
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							Main.bgW = (int)((float)Main.backgroundWidth[26] * Main.bgScale);
							this.bgParrallax = 0.37;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num27 = 0; num27 < this.bgLoops; num27++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[26], new Vector2((float)(this.bgStart + Main.bgW * num27), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[26], Main.backgroundHeight[26])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(27);
							Main.bgW = (int)((float)Main.backgroundWidth[27] * Main.bgScale);
							this.bgParrallax = 0.49;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2150.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num28 = 0; num28 < this.bgLoops; num28++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[27], new Vector2((float)(this.bgStart + Main.bgW * num28), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[27], Main.backgroundHeight[27])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 1)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.corruptBG[0]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.corruptBG[0]] * Main.bgScale);
							this.bgParrallax = 0.4;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							if (Main.corruptBG[0] == 56)
							{
								this.bgTop -= 100;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num29 = 0; num29 < this.bgLoops; num29++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.corruptBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num29), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.corruptBG[0]], Main.backgroundHeight[Main.corruptBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.corruptBG[1]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.corruptBG[1]] * Main.bgScale);
							this.bgParrallax = 0.43;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							if (Main.corruptBG[0] == 56)
							{
								this.bgTop -= 100;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								try
								{
									for (int num30 = 0; num30 < this.bgLoops; num30++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.corruptBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num30), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.corruptBG[1]], Main.backgroundHeight[Main.corruptBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.FlipHorizontally, 0f);
									}
								}
								catch
								{
									this.LoadBackground(Main.corruptBG[1]);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.corruptBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.corruptBG[2]] * Main.bgScale);
							this.bgParrallax = 0.49;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							if (Main.corruptBG[0] == 56)
							{
								this.bgTop -= 100;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num31 = 0; num31 < this.bgLoops; num31++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.corruptBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num31), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.corruptBG[2]], Main.backgroundHeight[Main.corruptBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 6)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.hallowBG[0]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.hallowBG[0]] * Main.bgScale);
							this.bgParrallax = 0.4;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num32 = 0; num32 < this.bgLoops; num32++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num32), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[0]], Main.backgroundHeight[Main.hallowBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.hallowBG[1]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.hallowBG[1]] * Main.bgScale);
							this.bgParrallax = 0.43;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num33 = 0; num33 < this.bgLoops; num33++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num33), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[1]], Main.backgroundHeight[Main.hallowBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.hallowBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.hallowBG[2]] * Main.bgScale);
							this.bgParrallax = 0.49;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num34 = 0; num34 < this.bgLoops; num34++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.hallowBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num34), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.hallowBG[2]], Main.backgroundHeight[Main.hallowBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 0)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.bgParrallax = 0.4;
							if (Main.treeBG[0] == 91)
							{
								this.bgParrallax = 0.27000001072883606;
								Main.bgScale = 1.2f;
								Main.bgScale *= 2f;
							}
							if (Main.treeBG[0] == 173)
							{
								this.bgParrallax = 0.25;
								Main.bgScale = 1.3f;
								Main.bgScale *= 2f;
							}
							if (Main.treeBG[0] == 178)
							{
								this.bgParrallax = 0.30000001192092896;
								Main.bgScale = 1.2f;
								Main.bgScale *= 2f;
							}
							if (Main.treeBG[0] == 184)
							{
								this.bgParrallax = 0.25;
								Main.bgScale = 1.2f;
								Main.bgScale *= 2f;
							}
							if (Main.treeBG[0] >= 0)
							{
								this.LoadBackground(Main.treeBG[0]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.treeBG[0]] * Main.bgScale);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
								if (Main.treeBG[0] == 91)
								{
									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
								}
								if (Main.treeBG[0] == 173)
								{
									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
								}
								if (Main.treeBG[0] == 184)
								{
									this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
								}
								if (Main.gameMenu)
								{
									this.bgTop = 320;
								}
								if (Main.treeBG[0] == 50)
								{
									this.bgTop -= 50;
								}
								if (Main.treeBG[0] == 53)
								{
									this.bgTop -= 100;
								}
								if (Main.treeBG[0] == 91)
								{
									this.bgTop += 200;
								}
								if (Main.treeBG[0] == 173)
								{
									this.bgTop += 200;
								}
								if (Main.treeBG[0] == 178)
								{
									this.bgTop += 75;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num35 = 0; num35 < this.bgLoops; num35++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num35), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.treeBG[0]], Main.backgroundHeight[Main.treeBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
							if (Main.treeBG[1] >= 0)
							{
								this.LoadBackground(Main.treeBG[1]);
								Main.bgScale = 1.31f;
								Main.bgScale *= 2f;
								Main.bgW = (int)((float)Main.backgroundWidth[Main.treeBG[1]] * Main.bgScale);
								this.bgParrallax = 0.43;
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 400;
									this.bgStart -= 80;
								}
								if (Main.treeBG[1] == 51)
								{
									this.bgTop -= 50;
								}
								if (Main.treeBG[1] == 54)
								{
									this.bgTop -= 100;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num36 = 0; num36 < this.bgLoops; num36++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num36), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.treeBG[1]], Main.backgroundHeight[Main.treeBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.FlipHorizontally, 0f);
									}
								}
							}
							if (Main.treeBG[2] >= 0)
							{
								this.LoadBackground(Main.treeBG[2]);
								Main.bgScale = 1.34f;
								Main.bgScale *= 2f;
								this.bgParrallax = 0.49;
								if (Main.treeBG[0] == 91)
								{
									Main.bgScale = 1.3f;
									Main.bgScale *= 2f;
									this.bgParrallax = 0.42;
								}
								Main.bgW = (int)((float)Main.backgroundWidth[Main.treeBG[2]] * Main.bgScale);
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 480;
									this.bgStart -= 120;
								}
								if (Main.treeBG[2] == 52)
								{
									this.bgTop -= 50;
								}
								if (Main.treeBG[2] == 55)
								{
									this.bgTop -= 100;
								}
								if (Main.treeBG[2] == 92)
								{
									this.bgTop += 150;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num37 = 0; num37 < this.bgLoops; num37++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.treeBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num37), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.treeBG[2]], Main.backgroundHeight[Main.treeBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 7)
						{
							if (Main.snowBG[0] >= 0)
							{
								Main.bgScale = 1.25f;
								Main.bgScale *= 2f;
								this.LoadBackground(Main.snowBG[0]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.snowBG[0]] * Main.bgScale);
								this.bgParrallax = 0.4;
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 320;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num38 = 0; num38 < this.bgLoops; num38++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num38), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.snowBG[0]], Main.backgroundHeight[Main.snowBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
							if (Main.snowBG[1] >= 0)
							{
								Main.bgScale = 1.31f;
								Main.bgScale *= 2f;
								this.LoadBackground(Main.snowBG[1]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.snowBG[1]] * Main.bgScale);
								this.bgParrallax = 0.43;
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 400;
									this.bgStart -= 80;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num39 = 0; num39 < this.bgLoops; num39++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num39), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.snowBG[1]], Main.backgroundHeight[Main.snowBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
							if (Main.snowBG[2] >= 0)
							{
								Main.bgScale = 1.34f;
								Main.bgScale *= 2f;
								this.LoadBackground(Main.snowBG[2]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.snowBG[2]] * Main.bgScale);
								this.bgParrallax = 0.49;
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 480;
									this.bgStart -= 120;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num40 = 0; num40 < this.bgLoops; num40++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.snowBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num40), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.snowBG[2]], Main.backgroundHeight[Main.snowBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 8)
						{
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.crimsonBG[0]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.crimsonBG[0]] * Main.bgScale);
							this.bgParrallax = 0.4;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
							if (Main.crimsonBG[0] == 105)
							{
								this.bgTop += 50;
							}
							if (Main.crimsonBG[0] == 174)
							{
								this.bgTop -= 350;
							}
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num41 = 0; num41 < this.bgLoops; num41++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.crimsonBG[0]], new Vector2((float)(this.bgStart + Main.bgW * num41), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.crimsonBG[0]], Main.backgroundHeight[Main.crimsonBG[0]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							Main.bgScale = 1.31f;
							Main.bgScale *= 2f;
							if (Main.crimsonBG[1] > -1)
							{
								this.LoadBackground(Main.crimsonBG[1]);
								Main.bgW = (int)((float)Main.backgroundWidth[Main.crimsonBG[1]] * Main.bgScale);
								this.bgParrallax = 0.43;
								this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
								this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
								if (Main.gameMenu)
								{
									this.bgTop = 400;
									this.bgStart -= 80;
								}
								this.bgLoops = Main.screenWidth / Main.bgW + 2;
								if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
								{
									for (int num42 = 0; num42 < this.bgLoops; num42++)
									{
										Main.spriteBatch.Draw(Main.backgroundTexture[Main.crimsonBG[1]], new Vector2((float)(this.bgStart + Main.bgW * num42), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.crimsonBG[1]], Main.backgroundHeight[Main.crimsonBG[1]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
									}
								}
							}
							Main.bgScale = 1.34f;
							Main.bgScale *= 2f;
							this.LoadBackground(Main.crimsonBG[2]);
							Main.bgW = (int)((float)Main.backgroundWidth[Main.crimsonBG[2]] * Main.bgScale);
							this.bgParrallax = 0.49;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							if (Main.crimsonBG[2] == 175)
							{
								this.bgStart -= 1000;
								this.bgTop -= 400;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num43 = 0; num43 < this.bgLoops; num43++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[Main.crimsonBG[2]], new Vector2((float)(this.bgStart + Main.bgW * num43), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[Main.crimsonBG[2]], Main.backgroundHeight[Main.crimsonBG[2]])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
						if (Main.bgAlpha[num21] > 0f && num21 == 9)
						{
							float num44 = (float)Main.backColor.A / 255f;
							Color color5 = Main.backColor;
							float num45 = (float)Main.rand.Next(28, 42) * 0.001f;
							num45 += (float)(270 - (int)Main.mouseTextColor) / 5000f;
							float num46 = 0.1f;
							float num47 = 0.15f + num45 / 2f;
							float num48 = 0.3f + num45;
							num46 *= 255f;
							num47 *= 255f;
							num48 *= 255f;
							num46 *= 0.33f * num44;
							num47 *= 0.33f * num44;
							num48 *= 0.33f * num44;
							if (num46 > 255f)
							{
								num46 = 255f;
							}
							if (num47 > 255f)
							{
								num47 = 255f;
							}
							if (num48 > 255f)
							{
								num48 = 255f;
							}
							if (num46 > (float)color5.R)
							{
								color5.R = (byte)num46;
							}
							if (num47 > (float)color5.G)
							{
								color5.G = (byte)num47;
							}
							if (num48 > (float)color5.B)
							{
								color5.B = (byte)num48;
							}
							Main.bgScale = 1.25f;
							Main.bgScale *= 2f;
							this.LoadBackground(46);
							Main.bgW = (int)((float)Main.backgroundWidth[46] * Main.bgScale);
							this.bgParrallax = 0.4;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1800.0 + 1400.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 320;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num49 = 0; num49 < this.bgLoops; num49++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[46], new Vector2((float)(this.bgStart + Main.bgW * num49), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[46], Main.backgroundHeight[46])), color5, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							color5 = Main.backColor;
							num45 = (float)Main.rand.Next(28, 42) * 0.001f;
							num45 += (float)(270 - (int)Main.mouseTextColor) / 5000f;
							num46 = 0.1f;
							num47 = 0.175f + num45 / 2f;
							num48 = 0.3f + num45;
							num46 *= 255f;
							num47 *= 255f;
							num48 *= 255f;
							num46 *= 0.5f * num44;
							num47 *= 0.5f * num44;
							num48 *= 0.5f * num44;
							if (num46 > 255f)
							{
								num46 = 255f;
							}
							if (num47 > 255f)
							{
								num47 = 255f;
							}
							if (num48 > 255f)
							{
								num48 = 255f;
							}
							if (num46 > (float)color5.R)
							{
								color5.R = (byte)num46;
							}
							if (num47 > (float)color5.G)
							{
								color5.G = (byte)num47;
							}
							if (num48 > (float)color5.B)
							{
								color5.B = (byte)num48;
							}
							Main.bgScale = 1.32f;
							Main.bgScale *= 2f;
							this.LoadBackground(47);
							Main.bgW = (int)((float)Main.backgroundWidth[47] * Main.bgScale);
							this.bgParrallax = 0.43;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1950.0 + 1675.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 400;
								this.bgStart -= 80;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num50 = 0; num50 < this.bgLoops; num50++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[47], new Vector2((float)(this.bgStart + Main.bgW * num50), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[47], Main.backgroundHeight[47])), color5, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
							color5 = Main.backColor;
							num45 = (float)Main.rand.Next(28, 42) * 0.001f;
							num45 += (float)(270 - (int)Main.mouseTextColor) / 3000f;
							num46 = 0.125f;
							num47 = 0.2f + num45 / 2f;
							num48 = 0.3f + num45;
							num46 *= 255f * num44 * 0.75f;
							num47 *= 255f * num44 * 0.75f;
							num48 *= 255f * num44 * 0.75f;
							if (num46 > 255f)
							{
								num46 = 255f;
							}
							if (num47 > 255f)
							{
								num47 = 255f;
							}
							if (num48 > 255f)
							{
								num48 = 255f;
							}
							if (num46 > (float)color5.R)
							{
								color5.R = (byte)num46;
							}
							if (num47 > (float)color5.G)
							{
								color5.G = (byte)num47;
							}
							if (num48 > (float)color5.B)
							{
								color5.B = (byte)num48;
							}
							Main.bgScale = 1.36f;
							Main.bgScale *= 2f;
							this.LoadBackground(48);
							Main.bgW = (int)((float)Main.backgroundWidth[48] * Main.bgScale);
							this.bgParrallax = 0.49;
							this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.bgW) - (double)(Main.bgW / 2));
							this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 2100.0 + 1950.0) + (int)this.scAdj;
							if (Main.gameMenu)
							{
								this.bgTop = 480;
								this.bgStart -= 120;
							}
							this.bgLoops = Main.screenWidth / Main.bgW + 2;
							if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
							{
								for (int num51 = 0; num51 < this.bgLoops; num51++)
								{
									Main.spriteBatch.Draw(Main.backgroundTexture[48], new Vector2((float)(this.bgStart + Main.bgW * num51), (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.backgroundWidth[48], Main.backgroundHeight[48])), color5, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
			}
			if (!Main.mapFullscreen && Main.cloudAlpha > 0f && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
			{
				this.bgParrallax = 0.1;
				this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
				this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
				this.bgStartY = 0;
				this.bgLoopsY = 0;
				this.bgTop = (int)((double)(-(double)Main.screenPosition.Y) / (Main.worldSurface * 16.0 - 600.0) * 200.0);
				for (int num52 = 0; num52 < this.bgLoops; num52++)
				{
					Color color6 = Main.bgColor;
					this.bgStart = 0;
					float num53 = Main.cloudAlpha;
					color6.R = (byte)((float)color6.R * num53);
					color6.G = (byte)((float)color6.G * num53);
					color6.B = (byte)((float)color6.B * num53);
					color6.A = (byte)((float)color6.A * num53);
					Main.spriteBatch.Draw(Main.backgroundTexture[49], new Rectangle(this.bgStart + Main.backgroundWidth[49] * num52, this.bgTop, Main.backgroundWidth[49], Main.backgroundHeight[49]), color6);
				}
			}
		}
		protected override void Draw(GameTime gameTime)
		{
			if (!Main.gameMenu)
			{
				this.lookForColorTiles();
			}
			if (Main.loadMap)
			{
				Main.refreshMap = false;
				this.DrawToMap();
			}
			if (Lighting.lightMode >= 2)
			{
				Main.drawToScreen = true;
			}
			else
			{
				Main.drawToScreen = false;
			}
			if (Main.drawToScreen && Main.targetSet)
			{
				this.ReleaseTargets();
			}
			if (!Main.drawToScreen && !Main.targetSet)
			{
				this.InitTargets();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Main.fpsCount++;
			if (!base.IsActive)
			{
				Main.maxQ = true;
			}
			if (!Main.dedServ)
			{
				bool flag = false;
				if (Main.screenWidth != base.GraphicsDevice.Viewport.Width || Main.screenHeight != base.GraphicsDevice.Viewport.Height)
				{
					flag = true;
					Main.mapTime = 0;
					if (Main.gamePaused)
					{
						Main.renderNow = true;
					}
				}
				Main.screenWidth = base.GraphicsDevice.Viewport.Width;
				Main.screenHeight = base.GraphicsDevice.Viewport.Height;
				Main.screenMaximized = (((Form)Control.FromHandle(base.Window.Handle)).WindowState == FormWindowState.Maximized);
				if (Main.screenWidth % 2 != 0)
				{
					Main.screenWidth++;
					flag = true;
				}
				if (Main.screenHeight % 2 != 0)
				{
					Main.screenHeight++;
					flag = true;
				}
				if (Main.screenWidth > Main.maxScreenW)
				{
					Main.screenWidth = Main.maxScreenW;
					flag = true;
				}
				if (Main.screenHeight > Main.maxScreenH)
				{
					Main.screenHeight = Main.maxScreenH;
					flag = true;
				}
				if (Main.screenWidth < Main.minScreenW)
				{
					Main.screenWidth = Main.minScreenW;
					flag = true;
				}
				if (Main.screenHeight < Main.minScreenH)
				{
					Main.screenHeight = Main.minScreenH;
					flag = true;
				}
				if (flag)
				{
					Main.graphics.PreferredBackBufferWidth = Main.screenWidth;
					Main.graphics.PreferredBackBufferHeight = Main.screenHeight;
					Main.graphics.ApplyChanges();
					if (!Main.drawToScreen)
					{
						this.InitTargets();
					}
				}
			}
			Main.CursorColor();
			Main.drawTime++;
			Main.screenLastPosition = Main.screenPosition;
			if (Main.stackSplit == 0)
			{
				Main.stackCounter = 0;
				Main.stackDelay = 7;
				Main.superFastStack = 0;
			}
			else
			{
				Main.stackCounter++;
				int num = 30;
				if (num == 7)
				{
					num = 30;
				}
				else
				{
					if (Main.stackDelay == 6)
					{
						num = 25;
					}
					else
					{
						if (Main.stackDelay == 5)
						{
							num = 20;
						}
						else
						{
							if (Main.stackDelay == 4)
							{
								num = 15;
							}
							else
							{
								if (Main.stackDelay == 3)
								{
									num = 10;
								}
								else
								{
									num = 5;
								}
							}
						}
					}
				}
				if (Main.stackCounter >= num)
				{
					Main.stackDelay--;
					if (Main.stackDelay < 2)
					{
						Main.stackDelay = 2;
						Main.superFastStack++;
					}
					Main.stackCounter = 0;
				}
			}
			Main.mouseTextColor += (byte)Main.mouseTextColorChange;
			if (Main.mouseTextColor >= 250)
			{
				Main.mouseTextColorChange = -4;
			}
			if (Main.mouseTextColor <= 175)
			{
				Main.mouseTextColorChange = 4;
			}
			if (Main.myPlayer >= 0)
			{
				Main.player[Main.myPlayer].lastMouseInterface = Main.player[Main.myPlayer].mouseInterface;
				Main.player[Main.myPlayer].mouseInterface = false;
			}
			if (Main.mapTime > 0)
			{
				Main.mapTime--;
			}
			if (Main.gameMenu)
			{
				Main.mapTime = Main.mapTimeMax;
			}
			Main.toolTip = new Item();
			if (!Main.gameMenu && Main.netMode != 2)
			{
				int num2 = 21;
				if (Main.cameraX != 0f && !Main.player[Main.myPlayer].pulley)
				{
					Main.cameraX = 0f;
				}
				if (Main.cameraX > 0f)
				{
					Main.cameraX -= 1f;
					if (Main.cameraX < 0f)
					{
						Main.cameraX = 0f;
					}
				}
				if (Main.cameraX < 0f)
				{
					Main.cameraX += 1f;
					if (Main.cameraX > 0f)
					{
						Main.cameraX = 0f;
					}
				}
				Main.screenPosition.X = Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width * 0.5f - (float)Main.screenWidth * 0.5f + Main.cameraX;
				Main.screenPosition.Y = Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - (float)num2 - (float)Main.screenHeight * 0.5f + Main.player[Main.myPlayer].gfxOffY;
				float num3 = 0f;
				float num4 = 0f;
				if ((Main.player[Main.myPlayer].noThrow <= 0 && !Main.player[Main.myPlayer].lastMouseInterface) || Main.zoomX != 0f || Main.zoomY != 0f)
				{
					if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.player[Main.myPlayer].scope && Main.mouseRight)
					{
						int num5 = Main.mouseX;
						int num6 = Main.mouseY;
						if (num5 > Main.screenWidth)
						{
							num5 = Main.screenWidth;
						}
						if (num5 < 0)
						{
							num5 = 0;
						}
						if (num6 > Main.screenHeight)
						{
							num6 = Main.screenHeight;
						}
						if (num6 < 0)
						{
							num6 = 0;
						}
						num3 = (float)(num5 - Main.screenWidth / 2) / 1.25f;
						num4 += (float)(num6 - Main.screenHeight / 2) / 1.25f;
					}
					else
					{
						if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
						{
							int num7 = Main.mouseX;
							int num8 = Main.mouseY;
							if (num7 > Main.screenWidth)
							{
								num7 = Main.screenWidth;
							}
							if (num7 < 0)
							{
								num7 = 0;
							}
							if (num8 > Main.screenHeight)
							{
								num8 = Main.screenHeight;
							}
							if (num8 < 0)
							{
								num8 = 0;
							}
							num3 = (float)(num7 - Main.screenWidth / 2) / 1.5f;
							num4 += (float)(num8 - Main.screenHeight / 2) / 1.5f;
						}
						else
						{
							if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299)
							{
								int num9 = Main.mouseX;
								int num10 = Main.mouseY;
								if (num9 > Main.screenWidth)
								{
									num9 = Main.screenWidth;
								}
								if (num9 < 0)
								{
									num9 = 0;
								}
								if (num10 > Main.screenHeight)
								{
									num10 = Main.screenHeight;
								}
								if (num10 < 0)
								{
									num10 = 0;
								}
								num3 = (float)(num9 - Main.screenWidth / 2) / 1.5f;
								num4 += (float)(num10 - Main.screenHeight / 2) / 1.5f;
							}
							else
							{
								if (Main.player[Main.myPlayer].scope && Main.mouseRight)
								{
									int num11 = Main.mouseX;
									int num12 = Main.mouseY;
									if (num11 > Main.screenWidth)
									{
										num11 = Main.screenWidth;
									}
									if (num11 < 0)
									{
										num11 = 0;
									}
									if (num12 > Main.screenHeight)
									{
										num12 = Main.screenHeight;
									}
									if (num12 < 0)
									{
										num12 = 0;
									}
									num3 = (float)(num11 - Main.screenWidth / 2) / 2f;
									num4 += (float)(num12 - Main.screenHeight / 2) / 2f;
								}
							}
						}
					}
				}
				float num13 = 24f;
				float num14 = num3 - Main.zoomX;
				float num15 = num4 - Main.zoomY;
				float num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
				num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
				if (num16 < num13)
				{
					Main.zoomX = num3;
					Main.zoomY = num4;
				}
				else
				{
					num16 = num13 / num16;
					num14 *= num16;
					num15 *= num16;
					Main.zoomX += num14;
					Main.zoomY += num15;
				}
				Main.screenPosition.X = Main.screenPosition.X + Main.zoomX;
				Main.screenPosition.Y = Main.screenPosition.Y + Main.zoomY * Main.player[Main.myPlayer].gravDir;
				Main.screenPosition.X = (float)((int)Main.screenPosition.X);
				Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
			}
			if (!Main.gameMenu && Main.netMode != 2)
			{
				if (Main.screenPosition.X < Main.leftWorld + 640f + 16f)
				{
					Main.screenPosition.X = Main.leftWorld + 640f + 16f;
				}
				else
				{
					if (Main.screenPosition.X + (float)Main.screenWidth > Main.rightWorld - 640f - 32f)
					{
						Main.screenPosition.X = Main.rightWorld - (float)Main.screenWidth - 640f - 32f;
					}
				}
				if (Main.screenPosition.Y < Main.topWorld + 640f + 16f)
				{
					Main.screenPosition.Y = Main.topWorld + 640f + 16f;
				}
				else
				{
					if (Main.screenPosition.Y + (float)Main.screenHeight > Main.bottomWorld - 640f - 32f)
					{
						Main.screenPosition.Y = Main.bottomWorld - (float)Main.screenHeight - 640f - 32f;
					}
				}
			}
			if (Main.showSplash)
			{
				this.DrawSplash(gameTime);
				return;
			}
			Main.sunCircle += 0.01f;
			if ((double)Main.sunCircle > 6.285)
			{
				Main.sunCircle -= 6.285f;
			}
			if (!Main.gameMenu)
			{
				this.waterfallManager.FindWaterfalls();
				if (Main.renderNow)
				{
					Main.screenLastPosition = Main.screenPosition;
					Main.renderNow = false;
					Main.renderCount = 99;
					int tempLightCount = Lighting.tempLightCount;
					this.Draw(gameTime);
					Lighting.tempLightCount = tempLightCount;
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					this.RenderTiles();
					Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderBackground();
					Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWalls();
					Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderTiles2();
					Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWater();
					Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					Main.renderCount = 99;
				}
				else
				{
					if (Main.renderCount == 3)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 2)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 2)
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 3)
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 1)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
				if (Main.render && !Main.gameMenu)
				{
					if (Math.Abs(Main.sceneTilePos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTilePos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneTile2Pos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTile2Pos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneBackgroundPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneBackgroundPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWallPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWallPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWaterPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWaterPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
			}
			if (!Main.loadMap)
			{
				if (!Main.gameMenu)
				{
					Stopwatch stopwatch2 = new Stopwatch();
					stopwatch2.Start();
					int num17 = 0;
					int secX;
					int secY;
					while (stopwatch2.ElapsedMilliseconds < 5L && Main.sectionManager.GetNextMapDraw(Main.player[Main.myPlayer].position, out secX, out secY))
					{
						this.DrawToMap_Section(secX, secY);
						num17++;
					}
				}
				if (Main.updateMap)
				{
					if (base.IsActive || Main.netMode == 1)
					{
						if (Main.refreshMap)
						{
							Main.refreshMap = false;
							Main.sectionManager.ClearMapDraw();
						}
						this.DrawToMap();
						Main.updateMap = false;
					}
					else
					{
						if (Map.numUpdateTile > 0)
						{
							this.DrawToMap();
						}
					}
				}
			}
			this.bgParrallax = 0.1;
			this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParrallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
			this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
			this.bgStartY = 0;
			this.bgLoopsY = 0;
			this.bgTop = (int)((double)(-(double)Main.screenPosition.Y) / (Main.worldSurface * 16.0 - 600.0) * 200.0);
			Main.bgColor = Color.White;
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTop = -200;
			}
			int num18 = (int)(Main.time / 54000.0 * (double)(Main.screenWidth + Main.sunTexture.Width * 2)) - Main.sunTexture.Width;
			int num19 = 0;
			Color white = Color.White;
			float num20 = 1f;
			float rotation = (float)(Main.time / 54000.0) * 2f - 7.3f;
			int num21 = (int)(Main.time / 32400.0 * (double)(Main.screenWidth + Main.moonTexture[Main.moonType].Width * 2)) - Main.moonTexture[Main.moonType].Width;
			int num22 = 0;
			Color white2 = Color.White;
			float num23 = 1f;
			float rotation2 = (float)(Main.time / 32400.0) * 2f - 7.3f;
			if (Main.dayTime)
			{
				double num24;
				if (Main.time < 27000.0)
				{
					num24 = Math.Pow(1.0 - Main.time / 54000.0 * 2.0, 2.0);
					num19 = (int)((double)this.bgTop + num24 * 250.0 + 180.0);
				}
				else
				{
					num24 = Math.Pow((Main.time / 54000.0 - 0.5) * 2.0, 2.0);
					num19 = (int)((double)this.bgTop + num24 * 250.0 + 180.0);
				}
				num20 = (float)(1.2 - num24 * 0.4);
			}
			else
			{
				double num25;
				if (Main.time < 16200.0)
				{
					num25 = Math.Pow(1.0 - Main.time / 32400.0 * 2.0, 2.0);
					num22 = (int)((double)this.bgTop + num25 * 250.0 + 180.0);
				}
				else
				{
					num25 = Math.Pow((Main.time / 32400.0 - 0.5) * 2.0, 2.0);
					num22 = (int)((double)this.bgTop + num25 * 250.0 + 180.0);
				}
				num23 = (float)(1.2 - num25 * 0.4);
			}
			if (Main.dayTime)
			{
				if (Main.time < 13500.0)
				{
					float num26 = (float)(Main.time / 13500.0);
					white.R = (byte)(num26 * 200f + 55f);
					white.G = (byte)(num26 * 180f + 75f);
					white.B = (byte)(num26 * 250f + 5f);
					Main.bgColor.R = (byte)(num26 * 230f + 25f);
					Main.bgColor.G = (byte)(num26 * 220f + 35f);
					Main.bgColor.B = (byte)(num26 * 220f + 35f);
				}
				if (Main.time > 45900.0)
				{
					float num26 = (float)(1.0 - (Main.time / 54000.0 - 0.85) * 6.666666666666667);
					white.R = (byte)(num26 * 120f + 55f);
					white.G = (byte)(num26 * 100f + 25f);
					white.B = (byte)(num26 * 120f + 55f);
					Main.bgColor.R = (byte)(num26 * 200f + 35f);
					Main.bgColor.G = (byte)(num26 * 85f + 35f);
					Main.bgColor.B = (byte)(num26 * 135f + 35f);
				}
				else
				{
					if (Main.time > 37800.0)
					{
						float num26 = (float)(1.0 - (Main.time / 54000.0 - 0.7) * 6.666666666666667);
						white.R = (byte)(num26 * 80f + 175f);
						white.G = (byte)(num26 * 130f + 125f);
						white.B = (byte)(num26 * 100f + 155f);
						Main.bgColor.R = (byte)(num26 * 20f + 235f);
						Main.bgColor.G = (byte)(num26 * 135f + 120f);
						Main.bgColor.B = (byte)(num26 * 85f + 170f);
					}
				}
			}
			if (!Main.dayTime)
			{
				if (Main.bloodMoon)
				{
					if (Main.time < 16200.0)
					{
						float num26 = (float)(1.0 - Main.time / 16200.0);
						white2.R = (byte)(num26 * 10f + 205f);
						white2.G = (byte)(num26 * 170f + 55f);
						white2.B = (byte)(num26 * 200f + 55f);
						Main.bgColor.R = (byte)(40f - num26 * 40f + 35f);
						Main.bgColor.G = (byte)(num26 * 20f + 15f);
						Main.bgColor.B = (byte)(num26 * 20f + 15f);
					}
					else
					{
						if (Main.time >= 16200.0)
						{
							float num26 = (float)((Main.time / 32400.0 - 0.5) * 2.0);
							white2.R = (byte)(num26 * 50f + 205f);
							white2.G = (byte)(num26 * 100f + 155f);
							white2.B = (byte)(num26 * 100f + 155f);
							white2.R = (byte)(num26 * 10f + 205f);
							white2.G = (byte)(num26 * 170f + 55f);
							white2.B = (byte)(num26 * 200f + 55f);
							Main.bgColor.R = (byte)(40f - num26 * 40f + 35f);
							Main.bgColor.G = (byte)(num26 * 20f + 15f);
							Main.bgColor.B = (byte)(num26 * 20f + 15f);
						}
					}
				}
				else
				{
					if (Main.time < 16200.0)
					{
						float num26 = (float)(1.0 - Main.time / 16200.0);
						white2.R = (byte)(num26 * 10f + 205f);
						white2.G = (byte)(num26 * 70f + 155f);
						white2.B = (byte)(num26 * 100f + 155f);
						Main.bgColor.R = (byte)(num26 * 30f + 5f);
						Main.bgColor.G = (byte)(num26 * 30f + 5f);
						Main.bgColor.B = (byte)(num26 * 30f + 5f);
					}
					else
					{
						if (Main.time >= 16200.0)
						{
							float num26 = (float)((Main.time / 32400.0 - 0.5) * 2.0);
							white2.R = (byte)(num26 * 50f + 205f);
							white2.G = (byte)(num26 * 100f + 155f);
							white2.B = (byte)(num26 * 100f + 155f);
							Main.bgColor.R = (byte)(num26 * 20f + 5f);
							Main.bgColor.G = (byte)(num26 * 30f + 5f);
							Main.bgColor.B = (byte)(num26 * 30f + 5f);
						}
					}
				}
			}
			float num27 = 0.0005f * (float)Main.dayRate;
			if (Main.gameMenu)
			{
				num27 *= 20f;
			}
			if (Main.raining)
			{
				if (Main.cloudAlpha > Main.maxRaining)
				{
					Main.cloudAlpha -= num27;
					if (Main.cloudAlpha < Main.maxRaining)
					{
						Main.cloudAlpha = Main.maxRaining;
					}
				}
				else
				{
					if (Main.cloudAlpha < Main.maxRaining)
					{
						Main.cloudAlpha += num27;
						if (Main.cloudAlpha > Main.maxRaining)
						{
							Main.cloudAlpha = Main.maxRaining;
						}
					}
				}
			}
			else
			{
				Main.cloudAlpha -= num27;
				if (Main.cloudAlpha < 0f)
				{
					Main.cloudAlpha = 0f;
				}
			}
			if (Main.cloudAlpha > 0f)
			{
				float num28 = 1f - Main.cloudAlpha * 0.9f;
				Main.bgColor.R = (byte)((float)Main.bgColor.R * num28);
				Main.bgColor.G = (byte)((float)Main.bgColor.G * num28);
				Main.bgColor.B = (byte)((float)Main.bgColor.B * num28);
			}
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTop = 0;
				if (!Main.dayTime)
				{
					Main.bgColor.R = 35;
					Main.bgColor.G = 35;
					Main.bgColor.B = 35;
				}
			}
			if (Main.gameMenu)
			{
				Main.bgDelay = 1000;
				Main.evilTiles = (int)(Main.bgAlpha[1] * 500f);
			}
			if (Main.evilTiles > 0)
			{
				float num29 = (float)Main.evilTiles / 500f;
				if (num29 > 1f)
				{
					num29 = 1f;
				}
				int num30 = (int)Main.bgColor.R;
				int num31 = (int)Main.bgColor.G;
				int num32 = (int)Main.bgColor.B;
				num30 -= (int)(100f * num29 * ((float)Main.bgColor.R / 255f));
				num31 -= (int)(140f * num29 * ((float)Main.bgColor.G / 255f));
				num32 -= (int)(80f * num29 * ((float)Main.bgColor.B / 255f));
				if (num30 < 15)
				{
					num30 = 15;
				}
				if (num31 < 15)
				{
					num31 = 15;
				}
				if (num32 < 15)
				{
					num32 = 15;
				}
				Main.bgColor.R = (byte)num30;
				Main.bgColor.G = (byte)num31;
				Main.bgColor.B = (byte)num32;
				num30 = (int)white.R;
				num31 = (int)white.G;
				num32 = (int)white.B;
				num30 -= (int)(100f * num29 * ((float)white.R / 255f));
				num31 -= (int)(100f * num29 * ((float)white.G / 255f));
				num32 -= (int)(0f * num29 * ((float)white.B / 255f));
				if (num30 < 15)
				{
					num30 = 15;
				}
				if (num31 < 15)
				{
					num31 = 15;
				}
				if (num32 < 15)
				{
					num32 = 15;
				}
				white.R = (byte)num30;
				white.G = (byte)num31;
				white.B = (byte)num32;
				num30 = (int)white2.R;
				num31 = (int)white2.G;
				num32 = (int)white2.B;
				num30 -= (int)(140f * num29 * ((float)white2.R / 255f));
				num31 -= (int)(190f * num29 * ((float)white2.G / 255f));
				num32 -= (int)(170f * num29 * ((float)white2.B / 255f));
				if (num30 < 15)
				{
					num30 = 15;
				}
				if (num31 < 15)
				{
					num31 = 15;
				}
				if (num32 < 15)
				{
					num32 = 15;
				}
				white2.R = (byte)num30;
				white2.G = (byte)num31;
				white2.B = (byte)num32;
			}
			if (Main.bloodTiles > 0)
			{
				float num33 = (float)Main.bloodTiles / 400f;
				if (num33 > 1f)
				{
					num33 = 1f;
				}
				int num34 = (int)Main.bgColor.R;
				int num35 = (int)Main.bgColor.G;
				int num36 = (int)Main.bgColor.B;
				num34 -= (int)(70f * num33 * ((float)Main.bgColor.G / 255f));
				num35 -= (int)(110f * num33 * ((float)Main.bgColor.G / 255f));
				num36 -= (int)(150f * num33 * ((float)Main.bgColor.B / 255f));
				if (num34 < 15)
				{
					num34 = 15;
				}
				if (num35 < 15)
				{
					num35 = 15;
				}
				if (num36 < 15)
				{
					num36 = 15;
				}
				Main.bgColor.R = (byte)num34;
				Main.bgColor.G = (byte)num35;
				Main.bgColor.B = (byte)num36;
				num34 = (int)white.R;
				num35 = (int)white.G;
				num36 = (int)white.B;
				num35 -= (int)(90f * num33 * ((float)white.G / 255f));
				num36 -= (int)(110f * num33 * ((float)white.B / 255f));
				if (num34 < 15)
				{
					num34 = 15;
				}
				if (num35 < 15)
				{
					num35 = 15;
				}
				if (num36 < 15)
				{
					num36 = 15;
				}
				white.R = (byte)num34;
				white.G = (byte)num35;
				white.B = (byte)num36;
				num34 = (int)white2.R;
				num35 = (int)white2.G;
				num36 = (int)white2.B;
				num34 -= (int)(100f * num33 * ((float)white2.R / 255f));
				num35 -= (int)(120f * num33 * ((float)white2.G / 255f));
				num36 -= (int)(180f * num33 * ((float)white2.B / 255f));
				if (num34 < 15)
				{
					num34 = 15;
				}
				if (num35 < 15)
				{
					num35 = 15;
				}
				if (num36 < 15)
				{
					num36 = 15;
				}
				white2.R = (byte)num34;
				white2.G = (byte)num35;
				white2.B = (byte)num36;
			}
			if (Main.jungleTiles > 0)
			{
				float num37 = (float)Main.jungleTiles / 200f;
				if (num37 > 1f)
				{
					num37 = 1f;
				}
				int num38 = (int)Main.bgColor.R;
				int num39 = (int)Main.bgColor.G;
				int num40 = (int)Main.bgColor.B;
				num38 -= (int)(40f * num37 * ((float)Main.bgColor.R / 255f));
				num40 -= (int)(70f * num37 * ((float)Main.bgColor.B / 255f));
				if (num39 > 255)
				{
					num39 = 255;
				}
				if (num39 < 15)
				{
					num39 = 15;
				}
				if (num38 > 255)
				{
					num38 = 255;
				}
				if (num38 < 15)
				{
					num38 = 15;
				}
				if (num40 < 15)
				{
					num40 = 15;
				}
				Main.bgColor.R = (byte)num38;
				Main.bgColor.G = (byte)num39;
				Main.bgColor.B = (byte)num40;
				num38 = (int)white.R;
				num39 = (int)white.G;
				num40 = (int)white.B;
				num38 -= (int)(30f * num37 * ((float)white.R / 255f));
				num40 -= (int)(10f * num37 * ((float)white.B / 255f));
				if (num38 < 15)
				{
					num38 = 15;
				}
				if (num39 < 15)
				{
					num39 = 15;
				}
				if (num40 < 15)
				{
					num40 = 15;
				}
				white.R = (byte)num38;
				white.G = (byte)num39;
				white.B = (byte)num40;
				num38 = (int)white2.R;
				num39 = (int)white2.G;
				num40 = (int)white2.B;
				num39 -= (int)(140f * num37 * ((float)white2.R / 255f));
				num38 -= (int)(170f * num37 * ((float)white2.G / 255f));
				num40 -= (int)(190f * num37 * ((float)white2.B / 255f));
				if (num38 < 15)
				{
					num38 = 15;
				}
				if (num39 < 15)
				{
					num39 = 15;
				}
				if (num40 < 15)
				{
					num40 = 15;
				}
				white2.R = (byte)num38;
				white2.G = (byte)num39;
				white2.B = (byte)num40;
			}
			if (Main.shroomTiles > 0)
			{
				float num41 = (float)Main.shroomTiles / 160f;
				if (num41 > Main.shroomLight)
				{
					Main.shroomLight += 0.01f;
				}
				if (num41 < Main.shroomLight)
				{
					Main.shroomLight -= 0.01f;
				}
			}
			else
			{
				Main.shroomLight -= 0.02f;
			}
			if (Main.shroomLight < 0f)
			{
				Main.shroomLight = 0f;
			}
			if (Main.shroomLight > 1f)
			{
				Main.shroomLight = 1f;
			}
			if (Main.shroomLight > 0f)
			{
				float num42 = Main.shroomLight;
				int num43 = (int)Main.bgColor.R;
				int num44 = (int)Main.bgColor.G;
				int num45 = (int)Main.bgColor.B;
				num44 -= (int)(250f * num42 * ((float)Main.bgColor.G / 255f));
				num43 -= (int)(250f * num42 * ((float)Main.bgColor.R / 255f));
				num45 -= (int)(250f * num42 * ((float)Main.bgColor.B / 255f));
				if (num44 < 15)
				{
					num44 = 15;
				}
				if (num43 < 15)
				{
					num43 = 15;
				}
				if (num45 < 15)
				{
					num45 = 15;
				}
				Main.bgColor.R = (byte)num43;
				Main.bgColor.G = (byte)num44;
				Main.bgColor.B = (byte)num45;
				num43 = (int)white.R;
				num44 = (int)white.G;
				num45 = (int)white.B;
				num44 -= (int)(10f * num42 * ((float)white.G / 255f));
				num43 -= (int)(30f * num42 * ((float)white.R / 255f));
				num45 -= (int)(10f * num42 * ((float)white.B / 255f));
				if (num43 < 15)
				{
					num43 = 15;
				}
				if (num44 < 15)
				{
					num44 = 15;
				}
				if (num45 < 15)
				{
					num45 = 15;
				}
				white.R = (byte)num43;
				white.G = (byte)num44;
				white.B = (byte)num45;
				num43 = (int)white2.R;
				num44 = (int)white2.G;
				num45 = (int)white2.B;
				num44 -= (int)(140f * num42 * ((float)white2.R / 255f));
				num43 -= (int)(170f * num42 * ((float)white2.G / 255f));
				num45 -= (int)(190f * num42 * ((float)white2.B / 255f));
				if (num43 < 15)
				{
					num43 = 15;
				}
				if (num44 < 15)
				{
					num44 = 15;
				}
				if (num45 < 15)
				{
					num45 = 15;
				}
				white2.R = (byte)num43;
				white2.G = (byte)num44;
				white2.B = (byte)num45;
			}
			if (Lighting.lightMode < 2)
			{
				if (Main.bgColor.R < 10)
				{
					Main.bgColor.R = 10;
				}
				if (Main.bgColor.G < 10)
				{
					Main.bgColor.G = 10;
				}
				if (Main.bgColor.B < 10)
				{
					Main.bgColor.B = 10;
				}
			}
			else
			{
				if (Main.bgColor.R < 15)
				{
					Main.bgColor.R = 15;
				}
				if (Main.bgColor.G < 15)
				{
					Main.bgColor.G = 15;
				}
				if (Main.bgColor.B < 15)
				{
					Main.bgColor.B = 15;
				}
			}
			if (Main.bloodMoon)
			{
				if (Main.bgColor.R < 25)
				{
					Main.bgColor.R = 25;
				}
				if (Main.bgColor.G < 25)
				{
					Main.bgColor.G = 25;
				}
				if (Main.bgColor.B < 25)
				{
					Main.bgColor.B = 25;
				}
			}
			if (Main.eclipse && Main.dayTime)
			{
				float num46 = 1242f;
				Main.eclipseLight = (float)(Main.time / (double)num46);
				if (Main.eclipseLight > 1f)
				{
					Main.eclipseLight = 1f;
				}
			}
			else
			{
				if (Main.eclipseLight > 0f)
				{
					Main.eclipseLight -= 0.01f;
					if (Main.eclipseLight < 0f)
					{
						Main.eclipseLight = 0f;
					}
				}
			}
			if (Main.eclipseLight > 0f)
			{
				float num47 = 1f - 0.925f * Main.eclipseLight;
				float num48 = 1f - 0.96f * Main.eclipseLight;
				float num49 = 1f - 1f * Main.eclipseLight;
				int num50 = (int)((float)Main.bgColor.R * num47);
				int num51 = (int)((float)Main.bgColor.G * num48);
				int num52 = (int)((float)Main.bgColor.B * num49);
				Main.bgColor.R = (byte)num50;
				Main.bgColor.G = (byte)num51;
				Main.bgColor.B = (byte)num52;
				white.R = 255;
				white.G = 127;
				white.B = 67;
				if (Main.bgColor.R < 20)
				{
					Main.bgColor.R = 20;
				}
				if (Main.bgColor.G < 10)
				{
					Main.bgColor.G = 10;
				}
				if (Lighting.lightMode >= 2)
				{
					if (Main.bgColor.R < 20)
					{
						Main.bgColor.R = 20;
					}
					if (Main.bgColor.G < 14)
					{
						Main.bgColor.G = 14;
					}
					if (Main.bgColor.B < 6)
					{
						Main.bgColor.B = 6;
					}
				}
			}
			Main.tileColor.A = 255;
			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.B + Main.bgColor.G) / 3);
			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.B + Main.bgColor.G) / 3);
			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.B + Main.bgColor.G) / 3);
			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
			float num53 = (float)(Main.maxTilesX / 4200);
			num53 *= num53;
			Main.atmo = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num53)) / (Main.worldSurface / 5.0));
			if (Main.atmo < 0f)
			{
				Main.atmo = 0f;
			}
			if (Main.atmo > 1f)
			{
				Main.atmo = 1f;
			}
			if (Main.gameMenu)
			{
				Main.atmo = 1f;
			}
			Main.bgColor.R = (byte)((float)Main.bgColor.R * Main.atmo);
			Main.bgColor.G = (byte)((float)Main.bgColor.G * Main.atmo);
			Main.bgColor.B = (byte)((float)Main.bgColor.B * Main.atmo);
			if ((double)Main.atmo <= 0.05)
			{
				Main.bgColor.R = 0;
				Main.bgColor.G = 0;
				Main.bgColor.B = 0;
				Main.bgColor.A = 0;
			}
			base.GraphicsDevice.Clear(Color.Black);
			base.Draw(gameTime);
			if (Main.gameMenu || Main.player[Main.myPlayer].gravDir == 1f)
			{
				this.Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
				this.Rasterizer = RasterizerState.CullCounterClockwise;
			}
			else
			{
				this.Transform = Matrix.CreateScale(1f, -1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, (float)Main.screenHeight, 0f));
				this.Rasterizer = RasterizerState.CullClockwise;
			}
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
			if (!Main.mapFullscreen)
			{
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						Main.spriteBatch.Draw(Main.backgroundTexture[Main.background], new Rectangle(this.bgStart + Main.backgroundWidth[Main.background] * i, this.bgTop, Main.backgroundWidth[Main.background], Main.backgroundHeight[Main.background]), Main.bgColor);
					}
				}
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0 && 255f * (1f - Main.cloudAlpha) - (float)Main.bgColor.R - 25f > 0f && Main.netMode != 2)
				{
					for (int j = 0; j < Main.numStars; j++)
					{
						Color color = default(Color);
						float num54 = (float)Main.evilTiles / 500f;
						if (num54 > 1f)
						{
							num54 = 1f;
						}
						num54 = 1f - num54 * 0.5f;
						if (Main.evilTiles <= 0)
						{
							num54 = 1f;
						}
						int num55 = (int)((float)(255 - Main.bgColor.R - 100) * Main.star[j].twinkle * num54);
						int num56 = (int)((float)(255 - Main.bgColor.G - 100) * Main.star[j].twinkle * num54);
						int num57 = (int)((float)(255 - Main.bgColor.B - 100) * Main.star[j].twinkle * num54);
						if (num55 < 0)
						{
							num55 = 0;
						}
						if (num56 < 0)
						{
							num56 = 0;
						}
						if (num57 < 0)
						{
							num57 = 0;
						}
						color.R = (byte)num55;
						color.G = (byte)((float)num56 * num54);
						color.B = (byte)((float)num57 * num54);
						float num58 = Main.star[j].position.X * ((float)Main.screenWidth / 800f);
						float num59 = Main.star[j].position.Y * ((float)Main.screenHeight / 600f);
						Main.spriteBatch.Draw(Main.starTexture[Main.star[j].type], new Vector2(num58 + (float)Main.starTexture[Main.star[j].type].Width * 0.5f, num59 + (float)Main.starTexture[Main.star[j].type].Height * 0.5f + (float)this.bgTop), new Rectangle?(new Rectangle(0, 0, Main.starTexture[Main.star[j].type].Width, Main.starTexture[Main.star[j].type].Height)), color, Main.star[j].rotation, new Vector2((float)Main.starTexture[Main.star[j].type].Width * 0.5f, (float)Main.starTexture[Main.star[j].type].Height * 0.5f), Main.star[j].scale * Main.star[j].twinkle, SpriteEffects.None, 0f);
					}
				}
				if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 2.0)
				{
					if (Main.dayTime)
					{
						num20 *= 1.1f;
						if (Main.eclipse)
						{
							float num60 = 1f - Main.shroomLight;
							num60 -= Main.cloudAlpha * 1.5f;
							if (num60 < 0f)
							{
								num60 = 0f;
							}
							Color color2 = new Color((int)((byte)(255f * num60)), (int)((byte)((float)white.G * num60)), (int)((byte)((float)white.B * num60)), (int)((byte)(255f * num60)));
							Color color3 = new Color((int)((byte)((float)white.R * num60)), (int)((byte)((float)white.G * num60)), (int)((byte)((float)white.B * num60)), (int)((byte)((float)(white.B - 60) * num60)));
							Main.spriteBatch.Draw(Main.sun3Texture, new Vector2((float)num18, (float)(num19 + (int)Main.sunModY)), new Rectangle?(new Rectangle(0, 0, Main.sun3Texture.Width, Main.sun3Texture.Height)), color2, rotation, new Vector2((float)(Main.sun3Texture.Width / 2), (float)(Main.sun3Texture.Height / 2)), num20, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.sun3Texture, new Vector2((float)num18, (float)(num19 + (int)Main.sunModY)), new Rectangle?(new Rectangle(0, 0, Main.sun3Texture.Width, Main.sun3Texture.Height)), color3, rotation, new Vector2((float)(Main.sun3Texture.Width / 2), (float)(Main.sun3Texture.Height / 2)), num20, SpriteEffects.None, 0f);
						}
						else
						{
							if (!Main.gameMenu && Main.player[Main.myPlayer].head == 12)
							{
								float num61 = 1f - Main.shroomLight;
								num61 -= Main.cloudAlpha * 1.5f;
								if (num61 < 0f)
								{
									num61 = 0f;
								}
								Color color4 = new Color((int)((byte)(255f * num61)), (int)((byte)((float)white.G * num61)), (int)((byte)((float)white.B * num61)), (int)((byte)(255f * num61)));
								Color color5 = new Color((int)((byte)((float)white.R * num61)), (int)((byte)((float)white.G * num61)), (int)((byte)((float)white.B * num61)), (int)((byte)((float)(white.B - 60) * num61)));
								Main.spriteBatch.Draw(Main.sun2Texture, new Vector2((float)num18, (float)(num19 + (int)Main.sunModY)), new Rectangle?(new Rectangle(0, 0, Main.sun2Texture.Width, Main.sun2Texture.Height)), color4, rotation, new Vector2((float)(Main.sun2Texture.Width / 2), (float)(Main.sun2Texture.Height / 2)), num20, SpriteEffects.None, 0f);
								Main.spriteBatch.Draw(Main.sun2Texture, new Vector2((float)num18, (float)(num19 + (int)Main.sunModY)), new Rectangle?(new Rectangle(0, 0, Main.sun2Texture.Width, Main.sun2Texture.Height)), color5, rotation, new Vector2((float)(Main.sun2Texture.Width / 2), (float)(Main.sun2Texture.Height / 2)), num20, SpriteEffects.None, 0f);
							}
							else
							{
								float num62 = 1f - Main.shroomLight;
								num62 -= Main.cloudAlpha * 1.5f;
								if (num62 < 0f)
								{
									num62 = 0f;
								}
								Color color6 = new Color((int)((byte)(255f * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)(255f * num62)));
								Color color7 = new Color((int)((byte)((float)white.R * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)((float)white.B * num62)));
								Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)num18, (float)(num19 + (int)Main.sunModY)), new Rectangle?(new Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color6, rotation, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), num20, SpriteEffects.None, 0f);
								Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)num18, (float)(num19 + (int)Main.sunModY)), new Rectangle?(new Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color7, rotation, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), num20, SpriteEffects.None, 0f);
							}
						}
					}
					if (!Main.dayTime)
					{
						float num63 = 1f - Main.cloudAlpha * 1.5f;
						if (num63 < 0f)
						{
							num63 = 0f;
						}
						white2.R = (byte)((float)white2.R * num63);
						white2.G = (byte)((float)white2.G * num63);
						white2.B = (byte)((float)white2.B * num63);
						white2.A = (byte)((float)white2.A * num63);
						if (Main.pumpkinMoon)
						{
							Main.spriteBatch.Draw(Main.pumpkinMoonTexture, new Vector2((float)num21, (float)(num22 + (int)Main.moonModY)), new Rectangle?(new Rectangle(0, Main.pumpkinMoonTexture.Width * Main.moonPhase, Main.pumpkinMoonTexture.Width, Main.pumpkinMoonTexture.Width)), white2, rotation2, new Vector2((float)(Main.pumpkinMoonTexture.Width / 2), (float)(Main.pumpkinMoonTexture.Width / 2)), num23, SpriteEffects.None, 0f);
						}
						else
						{
							if (Main.snowMoon)
							{
								Main.spriteBatch.Draw(Main.snowMoonTexture, new Vector2((float)num21, (float)(num22 + (int)Main.moonModY)), new Rectangle?(new Rectangle(0, Main.snowMoonTexture.Width * Main.moonPhase, Main.snowMoonTexture.Width, Main.snowMoonTexture.Width)), white2, rotation2, new Vector2((float)(Main.snowMoonTexture.Width / 2), (float)(Main.snowMoonTexture.Width / 2)), num23, SpriteEffects.None, 0f);
							}
							else
							{
								Main.spriteBatch.Draw(Main.moonTexture[Main.moonType], new Vector2((float)num21, (float)(num22 + (int)Main.moonModY)), new Rectangle?(new Rectangle(0, Main.moonTexture[Main.moonType].Width * Main.moonPhase, Main.moonTexture[Main.moonType].Width, Main.moonTexture[Main.moonType].Width)), white2, rotation2, new Vector2((float)(Main.moonTexture[Main.moonType].Width / 2), (float)(Main.moonTexture[Main.moonType].Width / 2)), num23, SpriteEffects.None, 0f);
							}
						}
					}
				}
				Rectangle value;
				if (Main.dayTime)
				{
					value = new Rectangle((int)((double)num18 - (double)Main.sunTexture.Width * 0.5 * (double)num20), (int)((double)num19 - (double)Main.sunTexture.Height * 0.5 * (double)num20 + (double)Main.sunModY), (int)((float)Main.sunTexture.Width * num20), (int)((float)Main.sunTexture.Width * num20));
				}
				else
				{
					value = new Rectangle((int)((double)num21 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)num23), (int)((double)num22 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)num23 + (double)Main.moonModY), (int)((float)Main.moonTexture[Main.moonType].Width * num23), (int)((float)Main.moonTexture[Main.moonType].Width * num23));
				}
				Rectangle rectangle = new Rectangle(Main.mouseX, Main.mouseY, 1, 1);
				Main.sunModY = (short)((double)Main.sunModY * 0.999);
				Main.moonModY = (short)((double)Main.moonModY * 0.999);
				if (Main.gameMenu && Main.netMode != 1)
				{
					if (Main.mouseLeft && Main.hasFocus)
					{
						if (rectangle.Intersects(value) || Main.grabSky)
						{
							if (Main.dayTime)
							{
								Main.time = 54000.0 * (double)((float)(Main.mouseX + Main.sunTexture.Width) / ((float)Main.screenWidth + (float)(Main.sunTexture.Width * 2)));
								Main.sunModY = (short)(Main.mouseY - num19);
								if (Main.time > 53990.0)
								{
									Main.time = 53990.0;
								}
							}
							else
							{
								Main.time = 32400.0 * (double)((float)(Main.mouseX + Main.moonTexture[Main.moonType].Width) / ((float)Main.screenWidth + (float)(Main.moonTexture[Main.moonType].Width * 2)));
								Main.moonModY = (short)(Main.mouseY - num22);
								if (Main.time > 32390.0)
								{
									Main.time = 32390.0;
								}
							}
							if (Main.time < 10.0)
							{
								Main.time = 10.0;
							}
							if (Main.netMode != 0)
							{
								NetMessage.SendData(18, -1, -1, "", 0, 0f, 0f, 0f, 0);
							}
							Main.grabSky = true;
						}
					}
					else
					{
						Main.grabSky = false;
					}
				}
			}
			this.scAdj = 1f - (float)((double)(Main.screenPosition.Y + (float)Main.screenHeight) / (Main.worldSurface * 16.0));
			this.scAdj = (float)(Main.worldSurface * 16.0) / (Main.screenPosition.Y + (float)Main.screenHeight);
			float num64 = (float)Main.maxTilesY * 0.15f * 16f;
			num64 -= Main.screenPosition.Y;
			if (num64 < 0f)
			{
				num64 = 0f;
			}
			num64 *= 0.00025f;
			float num65 = num64 * num64;
			this.scAdj *= 0.45f - num65;
			if ((double)Main.maxTilesY <= 1200.0)
			{
				this.scAdj *= -500f;
			}
			else
			{
				if ((double)Main.maxTilesY <= 1800.0)
				{
					this.scAdj *= -300f;
				}
				else
				{
					this.scAdj *= -150f;
				}
			}
			this.screenOff = (float)(Main.screenHeight - 600);
			this.bgTop = (int)((double)(-(double)Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16.0) * 1200.0 + 1190.0) + (int)this.scAdj;
			this.cTop = (float)(this.bgTop - 50);
			if (Main.resetClouds)
			{
				Cloud.resetClouds();
				Main.resetClouds = false;
			}
			Main.bgScale = 1f;
			Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[0]] * Main.bgScale);
			Main.backColor = Main.bgColor;
			Main.trueBackColor = Main.backColor;
			int num66 = Main.bgStyle;
			int num67 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && (num67 < 380 || num67 > Main.maxTilesX - 380))
			{
				num66 = 4;
			}
			else
			{
				if (Main.shroomTiles > 100)
				{
					num66 = 9;
				}
				else
				{
					if (Main.sandTiles > 1000)
					{
						if (Main.player[Main.myPlayer].zoneEvil)
						{
							num66 = 5;
						}
						else
						{
							if (Main.player[Main.myPlayer].zoneBlood)
							{
								num66 = 5;
							}
							else
							{
								if (Main.player[Main.myPlayer].zoneHoly)
								{
									num66 = 5;
								}
								else
								{
									num66 = 2;
								}
							}
						}
					}
					else
					{
						if (Main.player[Main.myPlayer].zoneHoly)
						{
							num66 = 6;
						}
						else
						{
							if (Main.player[Main.myPlayer].zoneEvil)
							{
								num66 = 1;
							}
							else
							{
								if (Main.player[Main.myPlayer].zoneBlood)
								{
									num66 = 8;
								}
								else
								{
									if (Main.player[Main.myPlayer].zoneJungle)
									{
										num66 = 3;
									}
									else
									{
										if (Main.player[Main.myPlayer].zoneSnow)
										{
											num66 = 7;
										}
										else
										{
											num66 = 0;
										}
									}
								}
							}
						}
					}
				}
			}
			int num68 = 30;
			Main.tranSpeed = 0.05f;
			if (num66 == 0)
			{
				num68 = 60;
			}
			if (Main.bgDelay < 0)
			{
				Main.bgDelay++;
			}
			else
			{
				if (num66 != Main.bgStyle)
				{
					Main.bgDelay++;
					if (Main.bgDelay > num68)
					{
						Main.bgDelay = -60;
						Main.bgStyle = num66;
						if (num66 == 0)
						{
							Main.bgDelay = 0;
						}
					}
				}
				else
				{
					if (Main.bgDelay > 0)
					{
						Main.bgDelay--;
					}
				}
			}
			if (Main.gameMenu)
			{
				Main.tranSpeed = 0.02f;
				if (!Main.dayTime)
				{
					Main.bgStyle = 1;
				}
				else
				{
					Main.bgStyle = 0;
				}
				num66 = Main.bgStyle;
			}
			if (Main.quickBG > 0)
			{
				Main.quickBG--;
				Main.bgStyle = num66;
				Main.tranSpeed = 1f;
			}
			if (Main.bgStyle == 2)
			{
				Main.bgAlpha2[0] -= Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] += Main.tranSpeed;
				if (Main.bgAlpha2[1] > 1f)
				{
					Main.bgAlpha2[1] = 1f;
				}
				Main.bgAlpha2[2] -= Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] -= Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] -= Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] -= Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] -= Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else
			{
				if (Main.bgStyle == 5 || Main.bgStyle == 1 || Main.bgStyle == 6)
				{
					Main.bgAlpha2[0] -= Main.tranSpeed;
					if (Main.bgAlpha2[0] < 0f)
					{
						Main.bgAlpha2[0] = 0f;
					}
					Main.bgAlpha2[1] -= Main.tranSpeed;
					if (Main.bgAlpha2[1] < 0f)
					{
						Main.bgAlpha2[1] = 0f;
					}
					Main.bgAlpha2[2] += Main.tranSpeed;
					if (Main.bgAlpha2[2] > 1f)
					{
						Main.bgAlpha2[2] = 1f;
					}
					Main.bgAlpha2[3] -= Main.tranSpeed;
					if (Main.bgAlpha2[3] < 0f)
					{
						Main.bgAlpha2[3] = 0f;
					}
					Main.bgAlpha2[4] -= Main.tranSpeed;
					if (Main.bgAlpha2[4] < 0f)
					{
						Main.bgAlpha2[4] = 0f;
					}
					Main.bgAlpha2[5] -= Main.tranSpeed;
					if (Main.bgAlpha2[5] < 0f)
					{
						Main.bgAlpha2[5] = 0f;
					}
					Main.bgAlpha2[6] -= Main.tranSpeed;
					if (Main.bgAlpha2[6] < 0f)
					{
						Main.bgAlpha2[6] = 0f;
					}
				}
				else
				{
					if (Main.bgStyle == 4)
					{
						Main.bgAlpha2[0] -= Main.tranSpeed;
						if (Main.bgAlpha2[0] < 0f)
						{
							Main.bgAlpha2[0] = 0f;
						}
						Main.bgAlpha2[1] -= Main.tranSpeed;
						if (Main.bgAlpha2[1] < 0f)
						{
							Main.bgAlpha2[1] = 0f;
						}
						Main.bgAlpha2[2] -= Main.tranSpeed;
						if (Main.bgAlpha2[2] < 0f)
						{
							Main.bgAlpha2[2] = 0f;
						}
						Main.bgAlpha2[3] += Main.tranSpeed;
						if (Main.bgAlpha2[3] > 1f)
						{
							Main.bgAlpha2[3] = 1f;
						}
						Main.bgAlpha2[4] -= Main.tranSpeed;
						if (Main.bgAlpha2[4] < 0f)
						{
							Main.bgAlpha2[4] = 0f;
						}
						Main.bgAlpha2[5] -= Main.tranSpeed;
						if (Main.bgAlpha2[5] < 0f)
						{
							Main.bgAlpha2[5] = 0f;
						}
						Main.bgAlpha2[6] -= Main.tranSpeed;
						if (Main.bgAlpha2[6] < 0f)
						{
							Main.bgAlpha2[6] = 0f;
						}
					}
					else
					{
						if (Main.bgStyle == 7)
						{
							Main.bgAlpha2[0] -= Main.tranSpeed;
							if (Main.bgAlpha2[0] < 0f)
							{
								Main.bgAlpha2[0] = 0f;
							}
							Main.bgAlpha2[1] -= Main.tranSpeed;
							if (Main.bgAlpha2[1] < 0f)
							{
								Main.bgAlpha2[1] = 0f;
							}
							Main.bgAlpha2[2] -= Main.tranSpeed;
							if (Main.bgAlpha2[2] < 0f)
							{
								Main.bgAlpha2[2] = 0f;
							}
							Main.bgAlpha2[3] -= Main.tranSpeed;
							if (Main.bgAlpha2[3] < 0f)
							{
								Main.bgAlpha2[3] = 0f;
							}
							Main.bgAlpha2[4] += Main.tranSpeed;
							if (Main.bgAlpha2[4] > 1f)
							{
								Main.bgAlpha2[4] = 1f;
							}
							Main.bgAlpha2[5] -= Main.tranSpeed;
							if (Main.bgAlpha2[5] < 0f)
							{
								Main.bgAlpha2[5] = 0f;
							}
							Main.bgAlpha2[6] -= Main.tranSpeed;
							if (Main.bgAlpha2[6] < 0f)
							{
								Main.bgAlpha2[6] = 0f;
							}
						}
						else
						{
							if (Main.bgStyle == 8)
							{
								Main.bgAlpha2[0] -= Main.tranSpeed;
								if (Main.bgAlpha2[0] < 0f)
								{
									Main.bgAlpha2[0] = 0f;
								}
								Main.bgAlpha2[1] -= Main.tranSpeed;
								if (Main.bgAlpha2[1] < 0f)
								{
									Main.bgAlpha2[1] = 0f;
								}
								Main.bgAlpha2[2] -= Main.tranSpeed;
								if (Main.bgAlpha2[2] < 0f)
								{
									Main.bgAlpha2[2] = 0f;
								}
								Main.bgAlpha2[3] -= Main.tranSpeed;
								if (Main.bgAlpha2[3] < 0f)
								{
									Main.bgAlpha2[3] = 0f;
								}
								Main.bgAlpha2[4] -= Main.tranSpeed;
								if (Main.bgAlpha2[4] < 0f)
								{
									Main.bgAlpha2[4] = 0f;
								}
								Main.bgAlpha2[5] += Main.tranSpeed;
								if (Main.bgAlpha2[5] > 1f)
								{
									Main.bgAlpha2[5] = 1f;
								}
								Main.bgAlpha2[6] -= Main.tranSpeed;
								if (Main.bgAlpha2[6] < 0f)
								{
									Main.bgAlpha2[6] = 0f;
								}
							}
							else
							{
								if (Main.bgStyle == 9)
								{
									Main.bgAlpha2[0] += Main.tranSpeed;
									if (Main.bgAlpha2[0] > 1f)
									{
										Main.bgAlpha2[0] = 1f;
									}
									Main.bgAlpha2[1] -= Main.tranSpeed;
									if (Main.bgAlpha2[1] < 0f)
									{
										Main.bgAlpha2[1] = 0f;
									}
									Main.bgAlpha2[2] -= Main.tranSpeed;
									if (Main.bgAlpha2[2] < 0f)
									{
										Main.bgAlpha2[2] = 0f;
									}
									Main.bgAlpha2[3] -= Main.tranSpeed;
									if (Main.bgAlpha2[3] < 0f)
									{
										Main.bgAlpha2[3] = 0f;
									}
									Main.bgAlpha2[4] -= Main.tranSpeed;
									if (Main.bgAlpha2[4] < 0f)
									{
										Main.bgAlpha2[4] = 0f;
									}
									Main.bgAlpha2[5] -= Main.tranSpeed;
									if (Main.bgAlpha2[5] < 0f)
									{
										Main.bgAlpha2[5] = 0f;
									}
									Main.bgAlpha2[6] += Main.tranSpeed;
									if (Main.bgAlpha2[6] > 1f)
									{
										Main.bgAlpha2[6] = 1f;
									}
								}
								else
								{
									Main.bgAlpha2[0] += Main.tranSpeed;
									if (Main.bgAlpha2[0] > 1f)
									{
										Main.bgAlpha2[0] = 1f;
									}
									Main.bgAlpha2[1] -= Main.tranSpeed;
									if (Main.bgAlpha2[1] < 0f)
									{
										Main.bgAlpha2[1] = 0f;
									}
									Main.bgAlpha2[2] -= Main.tranSpeed;
									if (Main.bgAlpha2[2] < 0f)
									{
										Main.bgAlpha2[2] = 0f;
									}
									Main.bgAlpha2[3] -= Main.tranSpeed;
									if (Main.bgAlpha2[3] < 0f)
									{
										Main.bgAlpha2[3] = 0f;
									}
									Main.bgAlpha2[4] -= Main.tranSpeed;
									if (Main.bgAlpha2[4] < 0f)
									{
										Main.bgAlpha2[4] = 0f;
									}
									Main.bgAlpha2[5] -= Main.tranSpeed;
									if (Main.bgAlpha2[5] < 0f)
									{
										Main.bgAlpha2[5] = 0f;
									}
									Main.bgAlpha2[6] -= Main.tranSpeed;
									if (Main.bgAlpha2[6] < 0f)
									{
										Main.bgAlpha2[6] = 0f;
									}
								}
							}
						}
					}
				}
			}
			if (Main.ignoreErrors)
			{
				try
				{
					this.DrawSurfaceBG();
					goto IL_45FC;
				}
				catch
				{
					goto IL_45FC;
				}
			}
			this.DrawSurfaceBG();
			IL_45FC:
			if (Main.gameMenu || Main.netMode == 2)
			{
				for (int k = 0; k < Main.maxRain; k++)
				{
					if (Main.rain[k].active)
					{
						Main.spriteBatch.Draw(Main.rainTexture[(int)Main.rain[k].type], Main.rain[k].position - Main.screenPosition, new Rectangle?(new Rectangle(0, 0, Main.rainTexture[(int)Main.rain[k].type].Width, Main.rainTexture[(int)Main.rain[k].type].Height)), Main.bgColor * 0.85f, Main.rain[k].rotation, default(Vector2), Main.rain[k].scale, SpriteEffects.None, 0f);
						if (base.IsActive)
						{
							Main.rain[k].Update();
						}
					}
				}
				this.DrawMenu();
				return;
			}
			this.firstTileX = (int)(Main.screenPosition.X / 16f - 1f);
			this.lastTileX = (int)((Main.screenPosition.X + (float)Main.screenWidth) / 16f) + 2;
			this.firstTileY = (int)(Main.screenPosition.Y / 16f - 1f);
			this.lastTileY = (int)((Main.screenPosition.Y + (float)Main.screenHeight) / 16f) + 2;
			if (this.firstTileX < 0)
			{
				this.firstTileX = 0;
			}
			if (this.lastTileX > Main.maxTilesX)
			{
				this.lastTileX = Main.maxTilesX;
			}
			if (this.firstTileY < 0)
			{
				this.firstTileY = 0;
			}
			if (this.lastTileY > Main.maxTilesY)
			{
				this.lastTileY = Main.maxTilesY;
			}
			if (!Main.drawSkip)
			{
				Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
			}
			if (!Main.mapFullscreen)
			{
				Color arg_4867_0 = Color.White;
				if (Main.drawToScreen)
				{
					this.drawWaters(true);
				}
				else
				{
					Main.spriteBatch.Draw(this.backWaterTarget, Main.sceneBackgroundPos - Main.screenPosition, Color.White);
				}
				float x = (Main.sceneBackgroundPos.X - Main.screenPosition.X + (float)Main.offScreenRange) * Main.caveParrallax - (float)Main.offScreenRange;
				if (Main.drawToScreen)
				{
					this.DrawBackground();
				}
				else
				{
					Main.spriteBatch.Draw(this.backgroundTarget, new Vector2(x, Main.sceneBackgroundPos.Y - Main.screenPosition.Y), Color.White);
				}
				Main.magmaBGFrameCounter++;
				if (Main.magmaBGFrameCounter >= 8)
				{
					Main.magmaBGFrameCounter = 0;
					Main.magmaBGFrame++;
					if (Main.magmaBGFrame >= 3)
					{
						Main.magmaBGFrame = 0;
					}
				}
				try
				{
					if (Main.drawToScreen)
					{
						this.DrawBlack();
						this.DrawWalls();
					}
					else
					{
						Main.spriteBatch.Draw(this.blackTarget, Main.sceneTilePos - Main.screenPosition, Color.White);
						Main.spriteBatch.Draw(this.wallTarget, Main.sceneWallPos - Main.screenPosition, Color.White);
					}
					this.DrawWoF();
					if (Main.player[Main.myPlayer].detectCreature)
					{
						if (Main.drawToScreen)
						{
							this.DrawTiles(false);
							this.waterfallManager.Draw(Main.spriteBatch);
							this.DrawTiles(true);
						}
						else
						{
							Main.spriteBatch.Draw(this.tile2Target, Main.sceneTile2Pos - Main.screenPosition, Color.White);
							this.waterfallManager.Draw(Main.spriteBatch);
							Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Color.White);
						}
						this.DrawNPCs(true);
						this.DrawNPCs(false);
					}
					else
					{
						if (Main.drawToScreen)
						{
							this.DrawTiles(false);
							this.waterfallManager.Draw(Main.spriteBatch);
							this.DrawNPCs(true);
							this.DrawTiles(true);
						}
						else
						{
							Main.spriteBatch.Draw(this.tile2Target, Main.sceneTile2Pos - Main.screenPosition, Color.White);
							this.waterfallManager.Draw(Main.spriteBatch);
							this.DrawNPCs(true);
							Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Color.White);
						}
						this.DrawNPCs(false);
					}
				}
				catch
				{
				}
				if (Main.ignoreErrors)
				{
					for (int l = 0; l < 1000; l++)
					{
						if (Main.projectile[l].active && Main.projectile[l].type > 0 && !Main.projectile[l].hide)
						{
							try
							{
								this.DrawProj(l);
							}
							catch
							{
								Main.projectile[l].active = false;
							}
						}
					}
				}
				else
				{
					for (int m = 0; m < 1000; m++)
					{
						if (Main.projectile[m].active && Main.projectile[m].type > 0 && !Main.projectile[m].hide)
						{
							this.DrawProj(m);
						}
					}
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
				for (int n = 0; n < 255; n++)
				{
					if (Main.player[n].active && !Main.player[n].outOfRange)
					{
						if (Main.gamePaused)
						{
							Main.player[n].PlayerFrame();
						}
						if (Main.player[n].ghost)
						{
							Vector2 position = Main.player[n].position;
							Main.player[n].position = Main.player[n].shadowPos[0];
							Main.player[n].shadow = 0.5f;
							this.DrawGhost(Main.player[n]);
							Main.player[n].position = Main.player[n].shadowPos[1];
							Main.player[n].shadow = 0.7f;
							this.DrawGhost(Main.player[n]);
							Main.player[n].position = Main.player[n].shadowPos[2];
							Main.player[n].shadow = 0.9f;
							this.DrawGhost(Main.player[n]);
							Main.player[n].position = position;
							Main.player[n].shadow = 0f;
							this.DrawGhost(Main.player[n]);
						}
						else
						{
							if (Main.player[n].inventory[Main.player[n].selectedItem].flame || Main.player[n].head == 137 || Main.player[n].wings == 22)
							{
								Main.player[n].itemFlameCount--;
								if (Main.player[n].itemFlameCount <= 0)
								{
									Main.player[n].itemFlameCount = 5;
									for (int num69 = 0; num69 < 7; num69++)
									{
										Main.player[n].itemFlamePos[num69].X = (float)Main.rand.Next(-10, 11) * 0.15f;
										Main.player[n].itemFlamePos[num69].Y = (float)Main.rand.Next(-10, 1) * 0.35f;
									}
								}
							}
							bool flag2 = false;
							bool flag3 = false;
							bool flag4 = false;
							if (Main.player[n].head == 111 && Main.player[n].body == 73 && Main.player[n].legs == 62)
							{
								flag3 = true;
								flag4 = true;
							}
							if (Main.player[n].head == 134 && Main.player[n].body == 95 && Main.player[n].legs == 79)
							{
								flag3 = true;
								flag4 = true;
							}
							if (Main.player[n].head == 107 && Main.player[n].body == 69 && Main.player[n].legs == 58)
							{
								flag3 = true;
								flag2 = true;
							}
							if (Main.player[n].head == 108 && Main.player[n].body == 70 && Main.player[n].legs == 59)
							{
								flag3 = true;
								flag2 = true;
							}
							if (Main.player[n].head == 109 && Main.player[n].body == 71 && Main.player[n].legs == 60)
							{
								flag3 = true;
								flag2 = true;
							}
							if (Main.player[n].head == 110 && Main.player[n].body == 72 && Main.player[n].legs == 61)
							{
								flag3 = true;
								flag2 = true;
							}
							if (Main.player[n].body == 67 && Main.player[n].legs == 56 && Main.player[n].head >= 103 && Main.player[n].head <= 105)
							{
								flag2 = true;
							}
							if ((Main.player[n].head == 78 || Main.player[n].head == 79 || Main.player[n].head == 80) && Main.player[n].body == 51 && Main.player[n].legs == 47)
							{
								flag3 = true;
							}
							if (Main.player[n].dashDelay < 0)
							{
								flag2 = true;
							}
							if (Main.player[n].head == 5 && Main.player[n].body == 5 && Main.player[n].legs == 5)
							{
								flag2 = true;
							}
							if (Main.player[n].head == 74 && Main.player[n].body == 48 && Main.player[n].legs == 44)
							{
								flag2 = true;
							}
							if (Main.player[n].head == 76 && Main.player[n].body == 49 && Main.player[n].legs == 45)
							{
								flag2 = true;
							}
							if (Main.player[n].head == 7 && Main.player[n].body == 7 && Main.player[n].legs == 7)
							{
								flag2 = true;
							}
							if (Main.player[n].head == 22 && Main.player[n].body == 14 && Main.player[n].legs == 14)
							{
								flag2 = true;
							}
							if (Main.player[n].dye[0].dye == 30 && Main.player[n].dye[1].dye == 30 && Main.player[n].dye[2].dye == 30 && Main.player[n].head == 4 && Main.player[n].body == 27 && Main.player[n].legs == 26)
							{
								flag2 = true;
								flag4 = true;
							}
							if (Main.player[n].body == 17 && Main.player[n].legs == 16 && (Main.player[n].head == 29 || Main.player[n].head == 30 || Main.player[n].head == 31))
							{
								flag2 = true;
							}
							if (Main.player[n].body == 19 && Main.player[n].legs == 18 && (Main.player[n].head == 35 || Main.player[n].head == 36 || Main.player[n].head == 37))
							{
								flag4 = true;
							}
							if (Main.myPlayer == n)
							{
								bool flag5 = false;
								if (Main.player[n].wings == 3 || (Main.player[n].wings >= 16 && Main.player[n].wings <= 19))
								{
									flag5 = true;
								}
								else
								{
									if (Main.player[n].head == 45 || (Main.player[n].head >= 106 && Main.player[n].head <= 110))
									{
										flag5 = true;
									}
									else
									{
										if (Main.player[n].body == 26 || (Main.player[n].body >= 68 && Main.player[n].body <= 74))
										{
											flag5 = true;
										}
										else
										{
											if (Main.player[n].legs == 25 || (Main.player[n].legs >= 57 && Main.player[n].legs <= 63))
											{
												flag5 = true;
											}
										}
									}
								}
								if (flag5)
								{
									Player expr_535A_cp_0 = Main.player[n];
									expr_535A_cp_0.velocity.X = expr_535A_cp_0.velocity.X * 0.9f;
									if (Main.player[n].velocity.Y < 0f)
									{
										Player expr_5391_cp_0 = Main.player[n];
										expr_5391_cp_0.velocity.Y = expr_5391_cp_0.velocity.Y + 0.2f;
									}
									Main.player[n].jump = 0;
									Main.player[n].statDefense = -1000;
									Main.player[n].AddBuff(23, 2, false);
									Main.player[n].AddBuff(80, 2, false);
									Main.player[n].AddBuff(67, 2, false);
									Main.player[n].AddBuff(32, 2, false);
									Main.player[n].AddBuff(31, 2, false);
									Main.player[n].AddBuff(33, 2, false);
								}
							}
							if (Main.player[n].body == 26 && Main.player[n].legs == 25 && Main.player[n].head == 45)
							{
								flag4 = true;
								flag2 = true;
							}
							if (Main.player[n].body == 26 && Main.player[n].legs == 25 && Main.player[n].head == 63)
							{
								flag4 = true;
								flag2 = true;
							}
							if (Main.player[n].body == 24 && Main.player[n].legs == 23 && (Main.player[n].head == 41 || Main.player[n].head == 42 || Main.player[n].head == 43))
							{
								flag4 = true;
								flag2 = true;
							}
							if (Main.player[n].head == 157 && Main.player[n].legs == 98 && Main.player[n].body != 105)
							{
								int arg_553B_0 = Main.player[n].body;
							}
							if (Main.player[n].body == 36 && Main.player[n].head == 56)
							{
								flag4 = true;
							}
							if (flag4)
							{
								Vector2 position2 = Main.player[n].position;
								if (!Main.gamePaused)
								{
									Main.player[n].ghostFade += Main.player[n].ghostDir * 0.075f;
								}
								if ((double)Main.player[n].ghostFade < 0.1)
								{
									Main.player[n].ghostDir = 1f;
									Main.player[n].ghostFade = 0.1f;
								}
								if ((double)Main.player[n].ghostFade > 0.9)
								{
									Main.player[n].ghostDir = -1f;
									Main.player[n].ghostFade = 0.9f;
								}
								Main.player[n].position.X = position2.X - Main.player[n].ghostFade * 5f;
								Player expr_5659_cp_0 = Main.player[n];
								expr_5659_cp_0.position.Y = expr_5659_cp_0.position.Y + Main.player[n].gfxOffY;
								Main.player[n].shadow = Main.player[n].ghostFade;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].position.X = position2.X + Main.player[n].ghostFade * 5f;
								Main.player[n].shadow = Main.player[n].ghostFade;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].position = position2;
								Main.player[n].position.Y = position2.Y - Main.player[n].ghostFade * 5f;
								Player expr_5738_cp_0 = Main.player[n];
								expr_5738_cp_0.position.Y = expr_5738_cp_0.position.Y + Main.player[n].gfxOffY;
								Main.player[n].shadow = Main.player[n].ghostFade;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].position.Y = position2.Y + Main.player[n].ghostFade * 5f;
								Player expr_57B3_cp_0 = Main.player[n];
								expr_57B3_cp_0.position.Y = expr_57B3_cp_0.position.Y + Main.player[n].gfxOffY;
								Main.player[n].shadow = Main.player[n].ghostFade;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].position = position2;
								Main.player[n].shadow = 0f;
							}
							if (flag2)
							{
								Vector2 position3 = Main.player[n].position;
								Main.player[n].position = Main.player[n].shadowPos[0];
								Main.player[n].shadow = 0.5f;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].position = Main.player[n].shadowPos[1];
								Main.player[n].shadow = 0.7f;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].position = Main.player[n].shadowPos[2];
								Main.player[n].shadow = 0.9f;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].position = position3;
								Main.player[n].shadow = 0f;
							}
							if (flag3)
							{
								for (int num70 = 0; num70 < 4; num70++)
								{
									Vector2 position4 = Main.player[n].position;
									Player expr_5946_cp_0 = Main.player[n];
									expr_5946_cp_0.position.X = expr_5946_cp_0.position.X + (float)Main.rand.Next(-20, 21) * 0.1f;
									Player expr_5974_cp_0 = Main.player[n];
									expr_5974_cp_0.position.Y = expr_5974_cp_0.position.Y + (float)Main.rand.Next(-20, 21) * 0.1f;
									Player expr_59A2_cp_0 = Main.player[n];
									expr_59A2_cp_0.position.Y = expr_59A2_cp_0.position.Y + Main.player[n].gfxOffY;
									Main.player[n].shadow = 0.9f;
									this.DrawPlayer(Main.player[n]);
									Main.player[n].position = position4;
									Main.player[n].shadow = 0f;
								}
							}
							if (Main.player[n].shadowDodge)
							{
								Main.player[n].shadowDodgeCount += 1f;
								if (Main.player[n].shadowDodgeCount > 30f)
								{
									Main.player[n].shadowDodgeCount = 30f;
								}
							}
							else
							{
								Main.player[n].shadowDodgeCount -= 1f;
								if (Main.player[n].shadowDodgeCount < 0f)
								{
									Main.player[n].shadowDodgeCount = 0f;
								}
							}
							if (Main.player[n].shadowDodgeCount > 0f)
							{
								Vector2 position5 = Main.player[n].position;
								Player expr_5ACC_cp_0 = Main.player[n];
								expr_5ACC_cp_0.position.Y = expr_5ACC_cp_0.position.Y + Main.player[n].gfxOffY;
								Player expr_5AF2_cp_0 = Main.player[n];
								expr_5AF2_cp_0.position.X = expr_5AF2_cp_0.position.X + Main.player[n].shadowDodgeCount;
								Main.player[n].shadow = 0.5f + (float)Main.rand.Next(-10, 11) * 0.005f;
								this.DrawPlayer(Main.player[n]);
								Player expr_5B4E_cp_0 = Main.player[n];
								expr_5B4E_cp_0.position.X = expr_5B4E_cp_0.position.X - Main.player[n].shadowDodgeCount * 2f;
								Main.player[n].shadow = 0.5f + (float)Main.rand.Next(-10, 11) * 0.005f;
								this.DrawPlayer(Main.player[n]);
								Main.player[n].shadow = 0f;
								Main.player[n].position = position5;
							}
							this.DrawPlayer(Main.player[n]);
						}
					}
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
				if (!Main.gamePaused)
				{
					Main.essScale += (float)Main.essDir * 0.01f;
					if (Main.essScale > 1f)
					{
						Main.essDir = -1;
						Main.essScale = 1f;
					}
					if ((double)Main.essScale < 0.7)
					{
						Main.essDir = 1;
						Main.essScale = 0.7f;
					}
				}
				for (int num71 = 0; num71 < 400; num71++)
				{
					if (Main.item[num71].active && Main.item[num71].type > 0)
					{
						int arg_5CCD_0 = (int)((double)Main.item[num71].position.X + (double)Main.item[num71].width * 0.5) / 16;
						int arg_5CD3_0 = Lighting.offScreenTiles;
						int arg_5D04_0 = (int)((double)Main.item[num71].position.Y + (double)Main.item[num71].height * 0.5) / 16;
						int arg_5D0A_0 = Lighting.offScreenTiles;
						Color color8 = Lighting.GetColor((int)((double)Main.item[num71].position.X + (double)Main.item[num71].width * 0.5) / 16, (int)((double)Main.item[num71].position.Y + (double)Main.item[num71].height * 0.5) / 16);
						if (!Main.gamePaused && base.IsActive && ((Main.item[num71].type >= 71 && Main.item[num71].type <= 74) || Main.item[num71].type == 58 || Main.item[num71].type == 109) && color8.R > 60)
						{
							float num72 = (float)Main.rand.Next(500) - (Math.Abs(Main.item[num71].velocity.X) + Math.Abs(Main.item[num71].velocity.Y)) * 10f;
							if (num72 < (float)(color8.R / 50))
							{
								int num73 = Dust.NewDust(Main.item[num71].position, Main.item[num71].width, Main.item[num71].height, 43, 0f, 0f, 254, default(Color), 0.5f);
								Main.dust[num73].velocity *= 0f;
							}
						}
						float rotation3 = Main.item[num71].velocity.X * 0.2f;
						float num74 = 1f;
						Color alpha = Main.item[num71].GetAlpha(color8);
						if (Main.item[num71].type == 662 || Main.item[num71].type == 663)
						{
							alpha.R = (byte)Main.DiscoR;
							alpha.G = (byte)Main.DiscoG;
							alpha.B = (byte)Main.DiscoB;
							alpha.A = 255;
						}
						if (Main.item[num71].type == 520 || Main.item[num71].type == 521 || Main.item[num71].type == 547 || Main.item[num71].type == 548 || Main.item[num71].type == 549)
						{
							num74 = Main.essScale;
							alpha.R = (byte)((float)alpha.R * num74);
							alpha.G = (byte)((float)alpha.G * num74);
							alpha.B = (byte)((float)alpha.B * num74);
							alpha.A = (byte)((float)alpha.A * num74);
						}
						else
						{
							if (Main.item[num71].type == 58 || Main.item[num71].type == 184)
							{
								num74 = Main.essScale * 0.25f + 0.75f;
								alpha.R = (byte)((float)alpha.R * num74);
								alpha.G = (byte)((float)alpha.G * num74);
								alpha.B = (byte)((float)alpha.B * num74);
								alpha.A = (byte)((float)alpha.A * num74);
							}
						}
						float num75 = (float)(Main.item[num71].height - Main.itemTexture[Main.item[num71].type].Height);
						float num76 = (float)(Main.item[num71].width / 2 - Main.itemTexture[Main.item[num71].type].Width / 2);
						if (Main.item[num71].type >= 1522 && Main.item[num71].type <= 1527)
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.item[num71].type], new Vector2(Main.item[num71].position.X - Main.screenPosition.X + (float)(Main.itemTexture[Main.item[num71].type].Width / 2) + num76, Main.item[num71].position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[Main.item[num71].type].Height / 2) + num75 + 2f), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.item[num71].type].Width, Main.itemTexture[Main.item[num71].type].Height)), new Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), rotation3, new Vector2((float)(Main.itemTexture[Main.item[num71].type].Width / 2), (float)(Main.itemTexture[Main.item[num71].type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.Draw(Main.itemTexture[Main.item[num71].type], new Vector2(Main.item[num71].position.X - Main.screenPosition.X + (float)(Main.itemTexture[Main.item[num71].type].Width / 2) + num76, Main.item[num71].position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[Main.item[num71].type].Height / 2) + num75 + 2f), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.item[num71].type].Width, Main.itemTexture[Main.item[num71].type].Height)), alpha, rotation3, new Vector2((float)(Main.itemTexture[Main.item[num71].type].Width / 2), (float)(Main.itemTexture[Main.item[num71].type].Height / 2)), num74, SpriteEffects.None, 0f);
							if (Main.item[num71].color != default(Color))
							{
								Main.spriteBatch.Draw(Main.itemTexture[Main.item[num71].type], new Vector2(Main.item[num71].position.X - Main.screenPosition.X + (float)(Main.itemTexture[Main.item[num71].type].Width / 2) + num76, Main.item[num71].position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[Main.item[num71].type].Height / 2) + num75 + 2f), new Rectangle?(new Rectangle(0, 0, Main.itemTexture[Main.item[num71].type].Width, Main.itemTexture[Main.item[num71].type].Height)), Main.item[num71].GetColor(color8), rotation3, new Vector2((float)(Main.itemTexture[Main.item[num71].type].Width / 2), (float)(Main.itemTexture[Main.item[num71].type].Height / 2)), num74, SpriteEffects.None, 0f);
							}
						}
					}
				}
				for (int num77 = 0; num77 < Main.maxRain; num77++)
				{
					Rain rain = Main.rain[num77];
					if (rain.active)
					{
						Main.spriteBatch.Draw(Main.rainTexture[(int)rain.type], rain.position - Main.screenPosition, null, Lighting.GetColor((int)((double)rain.position.X + 4.0) / 16, (int)((double)rain.position.Y + 4.0) / 16) * 0.85f, rain.rotation, default(Vector2), rain.scale, SpriteEffects.None, 0f);
						if (base.IsActive)
						{
							rain.Update();
						}
					}
				}
				if (Main.ignoreErrors)
				{
					try
					{
						this.DrawGore();
						goto IL_65B2;
					}
					catch
					{
						goto IL_65B2;
					}
				}
				this.DrawGore();
				IL_65B2:
				Rectangle value2 = new Rectangle((int)Main.screenPosition.X - 500, (int)Main.screenPosition.Y - 50, Main.screenWidth + 1000, Main.screenHeight + 100);
				for (int num78 = 0; num78 < Main.numDust; num78++)
				{
					if (Main.dust[num78].active)
					{
						if (Main.dust[num78].type >= 130 && Main.dust[num78].type <= 134)
						{
							value2.X -= 500;
							value2.Y -= 500;
							value2.Width += 1000;
							value2.Height += 1000;
						}
						if (new Rectangle((int)Main.dust[num78].position.X, (int)Main.dust[num78].position.Y, 4, 4).Intersects(value2))
						{
							if (Main.dust[num78].type >= 130 && Main.dust[num78].type <= 134)
							{
								float num79 = Math.Abs(Main.dust[num78].velocity.X) + Math.Abs(Main.dust[num78].velocity.Y);
								num79 *= 0.3f;
								num79 *= 10f;
								if (num79 > 10f)
								{
									num79 = 10f;
								}
								int num80 = 0;
								while ((float)num80 < num79)
								{
									Vector2 velocity = Main.dust[num78].velocity;
									Vector2 value3 = Main.dust[num78].position - velocity * (float)num80;
									float scale = Main.dust[num78].scale * (1f - (float)num80 / 10f);
									Color color9 = Lighting.GetColor((int)((double)Main.dust[num78].position.X + 4.0) / 16, (int)((double)Main.dust[num78].position.Y + 4.0) / 16);
									color9 = Main.dust[num78].GetAlpha(color9);
									Main.spriteBatch.Draw(Main.dustTexture, value3 - Main.screenPosition, new Rectangle?(Main.dust[num78].frame), color9, Main.dust[num78].rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
									num80++;
								}
							}
							Color color10 = Lighting.GetColor((int)((double)Main.dust[num78].position.X + 4.0) / 16, (int)((double)Main.dust[num78].position.Y + 4.0) / 16);
							if (Main.dust[num78].type == 6 || Main.dust[num78].type == 15 || (Main.dust[num78].noLight && Main.dust[num78].type < 86 && Main.dust[num78].type > 91) || (Main.dust[num78].type >= 59 && Main.dust[num78].type <= 64))
							{
								color10 = Color.White;
							}
							color10 = Main.dust[num78].GetAlpha(color10);
							Main.spriteBatch.Draw(Main.dustTexture, Main.dust[num78].position - Main.screenPosition, new Rectangle?(Main.dust[num78].frame), color10, Main.dust[num78].rotation, new Vector2(4f, 4f), Main.dust[num78].scale, SpriteEffects.None, 0f);
							if (Main.dust[num78].color != default(Color))
							{
								Main.spriteBatch.Draw(Main.dustTexture, Main.dust[num78].position - Main.screenPosition, new Rectangle?(Main.dust[num78].frame), Main.dust[num78].GetColor(color10), Main.dust[num78].rotation, new Vector2(4f, 4f), Main.dust[num78].scale, SpriteEffects.None, 0f);
							}
							if (color10 == Color.Black)
							{
								Main.dust[num78].active = false;
							}
						}
						else
						{
							Main.dust[num78].active = false;
						}
					}
				}
				if (Main.drawToScreen)
				{
					this.drawWaters(false);
					if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].mech)
					{
						this.DrawWires();
					}
				}
				else
				{
					Main.spriteBatch.Draw(this.waterTarget, Main.sceneWaterPos - Main.screenPosition, Color.White);
				}
				if (!Main.mapFullscreen && Main.mapStyle == 2)
				{
					if (Main.ignoreErrors)
					{
						try
						{
							this.DrawMap();
							goto IL_6AE3;
						}
						catch
						{
							goto IL_6AE3;
						}
					}
					this.DrawMap();
				}
				IL_6AE3:
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				if (!Main.hideUI)
				{
					for (int num81 = 0; num81 < 255; num81++)
					{
						if (Main.player[num81].active && Main.player[num81].chatShowTime > 0 && num81 != Main.myPlayer && !Main.player[num81].dead)
						{
							Vector2 vector = Main.fontMouseText.MeasureString(Main.player[num81].chatText);
							Vector2 vector2;
							vector2.X = Main.player[num81].position.X + (float)(Main.player[num81].width / 2) - vector.X / 2f;
							vector2.Y = Main.player[num81].position.Y - vector.Y - 2f;
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								vector2.Y -= Main.screenPosition.Y;
								vector2.Y = Main.screenPosition.Y + (float)Main.screenHeight - vector2.Y;
							}
							for (int num82 = 0; num82 < 5; num82++)
							{
								int num83 = 0;
								int num84 = 0;
								Color black = Color.Black;
								if (num82 == 0)
								{
									num83 = -2;
								}
								if (num82 == 1)
								{
									num83 = 2;
								}
								if (num82 == 2)
								{
									num84 = -2;
								}
								if (num82 == 3)
								{
									num84 = 2;
								}
								if (num82 == 4)
								{
									black = new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
								}
								Main.spriteBatch.DrawString(Main.fontMouseText, Main.player[num81].chatText, new Vector2(vector2.X + (float)num83 - Main.screenPosition.X, vector2.Y + (float)num84 - Main.screenPosition.Y), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
					}
					for (int num85 = 0; num85 < 100; num85++)
					{
						if (Main.combatText[num85].active)
						{
							int num86 = 0;
							if (Main.combatText[num85].crit)
							{
								num86 = 1;
							}
							Vector2 vector3 = Main.fontCombatText[num86].MeasureString(Main.combatText[num85].text);
							Vector2 origin = new Vector2(vector3.X * 0.5f, vector3.Y * 0.5f);
							float arg_6D6C_0 = Main.combatText[num85].scale;
							float num87 = (float)Main.combatText[num85].color.R;
							float num88 = (float)Main.combatText[num85].color.G;
							float num89 = (float)Main.combatText[num85].color.B;
							float num90 = (float)Main.combatText[num85].color.A;
							num87 *= Main.combatText[num85].scale * Main.combatText[num85].alpha * 0.3f;
							num89 *= Main.combatText[num85].scale * Main.combatText[num85].alpha * 0.3f;
							num88 *= Main.combatText[num85].scale * Main.combatText[num85].alpha * 0.3f;
							num90 *= Main.combatText[num85].scale * Main.combatText[num85].alpha;
							Color color11 = new Color((int)num87, (int)num88, (int)num89, (int)num90);
							for (int num91 = 0; num91 < 5; num91++)
							{
								int num92 = 0;
								int num93 = 0;
								if (num91 == 0)
								{
									num92--;
								}
								else
								{
									if (num91 == 1)
									{
										num92++;
									}
									else
									{
										if (num91 == 2)
										{
											num93--;
										}
										else
										{
											if (num91 == 3)
											{
												num93++;
											}
											else
											{
												num87 = (float)Main.combatText[num85].color.R * Main.combatText[num85].scale * Main.combatText[num85].alpha;
												num89 = (float)Main.combatText[num85].color.B * Main.combatText[num85].scale * Main.combatText[num85].alpha;
												num88 = (float)Main.combatText[num85].color.G * Main.combatText[num85].scale * Main.combatText[num85].alpha;
												num90 = (float)Main.combatText[num85].color.A * Main.combatText[num85].scale * Main.combatText[num85].alpha;
												color11 = new Color((int)num87, (int)num88, (int)num89, (int)num90);
											}
										}
									}
								}
								if (Main.player[Main.myPlayer].gravDir == -1f)
								{
									float num94 = Main.combatText[num85].position.Y - Main.screenPosition.Y;
									num94 = (float)Main.screenHeight - num94;
									Main.spriteBatch.DrawString(Main.fontCombatText[num86], Main.combatText[num85].text, new Vector2(Main.combatText[num85].position.X - Main.screenPosition.X + (float)num92 + origin.X, num94 + (float)num93 + origin.Y), color11, Main.combatText[num85].rotation, origin, Main.combatText[num85].scale, SpriteEffects.None, 0f);
								}
								else
								{
									Main.spriteBatch.DrawString(Main.fontCombatText[num86], Main.combatText[num85].text, new Vector2(Main.combatText[num85].position.X - Main.screenPosition.X + (float)num92 + origin.X, Main.combatText[num85].position.Y - Main.screenPosition.Y + (float)num93 + origin.Y), color11, Main.combatText[num85].rotation, origin, Main.combatText[num85].scale, SpriteEffects.None, 0f);
								}
							}
						}
					}
					for (int num95 = 0; num95 < 20; num95++)
					{
						if (Main.itemText[num95].active)
						{
							string text = Main.itemText[num95].name;
							if (Main.itemText[num95].stack > 1)
							{
								text = string.Concat(new object[]
								{
									text,
									" (",
									Main.itemText[num95].stack,
									")"
								});
							}
							Vector2 vector4 = Main.fontMouseText.MeasureString(text);
							Vector2 origin2 = new Vector2(vector4.X * 0.5f, vector4.Y * 0.5f);
							float arg_71BD_0 = Main.itemText[num95].scale;
							float num96 = (float)Main.itemText[num95].color.R;
							float num97 = (float)Main.itemText[num95].color.G;
							float num98 = (float)Main.itemText[num95].color.B;
							float num99 = (float)Main.itemText[num95].color.A;
							num96 *= Main.itemText[num95].scale * Main.itemText[num95].alpha * 0.3f;
							num98 *= Main.itemText[num95].scale * Main.itemText[num95].alpha * 0.3f;
							num97 *= Main.itemText[num95].scale * Main.itemText[num95].alpha * 0.3f;
							num99 *= Main.itemText[num95].scale * Main.itemText[num95].alpha;
							Color color12 = new Color((int)num96, (int)num97, (int)num98, (int)num99);
							for (int num100 = 0; num100 < 5; num100++)
							{
								int num101 = 0;
								int num102 = 0;
								if (num100 == 0)
								{
									num101 -= 2;
								}
								else
								{
									if (num100 == 1)
									{
										num101 += 2;
									}
									else
									{
										if (num100 == 2)
										{
											num102 -= 2;
										}
										else
										{
											if (num100 == 3)
											{
												num102 += 2;
											}
											else
											{
												num96 = (float)Main.itemText[num95].color.R * Main.itemText[num95].scale * Main.itemText[num95].alpha;
												num98 = (float)Main.itemText[num95].color.B * Main.itemText[num95].scale * Main.itemText[num95].alpha;
												num97 = (float)Main.itemText[num95].color.G * Main.itemText[num95].scale * Main.itemText[num95].alpha;
												num99 = (float)Main.itemText[num95].color.A * Main.itemText[num95].scale * Main.itemText[num95].alpha;
												color12 = new Color((int)num96, (int)num97, (int)num98, (int)num99);
											}
										}
									}
								}
								if (num100 < 4)
								{
									num99 = (float)Main.itemText[num95].color.A * Main.itemText[num95].scale * Main.itemText[num95].alpha;
									color12 = new Color(0, 0, 0, (int)num99);
								}
								float num103 = Main.itemText[num95].position.Y - Main.screenPosition.Y + (float)num102;
								if (Main.player[Main.myPlayer].gravDir == -1f)
								{
									num103 = (float)Main.screenHeight - num103;
								}
								Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(Main.itemText[num95].position.X - Main.screenPosition.X + (float)num101 + origin2.X, num103 + origin2.Y), color12, Main.itemText[num95].rotation, origin2, Main.itemText[num95].scale, SpriteEffects.None, 0f);
							}
						}
					}
					if (Main.netMode == 1 && Netplay.clientSock.statusText != "" && Netplay.clientSock.statusText != null)
					{
						string text2 = string.Concat(new object[]
						{
							Netplay.clientSock.statusText,
							": ",
							(int)((float)Netplay.clientSock.statusCount / (float)Netplay.clientSock.statusMax * 100f),
							"%"
						});
						Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2(628f - Main.fontMouseText.MeasureString(text2).X * 0.5f + (float)(Main.screenWidth - 800), 84f), new Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (Main.BlackFadeIn > 0)
					{
						if (Main.BlackFadeIn < 0)
						{
							Main.BlackFadeIn = 0;
						}
						int num104 = Main.BlackFadeIn;
						if (num104 > 255)
						{
							num104 = 255;
						}
						Main.BlackFadeIn -= 25;
						Main.spriteBatch.Draw(Main.loTexture, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), new Color(0, 0, 0, num104));
					}
					this.DrawFPS();
					if (!Main.mapFullscreen)
					{
						if (Main.ignoreErrors)
						{
							try
							{
								this.DrawInterface();
								goto IL_7681;
							}
							catch
							{
								goto IL_7681;
							}
						}
						this.DrawInterface();
					}
				}
				else
				{
					Main.maxQ = true;
				}
				IL_7681:
				Main.spriteBatch.End();
				if (Main.mouseLeft)
				{
					Main.mouseLeftRelease = false;
				}
				else
				{
					Main.mouseLeftRelease = true;
				}
				if (Main.mouseRight)
				{
					Main.mouseRightRelease = false;
				}
				else
				{
					Main.mouseRightRelease = true;
				}
				if (Main.mouseState.RightButton != Microsoft.Xna.Framework.Input.ButtonState.Pressed)
				{
					Main.stackSplit = 0;
				}
				if (Main.stackSplit > 0)
				{
					Main.stackSplit--;
				}
				if (Main.renderCount < 10)
				{
					Main.drawTimer[Main.renderCount] = (float)stopwatch.Elapsed.TotalMilliseconds;
					if (Main.drawTimerMaxDelay[Main.renderCount] > 0f)
					{
						Main.drawTimerMaxDelay[Main.renderCount] -= 1f;
					}
					else
					{
						Main.drawTimerMax[Main.renderCount] = 0f;
					}
					if (Main.drawTimer[Main.renderCount] > Main.drawTimerMax[Main.renderCount])
					{
						Main.drawTimerMax[Main.renderCount] = Main.drawTimer[Main.renderCount];
						Main.drawTimerMaxDelay[Main.renderCount] = 100f;
					}
				}
				return;
			}
			if (Main.player[Main.myPlayer].talkNPC >= 0 || Main.player[Main.myPlayer].sign >= 0 || Main.playerInventory)
			{
				Main.player[Main.myPlayer].toggleInv();
			}
			this.DrawMap();
			this.DrawFPS();
			this.DrawPlayerChat();
			Main.spriteBatch.End();
			if (Main.mouseLeft)
			{
				Main.mouseLeftRelease = false;
				return;
			}
			Main.mouseLeftRelease = true;
		}
		private static void UpdateInvasion()
		{
			if (Main.invasionType > 0)
			{
				if (Main.invasionSize <= 0)
				{
					if (Main.invasionType == 1)
					{
						NPC.downedGoblins = true;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
						}
					}
					else
					{
						if (Main.invasionType == 2)
						{
							NPC.downedFrost = true;
						}
						else
						{
							if (Main.invasionType == 3)
							{
								NPC.downedPirates = true;
							}
						}
					}
					Main.InvasionWarning();
					Main.invasionType = 0;
					Main.invasionDelay = 7;
				}
				if (Main.invasionX == (double)Main.spawnTileX)
				{
					return;
				}
				float num = (float)Main.dayRate;
				if (Main.invasionX > (double)Main.spawnTileX)
				{
					Main.invasionX -= (double)num;
					if (Main.invasionX <= (double)Main.spawnTileX)
					{
						Main.invasionX = (double)Main.spawnTileX;
						Main.InvasionWarning();
					}
					else
					{
						Main.invasionWarn--;
					}
				}
				else
				{
					if (Main.invasionX < (double)Main.spawnTileX)
					{
						Main.invasionX += (double)num;
						if (Main.invasionX >= (double)Main.spawnTileX)
						{
							Main.invasionX = (double)Main.spawnTileX;
							Main.InvasionWarning();
						}
						else
						{
							Main.invasionWarn--;
						}
					}
				}
				if (Main.invasionWarn <= 0)
				{
					Main.invasionWarn = 3600;
					Main.InvasionWarning();
				}
			}
		}
		private static void InvasionWarning()
		{
			string text;
			if (Main.invasionSize <= 0)
			{
				if (Main.invasionType == 2)
				{
					text = Lang.misc[4];
				}
				else
				{
					if (Main.invasionType == 3)
					{
						text = Lang.misc[24];
					}
					else
					{
						text = Lang.misc[0];
					}
				}
			}
			else
			{
				if (Main.invasionX < (double)Main.spawnTileX)
				{
					if (Main.invasionType == 2)
					{
						text = Lang.misc[5];
					}
					else
					{
						if (Main.invasionType == 3)
						{
							text = Lang.misc[25];
						}
						else
						{
							text = Lang.misc[1];
						}
					}
				}
				else
				{
					if (Main.invasionX > (double)Main.spawnTileX)
					{
						if (Main.invasionType == 2)
						{
							text = Lang.misc[6];
						}
						else
						{
							if (Main.invasionType == 3)
							{
								text = Lang.misc[26];
							}
							else
							{
								text = Lang.misc[2];
							}
						}
					}
					else
					{
						if (Main.invasionType == 2)
						{
							text = Lang.misc[7];
						}
						else
						{
							if (Main.invasionType == 3)
							{
								text = Lang.misc[27];
							}
							else
							{
								text = Lang.misc[3];
							}
						}
					}
				}
			}
			if (Main.netMode == 0)
			{
				Main.NewText(text, 175, 75, 255, false);
				return;
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0);
			}
		}
		public static void StartInvasion(int type = 1)
		{
			if (Main.invasionType == 0 && Main.invasionDelay == 0)
			{
				int num = 0;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].statLifeMax >= 200)
					{
						num++;
					}
				}
				if (num > 0)
				{
					Main.invasionType = type;
					Main.invasionSize = 80 + 40 * num;
					if (type == 3)
					{
						Main.invasionSize += 40 + 20 * num;
					}
					Main.invasionWarn = 0;
					if (Main.rand.Next(2) == 0)
					{
						Main.invasionX = 0.0;
						return;
					}
					Main.invasionX = (double)Main.maxTilesX;
				}
			}
		}
		private static void UpdateClient()
		{
			if (Main.myPlayer == 255)
			{
				Netplay.disconnect = true;
			}
			Main.netPlayCounter++;
			if (Main.netPlayCounter > 3600)
			{
				Main.netPlayCounter = 0;
			}
			if (Math.IEEERemainder((double)Main.netPlayCounter, 420.0) == 0.0)
			{
				NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
			}
			if (Math.IEEERemainder((double)Main.netPlayCounter, 900.0) == 0.0)
			{
				NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
				NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0);
			}
			if (Netplay.clientSock.active)
			{
				Netplay.clientSock.timeOut++;
				if (!Main.stopTimeOuts && Netplay.clientSock.timeOut > 60 * Main.timeOut)
				{
					Main.statusText = Lang.inter[43];
					Netplay.disconnect = true;
				}
			}
			for (int i = 0; i < 400; i++)
			{
				if (Main.item[i].active && Main.item[i].owner == Main.myPlayer)
				{
					Main.item[i].FindOwner(i);
				}
			}
		}
		private static void UpdateServer()
		{
			Main.netPlayCounter++;
			if (Main.netPlayCounter > 3600)
			{
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
				NetMessage.syncPlayers();
				Main.netPlayCounter = 0;
			}
			for (int i = 0; i < Main.maxNetPlayers; i++)
			{
				if (Main.player[i].active && Netplay.serverSock[i].active)
				{
					Netplay.serverSock[i].SpamUpdate();
				}
			}
			if (Math.IEEERemainder((double)Main.netPlayCounter, 900.0) == 0.0)
			{
				bool flag = true;
				int num = Main.lastItemUpdate;
				int num2 = 0;
				while (flag)
				{
					num++;
					if (num >= 400)
					{
						num = 0;
					}
					num2++;
					if (!Main.item[num].active || Main.item[num].owner == 255)
					{
						NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0);
					}
					if (num2 >= Main.maxItemUpdates || num == Main.lastItemUpdate)
					{
						flag = false;
					}
				}
				Main.lastItemUpdate = num;
			}
			for (int j = 0; j < 400; j++)
			{
				if (Main.item[j].active && (Main.item[j].owner == 255 || !Main.player[Main.item[j].owner].active))
				{
					Main.item[j].FindOwner(j);
				}
			}
			for (int k = 0; k < 255; k++)
			{
				if (Netplay.serverSock[k].active)
				{
					Netplay.serverSock[k].timeOut++;
					if (!Main.stopTimeOuts && Netplay.serverSock[k].timeOut > 60 * Main.timeOut)
					{
						Netplay.serverSock[k].kill = true;
					}
				}
				if (Main.player[k].active)
				{
					ServerSock.CheckSection(k, Main.player[k].position);
				}
			}
		}
		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false)
		{
			int num = 80;
			if (!force && newText.Length > num)
			{
				string text = newText;
				while (text.Length > num)
				{
					int num2 = num;
					int num3 = num2;
					while (text.Substring(num3, 1) != " ")
					{
						num3--;
						if (num3 < 1)
						{
							break;
						}
					}
					if (num3 == 0)
					{
						while (text.Substring(num2, 1) != " ")
						{
							num2++;
							if (num2 >= text.Length - 1)
							{
								break;
							}
						}
					}
					else
					{
						num2 = num3;
					}
					if (num2 >= text.Length - 1)
					{
						num2 = text.Length;
					}
					string newText2 = text.Substring(0, num2);
					Main.NewText(newText2, R, G, B, true);
					text = text.Substring(num2);
					if (text.Length > 0)
					{
						while (text.Substring(0, 1) == " ")
						{
							text = text.Substring(1);
						}
					}
				}
				if (text.Length > 0)
				{
					Main.NewText(text, R, G, B, true);
				}
				return;
			}
			for (int i = Main.numChatLines - 1; i > 0; i--)
			{
				Main.chatLine[i].text = Main.chatLine[i - 1].text;
				Main.chatLine[i].showTime = Main.chatLine[i - 1].showTime;
				Main.chatLine[i].color = Main.chatLine[i - 1].color;
			}
			if (R == 0 && G == 0 && B == 0)
			{
				Main.chatLine[0].color = Color.White;
			}
			else
			{
				Main.chatLine[0].color = new Color((int)R, (int)G, (int)B);
			}
			Main.chatLine[0].text = newText;
			Main.chatLine[0].showTime = Main.chatLength;
			Main.PlaySound(12, -1, -1, 1);
		}
		private static void StopRain()
		{
			Main.rainTime = 0;
			Main.raining = false;
			Main.maxRaining = 0f;
		}
		private static void StartRain()
		{
			int num = 86400;
			int num2 = num / 24;
			Main.rainTime = Main.rand.Next(num2 * 8, num);
			if (Main.rand.Next(3) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2);
			}
			if (Main.rand.Next(4) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 2);
			}
			if (Main.rand.Next(5) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 2);
			}
			if (Main.rand.Next(6) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 3);
			}
			if (Main.rand.Next(7) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 4);
			}
			if (Main.rand.Next(8) == 0)
			{
				Main.rainTime += Main.rand.Next(0, num2 * 5);
			}
			float num3 = 1f;
			if (Main.rand.Next(2) == 0)
			{
				num3 += 0.05f;
			}
			if (Main.rand.Next(3) == 0)
			{
				num3 += 0.1f;
			}
			if (Main.rand.Next(4) == 0)
			{
				num3 += 0.15f;
			}
			if (Main.rand.Next(5) == 0)
			{
				num3 += 0.2f;
			}
			Main.rainTime = (int)((float)Main.rainTime * num3);
			Main.ChangeRain();
			Main.raining = true;
		}
		private static void ChangeRain()
		{
			if (Main.cloudBGActive >= 1f || (double)Main.numClouds > 150.0)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.maxRaining = (float)Main.rand.Next(20, 90) * 0.01f;
					return;
				}
				Main.maxRaining = (float)Main.rand.Next(40, 90) * 0.01f;
				return;
			}
			else
			{
				if ((double)Main.numClouds > 100.0)
				{
					if (Main.rand.Next(3) == 0)
					{
						Main.maxRaining = (float)Main.rand.Next(10, 70) * 0.01f;
						return;
					}
					Main.maxRaining = (float)Main.rand.Next(20, 60) * 0.01f;
					return;
				}
				else
				{
					if (Main.rand.Next(3) == 0)
					{
						Main.maxRaining = (float)Main.rand.Next(5, 40) * 0.01f;
						return;
					}
					Main.maxRaining = (float)Main.rand.Next(5, 30) * 0.01f;
					return;
				}
			}
		}
		private static void UpdateTime()
		{
			if (Main.pumpkinMoon)
			{
				Main.bloodMoon = false;
				Main.snowMoon = false;
			}
			if (Main.snowMoon)
			{
				Main.bloodMoon = false;
			}
			if ((Main.netMode != 1 && !Main.gameMenu) || Main.netMode == 2)
			{
				if (Main.raining)
				{
					Main.rainTime -= Main.dayRate;
					int num = 86400;
					num /= Main.dayRate;
					int num2 = num / 24;
					if (Main.rainTime <= 0)
					{
						Main.StopRain();
					}
					else
					{
						if (Main.rand.Next(num2 * 2) == 0)
						{
							Main.ChangeRain();
						}
					}
				}
				else
				{
					int num3 = 86400;
					num3 /= Main.dayRate;
					if (Main.rand.Next((int)((double)num3 * 5.5)) == 0)
					{
						Main.StartRain();
					}
					else
					{
						if (Main.cloudBGActive >= 1f && Main.rand.Next(num3 * 4) == 0)
						{
							Main.StartRain();
						}
					}
				}
			}
			if (Main.maxRaining != Main.oldMaxRaining)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
				}
				Main.oldMaxRaining = Main.maxRaining;
			}
			Main.time += (double)Main.dayRate;
			if (Main.netMode != 1)
			{
				if (NPC.travelNPC)
				{
					if (!Main.dayTime || Main.time > 48600.0)
					{
						WorldGen.UnspawnTravelNPC();
					}
				}
				else
				{
					if (Main.dayTime && Main.time < 27000.0)
					{
						int num4 = (int)(27000.0 / (double)Main.dayRate);
						num4 *= 4;
						if (Main.rand.Next(num4) == 0)
						{
							int num5 = 0;
							for (int i = 0; i < 200; i++)
							{
								if (Main.npc[i].active && Main.npc[i].townNPC && Main.npc[i].type != 37)
								{
									num5++;
								}
							}
							if (num5 >= 2)
							{
								WorldGen.SpawnTravelNPC();
							}
						}
					}
				}
				NPC.travelNPC = false;
			}
			if (!Main.dayTime)
			{
				Main.eclipse = false;
				if (WorldGen.spawnEye && Main.netMode != 1 && Main.time > 4860.0)
				{
					for (int j = 0; j < 255; j++)
					{
						if (Main.player[j].active && !Main.player[j].dead && (double)Main.player[j].position.Y < Main.worldSurface * 16.0)
						{
							NPC.SpawnOnPlayer(j, 4);
							WorldGen.spawnEye = false;
							break;
						}
					}
				}
				if (WorldGen.spawnHardBoss > 0 && Main.netMode != 1 && Main.time > 4860.0)
				{
					bool flag = false;
					for (int k = 0; k < 200; k++)
					{
						if (Main.npc[k].active && Main.npc[k].boss)
						{
							flag = true;
						}
					}
					if (!flag)
					{
						int l = 0;
						while (l < 255)
						{
							if (Main.player[l].active && !Main.player[l].dead && (double)Main.player[l].position.Y < Main.worldSurface * 16.0)
							{
								if (WorldGen.spawnHardBoss == 1)
								{
									NPC.SpawnOnPlayer(l, 134);
									break;
								}
								if (WorldGen.spawnHardBoss == 2)
								{
									NPC.SpawnOnPlayer(l, 125);
									NPC.SpawnOnPlayer(l, 126);
									break;
								}
								if (WorldGen.spawnHardBoss == 3)
								{
									NPC.SpawnOnPlayer(l, 127);
									break;
								}
								break;
							}
							else
							{
								l++;
							}
						}
					}
					WorldGen.spawnHardBoss = 0;
				}
				if (Main.time > 32400.0)
				{
					Main.checkXMas();
					Main.checkHalloween();
					if (Main.invasionDelay > 0)
					{
						Main.invasionDelay--;
					}
					WorldGen.spawnNPC = 0;
					Main.checkForSpawns = 0;
					Main.time = 0.0;
					Main.bloodMoon = false;
					Main.stopMoonEvent();
					Main.dayTime = true;
					Main.moonPhase++;
					if (Main.moonPhase >= 8)
					{
						Main.moonPhase = 0;
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
						WorldGen.saveAndPlay();
					}
					if (Main.netMode != 1 && WorldGen.shadowOrbSmashed)
					{
						if (!NPC.downedGoblins)
						{
							if (Main.rand.Next(3) == 0)
							{
								Main.StartInvasion(1);
							}
						}
						else
						{
							if ((Main.hardMode && Main.rand.Next(60) == 0) || (!Main.hardMode && Main.rand.Next(30) == 0))
							{
								Main.StartInvasion(1);
							}
						}
						if (Main.invasionType == 0 && Main.hardMode && ((NPC.downedPirates && Main.rand.Next(50) == 0) || (!NPC.downedPirates && Main.rand.Next(30) == 0)))
						{
							Main.StartInvasion(3);
						}
					}
					if (Main.hardMode && NPC.downedMechBossAny && Main.rand.Next(25) == 0 && Main.netMode != 1)
					{
						Main.eclipse = true;
						if (Main.eclipse)
						{
							if (Main.netMode == 0)
							{
								Main.NewText(Lang.misc[20], 50, 255, 130, false);
							}
							else
							{
								if (Main.netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[20], 255, 50f, 255f, 130f, 0);
								}
							}
						}
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
						}
					}
				}
				if (Main.time > 16200.0 && WorldGen.spawnMeteor)
				{
					WorldGen.spawnMeteor = false;
					WorldGen.dropMeteor();
					return;
				}
			}
			else
			{
				Main.bloodMoon = false;
				Main.stopMoonEvent();
				if (Main.time > 54000.0)
				{
					NPC.setFireFlyChance();
					WorldGen.spawnNPC = 0;
					Main.checkForSpawns = 0;
					if (Main.rand.Next(50) == 0 && Main.netMode != 1 && WorldGen.shadowOrbSmashed)
					{
						WorldGen.spawnMeteor = true;
					}
					Main.eclipse = false;
					if (!NPC.downedBoss1 && Main.netMode != 1)
					{
						bool flag2 = false;
						for (int m = 0; m < 255; m++)
						{
							if (Main.player[m].active && Main.player[m].statLifeMax >= 200 && Main.player[m].statDefense > 10)
							{
								flag2 = true;
								break;
							}
						}
						if (flag2 && Main.rand.Next(3) == 0)
						{
							int num6 = 0;
							for (int n = 0; n < 200; n++)
							{
								if (Main.npc[n].active && Main.npc[n].townNPC)
								{
									num6++;
								}
							}
							if (num6 >= 4)
							{
								WorldGen.spawnEye = true;
								if (Main.netMode == 0)
								{
									Main.NewText(Lang.misc[9], 50, 255, 130, false);
								}
								else
								{
									if (Main.netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, Lang.misc[9], 255, 50f, 255f, 130f, 0);
									}
								}
							}
						}
					}
					if (Main.netMode != 1 && !Main.pumpkinMoon && !Main.snowMoon && WorldGen.altarCount > 0 && Main.hardMode && !WorldGen.spawnEye && Main.rand.Next(10) == 0)
					{
						bool flag3 = false;
						for (int num7 = 0; num7 < 200; num7++)
						{
							if (Main.npc[num7].active && Main.npc[num7].boss)
							{
								flag3 = true;
							}
						}
						if (!flag3 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
						{
							int num8 = 0;
							while (num8 < 1000)
							{
								int num9 = Main.rand.Next(3) + 1;
								if (num9 == 1 && !NPC.downedMechBoss1)
								{
									WorldGen.spawnHardBoss = num9;
									if (Main.netMode == 0)
									{
										Main.NewText(Lang.misc[28], 50, 255, 130, false);
										break;
									}
									if (Main.netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, Lang.misc[28], 255, 50f, 255f, 130f, 0);
										break;
									}
									break;
								}
								else
								{
									if (num9 == 2 && !NPC.downedMechBoss2)
									{
										WorldGen.spawnHardBoss = num9;
										if (Main.netMode == 0)
										{
											Main.NewText(Lang.misc[29], 50, 255, 130, false);
											break;
										}
										if (Main.netMode == 2)
										{
											NetMessage.SendData(25, -1, -1, Lang.misc[29], 255, 50f, 255f, 130f, 0);
											break;
										}
										break;
									}
									else
									{
										if (num9 == 3 && !NPC.downedMechBoss3)
										{
											WorldGen.spawnHardBoss = num9;
											if (Main.netMode == 0)
											{
												Main.NewText(Lang.misc[30], 50, 255, 130, false);
												break;
											}
											if (Main.netMode == 2)
											{
												NetMessage.SendData(25, -1, -1, Lang.misc[30], 255, 50f, 255f, 130f, 0);
												break;
											}
											break;
										}
										else
										{
											num8++;
										}
									}
								}
							}
						}
					}
					if (!WorldGen.spawnEye && Main.moonPhase != 4 && Main.rand.Next(9) == 0 && Main.netMode != 1)
					{
						for (int num10 = 0; num10 < 255; num10++)
						{
							if (Main.player[num10].active && Main.player[num10].statLifeMax > 120)
							{
								Main.bloodMoon = true;
								break;
							}
						}
						if (Main.bloodMoon)
						{
							if (Main.netMode == 0)
							{
								Main.NewText(Lang.misc[8], 50, 255, 130, false);
							}
							else
							{
								if (Main.netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[8], 255, 50f, 255f, 130f, 0);
								}
							}
						}
					}
					Main.time = 0.0;
					Main.dayTime = false;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0);
					}
				}
				if (Main.netMode != 1 && Main.worldRate > 0)
				{
					Main.checkForSpawns++;
					if (Main.checkForSpawns >= 7200 / Main.worldRate)
					{
						int num11 = 0;
						for (int num12 = 0; num12 < 255; num12++)
						{
							if (Main.player[num12].active)
							{
								num11++;
							}
						}
						for (int num13 = 0; num13 < 369; num13++)
						{
							Main.nextNPC[num13] = false;
						}
						Main.checkForSpawns = 0;
						WorldGen.spawnNPC = 0;
						int num14 = 0;
						int num15 = 0;
						int num16 = 0;
						int num17 = 0;
						int num18 = 0;
						int num19 = 0;
						int num20 = 0;
						int num21 = 0;
						int num22 = 0;
						int num23 = 0;
						int num24 = 0;
						int num25 = 0;
						int num26 = 0;
						int num27 = 0;
						int num28 = 0;
						int num29 = 0;
						int num30 = 0;
						int num31 = 0;
						int num32 = 0;
						int num33 = 0;
						int num34 = 0;
						int num35 = 0;
						for (int num36 = 0; num36 < 200; num36++)
						{
							if (Main.npc[num36].active && Main.npc[num36].townNPC)
							{
								if (Main.npc[num36].type != 368 && Main.npc[num36].type != 37 && !Main.npc[num36].homeless)
								{
									WorldGen.QuickFindHome(num36);
								}
								if (Main.npc[num36].type == 37)
								{
									num19++;
								}
								if (Main.npc[num36].type == 17)
								{
									num14++;
								}
								if (Main.npc[num36].type == 18)
								{
									num15++;
								}
								if (Main.npc[num36].type == 19)
								{
									num17++;
								}
								if (Main.npc[num36].type == 20)
								{
									num16++;
								}
								if (Main.npc[num36].type == 22)
								{
									num18++;
								}
								if (Main.npc[num36].type == 38)
								{
									num20++;
								}
								if (Main.npc[num36].type == 54)
								{
									num21++;
								}
								if (Main.npc[num36].type == 107)
								{
									num23++;
								}
								if (Main.npc[num36].type == 108)
								{
									num22++;
								}
								if (Main.npc[num36].type == 124)
								{
									num24++;
								}
								if (Main.npc[num36].type == 142)
								{
									num25++;
								}
								if (Main.npc[num36].type == 160)
								{
									num26++;
								}
								if (Main.npc[num36].type == 178)
								{
									num27++;
								}
								if (Main.npc[num36].type == 207)
								{
									num28++;
								}
								if (Main.npc[num36].type == 208)
								{
									num29++;
								}
								if (Main.npc[num36].type == 209)
								{
									num30++;
								}
								if (Main.npc[num36].type == 227)
								{
									num31++;
								}
								if (Main.npc[num36].type == 228)
								{
									num32++;
								}
								if (Main.npc[num36].type == 229)
								{
									num33++;
								}
								if (Main.npc[num36].type == 353)
								{
									num34++;
								}
								num35++;
							}
						}
						if (WorldGen.spawnNPC == 0)
						{
							int num37 = 0;
							bool flag4 = false;
							int num38 = 0;
							bool flag5 = false;
							bool flag6 = false;
							bool flag7 = false;
							for (int num39 = 0; num39 < 255; num39++)
							{
								if (Main.player[num39].active)
								{
									for (int num40 = 0; num40 < 58; num40++)
									{
										if (Main.player[num39].inventory[num40] != null & Main.player[num39].inventory[num40].stack > 0)
										{
											if (num37 < 2000000000)
											{
												if (Main.player[num39].inventory[num40].type == 71)
												{
													num37 += Main.player[num39].inventory[num40].stack;
												}
												if (Main.player[num39].inventory[num40].type == 72)
												{
													num37 += Main.player[num39].inventory[num40].stack * 100;
												}
												if (Main.player[num39].inventory[num40].type == 73)
												{
													num37 += Main.player[num39].inventory[num40].stack * 10000;
												}
												if (Main.player[num39].inventory[num40].type == 74)
												{
													num37 += Main.player[num39].inventory[num40].stack * 1000000;
												}
											}
											if (Main.player[num39].inventory[num40].ammo == 14 || Main.player[num39].inventory[num40].useAmmo == 14)
											{
												flag5 = true;
											}
											if (Main.player[num39].inventory[num40].type == 166 || Main.player[num39].inventory[num40].type == 167 || Main.player[num39].inventory[num40].type == 168 || Main.player[num39].inventory[num40].type == 235)
											{
												flag6 = true;
											}
											if (Main.player[num39].inventory[num40].dye > 0 || (Main.player[num39].inventory[num40].type >= 1107 && Main.player[num39].inventory[num40].type <= 1120))
											{
												flag7 = true;
											}
										}
									}
									int num41 = Main.player[num39].statLifeMax / 20;
									if (num41 > 5)
									{
										flag4 = true;
									}
									num38 += num41;
									if (!flag7)
									{
										for (int num42 = 0; num42 < 3; num42++)
										{
											if (Main.player[num39].dye[num42] != null && Main.player[num39].dye[num42].stack > 0 && Main.player[num39].dye[num42].dye > 0)
											{
												flag7 = true;
											}
										}
									}
								}
							}
							if (!NPC.downedBoss3 && num19 == 0)
							{
								int num43 = NPC.NewNPC(Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0);
								Main.npc[num43].homeless = false;
								Main.npc[num43].homeTileX = Main.dungeonX;
								Main.npc[num43].homeTileY = Main.dungeonY;
							}
							bool flag8 = false;
							if (Main.rand.Next(50) == 0)
							{
								flag8 = true;
							}
							if (num18 < 1)
							{
								Main.nextNPC[22] = true;
							}
							if ((double)num37 > 5000.0 && num14 < 1)
							{
								Main.nextNPC[17] = true;
							}
							if (flag4 && num15 < 1 && num14 > 0)
							{
								Main.nextNPC[18] = true;
							}
							if (flag5 && num17 < 1)
							{
								Main.nextNPC[19] = true;
							}
							if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num16 < 1)
							{
								Main.nextNPC[20] = true;
							}
							if (flag6 && num14 > 0 && num20 < 1)
							{
								Main.nextNPC[38] = true;
							}
							if (NPC.savedStylist && num34 < 1)
							{
								Main.nextNPC[353] = true;
							}
							if (NPC.downedBoss3 && num21 < 1)
							{
								Main.nextNPC[54] = true;
							}
							if (NPC.savedGoblin && num23 < 1)
							{
								Main.nextNPC[107] = true;
							}
							if (NPC.savedWizard && num22 < 1)
							{
								Main.nextNPC[108] = true;
							}
							if (NPC.savedMech && num24 < 1)
							{
								Main.nextNPC[124] = true;
							}
							if (NPC.downedFrost && num25 < 1 && Main.xMas)
							{
								Main.nextNPC[142] = true;
							}
							if (NPC.downedMechBossAny && num27 < 1)
							{
								Main.nextNPC[178] = true;
							}
							if (flag7 && num28 < 1)
							{
								Main.nextNPC[207] = true;
							}
							if (NPC.downedQueenBee && num32 < 1)
							{
								Main.nextNPC[228] = true;
							}
							if (NPC.downedPirates && num33 < 1)
							{
								Main.nextNPC[229] = true;
							}
							if (num26 < 1 && Main.hardMode)
							{
								Main.nextNPC[160] = true;
							}
							if (Main.hardMode && NPC.downedPlantBoss && num30 < 1)
							{
								Main.nextNPC[209] = true;
							}
							if (num35 >= 4 && num31 < 1)
							{
								Main.nextNPC[227] = true;
							}
							if (flag8 && num29 < 1 && num35 >= 8)
							{
								Main.nextNPC[208] = true;
							}
							if (WorldGen.spawnNPC == 0 && num18 < 1)
							{
								WorldGen.spawnNPC = 22;
							}
							if (WorldGen.spawnNPC == 0 && (double)num37 > 5000.0 && num14 < 1)
							{
								WorldGen.spawnNPC = 17;
							}
							if (WorldGen.spawnNPC == 0 && flag4 && num15 < 1 && num14 > 0)
							{
								WorldGen.spawnNPC = 18;
							}
							if (WorldGen.spawnNPC == 0 && flag5 && num17 < 1)
							{
								WorldGen.spawnNPC = 19;
							}
							if (WorldGen.spawnNPC == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num16 < 1)
							{
								WorldGen.spawnNPC = 20;
							}
							if (WorldGen.spawnNPC == 0 && flag6 && num14 > 0 && num20 < 1)
							{
								WorldGen.spawnNPC = 38;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedStylist && num34 < 1)
							{
								WorldGen.spawnNPC = 353;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedBoss3 && num21 < 1)
							{
								WorldGen.spawnNPC = 54;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedGoblin && num23 < 1)
							{
								WorldGen.spawnNPC = 107;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedWizard && num22 < 1)
							{
								WorldGen.spawnNPC = 108;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedMech && num24 < 1)
							{
								WorldGen.spawnNPC = 124;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedFrost && num25 < 1 && Main.xMas)
							{
								WorldGen.spawnNPC = 142;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedMechBossAny && num27 < 1)
							{
								WorldGen.spawnNPC = 178;
							}
							if (WorldGen.spawnNPC == 0 && flag7 && num28 < 1)
							{
								WorldGen.spawnNPC = 207;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedQueenBee && num32 < 1)
							{
								WorldGen.spawnNPC = 228;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedPirates && num33 < 1)
							{
								WorldGen.spawnNPC = 229;
							}
							if (WorldGen.spawnNPC == 0 && Main.hardMode && num26 < 1)
							{
								WorldGen.spawnNPC = 160;
							}
							if (WorldGen.spawnNPC == 0 && Main.hardMode && NPC.downedPlantBoss && num30 < 1)
							{
								WorldGen.spawnNPC = 209;
							}
							if (WorldGen.spawnNPC == 0 && num35 >= 4 && num31 < 1)
							{
								WorldGen.spawnNPC = 227;
							}
							if (WorldGen.spawnNPC == 0 && flag8 && num35 >= 8 && num29 < 1)
							{
								WorldGen.spawnNPC = 208;
							}
						}
					}
				}
			}
		}
		public static int DamageVar(float dmg)
		{
			float num = dmg * (1f + (float)Main.rand.Next(-15, 16) * 0.01f);
			return (int)Math.Round((double)num);
		}
		public static double CalculateDamage(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}
		public static void PlaySound(int type, int x = -1, int y = -1, int Style = 1)
		{
			int num = Style;
			try
			{
				if (!Main.dedServ)
				{
					if (Main.soundVolume != 0f || (type >= 30 && type <= 35))
					{
						bool flag = false;
						float num2 = 1f;
						float num3 = 0f;
						if (x == -1 || y == -1)
						{
							flag = true;
						}
						else
						{
							if (WorldGen.gen)
							{
								return;
							}
							if (Main.netMode == 2)
							{
								return;
							}
							Rectangle value = new Rectangle((int)(Main.screenPosition.X - (float)(Main.screenWidth * 2)), (int)(Main.screenPosition.Y - (float)(Main.screenHeight * 2)), Main.screenWidth * 5, Main.screenHeight * 5);
							Rectangle rectangle = new Rectangle(x, y, 1, 1);
							Vector2 vector = new Vector2(Main.screenPosition.X + (float)Main.screenWidth * 0.5f, Main.screenPosition.Y + (float)Main.screenHeight * 0.5f);
							if (rectangle.Intersects(value))
							{
								flag = true;
							}
							if (flag)
							{
								num3 = ((float)x - vector.X) / ((float)Main.screenWidth * 0.5f);
								float num4 = Math.Abs((float)x - vector.X);
								float num5 = Math.Abs((float)y - vector.Y);
								float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
								num2 = 1f - num6 / ((float)Main.screenWidth * 1.5f);
							}
						}
						if (num3 < -1f)
						{
							num3 = -1f;
						}
						if (num3 > 1f)
						{
							num3 = 1f;
						}
						if (num2 > 1f)
						{
							num2 = 1f;
						}
						if (num2 > 0f || (type >= 34 && type <= 35))
						{
							if (flag)
							{
								if (type >= 30 && type <= 35)
								{
									num2 *= Main.ambientVolume * (float)(Main.gameInactive ? 0 : 1);
								}
								else
								{
									num2 *= Main.soundVolume;
								}
								if (num2 > 1f)
								{
									num2 = 1f;
								}
								if (num2 > 0f || (type >= 30 && type <= 35))
								{
									if (type == 0)
									{
										int num7 = Main.rand.Next(3);
										Main.soundInstanceDig[num7].Stop();
										Main.soundInstanceDig[num7] = Main.soundDig[num7].CreateInstance();
										Main.soundInstanceDig[num7].Volume = num2;
										Main.soundInstanceDig[num7].Pan = num3;
										Main.soundInstanceDig[num7].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										Main.soundInstanceDig[num7].Play();
									}
									else
									{
										if (type == 1)
										{
											int num8 = Main.rand.Next(3);
											Main.soundInstancePlayerHit[num8].Stop();
											Main.soundInstancePlayerHit[num8] = Main.soundPlayerHit[num8].CreateInstance();
											Main.soundInstancePlayerHit[num8].Volume = num2;
											Main.soundInstancePlayerHit[num8].Pan = num3;
											Main.soundInstancePlayerHit[num8].Play();
										}
										else
										{
											if (type == 2)
											{
												if (num == 1)
												{
													int num9 = Main.rand.Next(3);
													if (num9 == 1)
													{
														num = 18;
													}
													if (num9 == 2)
													{
														num = 19;
													}
												}
												if (num != 9 && num != 10 && num != 24 && num != 26 && num != 34)
												{
													Main.soundInstanceItem[num].Stop();
												}
												Main.soundInstanceItem[num] = Main.soundItem[num].CreateInstance();
												Main.soundInstanceItem[num].Volume = num2;
												Main.soundInstanceItem[num].Pan = num3;
												if (num == 47)
												{
													Main.soundInstanceItem[num].Pitch = (float)Main.rand.Next(-5, 6) * 0.19f;
												}
												else
												{
													Main.soundInstanceItem[num].Pitch = (float)Main.rand.Next(-6, 7) * 0.01f;
												}
												if (num == 26 || num == 35)
												{
													Main.soundInstanceItem[num].Volume = num2 * 0.75f;
													Main.soundInstanceItem[num].Pitch = Main.harpNote;
												}
												Main.soundInstanceItem[num].Play();
											}
											else
											{
												if (type == 3)
												{
													Main.soundInstanceNPCHit[num].Stop();
													Main.soundInstanceNPCHit[num] = Main.soundNPCHit[num].CreateInstance();
													Main.soundInstanceNPCHit[num].Volume = num2;
													Main.soundInstanceNPCHit[num].Pan = num3;
													Main.soundInstanceNPCHit[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
													Main.soundInstanceNPCHit[num].Play();
												}
												else
												{
													if (type == 4)
													{
														if (num != 10 || Main.soundInstanceNPCKilled[num].State != SoundState.Playing)
														{
															Main.soundInstanceNPCKilled[num] = Main.soundNPCKilled[num].CreateInstance();
															Main.soundInstanceNPCKilled[num].Volume = num2;
															Main.soundInstanceNPCKilled[num].Pan = num3;
															Main.soundInstanceNPCKilled[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
															Main.soundInstanceNPCKilled[num].Play();
														}
													}
													else
													{
														if (type == 5)
														{
															Main.soundInstancePlayerKilled.Stop();
															Main.soundInstancePlayerKilled = Main.soundPlayerKilled.CreateInstance();
															Main.soundInstancePlayerKilled.Volume = num2;
															Main.soundInstancePlayerKilled.Pan = num3;
															Main.soundInstancePlayerKilled.Play();
														}
														else
														{
															if (type == 6)
															{
																Main.soundInstanceGrass.Stop();
																Main.soundInstanceGrass = Main.soundGrass.CreateInstance();
																Main.soundInstanceGrass.Volume = num2;
																Main.soundInstanceGrass.Pan = num3;
																Main.soundInstanceGrass.Pitch = (float)Main.rand.Next(-30, 31) * 0.01f;
																Main.soundInstanceGrass.Play();
															}
															else
															{
																if (type == 7)
																{
																	Main.soundInstanceGrab.Stop();
																	Main.soundInstanceGrab = Main.soundGrab.CreateInstance();
																	Main.soundInstanceGrab.Volume = num2;
																	Main.soundInstanceGrab.Pan = num3;
																	Main.soundInstanceGrab.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																	Main.soundInstanceGrab.Play();
																}
																else
																{
																	if (type == 8)
																	{
																		Main.soundInstanceDoorOpen.Stop();
																		Main.soundInstanceDoorOpen = Main.soundDoorOpen.CreateInstance();
																		Main.soundInstanceDoorOpen.Volume = num2;
																		Main.soundInstanceDoorOpen.Pan = num3;
																		Main.soundInstanceDoorOpen.Pitch = (float)Main.rand.Next(-20, 21) * 0.01f;
																		Main.soundInstanceDoorOpen.Play();
																	}
																	else
																	{
																		if (type == 9)
																		{
																			Main.soundInstanceDoorClosed.Stop();
																			Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();
																			Main.soundInstanceDoorClosed.Volume = num2;
																			Main.soundInstanceDoorClosed.Pan = num3;
																			Main.soundInstanceDoorOpen.Pitch = (float)Main.rand.Next(-20, 21) * 0.01f;
																			Main.soundInstanceDoorClosed.Play();
																		}
																		else
																		{
																			if (type == 10)
																			{
																				Main.soundInstanceMenuOpen.Stop();
																				Main.soundInstanceMenuOpen = Main.soundMenuOpen.CreateInstance();
																				Main.soundInstanceMenuOpen.Volume = num2;
																				Main.soundInstanceMenuOpen.Pan = num3;
																				Main.soundInstanceMenuOpen.Play();
																			}
																			else
																			{
																				if (type == 11)
																				{
																					Main.soundInstanceMenuClose.Stop();
																					Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();
																					Main.soundInstanceMenuClose.Volume = num2;
																					Main.soundInstanceMenuClose.Pan = num3;
																					Main.soundInstanceMenuClose.Play();
																				}
																				else
																				{
																					if (type == 12)
																					{
																						Main.soundInstanceMenuTick.Stop();
																						Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
																						Main.soundInstanceMenuTick.Volume = num2;
																						Main.soundInstanceMenuTick.Pan = num3;
																						Main.soundInstanceMenuTick.Play();
																					}
																					else
																					{
																						if (type == 13)
																						{
																							Main.soundInstanceShatter.Stop();
																							Main.soundInstanceShatter = Main.soundShatter.CreateInstance();
																							Main.soundInstanceShatter.Volume = num2;
																							Main.soundInstanceShatter.Pan = num3;
																							Main.soundInstanceShatter.Play();
																						}
																						else
																						{
																							if (type == 14)
																							{
																								int num10 = Main.rand.Next(3);
																								Main.soundInstanceZombie[num10] = Main.soundZombie[num10].CreateInstance();
																								Main.soundInstanceZombie[num10].Volume = num2 * 0.4f;
																								Main.soundInstanceZombie[num10].Pan = num3;
																								Main.soundInstanceZombie[num10].Play();
																							}
																							else
																							{
																								if (type == 15)
																								{
																									if (Main.soundInstanceRoar[num].State == SoundState.Stopped)
																									{
																										Main.soundInstanceRoar[num] = Main.soundRoar[num].CreateInstance();
																										Main.soundInstanceRoar[num].Volume = num2;
																										Main.soundInstanceRoar[num].Pan = num3;
																										Main.soundInstanceRoar[num].Play();
																									}
																								}
																								else
																								{
																									if (type == 16)
																									{
																										Main.soundInstanceDoubleJump.Stop();
																										Main.soundInstanceDoubleJump = Main.soundDoubleJump.CreateInstance();
																										Main.soundInstanceDoubleJump.Volume = num2;
																										Main.soundInstanceDoubleJump.Pan = num3;
																										Main.soundInstanceDoubleJump.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																										Main.soundInstanceDoubleJump.Play();
																									}
																									else
																									{
																										if (type == 17)
																										{
																											Main.soundInstanceRun.Stop();
																											Main.soundInstanceRun = Main.soundRun.CreateInstance();
																											Main.soundInstanceRun.Volume = num2;
																											Main.soundInstanceRun.Pan = num3;
																											Main.soundInstanceRun.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																											Main.soundInstanceRun.Play();
																										}
																										else
																										{
																											if (type == 18)
																											{
																												Main.soundInstanceCoins = Main.soundCoins.CreateInstance();
																												Main.soundInstanceCoins.Volume = num2;
																												Main.soundInstanceCoins.Pan = num3;
																												Main.soundInstanceCoins.Play();
																											}
																											else
																											{
																												if (type == 19)
																												{
																													if (Main.soundInstanceSplash[num].State == SoundState.Stopped)
																													{
																														Main.soundInstanceSplash[num] = Main.soundSplash[num].CreateInstance();
																														Main.soundInstanceSplash[num].Volume = num2;
																														Main.soundInstanceSplash[num].Pan = num3;
																														Main.soundInstanceSplash[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																														Main.soundInstanceSplash[num].Play();
																													}
																												}
																												else
																												{
																													if (type == 20)
																													{
																														int num11 = Main.rand.Next(3);
																														Main.soundInstanceFemaleHit[num11].Stop();
																														Main.soundInstanceFemaleHit[num11] = Main.soundFemaleHit[num11].CreateInstance();
																														Main.soundInstanceFemaleHit[num11].Volume = num2;
																														Main.soundInstanceFemaleHit[num11].Pan = num3;
																														Main.soundInstanceFemaleHit[num11].Play();
																													}
																													else
																													{
																														if (type == 21)
																														{
																															int num12 = Main.rand.Next(3);
																															Main.soundInstanceTink[num12].Stop();
																															Main.soundInstanceTink[num12] = Main.soundTink[num12].CreateInstance();
																															Main.soundInstanceTink[num12].Volume = num2;
																															Main.soundInstanceTink[num12].Pan = num3;
																															Main.soundInstanceTink[num12].Play();
																														}
																														else
																														{
																															if (type == 22)
																															{
																																Main.soundInstanceUnlock.Stop();
																																Main.soundInstanceUnlock = Main.soundUnlock.CreateInstance();
																																Main.soundInstanceUnlock.Volume = num2;
																																Main.soundInstanceUnlock.Pan = num3;
																																Main.soundInstanceUnlock.Play();
																															}
																															else
																															{
																																if (type == 23)
																																{
																																	Main.soundInstanceDrown.Stop();
																																	Main.soundInstanceDrown = Main.soundDrown.CreateInstance();
																																	Main.soundInstanceDrown.Volume = num2;
																																	Main.soundInstanceDrown.Pan = num3;
																																	Main.soundInstanceDrown.Play();
																																}
																																else
																																{
																																	if (type == 24)
																																	{
																																		Main.soundInstanceChat = Main.soundChat.CreateInstance();
																																		Main.soundInstanceChat.Volume = num2;
																																		Main.soundInstanceChat.Pan = num3;
																																		Main.soundInstanceChat.Play();
																																	}
																																	else
																																	{
																																		if (type == 25)
																																		{
																																			Main.soundInstanceMaxMana = Main.soundMaxMana.CreateInstance();
																																			Main.soundInstanceMaxMana.Volume = num2;
																																			Main.soundInstanceMaxMana.Pan = num3;
																																			Main.soundInstanceMaxMana.Play();
																																		}
																																		else
																																		{
																																			if (type == 26)
																																			{
																																				int num13 = Main.rand.Next(3, 5);
																																				Main.soundInstanceZombie[num13] = Main.soundZombie[num13].CreateInstance();
																																				Main.soundInstanceZombie[num13].Volume = num2 * 0.9f;
																																				Main.soundInstanceZombie[num13].Pan = num3;
																																				Main.soundInstanceSplash[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																																				Main.soundInstanceZombie[num13].Play();
																																			}
																																			else
																																			{
																																				if (type == 27)
																																				{
																																					if (Main.soundInstancePixie.State == SoundState.Playing)
																																					{
																																						Main.soundInstancePixie.Volume = num2;
																																						Main.soundInstancePixie.Pan = num3;
																																						Main.soundInstancePixie.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																																					}
																																					else
																																					{
																																						Main.soundInstancePixie.Stop();
																																						Main.soundInstancePixie = Main.soundPixie.CreateInstance();
																																						Main.soundInstancePixie.Volume = num2;
																																						Main.soundInstancePixie.Pan = num3;
																																						Main.soundInstancePixie.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																																						Main.soundInstancePixie.Play();
																																					}
																																				}
																																				else
																																				{
																																					if (type == 28)
																																					{
																																						if (Main.soundInstanceMech[num].State != SoundState.Playing)
																																						{
																																							Main.soundInstanceMech[num] = Main.soundMech[num].CreateInstance();
																																							Main.soundInstanceMech[num].Volume = num2;
																																							Main.soundInstanceMech[num].Pan = num3;
																																							Main.soundInstanceMech[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																																							Main.soundInstanceMech[num].Play();
																																						}
																																					}
																																					else
																																					{
																																						if (type == 29)
																																						{
																																							if (Main.soundInstanceZombie[num].State != SoundState.Playing)
																																							{
																																								Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
																																								Main.soundInstanceZombie[num].Volume = num2;
																																								Main.soundInstanceZombie[num].Pan = num3;
																																								Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
																																								Main.soundInstanceZombie[num].Play();
																																							}
																																						}
																																						else
																																						{
																																							if (type == 30)
																																							{
																																								num = Main.rand.Next(10, 12);
																																								if (Main.rand.Next(300) == 0)
																																								{
																																									num = 12;
																																									if (Main.soundInstanceZombie[num].State == SoundState.Playing)
																																									{
																																										return;
																																									}
																																								}
																																								Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
																																								Main.soundInstanceZombie[num].Volume = num2 * 0.75f;
																																								Main.soundInstanceZombie[num].Pan = num3;
																																								if (num != 12)
																																								{
																																									Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-70, 1) * 0.01f;
																																								}
																																								else
																																								{
																																									Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-40, 21) * 0.01f;
																																								}
																																								Main.soundInstanceZombie[num].Play();
																																							}
																																							else
																																							{
																																								if (type == 31)
																																								{
																																									num = 13;
																																									Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
																																									Main.soundInstanceZombie[num].Volume = num2 * 0.35f;
																																									Main.soundInstanceZombie[num].Pan = num3;
																																									Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-40, 21) * 0.01f;
																																									Main.soundInstanceZombie[num].Play();
																																								}
																																								else
																																								{
																																									if (type == 32)
																																									{
																																										if (Main.soundInstanceZombie[num].State != SoundState.Playing)
																																										{
																																											Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
																																											Main.soundInstanceZombie[num].Volume = num2 * 0.15f;
																																											Main.soundInstanceZombie[num].Pan = num3;
																																											Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-70, 26) * 0.01f;
																																											Main.soundInstanceZombie[num].Play();
																																										}
																																									}
																																									else
																																									{
																																										if (type == 33)
																																										{
																																											num = 15;
																																											if (Main.soundInstanceZombie[num].State != SoundState.Playing)
																																											{
																																												Main.soundInstanceZombie[num] = Main.soundZombie[num].CreateInstance();
																																												Main.soundInstanceZombie[num].Volume = num2 * 0.2f;
																																												Main.soundInstanceZombie[num].Pan = num3;
																																												Main.soundInstanceZombie[num].Pitch = (float)Main.rand.Next(-10, 31) * 0.01f;
																																												Main.soundInstanceZombie[num].Play();
																																											}
																																										}
																																										else
																																										{
																																											if (type == 34)
																																											{
																																												float num14 = (float)num / 50f;
																																												if (num14 > 1f)
																																												{
																																													num14 = 1f;
																																												}
																																												num2 *= num14;
																																												num2 *= 0.2f;
																																												if (num2 <= 0f || x == -1 || y == -1)
																																												{
																																													if (Main.soundInstanceLiquid[0].State == SoundState.Playing)
																																													{
																																														Main.soundInstanceLiquid[0].Stop();
																																													}
																																												}
																																												else
																																												{
																																													if (Main.soundInstanceLiquid[0].State == SoundState.Playing)
																																													{
																																														Main.soundInstanceLiquid[0].Volume = num2;
																																														Main.soundInstanceLiquid[0].Pan = num3;
																																														Main.soundInstanceLiquid[0].Pitch = -0.2f;
																																													}
																																													else
																																													{
																																														Main.soundInstanceLiquid[0] = Main.soundLiquid[0].CreateInstance();
																																														Main.soundInstanceLiquid[0].Volume = num2;
																																														Main.soundInstanceLiquid[0].Pan = num3;
																																														Main.soundInstanceLiquid[0].Play();
																																													}
																																												}
																																											}
																																											else
																																											{
																																												if (type == 35)
																																												{
																																													float num15 = (float)num / 50f;
																																													if (num15 > 1f)
																																													{
																																														num15 = 1f;
																																													}
																																													num2 *= num15;
																																													num2 *= 0.65f;
																																													if (num2 <= 0f || x == -1 || y == -1)
																																													{
																																														if (Main.soundInstanceLiquid[1].State == SoundState.Playing)
																																														{
																																															Main.soundInstanceLiquid[1].Stop();
																																														}
																																													}
																																													else
																																													{
																																														if (Main.soundInstanceLiquid[1].State == SoundState.Playing)
																																														{
																																															Main.soundInstanceLiquid[1].Volume = num2;
																																															Main.soundInstanceLiquid[1].Pan = num3;
																																															Main.soundInstanceLiquid[1].Pitch = 0f;
																																														}
																																														else
																																														{
																																															Main.soundInstanceLiquid[1] = Main.soundLiquid[1].CreateInstance();
																																															Main.soundInstanceLiquid[1].Volume = num2;
																																															Main.soundInstanceLiquid[1].Pan = num3;
																																															Main.soundInstanceLiquid[1].Play();
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			catch
			{
			}
		}
	}
}
